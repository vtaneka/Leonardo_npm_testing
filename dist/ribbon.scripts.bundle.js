$.fn.noRepeatBind = function (eventName, globalScopeCallBackFunction) {
	this.unbind(eventName, globalScopeCallBackFunction);
	this.bind(eventName, globalScopeCallBackFunction);
};
$.fn.noRepeatBindWithArgs = function (eventName, globalScopeCallBackFunction, handlerArg) {
	
	this.unbind(eventName, globalScopeCallBackFunction);
	this.bind(eventName, handlerArg, globalScopeCallBackFunction);
	
};
/*
	Base.js, version 1.1a
	Copyright 2006-2010, Dean Edwards
	License: http://www.opensource.org/licenses/mit-license.php
*/

var Base = function() {
	// dummy
};

Base.extend = function(_instance, _static) { // subclass
	var extend = Base.prototype.extend;
	
	// build the prototype
	Base._prototyping = true;
	var proto = new this;
	extend.call(proto, _instance);
  proto.base = function() {
    // call this method from any other method to invoke that method's ancestor
  };
	delete Base._prototyping;
	
	// create the wrapper for the constructor function
	//var constructor = proto.constructor.valueOf(); //-dean
	var constructor = proto.constructor;
	var klass = proto.constructor = function() {
		if (!Base._prototyping) {
			if (this._constructing || this.constructor == klass) { // instantiation
				this._constructing = true;
				constructor.apply(this, arguments);
				delete this._constructing;
			} else if (arguments[0] != null) { // casting
				return (arguments[0].extend || extend).call(arguments[0], proto);
			}
		}
	};
	
	// build the class interface
	klass.ancestor = this;
	klass.extend = this.extend;
	klass.forEach = this.forEach;
	
	//edit-start 
	//added support for inheriting non leaf objects / classes .. Added on: 30 Nov 2015
	klass.extendOverwrite = this.extendOverwrite;
	klass.overwriteProto = this.overwriteProto;
	//edit-end
	
	klass.implement = this.implement;
	klass.prototype = proto;
	klass.toString = this.toString;
	klass.valueOf = function(type) {
		//return (type == "object") ? klass : constructor; //-dean
		return (type == "object") ? klass : constructor.valueOf();
	};
	extend.call(klass, _static);
	// class initialisation
	if (typeof klass.init == "function") klass.init();
	return klass;
};

//edit-start
//added support for inheriting non leaf objects / classes .. Added on: 30 Nov 2015
Base.extendOverwrite = function (_instance, _static) { // subclass
    var klass = this.extend(_instance, _static);
    this.overwriteProto(klass, this);
    return klass;
};

Base.overwriteProto = function (fromClass, toClass) {
    var fromProto = fromClass.prototype;
    var toProto = toClass.prototype;
    for (var prop in fromProto) {
        if (fromProto.hasOwnProperty(prop)) {
            toProto[prop] = fromProto[prop];
        }
    }
};
//edit-end

Base.prototype = {	
	extend: function(source, value) {
		if (arguments.length > 1) { // extending with a name/value pair
			var ancestor = this[source];
			if (ancestor && (typeof value == "function") && // overriding a method?
				// the valueOf() comparison is to avoid circular references
				(!ancestor.valueOf || ancestor.valueOf() != value.valueOf()) &&
				/\bbase\b/.test(value)) {
				// get the underlying method
				var method = value.valueOf();
				// override
				value = function() {
					var previous = this.base || Base.prototype.base;
					this.base = ancestor;
					var returnValue = method.apply(this, arguments);
					this.base = previous;
					return returnValue;
				};
				// point to the underlying method
				value.valueOf = function(type) {
					return (type == "object") ? value : method;
				};
				value.toString = Base.toString;
			}
			this[source] = value;
		} else if (source) { // extending with an object literal
			var extend = Base.prototype.extend;
			// if this object has a customised extend method then use it
			if (!Base._prototyping && typeof this != "function") {
				extend = this.extend || extend;
			}
			var proto = {toSource: null};
			// do the "toString" and other methods manually
			var hidden = ["constructor", "toString", "valueOf"];
			// if we are prototyping then include the constructor
			var i = Base._prototyping ? 0 : 1;
			while (key = hidden[i++]) {
				if (source[key] != proto[key]) {
					extend.call(this, key, source[key]);

				}
			}
			// copy each of the source object's properties to this object
			for (var key in source) {
				if (!proto[key]) extend.call(this, key, source[key]);
			}
		}
		return this;
	}
};

// initialise
Base = Base.extend({
	constructor: function() {
		this.extend(arguments[0]);
	}
}, {
	ancestor: Object,
	version: "1.1",
	
	forEach: function(object, block, context) {
		for (var key in object) {
			if (this.prototype[key] === undefined) {
				block.call(context, object[key], key, object);
			}
		}
	},
		
	implement: function() {
		for (var i = 0; i < arguments.length; i++) {
			if (typeof arguments[i] == "function") {
				// if it's a function, call it
				arguments[i](this.prototype);
			} else {
				// add the interface using the extend method
				this.prototype.extend(arguments[i]);
			}
		}
		return this;
	},
	
	toString: function() {
		return String(this.valueOf());
	}
});

'use strict';

var supportedVersions = {
    'msie': 99, //far number till we get IE back as supported... 
    'safari': 99, //far number till we get Safari back as supported...
    'chrome': 23,
    'mozilla': 17,
    'msedge': 12
};

var globalFilePath = "app/global2013.js";

var GlobalLog = function (strMessage) {
    if (SIMS.Objects.ExamManager.lmsMode === 0) {
        console.log(strMessage);
        alert(strMessage);
    }
};

var localStorageDict = null;

var FillLocalStorageDictionary = function () {
    var taskResourceDictionary = localStorage.getItem("resources");
    localStorageDict = JSON.parse(taskResourceDictionary);
};

var GetLocalStorageData = function (itemPath) {
    var retValue = null
    if (localStorageDict != null) {
        retValue = localStorageDict._items[itemPath];
    }
    return retValue;
};
var namespace = function (name, separator, container) {
    var ns = name.split(separator || '.'),
    o = container || window,
    i,
    len;
    for (i = 0, len = ns.length; i < len; i++) {
        o = o[ns[i]] = o[ns[i]] || {};
    }
    return o;
};

var stringToClass = function (str) {
    
    var arr = str.split(".");

    var fn = (window || this);
    for (var i = 0, len = arr.length; i < len; i++) {
        fn = fn[arr[i]];
    }

    if (typeof fn !== "function") {
        throw new Error("function not found");
    }

    return fn;
};

var Polyfills = {string:{}};
Polyfills.string.removeSpaces = function (string) {
    return string.replace(/\s/g, '');
};
Polyfills.string.isEmpty = function (string) {
    return string == "";
};

/*
Array.prototype.find = function (key, val) {
    var results = [];
    for (var i = 0; i < this.length; i++) {
        var currentEl = this[i];
        if (currentEl[key] == val) {
            results.push(currentEl);
        }
    }
    return results;
};

Array.prototype.findSingle = function (key, val) {
    var results = this.find(key, val);
    if (results.length > 1) {
        //throw "Query returned more than one elements.";
        GlobalLog("Query returned more than one elements.");
        return results[0];
    }
    else {
        return results[0];
    }
};

String.prototype.contains = function (text) {
    return this.indexOf(text) !== -1;
};

String.prototype.startsWith = function (text) {
    return this.indexOf(text) === 0;
};

String.prototype.endsWith = function(suffix) {
    return this.indexOf(suffix, this.length - suffix.length) !== -1;
};


String.prototype.removeSpaces = function () {
    return this.replace(/\s/g, '');
};

String.prototype.isEmpty = function () {
    return this == "";
};

if (!String.prototype.trim) {
    String.prototype.trim = function () {
        return this.replace(/^\s+|\s+$/g, '');
    };
}
*/

namespace('SIMS');
namespace("SIMS.Objects");
namespace('SIMS.SharedData');
namespace('SIMS.Core');

SIMS.SharedData.OfficeVersions = {
    OFFICE2013: "",
    OFFICE2016: "Office2016"
};

/*-------------------------------------------------- Enum Declaration Section ---------------------------------------------------*/

SIMS.SharedData.AppIDs = {
    WORD2013: "20",
    EXCEL2013: "21",
    PPT2013: "22",
    ACCESS2013: "23",
    OFFICE2013: "24",
    WINDOWS10: "25",
    WORD2016: "26",
    EXCEL2016: "27",
    PPT2016: "29",
    ACCESS2016: "28",
    OFFICE2016: "30",
    NATIVE: "00",
    NOTSPECIFIED: "-1"
};

SIMS.SharedData.AssignmentVersions = {
    DEFAULT: "Office2013",
    OFFICE2016: "Office2016",
    NOTSPECIFIED: "-1"
};

SIMS.SharedData.SIMBodyClassNames = {
    DEFAULT: "",
    OFFICE2013: "", //"Office2013",
    OFFICE2016: "Office2016",
    WINDOWS8: "", //"Windows8", 
    WINDOWS10: "", //"Windows10"
    NATIVE: ""
};

SIMS.SharedData.ComponentVersions = {
    OFFICE2013: "Office2013",
    WINDOWS8: "Office2013", //"Windows8",
    WINDOWS10: "Office2013", //"Windows10",
    OFFICE2016: "Office2016"    
};

SIMS.SharedData.ApplicationNames = {
    WORD2013: "Word 2013",
    EXCEL2013: "Excel 2013",
    PPT2013: "PPT 2013",
    ACCESS2013: "Access 2013",
    OFFICE2013: "Office 2013",
    WINDOWS10: "Windows 10",
    WORD2016: "Word 2016",
    EXCEL2016: "Excel 2016",
    PPT2016: "PPT 2016",
    ACCESS2016: "Access 2016",
    OFFICE2016: "Office 2016",
    NATIVE: "NATIVE"
};

//Enum for View All Labels. Not in use right now, declared here for future use.
SIMS.SharedData.ViewAllAppLabels = {
    WORD2013: "Word",
    EXCEL2013: "Excel",
    PPT2013: "PPT",
    ACCESS2013: "Access",
    OFFICE2013: "Office 2013",
    WINDOWS10: "Windows 10",
    WORD2016: "Word 2016",
    EXCEL2016: "Excel 2016",
    PPT2016: "PPT 2016",
    ACCESS2016: "Access 2016",
    OFFICE2016: "Office 2016",
    NATIVE: "Native"
};

/* Dictionary of AppIDs against AssignmentVersions */
SIMS.SharedData.AppIdDictionary = {};

SIMS.SharedData.AppIdDictionary[SIMS.SharedData.AppIDs.WORD2013] = {
    AssignmentVersion: SIMS.SharedData.AssignmentVersions.DEFAULT,
    ViewAllLabel: SIMS.SharedData.ViewAllAppLabels.WORD2013
};

SIMS.SharedData.AppIdDictionary[SIMS.SharedData.AppIDs.EXCEL2013] = {
    AssignmentVersion: SIMS.SharedData.AssignmentVersions.DEFAULT,
    ViewAllLabel: SIMS.SharedData.ViewAllAppLabels.EXCEL2013
};
SIMS.SharedData.AppIdDictionary[SIMS.SharedData.AppIDs.PPT2013] = {
    AssignmentVersion: SIMS.SharedData.AssignmentVersions.DEFAULT,
    ViewAllLabel: SIMS.SharedData.ViewAllAppLabels.PPT2013
};
SIMS.SharedData.AppIdDictionary[SIMS.SharedData.AppIDs.ACCESS2013] = {
    AssignmentVersion: SIMS.SharedData.AssignmentVersions.DEFAULT,
    ViewAllLabel: SIMS.SharedData.ViewAllAppLabels.ACCESS2013
};
SIMS.SharedData.AppIdDictionary[SIMS.SharedData.AppIDs.OFFICE2013] = {
    AssignmentVersion: SIMS.SharedData.AssignmentVersions.DEFAULT,
    ViewAllLabel: SIMS.SharedData.ViewAllAppLabels.OFFICE2013
};
SIMS.SharedData.AppIdDictionary[SIMS.SharedData.AppIDs.WINDOWS10] = {
    AssignmentVersion: SIMS.SharedData.AssignmentVersions.NOTSPECIFIED,
    ViewAllLabel: SIMS.SharedData.ViewAllAppLabels.WINDOWS10
};
SIMS.SharedData.AppIdDictionary[SIMS.SharedData.AppIDs.WORD2016] = {
    AssignmentVersion: SIMS.SharedData.AssignmentVersions.OFFICE2016,
    ViewAllLabel: SIMS.SharedData.ViewAllAppLabels.WORD2016
};
SIMS.SharedData.AppIdDictionary[SIMS.SharedData.AppIDs.EXCEL2016] = {
    AssignmentVersion: SIMS.SharedData.AssignmentVersions.OFFICE2016,
    ViewAllLabel: SIMS.SharedData.ViewAllAppLabels.EXCEL2016
};
SIMS.SharedData.AppIdDictionary[SIMS.SharedData.AppIDs.PPT2016] = {
    AssignmentVersion: SIMS.SharedData.AssignmentVersions.OFFICE2016,
    ViewAllLabel: SIMS.SharedData.ViewAllAppLabels.PPT2016
};
SIMS.SharedData.AppIdDictionary[SIMS.SharedData.AppIDs.ACCESS2016] = {
    AssignmentVersion: SIMS.SharedData.AssignmentVersions.OFFICE2016,
    ViewAllLabel: SIMS.SharedData.ViewAllAppLabels.ACCESS2016
};
SIMS.SharedData.AppIdDictionary[SIMS.SharedData.AppIDs.OFFICE2016] = {
    AssignmentVersion: SIMS.SharedData.AssignmentVersions.OFFICE2016,
    ViewAllLabel: SIMS.SharedData.ViewAllAppLabels.OFFICE2016
};
SIMS.SharedData.AppIdDictionary[SIMS.SharedData.AppIDs.NATIVE] = {
    AssignmentVersion: SIMS.SharedData.AssignmentVersions.NOTSPECIFIED,
    ViewAllLabel: SIMS.SharedData.ViewAllAppLabels.NATIVE
};
/* Dictionary of AppIDs against AssignmentVersions */

/*-------------------------------------------------- Enum Declaration Section ---------------------------------------------------*/

SIMS.Core.ResponseCodes = {
    Success: "0",
    Error: "7",
    LaunchFailed: "8"
};

SIMS.Core.PreloadData = {
                                FileList : null,
                                RequestSuffix : "?ver=rdyyyymmdd"
                            };

// SIMS.SharedData.OfficeVersion = SIMS.SharedData.OfficeVersions.OFFICE2013;

function ShowLoadingAndBandwidthStatus() {
    document.getElementById("LoadingCurtain").style.display = "block";

    setTimeout(bandwidthObject.calcBandwidthState, 100);

    var classes = {};
    classes[SIMS.SharedData.AssignmentVersions.OFFICE2016] = {
        good : "bandwidth-icon pso-font pso pso-good",
        upperAverage : "bandwidth-icon pso-font pso pso-u_avg",
        average : "bandwidth-icon pso-font pso pso-avg",
        belowAverage : "bandwidth-icon pso-font pso pso-b_avg",
        poor : "bandwidth-icon pso-font pso pso-poor"
    };

    classes[SIMS.SharedData.AssignmentVersions.DEFAULT] = {
        good : "bandwidth-icon good",
        upperAverage : "bandwidth-icon u_avg",
        average : "bandwidth-icon avg",
        belowAverage : "bandwidth-icon b_avg",
        poor : "bandwidth-icon poor"
    };

    if (document.getElementsByTagName("body")[0].addEventListener) {
        document.getElementsByTagName("body")[0].addEventListener("updateBandwidthStatus", function (event) {

            document.getElementsByClassName("bandwidth-text")[0].innerHTML = event.title;
            document.getElementsByClassName("bandwidth-text")[0].className = "bandwidth-text";

            if (event.value == bandwidthObject.bandwidth_state_description.good.value) {
                document.getElementsByClassName("bandwidth-icon")[0].className = classes[SIMS.SharedData.AssignmentVersion].good;
            } else if (event.value == bandwidthObject.bandwidth_state_description.u_avg.value) {
                    document.getElementsByClassName("bandwidth-icon")[0].className = classes[SIMS.SharedData.AssignmentVersion].upperAverage;
            } else if (event.value == bandwidthObject.bandwidth_state_description.avg.value) {
                    document.getElementsByClassName("bandwidth-icon")[0].className = classes[SIMS.SharedData.AssignmentVersion].average;
            } else if (event.value == bandwidthObject.bandwidth_state_description.b_avg.value) {
                    document.getElementsByClassName("bandwidth-icon")[0].className = classes[SIMS.SharedData.AssignmentVersion].belowAverage;
            } else if (event.value == bandwidthObject.bandwidth_state_description.poor.value) {
                    document.getElementsByClassName("bandwidth-icon")[0].className = classes[SIMS.SharedData.AssignmentVersion].poor;
            }
        }, false);
    }
}

function StartSIM5LazyLoading() {
    LazyLoad.js([globalFilePath],
        function () { LoadLazyCSS(); }
        );
}

function ReadLaunchParams() {
    //APA - This is for replacing the EXAMID.. Now a hardcoded exam id is not being passed
    //instead, these parameters will be passed to LMS to retrieve the ExamDetails
    var src = window.location.search.replace("?", "");
    var prmarr = src.split("&");
    var params = {};

    for (var i = 0; i < prmarr.length; i++) {
        var tmparr = prmarr[i].split("=");
        params[tmparr[0]] = tmparr[1];
    }
    //test line 1
    //test line 2
    if (params.returnURL != null) {
        //APA - Special Handling for ReturnURL
        //replace [[QM]] with ? and [[AMP]] with &
        //This logic is set so that the parameters are NOT lost in the way.. 
        //as param is being passed along with other standard URL parameters

        params.returnURL = decodeURIComponent(params.returnURL);
        params.returnURL = params.returnURL.replace(/\[\[QM\]\]/g, "?");
        params.returnURL = params.returnURL.replace(/\[\[AMP\]\]/g, "&");
        params.returnURL = params.returnURL.replace(/\[\[EQ\]\]/g, "=");
        params.lmsMode = 1;
    }
    else {
        params.resultID = 0;
        params.nonce = Math.floor((Math.random() * 2145780) + 1);
        params.launchCode = 0;
        if(params.launchMode === undefined){
            params.launchMode = 0;
        }
        params.userid = 0;
        params.username = 0;
        params.lmsserviceurl = "NotDefined";
        params.lmsMode = 0;
        params.lmsaliveurl = "";
        //resLinkID is chosen as the param used for passing the TaskRepo XML name..
        //Hence, this change... I.e. set as zero ONLY IF resLinkID==NULL
        if (params.resLinkID == null) {
            params.resLinkID = 0;
        }
        params.returnURL = "SIMSReport.html";
        params.title = "";
    }

    params.simsRandCall = Math.floor((Math.random() * 2145780) + 1);
    params.simDefaultExamId = 1;

    //Code for launching SIM5 Taks from Baloo
    if (params.balooPreview && params.balooPreview === "true") {
        params.balooPreview = true;
    }
    else {
        params.balooPreview = false;
    }

    if (params.lmsaliveurl != null && params.lmsaliveurl != "") {
        params.sendAliveCall = true;
        if (params.lmsaliveurl.indexOf("?") != -1) {
            params.finalLmsAliveUrl = params.lmsaliveurl + "&simalive=";
        }
        else {
            params.finalLmsAliveUrl = params.lmsaliveurl + "?simalive=";
        }
    }
    else {
        params.sendAliveCall = false;
    }

    SIMS.Objects.LaunchParams = params;
}

function ReadExamAndAppDetails(examDetailsJson) {
    SIMS.Objects.ExamDetails = examDetailsJson;
    if (!SIMS.Objects.ExamDetails.ERROR) 
    {   
        var taskList = SIMS.Objects.ExamDetails.config.tasklist;
        var taskArr = getArray(taskList.task);
        SetGlobalAppID(taskArr);
        CheckForAssignmentValidity(taskArr);
    }
    else
    {   
        //Proceeding with default parameters, assuming error handling will be done in exam manager.
        SIMS.SharedData.AssignmentVersion = SIMS.SharedData.AssignmentVersions.OFFICE2016;
        globalFilePath = "app/global2016.js" + SIMS.Core.PreloadData.RequestSuffix;

    }
}

function AppLazyInit() {
    ShowLoadingAndBandwidthStatus();

    ReadLaunchParams();

    //Below commented code is moved to AppLazyInit2 function.
    // ReadExamAndAppDetails(examDetailsJson);

    // StartSIM5LazyLoading();

    // if(SIMS.SharedData.AssignmentVersion == SIMS.SharedData.AssignmentVersions.OFFICE2016){
    //     document.getElementsByClassName("loader-container")[0].className="loader-container loader-container16-show";
    // }
    // else{
    //     document.getElementsByClassName("loader-container")[0].className="loader-container loader-container13-show";
    // }

    GetExamDetailsAsync(SIMS.Objects.LaunchParams, true, AppLazyInit2);
}

function AppLazyInit2(examDetailsJson){
    ReadExamAndAppDetails(examDetailsJson);
    StartSIM5LazyLoading();

    if(SIMS.SharedData.AssignmentVersion == SIMS.SharedData.AssignmentVersions.OFFICE2016){
        document.getElementsByClassName("loader-container")[0].className="loader-container loader-container16-show";
    }
    else{
        document.getElementsByClassName("loader-container")[0].className="loader-container loader-container13-show";
    }
}


//Function to lazy load the practice javascript files
function LoadLazyPracticeJS(callback, examManagerObj) {
    LazyLoad.js(SIMS.Core.PreloadData.FileList.PRACTICE,
        function () { callback(examManagerObj); }
        );
}

//Lazy load practice tool Resources
function LoadLazyPracticeToolResources(callback, examManagerObj) {
    LazyLoad.js([
        "SIM5-Investigations/Practice Creator/practiceCreator.js",
        "SIM5-Investigations/Practice Creator/js/bootstrap.js"
        ],
        function () { LazyLoadPracticeToolCSS(callback, examManagerObj); }
        );
}

function LazyLoadPracticeToolCSS(callback, examManagerObj) {
    LazyLoad.css([       
        "SIM5-Investigations/Practice Creator/bootstrap-custom.css"],
        function () { callback(examManagerObj) }
        );
}

function onBodyLoad() {
    var browserSupported = checkIfBrowserSupported();
    var isRelaunchUrl = checkIfRelaunchUrl();

    if (browserSupported == true || isRelaunchUrl) {

        AppLazyInit();

    } else {
        document.getElementById("NoSupportContainer").style.display='block';
        document.getElementById("MainFrame").style.display='none';
    }
}

function checkIfBrowserSupported(){
   
    var isBrowserSupported = false;

    if((bowser.msie && bowser.version >= supportedVersions.msie) ||
        (bowser.chrome && bowser.version >= supportedVersions.chrome) ||
        (bowser.safari && bowser.version >= supportedVersions.safari) ||
        ((bowser.mozilla||bowser.firefox) && bowser.version >= supportedVersions.mozilla) ||
        (bowser.msedge && bowser.version >= supportedVersions.msedge)
        ){
        isBrowserSupported = true;
    }

    return isBrowserSupported;

};

function checkIfRelaunchUrl() {
    var urlLowerCase = window.location.toString().toLowerCase();
    return urlLowerCase.indexOf("?relaunchkey=") !== -1 || urlLowerCase.indexOf("&relaunchkey=") !== -1;
};

function launchSIMS(){
    document.getElementById("NoSupportContainer").style.display='none';
    document.getElementById("MainFrame").style.display='block';
    AppLazyInit();
};

var GetAllValuesOfAnAttribute = function (compID, attrName) {
    var resultsArray = [];
    if (SIMS.Objects.ExamManager.SIM != null) {
        if (SIMS.Objects.ExamManager.SIM.taskJSON != null) {
            try {
                var statesArray = getArray(SIMS.Objects.ExamManager.SIM.taskJSON.task.states.state);
                var statesCount = statesArray.length;
                for (var nStateLoop = 0; nStateLoop < statesCount; nStateLoop++) {

                    var compAr = getArray(statesArray[nStateLoop].comps.comp);

                    var requiredComp = compAr.findSingle("@id", compID);
                    if (requiredComp != null) {

                        var attrArray = null;
                        var attrLen = 0;
                        if (requiredComp.initialattrs != null && requiredComp.initialattrs.attr != null) {
                            attrArray = getArray(requiredComp.initialattrs.attr);
                            attrLen = attrArray.length;
                            for (var attrLoop = 0; attrLoop < attrLen; attrLoop++) {
                                if (attrArray[attrLoop]["@name"] == attrName) {
                                    resultsArray.push(attrArray[attrLoop]["@value"]);
                                }
                            }
                        }

                        if (requiredComp.initialattributesets != null && requiredComp.initialattributesets.attributeset != null) {
                            var attributesetArray = getArray(requiredComp.initialattributesets.attributeset);
                            var attributesetLength = attributesetArray.length;
                            var attrArray = null;
                            var attrLen = 0;
                            for (var attributesetLoop = 0; attributesetLoop < attributesetLength; attributesetLoop++) {
                                attrArray = getArray(attributesetArray[attributesetLoop].attr);
                                attrLen = attrArray.length;
                                for (var attrLoop = 0; attrLoop < attrLen; attrLoop++) {
                                    if (attrArray[attrLoop]["@name"] == attrName) {                                        
                                        resultsArray.push(attrArray[attrLoop]["@value"]);                                        
                                    }
                                }
                            }
                        }

                    }
                }
            }
            catch (ex) {
                resultsArray = [];
            }
        }
    }
    return jQuery.unique(resultsArray);
};


var ServiceURL = "ServerCode/SIM5Service.ashx" + SIMS.Core.PreloadData.RequestSuffix;
var ServerURL = "";
var RelativePath = "";
    
function AjaxCall(URL, GetPost) {
    var responseStr = "";
    var client;
    if (XMLHttpRequest) {// code for IE7+, Firefox, Chrome, Opera, Safari
        client = new XMLHttpRequest();
    }
    else {// code for IE6, IE5
        client = new ActiveXObject("Microsoft.XMLHTTP");
    }
    client.open(GetPost, URL, false);
    client.send();
    return client.responseText;
};

function AsyncAjaxCall (URL, GetPost, strname, SuccesCallbackFunction, ErrorCallbackFunction) {
    var client;
    if (XMLHttpRequest) {// code for IE7+, Firefox, Chrome, Opera, Safari
        client = new XMLHttpRequest();
    }
    else {// code for IE6, IE5
        client = new ActiveXObject("Microsoft.XMLHTTP");
    }

    client.onreadystatechange = function () {
        if(client.readyState == 4){
            if (client.status == 200) {
                SuccesCallbackFunction(client.response, strname);
            }
            else if(client.status == 500 && ErrorCallbackFunction!=null){                
                ErrorCallbackFunction(client.response, strname);
            }
        }
    };

    client.open(GetPost, URL, true);

    client.send();
};

function getArray(data) {
    if (data.length == undefined){ data = [data]; }
    return data;
};

function GetExamDetails(params, bJSON) {
    var paramsString = "&resLinkID=" + params.resLinkID + "&resultID=" + params.resultID + "&nonce=" + params.nonce + "&launchCode=" + params.launchCode + "&launchMode=" + params.launchMode + "&userid=" + params.userid + "&username=" + params.username + "&simDefaultExamId=" + params.simDefaultExamId + "&lmsserviceurl=" + params.lmsserviceurl + "&title=" + params.title + "&simsRandCall=" + params.simsRandCall;
    var url = ServerURL + RelativePath + ServiceURL + "&Method=GetExamDetails" + paramsString;
    var strRet = AjaxCall(url, "GET");
    return bJSON === true ? JSON.parse(strRet) : strRet;
};

function GetExamDetailsAsync(params, bJSON, SuccesCallbackFunction) {
    var paramsString = "&resLinkID=" + params.resLinkID + "&resultID=" + params.resultID + "&nonce=" + params.nonce + "&launchCode=" + params.launchCode + "&launchMode=" + params.launchMode + "&userid=" + params.userid + "&username=" + params.username + "&simDefaultExamId=" + params.simDefaultExamId + "&lmsserviceurl=" + params.lmsserviceurl + "&title=" + params.title + "&simsRandCall=" + params.simsRandCall;
    var url = ServerURL + RelativePath + ServiceURL + "&Method=GetExamDetails" + paramsString;
    var examDetailsReceieved = function(strRet){
        strRet = bJSON === true ? JSON.parse(strRet) : strRet;
        SuccesCallbackFunction(strRet);
    };
    AsyncAjaxCall(url, "GET", "ExamDetails", examDetailsReceieved, examDetailsReceieved);
};

function CheckForAssignmentValidity(taskArr){
    for (var i = 0; i < taskArr.length; i++) 
    {
        if(taskArr[i].questionType==="SIM")
        {
            var appID = taskArr[i].appID!=null?taskArr[i].appID:SIMS.SharedData.AppIDs.NOTSPECIFIED;
            if(appID!==SIMS.SharedData.AppIDs.WINDOWS10 && appID!==SIMS.SharedData.AppIDs.NOTSPECIFIED)  //Enum required for appid.
            {   
                if(SIMS.SharedData.AppIdDictionary[appID].AssignmentVersion!==SIMS.SharedData.AssignmentVersion)
                {   
                    //Different handling or rerouting can be done on the basis of this assignment version in SIMPlayer or ExamManager.
                    SIMS.SharedData.AssignmentVersion = SIMS.SharedData.AssignmentVersions.OFFICE2016;
                    globalFilePath = "app/global2016.js" + SIMS.Core.PreloadData.RequestSuffix;
                    return;
                }
            }
        }
    }
};

function SetGlobalAppID(taskArr){
    for(var i in taskArr)
    {
        if(taskArr[i].questionType==="SIM")
        {
            var appID = taskArr[i].appID!=null?taskArr[i].appID:SIMS.SharedData.AppIDs.NOTSPECIFIED;

            if(appID!==SIMS.SharedData.AppIDs.WINDOWS10 && appID!==SIMS.SharedData.AppIDs.NOTSPECIFIED) 
            {   
                SIMS.SharedData.AssignmentVersion = SIMS.SharedData.AppIdDictionary[appID].AssignmentVersion;

                switch(SIMS.SharedData.AssignmentVersion)
                {
                    case SIMS.SharedData.AssignmentVersions.OFFICE2016:
                       globalFilePath = "app/global2016.js" + SIMS.Core.PreloadData.RequestSuffix;
                       break;

                    default:
                       globalFilePath = "app/global2013.js" + SIMS.Core.PreloadData.RequestSuffix;
                       break;  
                }
                return;  //returning after setting the assignment version once.
            }
        }
    }

    /*** load 2016 files in the case where Windows 10 tasks only are being launched in practice direct mode ***/
    /*** It is assumed dat assignment will be launched as 2013 application, if windows 10 tasks and 2013 tasks coexists in practice direct mode ***/
    if(SIMS.Objects.LaunchParams.launchMode === "practicedirect") {
        SIMS.SharedData.AssignmentVersion = SIMS.SharedData.AssignmentVersions.OFFICE2016;
        globalFilePath = "app/global2016.js" + SIMS.Core.PreloadData.RequestSuffix;
    }
    else {
        //setting default assignment version as appids are not set in task repo for 2013 tasks.
        SIMS.SharedData.AssignmentVersion = SIMS.SharedData.AssignmentVersions.DEFAULT;
        globalFilePath = "app/global2013.js" + SIMS.Core.PreloadData.RequestSuffix;
    }
};

function LoadLazyCSS() {

    LazyLoad.css(SIMS.Core.PreloadData.FileList.CSS,
        function () { LoadLazyJS(); }
        );
};

function LoadLazyJS() {
    LazyLoad.js(SIMS.Core.PreloadData.FileList.JS,
        function () { LoadInternalCSS(); }
        );
};

function LoadInternalCSS() {
    var client;

    if (XMLHttpRequest) {// code for IE7+, Firefox, Chrome, Opera, Safari        
        client = new XMLHttpRequest();
    }
    else {// code for IE6, IE5        
        client = new ActiveXObject("Microsoft.XMLHTTP");
    }

    client.onreadystatechange = function () {
        if (client.readyState == 4 && client.status == 200) {
            $("body").append("<style class='SIMCursors'>" + client.response + "</style>");
            AppInit();
        }
    };

    client.open("GET", SIMS.Core.PreloadData.FileList.CURSOR_FILE, true);
    client.send();
};

function GetCompVersion(appID) {
    if(appID===SIMS.SharedData.AppIDs.NOTSPECIFIED)
    {
        return "";
    }
    else
    {
        return SIMS.SharedData.AssignmentVersion;
    }
};

// if (window.console != null) {
//     window.console["log"] = function () { };
// }

!function (name, definition) {
  if (typeof module != 'undefined' && module.exports) module.exports = definition()
  else if (typeof define == 'function' && define.amd) define(definition)
  else this[name] = definition()
}('bowser', function () {
  /**
    * See useragents.js for examples of navigator.userAgent
    */

  var t = true

  function detect(ua) {

    function getFirstMatch(regex) {
      var match = ua.match(regex);
      return (match && match.length > 1 && match[1]) || '';
    }

    function getSecondMatch(regex) {
      var match = ua.match(regex);
      return (match && match.length > 1 && match[2]) || '';
    }

    var iosdevice = getFirstMatch(/(ipod|iphone|ipad)/i).toLowerCase()
      , likeAndroid = /like android/i.test(ua)
      , android = !likeAndroid && /android/i.test(ua)
      , chromeos = /CrOS/.test(ua)
      , silk = /silk/i.test(ua)
      , sailfish = /sailfish/i.test(ua)
      , tizen = /tizen/i.test(ua)
      , webos = /(web|hpw)os/i.test(ua)
      , windowsphone = /windows phone/i.test(ua)
      , windows = !windowsphone && /windows/i.test(ua)
      , mac = !iosdevice && !silk && /macintosh/i.test(ua)
      , linux = !android && !sailfish && !tizen && !webos && /linux/i.test(ua)
      , edgeVersion = getFirstMatch(/edge\/(\d+(\.\d+)?)/i)
      , versionIdentifier = getFirstMatch(/version\/(\d+(\.\d+)?)/i)
      , tablet = /tablet/i.test(ua)
      , mobile = !tablet && /[^-]mobi/i.test(ua)
      , result

    if (/opera|opr/i.test(ua)) {
      result = {
        name: 'Opera'
      , opera: t
      , version: versionIdentifier || getFirstMatch(/(?:opera|opr)[\s\/](\d+(\.\d+)?)/i)
      }
    }
    else if (/yabrowser/i.test(ua)) {
      result = {
        name: 'Yandex Browser'
      , yandexbrowser: t
      , version: versionIdentifier || getFirstMatch(/(?:yabrowser)[\s\/](\d+(\.\d+)?)/i)
      }
    }
    else if (windowsphone) {
      result = {
        name: 'Windows Phone'
      , windowsphone: t
      }
      if (edgeVersion) {
        result.msedge = t
        result.version = edgeVersion
      }
      else {
        result.msie = t
        result.version = getFirstMatch(/iemobile\/(\d+(\.\d+)?)/i)
      }
    }
    else if (/msie|trident/i.test(ua)) {
      result = {
        name: 'Internet Explorer'
      , msie: t
      , version: getFirstMatch(/(?:msie |rv:)(\d+(\.\d+)?)/i)
      }
    } else if (chromeos) {
      result = {
        name: 'Chrome'
      , chromeos: t
      , chromeBook: t
      , chrome: t
      , version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
      }
    } else if (/chrome.+? edge/i.test(ua)) {
      result = {
        name: 'Microsoft Edge'
      , msedge: t
      , version: edgeVersion
      }
    }
    else if (/chrome|crios|crmo/i.test(ua)) {
      result = {
        name: 'Chrome'
      , chrome: t
      , version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
      }
    }
    else if (iosdevice) {
      result = {
        name : iosdevice == 'iphone' ? 'iPhone' : iosdevice == 'ipad' ? 'iPad' : 'iPod'
      }
      // WTF: version is not part of user agent in web apps
      if (versionIdentifier) {
        result.version = versionIdentifier
      }
    }
    else if (sailfish) {
      result = {
        name: 'Sailfish'
      , sailfish: t
      , version: getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i)
      }
    }
    else if (/seamonkey\//i.test(ua)) {
      result = {
        name: 'SeaMonkey'
      , seamonkey: t
      , version: getFirstMatch(/seamonkey\/(\d+(\.\d+)?)/i)
      }
    }
    else if (/firefox|iceweasel/i.test(ua)) {
      result = {
        name: 'Firefox'
      , firefox: t
      , version: getFirstMatch(/(?:firefox|iceweasel)[ \/](\d+(\.\d+)?)/i)
      }
      if (/\((mobile|tablet);[^\)]*rv:[\d\.]+\)/i.test(ua)) {
        result.firefoxos = t
      }
    }
    else if (silk) {
      result =  {
        name: 'Amazon Silk'
      , silk: t
      , version : getFirstMatch(/silk\/(\d+(\.\d+)?)/i)
      }
    }
    else if (android) {
      result = {
        name: 'Android'
      , version: versionIdentifier
      }
    }
    else if (/phantom/i.test(ua)) {
      result = {
        name: 'PhantomJS'
      , phantom: t
      , version: getFirstMatch(/phantomjs\/(\d+(\.\d+)?)/i)
      }
    }
    else if (/blackberry|\bbb\d+/i.test(ua) || /rim\stablet/i.test(ua)) {
      result = {
        name: 'BlackBerry'
      , blackberry: t
      , version: versionIdentifier || getFirstMatch(/blackberry[\d]+\/(\d+(\.\d+)?)/i)
      }
    }
    else if (webos) {
      result = {
        name: 'WebOS'
      , webos: t
      , version: versionIdentifier || getFirstMatch(/w(?:eb)?osbrowser\/(\d+(\.\d+)?)/i)
      };
      /touchpad\//i.test(ua) && (result.touchpad = t)
    }
    else if (/bada/i.test(ua)) {
      result = {
        name: 'Bada'
      , bada: t
      , version: getFirstMatch(/dolfin\/(\d+(\.\d+)?)/i)
      };
    }
    else if (tizen) {
      result = {
        name: 'Tizen'
      , tizen: t
      , version: getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.\d+)?)/i) || versionIdentifier
      };
    }
    else if (/safari/i.test(ua)) {
      result = {
        name: 'Safari'
      , safari: t
      , version: versionIdentifier
      }
    }
    else {
      result = {
        name: getFirstMatch(/^(.*)\/(.*) /),
        version: getSecondMatch(/^(.*)\/(.*) /)
     };
   }

    // set webkit or gecko flag for browsers based on these engines
    if (!result.msedge && /(apple)?webkit/i.test(ua)) {
      result.name = result.name || "Webkit"
      result.webkit = t
      if (!result.version && versionIdentifier) {
        result.version = versionIdentifier
      }
    } else if (!result.opera && /gecko\//i.test(ua)) {
      result.name = result.name || "Gecko"
      result.gecko = t
      result.version = result.version || getFirstMatch(/gecko\/(\d+(\.\d+)?)/i)
    }

    // set OS flags for platforms that have multiple browsers
    if (!result.msedge && (android || result.silk)) {
      result.android = t
    } else if (iosdevice) {
      result[iosdevice] = t
      result.ios = t
    } else if (windows) {
      result.windows = t
    } else if (mac) {
      result.mac = t
    } else if (linux) {
      result.linux = t
    }

    // OS version extraction
    var osVersion = '';
    if (result.windowsphone) {
      osVersion = getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i);
    } else if (iosdevice) {
      osVersion = getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i);
      osVersion = osVersion.replace(/[_\s]/g, '.');
    } else if (android) {
      osVersion = getFirstMatch(/android[ \/-](\d+(\.\d+)*)/i);
    } else if (result.webos) {
      osVersion = getFirstMatch(/(?:web|hpw)os\/(\d+(\.\d+)*)/i);
    } else if (result.blackberry) {
      osVersion = getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i);
    } else if (result.bada) {
      osVersion = getFirstMatch(/bada\/(\d+(\.\d+)*)/i);
    } else if (result.tizen) {
      osVersion = getFirstMatch(/tizen[\/\s](\d+(\.\d+)*)/i);
    }
    if (osVersion) {
      result.osversion = osVersion;
    }

    // device type extraction
    var osMajorVersion = osVersion.split('.')[0];
    if (tablet || iosdevice == 'ipad' || (android && (osMajorVersion == 3 || (osMajorVersion == 4 && !mobile))) || result.silk) {
      result.tablet = t
    } else if (mobile || iosdevice == 'iphone' || iosdevice == 'ipod' || android || result.blackberry || result.webos || result.bada) {
      result.mobile = t
    }

    // Graded Browser Support
    // http://developer.yahoo.com/yui/articles/gbs
    if (result.msedge ||
        (result.msie && result.version >= 10) ||
        (result.yandexbrowser && result.version >= 15) ||
        (result.chrome && result.version >= 20) ||
        (result.firefox && result.version >= 20.0) ||
        (result.safari && result.version >= 6) ||
        (result.opera && result.version >= 10.0) ||
        (result.ios && result.osversion && result.osversion.split(".")[0] >= 6) ||
        (result.blackberry && result.version >= 10.1)
        ) {
      result.a = t;
    }
    else if ((result.msie && result.version < 10) ||
        (result.chrome && result.version < 20) ||
        (result.firefox && result.version < 20.0) ||
        (result.safari && result.version < 6) ||
        (result.opera && result.version < 10.0) ||
        (result.ios && result.osversion && result.osversion.split(".")[0] < 6)
        ) {
      result.c = t
    } else result.x = t

    return result
  }

  var bowser = detect(typeof navigator !== 'undefined' ? navigator.userAgent : '')

  bowser.test = function (browserList) {
    for (var i = 0; i < browserList.length; ++i) {
      var browserItem = browserList[i];
      if (typeof browserItem=== 'string') {
        if (browserItem in bowser) {
          return true;
        }
      }
    }
    return false;
  }

  /*
   * Set our detect method to the main bowser object so we can
   * reuse it to test other user agents.
   * This is needed to implement future tests.
   */
  bowser._detect = detect;

  return bowser
});

'use strict';
namespace('SIMS.SharedData');

SIMS.SharedData.KeyboardOwner = {
    CONTEXT_MENU: "CONTEXT_MENU",
    RIBBON: "RIBBON"
};

SIMS.SharedData.KeyboardData = {
    HANDLED: 0,
    IGNORED: 1,
    OVERRIDDEN: 2,
    OWNER: "",
    SHORTCUT_KEY_VISIBLE: false,
    CONTEXT_MENU_VISIBLE: false,
    KEYCODES: { //All special chracters or number keys are to be initialted by uderscore ('_')
        tabKey: 9,        enterKey: 13,        shiftKey: 16,     ctrlKey: 17, 
        altKey: 18,       escKey: 27,          pageUp: 33,       pageDown: 34, 
        leftKey: 37,      upKey: 38,           rightKey: 39,     downKey: 40, 
        
        _oneKey: 49,      _percentKey: 53,     _plusKey: 61,     _equalKey: 61,     _equalKeyChrome: 187,
        
        aKey: 65,         bKey: 66,            cKey: 67,         eKey: 69, 
        fKey: 70,         pKey: 80,            sKey: 83,         vKey: 86,         
        xKey: 88, 
        
        f1Key: 112,       f2Key: 113,          f3Key: 114,       f6Key: 117, 
        f7Key: 118,       f10Key: 121,         f12Key: 123,      graveAccKey: 192,
        zKey: 90,         backSpace: 8,        f4key: 115,       spacebarKey: 32,
        deleteKey: 46,    metaKey: 91,         rightMetaKey:93
    },

    KEYCODESMAP: { 8: "BACKSPACE", 9: "TAB", 13: "ENTER", 27: "ESCAPE", 32: "SPACE", 33: "PAGEUP", 35: "END", 36: "HOME", 37: "LEFT", 38: "UP", 39: "RIGHT", 40: "DOWN", 46: "DELETE", 61: "=", 96: "0", 97: "1", 98: "2", 99: "3", 100: "4", 101: "5", 102: "6", 103: "7", 104: "8", 105: "9", 109: "NUM_DASH", 112: "F1", 113: "F2", 114: "F3", 115: "F4", 116: "F5", 117: "F6", 118: "F7", 119: "F8", 120: "F9", 121: "F10", 122: "F11", 123: "F12", 173: "DASH", 187: "=", 188: "COMMA", 189: "DASH", 190: "PERIOD", 219: "OPEN_BRAKET", 221: "CLOSE_BRAKET", 192:"TIDLE" }
};

SIMS.SharedData.DocAreaData = {
    CURRENT_SHYTOOLBAR_INSIDE: null
};


SIMS.SharedData.TimeLog = {
    TASK_LOADING_START: null,
    TASK_LOADING_END: null,
    APP_RENDERING_START: null,
    APP_RENDERING_END: null
};

SIMS.SharedData.GAData = {
    GAEventStartTime: null,
    bFirstStateLoaded: false
};

SIMS.SharedData.RibbonOptimization = { 
    enableRibbonLazyLoad : true
};

// stores prefetching global data
SIMS.SharedData.Prefetch = {
    ENABLE: true,
    DELAY_TIME: 1500
};

SIMS.SharedData.QuestionType = {    
    NOTSPECIFED: "NotSpecifed",
    SIM: "SIM",
    NATIVE_TRUEFALSE: "Native_TrueFalse",
    NATIVE_MATCHING: "Native_Matching",
    NATIVE_RANKING: "Native_Ranking",
    NATIVE_FIB: "Native_FIB",
    NATIVE_MC: "Native_MC",    
    NATIVE_MR: "Native_MR"
};

SIMS.SharedData.QuestionStatus = {
    NOTGRADED: "NotGraded",
    NOTATTEMPTED: "NotAttempted",
    INCOMPLETE: "InComplete",
    TRAININGUNATTEMPTED: "TrainingUnAttempted",
    TRAININGINCOMPLETE: "TrainingInComplete",
    NOTAVAILABLE: "NotAvailable",
    CORRECT: "Correct",
    INCORRECT: "InCorrect"
};

SIMS.SharedData.StatusTextViewAll = {
    NOTGRADED: "Attempted",
    NOTATTEMPTED:  "Not Attempted",
    INCOMPLETE: "Incomplete",
    NOTAVAILABLE: "Not Available",
    CORRECT: "Correct",
    INCORRECT: "Incorrect"    
};

SIMS.SharedData.AssignmentMode = {
    TRAINING: "Training",
    TEST: "Test"
};

// application modes enum
SIMS.SharedData.ApplicationModes = {
    Assignment : "assignment",
    Practice: "practicedirect"
};

//Application mode setter / getter function
SIMS.SharedData.CurrentAppMode = function () {
    var currentApplicationMode = SIMS.SharedData.ApplicationModes.Assignment;
    return {
        Set: function(appMode){

            switch(appMode) {
                case SIMS.SharedData.ApplicationModes.Practice:
                case SIMS.SharedData.ApplicationModes.Assignment:
                    currentApplicationMode = appMode;
                    break;

                default:
					currentApplicationMode = SIMS.SharedData.ApplicationModes.Assignment;
                    break;
            }
        },
        Get: function(){
            return currentApplicationMode;
        }
    }
}();

SIMS.SharedData.ShuffleOptions = {
    isEnabled: false
};

//Global variable containing configurations for connection drop/offline handling code
SIMS.SharedData.OfflineHandler = {

    isEnabled: true,  //set false to not load offline handler code 

    isLoaded: false,  //this is set true once offline handler code has been loaded and configured

    //path of JS files to be lazy loaded
    jsPaths: [
        "libs/offline/offline-custom.js" + SIMS.Core.PreloadData.RequestSuffix,
        "app/Core/Handlers/OfflineHandler.js" + SIMS.Core.PreloadData.RequestSuffix
    ]
};

SIMS.SharedData.ComponentThemes = {
    OFFICE2013: 0,
    WINDOWS10:  1,
    OFFICE2016: 2
};

SIMS.SharedData.MaximizeBtnModes = {
    NONE: -1,
    DEFAULT: 0,
    RESTORE:  1,
    DISABLED: 2
};


//Global Variable for Ribbon Contextual Tabs ID Mapping

//Contextual Tabs mapping for WORD Application
SIMS.SharedData.WordRibbonContextualTabIDs = {
    
    PICTURE_SELECT   : "PICTURE TOOLS FORMAT",
    SHAPE_SELECT     : "drawing Tools format" ,
    SMART_ART_FORMAT : "Smartart Tools Format",
    SMART_ART_DESIGN : "Smartart Tools Design",
    TABLE_DESIGN     : "Table Tools Design",
    TABLE_LAYOUT     : "Table Tools Layout"
};
//Contextual Tabs mapping for EXCEL Application
SIMS.SharedData.ExcelRibbonContextualTabIDs = {  

    Chart_Tools_Design: "Chart Tools Design",
    Chart_Tools_Format: "Chart Tools Format",
    Drawing_Tools_Format: "Drawing Tools Format",
    Header_Footer_Tools_Design: "Header & Footer Tools Design",
    Picture_Tools_Format: "Picture Tools Format",
    PivotChart_Tools_Analyze: "PivotChart Tools Analyze",
    PivotChart_Tools_Design: "PivotChart Tools Design",
    PivotChart_Tools_Format: "PivotChart Tools Format",
    PivotTable_Tools_Analyze: "PivotTable Tools Analyze",
    PivotTable_Tools_Design: "PivotTable Tools Design",
    Power_View: "Power View",
    PowerPivot: "PowerPivot",
    Slicer_Tools_Options: "Slicer Tools Options",
    SmartArt_Tools_Design: "SmartArt Tools Design",
    SmartArt_Tools_Format: "SmartArt Tools Format",
    Sparklines_Tools_Design: "Sparklines Tools Design",
    Table_Tools_Design: "Table Tools Design"

};
//Contextual Tabs mapping for PPT Application
SIMS.SharedData.PPTRibbonContextualTabIDs = {
    Picture_Tools_Format: "Picture Tools Format",
    Video_Tools_Playback: "Video Tools Playback",
    Video_Tools_Format: "Video Tools Format",
    Audio_Tools_Playback: "Audio Tools Playback",
    Audio_Tools_Format: "Audio Tools Format",
    Drawing_Tools_Format: "Drawing Tools Format",
    Chart_Tools_Design: "Chart Tools Design",
    Chart_Tools_Format: "Chart Tools Format",
    SmartArt_Tools_Design: "SmartArt Tools Design",
    SmartArt_Tools_Format: "SmartArt Tools Format",
    Table_Tools_Design: "Table Tools Design",
    Table_Tools_Layout: "Table Tools Layout"
};
//Contextual Tabs mapping for ACCESS Application
SIMS.SharedData.AccessRibbonContextualTabIDs = {
    Table_Tools_Fields: "Table Tools Fields",
    Table_Tools_Table: "Table Tools Table",
    Table_Tools_Design: "Table Tools Design",
    Query_Tools_Design: "Query Tools Design",
    Form_Layout_Tools_Design: "Form Layout Tools Design",
    Form_Layout_Tools_Arrange: "Form Layout Tools Arrange",
    Form_Layout_Tools_Format: "Form Layout Tools Format",
    Form_Design_Tools_Design: "Form Design Tools Design",
    Form_Design_Tools_Arrange: "Form Design Tools Arrange",
    Form_Design_Tools_Format: "Form Design Tools Format",
    Report_Layout_Tools_Design: "Report Layout Tools Design",
    Report_Layout_Tools_Arrange: "Report Layout Tools Arrange",
    Report_Layout_Tools_Format: "Report Layout Tools Format",
    Report_Layout_Tools_Page_setup: "Report Layout Tools Page setup",
    Report_Design_Tools_Design: "Report Design Tools Design",
    Report_Design_Tools_Arrange: "Report Design Tools Arrange",
    Report_Design_Tools_Format: "Report Design Tools Format",
    Report_Design_Tools_Page_setup: "Report Design Tools Page setup",
    Print_Preview: "Print Preview",
    Macro_Tools_Design: "Macro Tools Design",
    Relationship_Tools_Design: "Relationship Tools Design",
    Form_Tools_Datasheet: "Form Tools Datasheet"
};

//Main Tabs mapping for ACCESS Application
SIMS.SharedData.AccessRibbonMainTabIDs = {
    Home: "Home",
    Create: "Create",
    External_Data: "External Data",
    Database_Tools: "Database Tools"
};

SIMS.SharedData.SnappingAreas = {
    NONE: "NONE",
    LEFT: "LEFT",
    RIGHT: "RIGHT",
    TOP: "TOP",
    BOTTOM: "BOTTOM",
    LEFT_TOP: "LEFT_TOP",
    RIGHT_TOP: "RIGHT_TOP",
    LEFT_BOTTOM: "LEFT_BOTTOM",
    RIGHT_BOTTOM: "RIGHT_BOTTOM"
};

SIMS.SharedData.ZIndexData = {
    WindowFrameStartIndex: 3000,
    WindowFrameResetAfterIndex: 3050,
    WindowFrameEndIndex: 3100,
    /* WindowFrameStartIndex Reserved from 3000 to 3100 */
    OverlayModalWindow:3150,


    Win10ActionCenter: 3199,
    //Taskbar and start menu: reserved - 3200-3250
    Win10Taskbar: 3200,

    //Learning aids pop up: reserved - 3500-3600
    LearningAidDivTooltip: 3500,

    //Virtual keyboard: reserved - 10010-10020
    VirtualKeyboard: 10010  //keep it > 9999 (z-index applied on Increase Font tooltips for instruction)
};

SIMS.SharedData.ComponentTypes = {
    DEFAULT: "default",
    MODAL_DIALOG: "modaldialog",
    MODAL_WINDOW: "modalwindow",
    DIALOG: "dialog",
    WINDOW_FRAME: "windowframe",
    PANE: "modeless pane"
};

//GlobalFag to check if practice is on or not
SIMS.SharedData.PracticeData = {
    isPracticeOn: false
};

SIMS.SharedData.VirtualKBData = { 
    isEnabled: true
};

SIMS.SharedData.BrowserCheck = {
    edge: bowser.msedge,
    msie: bowser.msie,
    webkit: bowser.webkit,
    chrome: bowser.chrome,
    safari: bowser.safari,
    firefox: bowser.firefox,
    version: bowser.version,
    opera: bowser.opera
};

'use strict';
function jsDictionary() {
    this._items = {};
    this.itemArray = new Array();
    this.AddItem = function (key, value) {
        if (this._items[key] == undefined) {
            this._items[key] = value;
            this.itemArray.push(key);
        }
        else {
            alert("This key '[" + key + "]' already exist in Dictionary. Duplicate entry.");
        }
    };

    this.UpdateItem = function (key, value) {
        if (this._items[key] != undefined) {
            this._items[key] = value;
        }
        else {
            alert("This key '[" + key + "]' does not exist in Dictionary. Please add it to the dictionary first.");
        }
    };

    this.GetItem = function (key) {
        if (this._items[key] != undefined) {
            return this._items[key];
        }
        else {
            alert("This key '[" + key + "]' does not exist in Dictionary. Please add it to the dictionary first.");
        }
    };

    this.DeleteItem = function (key) {
        if (this._items[key] != undefined) {
            this._items[key] = null;
            delete this._items[key];

            var index = this.itemArray.indexOf(key);
            if (index !== -1) {
                this.itemArray.splice(index, 1);
            }
        }
        else {
            alert("This key '[" + key + "]' does not exist in Dictionary. Failed to delete.");
        }
    };

    this.GetLength = function () {
        return this.itemArray.length;
    };

    this.ContainsKey = function (key) {
        if (this._items[key] != undefined) {
            return true;
        }
        else {
            return false;
        }
    };

    this.GetKeys = function () {
        return this.itemArray;
    };

    this.Dispose = function () {
        this._items = {};
        this.itemArray = new Array();
    };

    this.DisposeAll = function () {
        var length = this.itemArray.length;

        //delete individual items
        for (var count = 0; count < length; count++) {
            if (this.itemArray[count] != null) {
                this._items[this.itemArray[count]] = null;
            }
        }

        if (this.itemArray.length > 0) {
            //delete itemArray (containing all keys)
            this.itemArray.splice(0, this.itemArray.length);
        }

        //empty arrays
        this.itemArray = [];
        this._items = {};
    };
}



'use strict';
namespace("SIMS.Common");

SIMS.Common.UtilityFunctions = function () {
    this.IsObjectDefined = function (objToCheck) {
        if (objToCheck != null) {
            return true;
        }
        else {
            return false;
        }       
    };

    this.GetFriendlyShortCutString = function (e) {
        var shortcutName = "";
        var keyCodesToHandleUp = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 173, 188, 189, 190, 219, 221, 61, 187, 192];
        var keyCodesToHandleDown = [9, 13, 27, 32, 33, 35, 36, 37, 38, 39, 40];
        
        if (e.winKey) {
            shortcutName += "WIN+";
        }
        if (e.altKey) {
            shortcutName += "ALT+";
        }
        if (e.shiftKey) {
            shortcutName += "SHIFT+";
        }
        if (e.ctrlKey) {
            shortcutName += "CTRL+";
        }
        if (e.metaKey) {
            shortcutName += "META+";
        }

        if (shortcutName === "ALT+SHIFT+CTRL+") {
            this.PossibleAccessKey = true;
        }


        var charCode = e.which || e.keyCode;


        if ((charCode <= 90 && charCode >= 65) || (charCode <= 57 && charCode >= 48)) {
            shortcutName += String.fromCharCode(charCode);
        }
        else if (charCode >= 112 && charCode <= 123 || $.inArray(charCode, keyCodesToHandleUp) > -1 || $.inArray(charCode, keyCodesToHandleDown) > -1) {
            shortcutName += SIMS.SharedData.KeyboardData.KEYCODESMAP[charCode];
        }
        else if (charCode === 18 || charCode === 17 || charCode === 16 || charCode === 91 || charCode === 93) {
            this.PossibleAccessKey = false;
            if (shortcutName.charAt(shortcutName.length - 1) === "+") {
                shortcutName = shortcutName.substring(0, shortcutName.length - 1);
            }
        }
        else {
            console.log("Key not handled keyCode:" + charCode);
        }

        return shortcutName;
    };

    this.IsAlphaNumericKey = function(input) {
        var isAlphaNumericKey = false;
        if(typeof(input) === "number"){
            if ((input <= 90 && input >= 65) || (input <= 57 && input >= 48)) {
                isAlphaNumericKey = true;
            }
        }
        else if(typeof(input) === "string" && input.length === 1){
            isAlphaNumericKey = this.IsAlphaNumericKey(input.charCodeAt(0));
        }

        return isAlphaNumericKey;
    };

    this.GetFriendlyKeyName = function (e) {
        var keyName = "";
        var isAcessKey = false;
        var keyCodesToHandleUp = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 173, 188, 189, 190, 219, 221, 61, 187, 192];
        var keyCodesToHandleDown = [9, 13, 27, 32, 33, 35, 36, 37, 38, 39, 40];
        var charCode = e.which || e.keyCode;

        if ((charCode <= 90 && charCode >= 65) || (charCode <= 57 && charCode >= 48)) {
            keyName = String.fromCharCode(charCode);
            isAcessKey = this.IsAlphaNumericKey(charCode);
        }
        else if ($.inArray(charCode, keyCodesToHandleUp) > -1 || $.inArray(charCode, keyCodesToHandleDown) > -1) {
            keyName = SIMS.SharedData.KeyboardData.KEYCODESMAP[charCode];
        }
        else if (charCode >= 112 && charCode <= 123) { //Workaround for ribbon

            if (e.shiftKey) {
                keyName += "SHIFT+";
            }

            if (e.ctrlKey) {
                keyName += "CTRL+";
            }

            keyName += SIMS.SharedData.KeyboardData.KEYCODESMAP[charCode];
        }
        else if (charCode === 18) {  //ALT - Workaround for ribbon           
            keyName = "ALT";
        }
        else if (charCode === 17) { //CTRL
            keyName = "CTRL";
        }
        else if (charCode === 16) {//SHIFT            
            keyName = "SHIFT"
        }
        else if (e.metaKey == true && (charCode === 91 || charCode === 93)) {//COMMAND
            keyName = "META"
        }

        var keyInfo = { "keyName": keyName, "isAcessKey": isAcessKey };
        return keyInfo;
    };
    
    //Takes as input - time duration in milli seconds
    //Returns - time duration in format of xx:yy (mm:ss) or xx:yy (hh:mm)
    this.GetFormattedTime = function (timeInSec) {
        
        var retValue = -1;

        if (typeof timeInSec !== "number") {
            return retValue;
        }

        try {
            var hour = Math.floor(timeInSec / 3600);
            var min = Math.floor(timeInSec / 60);
            var sec = Math.floor(timeInSec % 60);

            if (hour > 0) {
                min = min % 60;

                retValue = this._getTimeUnitWithLeadingZero(hour) + ":" + this._getTimeUnitWithLeadingZero(min) + " (hh:mm)";
            }
            else {
                retValue = this._getTimeUnitWithLeadingZero(min) + ":" + this._getTimeUnitWithLeadingZero(sec) + " (mm:ss)";
            }
        }
        catch (ex) {
            retValue = -1;
        }

        return retValue;
    };

    this._getTimeUnitWithLeadingZero = function (nVal) {

        var retValue = "";

        if (typeof nVal === "number") {
            retValue = nVal < 10 ? "0" + nVal : nVal.toString();
        }

        return retValue;
        
    };
    
}
var gSimsAreaHeight = 0;
var gSimsAreaWidth = 0;
var gSimsAreaLeft = 0;
var gSimsAreaTop = 0;
var gSimsAreaBorderWidth = 0;
var rightNavWidth = 250;
var bottomNavHeight = 100;

function ResizeComponents(SimsAreaHeight, currSimsAreaWidth, WindowHeight) {
    console.log("SimsAreaHeight :" + SimsAreaHeight + "currSimsAreaWidth :" + currSimsAreaWidth + "WindowHeight :" + WindowHeight);

    //$("#SIMArea").height(SimsAreaHeight);
    //$("#SIMArea").width(currSimsAreaWidth);
        
    /*$(".FullscreenCurtainBlue").height(WindowHeight);
    $(".FullscreenCurtainBackground").height(WindowHeight);*/
    
    //$("#LoadingBackgroundCurtain").height(WindowHeight);
    /*$("#BackroundCurtainForGreenDlg").height(WindowHeight);*/
    
    //$("#LoadingCurtain").height(SimsAreaHeight);
    /*$(".BackroundCurtain").height(SimsAreaHeight);*/

    if (window.Cache != undefined) {

        $(".compDiv").each(function () {
            var compId = $(this).attr("id");
            var compInfo = $("#" + compId).data("compinfo");

            if (compInfo) {
                var name = compInfo.compName;

                var nLen = window.Cache.length;
                for (i = 0; i < nLen; i++) {
                    if (window.Cache[i] != null) {
                        if (window.Cache[i][0] == name) {
                            if (window.Cache[i][1]._compJS != null) {
                                if (window.Cache[i][1]._compJS.resize != undefined) {
                                    window.Cache[i][1]._compJS.resize(compId, SimsAreaHeight, currSimsAreaWidth);
                                }
                            }
                        }
                    }
                }
            }
        });
    }
};

function ResizeContentsOnScreen() {
    //correction 
    var DefaultCorrection = 2;
    WindowHeight = $(window).height() - DefaultCorrection;
    SimsAreaHeight = WindowHeight - $NavArea.outerHeight();
    //$("#SIMArea").height(SimsAreaHeight);
    $(".FullscreenCurtainBlue").height(WindowHeight);
    $(".FullscreenCurtainBackground").height(WindowHeight);
    //$("#LoadingCurtain").height(SimsAreaHeight);
    //$("#LoadingBackgroundCurtain").height(WindowHeight);
    $("#BackroundCurtainForGreenDlg").height(WindowHeight);
    $(".BackroundCurtain").height(SimsAreaHeight);


};

function ResizeContentsOnScreen11(bSendMessage) {
    var DefaultCorrection = 0;
    var WindowHeight = 0;
    var WindowWidth = 0;

    var SimsAreaHeight = 0;
    var currSimsAreaWidth = 0;

    WindowHeight = $(window).height() - DefaultCorrection;
    WindowWidth = $(window).width();

 /*   if (bSendMessage) {
        SEND_MESSAGE("DISPLAY_BOTTOM_NAVIGATOR");
        SimsAreaHeight = WindowHeight - $("#NavArea").height();
    }
    currSimsAreaWidth = WindowWidth;*/

    if ((WindowWidth >= 1420)) {
        if (bSendMessage) {
            SEND_MESSAGE("DISPLAY_RIGHT_NAVIGATOR");
        }

        currSimsAreaWidth = WindowWidth - rightNavWidth;
        SimsAreaHeight = WindowHeight;
        //$("#SIMArea").width(currSimsAreaWidth - 250);
    } else {
    if (bSendMessage) {
        SEND_MESSAGE("DISPLAY_BOTTOM_NAVIGATOR");
        SimsAreaHeight = WindowHeight - $("#NavArea").height();
    }
    else {
        SimsAreaHeight = WindowHeight - bottomNavHeight; //  - $("#NavArea").height();
    }       //$("#SIMArea").width(currSimsAreaWidth);    

    currSimsAreaWidth = WindowWidth;
    }
    
    //Store in global variables
    gSimsAreaHeight = SimsAreaHeight - gSimsAreaBorderWidth;
    gSimsAreaWidth = currSimsAreaWidth - gSimsAreaBorderWidth;
    gSimsAreaLeft = $(".SIMArea").offset().left;
    gSimsAreaTop = $(".SIMArea").offset().top;

    ResizeComponents(gSimsAreaHeight, gSimsAreaWidth, WindowHeight);

    try {
        ResetBlurbDraggingGlobalVariables();
    }
    catch (err) {
        // Handle error(s) here
    }
    
}

$(document).ready(function () {
    //ResizeContentsOnScreen11(false);
    if (SIMS.SharedData.AssignmentVersion === SIMS.SharedData.AssignmentVersions.OFFICE2016) {
        rightNavWidth = 252;
        bottomNavHeight = 110;
    }
   // $("[rel=showtooltip]").showTooltip(); 
});

function HookResizeEvent() {
    $(window).resize(function () {
        ResizeContentsOnScreen11(true);
    });
};
'use strict';
var UIUtils = {};

UIUtils.getUnselectableGenericElement = function (tagName, id, className) {
    return UIUtils.getGenericHtmlElement({
        tagName: tagName,
        id: id,
        class: className,
        attributes: [{
            name: "unselectable",
            value: "on"
        }]
    });
};

UIUtils.getRadioButton = function (options) {
    var $radio = UIUtils.getGenericHtmlElement({
        tagName: "input",
        id: options.id,
        class: options.className,
        attributes: [{
            name: "name",
            value: options.name
        }, {
            name: "type",
            value: 'radio'
        }]
    });

    var $div = $("<span/>");
    $div.addClass(options.class);
    $div.text(options.text);
    $div.prepend($radio);
    
    return $div;
};

UIUtils.getUnselectableDiv = function (id, className) {
    return UIUtils.getUnselectableGenericElement("div", id, className);
};

UIUtils.getUnselectableSpan = function (id, className) {
    return UIUtils.getUnselectableGenericElement("span", id, className);
};

UIUtils.getGenericHtmlElement = function (options) {
    if (options == null) {
        return null;
    }
    else {
        var $element = $("<" + options.tagName + " />");
        if (options.id != null && options.id.length > 0) {
            $element.attr("id", options.id);
        }
        $element.attr("class", options.class);
        for (var i = 0; i < options.attributes.length; i++) {
            var currentAttr = options.attributes[i];
            $element.attr(currentAttr.name, currentAttr.value);
        }

        return $element;
    }
};

UIUtils.getHorizontalOverflow = function (overflowingElement, container) {
    var containerRight = (container == document ? 0 : $(container).offset().left) + $(container).outerWidth();
    var overflowingElementRight = $(overflowingElement).offset().left + $(overflowingElement).outerWidth();
    return overflowingElementRight - containerRight;
};

// To be Coded Later
//UIUtils.getImage = function(options) {
//}
//UIUtils.getImageFromXml = function (xmloptions) {
//}

UIUtils.getVerticalOverflow = function (overflowingElement, container) {
    var containerBottom = (container == document ? 0 : $(container).offset().top) + $(container).outerHeight();
    var overflowingElementBottom = $(overflowingElement).offset().top + $(overflowingElement).outerHeight();
    return overflowingElementBottom - containerBottom;
};

UIUtils.getVerticalOverflowFromTop = function (overflowingElement, container) {
    var containerTop = (container == document ? 0 : $(container).offset().top);
    var overflowingElementTop = $(overflowingElement).offset().top;
    return containerTop - overflowingElementTop;
};

UIUtils.getVerticalOverflowFromBottomAndTopBoth = function (overflowingElement, container) {
    var containerBottom = (container == document ? 0 : $(container).offset().top) + $(container).outerHeight();
    var overflowingElementBottom = $(overflowingElement).offset().top + $(overflowingElement).outerHeight();
    var overflowFromBottom = overflowingElementBottom - containerBottom;

    if(overflowingElement.offset().top - $(container).offset().top > overflowFromBottom)
    {
        return  overflowFromBottom;
    }
    else
    {
        return overflowingElement.offset().top - $(container).offset().top;
    }
};
'use strict';
var hoveredControl;
var tooltipTimeout;
var mouseXForTT, mouseYForTT;
$(document).ready(function () {
    $(document).mousemove(function (e) {
        mouseXForTT = e.pageX;
        mouseYForTT = e.pageY;
    });
});

var OfficeUIUtls = {};
OfficeUIUtls.TooltipHelpers = {};
OfficeUIUtls.TooltipHelpers.ToolTipPositionGetters = {};
OfficeUIUtls.TooltipHelpers.PositioningTranslator = function (positioning) {
    //Supported Modes: RibbonBottom, Floating
    var translation = positioning;

    if (positioning == '' || positioning == 'Default' || positioning == null) {
        //Default is RibbonBottom
        translation = 'RibbonBottom';
    }
    return translation;
};

OfficeUIUtls.TooltipHelpers.TranslateTooltipType = function (tooltipType) {
    var translation = tooltipType;
    if (tooltipType == '' || tooltipType == 'Default' || tooltipType == null) {
        translation = 'HeaderBody';
    }
    return translation;
};

OfficeUIUtls.TooltipHelpers.TooltipParts = ['header', 'body', 'pic', 'help'];
OfficeUIUtls.TooltipHelpers.TooltipTypes = {};
OfficeUIUtls.TooltipHelpers.TooltipTypes.HeaderBody = { header: true, body: true };
OfficeUIUtls.TooltipHelpers.TooltipTypes.BodyOnly = { body: true };
OfficeUIUtls.TooltipHelpers.TooltipTypes.HeaderBodyPic = { header: true, body: true, pic: true };
OfficeUIUtls.TooltipHelpers.TooltipTypes.HeaderBodyHelp = { header: true, body: true, help: true };
OfficeUIUtls.TooltipHelpers.TooltipTypes.HeaderBodyPicHelp = { header: true, body: true, pic: true, help: true };

OfficeUIUtls.TooltipHelpers.TranslateTooltipTypeIntoClasses = function (tooltipType) {
    var typeInfo = OfficeUIUtls.TooltipHelpers.TooltipTypes[tooltipType];
    var classNames = '';
    var tooltipParts = OfficeUIUtls.TooltipHelpers.TooltipParts;
    for (var i = 0; i < tooltipParts.length; i++) {
        if (!typeInfo[tooltipParts[i]]) {
            classNames += 'tooltip-no' + tooltipParts[i] + ' ';
        }
    }
    return classNames;
};

OfficeUIUtls.TooltipHelpers.GetToolTip = function (xToolTip) {
    var tooltipType = $(xToolTip).attr('type');
    tooltipType = OfficeUIUtls.TooltipHelpers.TranslateTooltipType(tooltipType);
    var toolTipClasses = OfficeUIUtls.TooltipHelpers.TranslateTooltipTypeIntoClasses(tooltipType);
    var templateMarkup = '<div class="tooltip ' + toolTipClasses + 'tooltip-' + tooltipType.toLowerCase() + '"><div class="tooltip-header">${header}</div><div class="tooltip-image"><div class="tooltip-image-div"{{if img}} style="background-image:url(${img.src});width:${img.wd};height:${img.ht};background-position:${img.imgcrop.left} ${img.imgcrop.top}"{{/if}} /></div><div class="tooltip-body">{{html body}}</div><div class="tooltip-help"><div class="tooltip-help-icon"/><div class="tooltip-help-text">{{if helptext}}${helptext}{{else}}Tell me more{{/if}}</div></div></div>';
    templateMarkup = templateMarkup.replace(/[\n\r\t]/g, "");
    var $template = $.template('tooltipTemplate', templateMarkup);
    var jsonToolTip = xToolTip.convertToJSON();
    var $tooltip = $.tmpl('tooltipTemplate', jsonToolTip);

    //Positioning
    var tooltipPosition = $(xToolTip).attr('position');
    tooltipPosition = OfficeUIUtls.TooltipHelpers.PositioningTranslator(tooltipPosition);
    $tooltip.data('positiongetter', tooltipPosition);
    return $tooltip;
};

OfficeUIUtls.TooltipHelpers.ToolTipPositionGetters.RibbonBottom = function () {
    var ddLeft = $(hoveredControl).offset().left;
    var $ribbon = $(hoveredControl).parents('.ribbon-tab-container');
    if ($ribbon.length > 0) {
        var ddTop = $ribbon.outerHeight() + $ribbon.offset().top;
        return { top: ddTop, left: ddLeft };
    }
};

OfficeUIUtls.TooltipHelpers.ToolTipPositionGetters.Floating = function () {
    var ddLeft = mouseXForTT - ($(hoveredControl).offset().left - $(hoveredControl).position().left) + 10 /*Cursor Dimensions*/;
    var ddTop = mouseYForTT - ($(hoveredControl).offset().top - $(hoveredControl).position().top) + 20 /*Cursor Dimensions*/;

    return { top: ddTop, left: ddLeft };
};

OfficeUIUtls.TooltipHelpers.ToolTipPositionGetters.Item = function () {
    var ddLeft = mouseXForTT + 10 /*Cursor Dimensions*/;
    var ddTop = mouseYForTT  + 20 /*Cursor Dimensions*/;

    return { top: ddTop, left: ddLeft };
};

OfficeUIUtls.TooltipHelpers.ToolTipPositionGetters.CondensedSection = function () {
    var ddLeft = $(hoveredControl).offset().left;
    var $ribbon = $(hoveredControl).parents('.ribbon-section:first');
    if ($ribbon.length > 0) {
        var ddTop = $ribbon.outerHeight() + $ribbon.offset().top + 3;
        return { top: ddTop, left: ddLeft };
    }
};

OfficeUIUtls.TooltipHelpers.ShowTooltip = function () {

    var $tooltip = $(hoveredControl).children('.tooltip'); // changed from $(hoveredControl).find('.tooltip') as items / children can also have tooltips
    
    //--------------------------------------------For SO-10352------------------------------------------------------------------------
    if($(hoveredControl).closest(".ribbon").length > 0  && !$tooltip.hasClass("tooltip-bodyonly") && !$tooltip.data("isWidthSet")) { //Bodyonly check -- SIMS-135929
        var ttWidth = $tooltip.width();
        $tooltip.width(ttWidth);
        $tooltip.data("isWidthSet", true);
    }
    //--------------------------------------------------------------------------------------------------------------------------------
    if (!$tooltip.is(':visible')) {
        var toolTipPositionGetter = $tooltip.data('positiongetter');
        if(toolTipPositionGetter!= undefined)
        {        
            $('.tooltip').not($tooltip).hide();
            var tooltipPosition = OfficeUIUtls.TooltipHelpers.ToolTipPositionGetters[toolTipPositionGetter](hoveredControl);
            if (tooltipPosition == undefined) {
                return;
            }
            $tooltip.css({ 'top': tooltipPosition.top, 'left': tooltipPosition.left });
            $tooltip.fadeIn(200);

            //Width Handling
            var overflow = UIUtils.getHorizontalOverflow($tooltip, SIMS.Objects.DOMElements.SIMArea);
            if (overflow > 0) {
                $tooltip.css('left', '-=' + (overflow + 2));
            }

            if($tooltip.hasClass("tooltip-headerbodypic") || $tooltip.hasClass("tooltip-headerbodypichelp"))
            {
                var verticalOverflow = UIUtils.getVerticalOverflow($tooltip, SIMS.Objects.DOMElements.SIMArea);
                if(verticalOverflow > 0) {
                    $tooltip.css('top', hoveredControl.offset().top - $tooltip.outerHeight() -2);
                }
            }
        }
    }
};
OfficeUIUtls.TooltipHelpers.HideTooltip = function (delay) {
    clearTimeout(tooltipTimeout);
    $(hoveredControl).find('.tooltip').delay(delay != null ? delay : 20).fadeOut(200);
};

OfficeUIUtls.TooltipHelpers.AttachTooltipFunctionality = function ($externallyPassedControl) {
    var showtooltip = OfficeUIUtls.TooltipHelpers.ShowTooltip;
    var hideTooltip = OfficeUIUtls.TooltipHelpers.HideTooltip;
    var $control = this.$control;
    if ($externallyPassedControl != null) {
        $control = $externallyPassedControl;
    }

    $control.hover(function (e) {
        hoveredControl = $(this);
        //mouseXForTT = e.pageX;
        //mouseYForTT = e.pageY;

        tooltipTimeout = setTimeout(showtooltip, 1000);
    }, hideTooltip);
};

$.fn.addTooltip = function (xToolTip) {

    if (!($(this).find(".tooltip").length > 0)) {
        var showtooltip = OfficeUIUtls.TooltipHelpers.ShowTooltip;
        var hideTooltip = OfficeUIUtls.TooltipHelpers.HideTooltip;
        $(this).hover(function (e) {
            if (!($(this).find(".tooltip").length > 0)) {
                if (xToolTip != null && xToolTip.length > 0) {
                    var $tooltip = OfficeUIUtls.TooltipHelpers.GetToolTip(xToolTip);
                    $tooltip.appendTo($(this));
                }
            }
            hoveredControl = $(this);
            tooltipTimeout = setTimeout(showtooltip, 1000);
        }, hideTooltip);
    }
};

// OfficeTooltip file for Office 2016
// Overwrite the function whcih require modifications.

OfficeUIUtls.TooltipHelpers.ShowTooltip = function () {

    var $tooltip = $(hoveredControl).children('.tooltip'); // changed from $(hoveredControl).find('.tooltip') as items / children can also have tooltips
    
    //--------------------------------------------For SO-10352------------------------------------------------------------------------
    if($(hoveredControl).closest(".ribbon").length > 0  && !$tooltip.hasClass("tooltip-bodyonly") && !$tooltip.data("isWidthSet")) { //Bodyonly check -- SIMS-135929
        var ttWidth = $tooltip.width();
        $tooltip.width(ttWidth);
        $tooltip.data("isWidthSet", true);
    }
    //--------------------------------------------------------------------------------------------------------------------------------
    if (!$tooltip.is(':visible')) {
        var toolTipPositionGetter = $tooltip.data('positiongetter');
        if(toolTipPositionGetter!= undefined)
        {        
            $('.tooltip').not($tooltip).hide();
            var tooltipPosition = OfficeUIUtls.TooltipHelpers.ToolTipPositionGetters[toolTipPositionGetter](hoveredControl);
            if (tooltipPosition == undefined) {
                return;
            }
            $tooltip.css({ 'top': tooltipPosition.top, 'left': tooltipPosition.left });
            $tooltip.fadeIn(200);

            //Width Handling
            var overflow = UIUtils.getHorizontalOverflow($tooltip, SIMS.Objects.DOMElements.SIMArea);
            if (overflow > 0) {
                $tooltip.css('left', '-=' + (overflow + 2));
            }

            var verticalOverflow = UIUtils.getVerticalOverflow($tooltip, SIMS.Objects.DOMElements.SIMArea);
            if(verticalOverflow > 0) {
                $tooltip.css('top', hoveredControl.offset().top - $tooltip.outerHeight() -2);
            }            
        }
    }
};

function MESSAGE_HANDLER() {
    this._listeners = {};
    this._classObj = {};
    this.RegisterMessage = function (event, ClsObj, listener) {
        if (this._listeners[event] == undefined) {
            this._listeners[event] = listener;
            this._classObj[event] = ClsObj;
        }
        else {
            alert("Duplicate event registration request. Note that Event [" + event + "] is already defined. ");
        }
    }

    this.SendMessage = function (event) {
        if (this._listeners[event] != undefined) {
            var func = this._listeners[event];
            var clsObj = this._classObj[event];
            if (func) {
                func.apply(clsObj);
            }
        }
        else {
            alert("Failed to SEND_MESSAGE. Event [" + event + "] is not defined.");
        }
    }

    this.SendMessageWithParam = function (event, paramData) {
        if (this._listeners[event] != undefined) {
            var func = this._listeners[event];
            var clsObj = this._classObj[event];
            if (func) {
                func.apply(clsObj, [paramData]);
            }
        }
        else {
            alert("Failed to SEND_MESSAGE. Event [" + event + "] is not defined.");
        }
    }
}

function REGISTER_MSG(event, clsObj, listener, msgHandler) {
    // var msgHandler = new MESSAGE_HANDLER();
    msgHandler.RegisterMessage(event, clsObj, listener);
    
}

function SEND_MESSAGE(event, paramData, msgHandler) {
    if (paramData == undefined) {
        msgHandler.SendMessage(event);
    }
    else {
        msgHandler.SendMessageWithParam(event, paramData);
    }
}


'use strict';
function SIMFollowupState(stateId, attributeSet, originTaskNo, originStateNo) {
    this.StateId = stateId;
    this.AttributeSet = attributeSet;
    this.Result = false;
    this.IsEventPresent = false;
    this.OriginTaskNo = originTaskNo;
    this.OriginStateNo = originStateNo;
}

function CompMessageArgs(compid, messageid, messageName, messageDetails) {

    this.CompId = compid;
    this.MessageId = messageid;
    this.MessageName = messageName;    
    this.MessageDetails = messageDetails;
}

function SIMEventArgs(compid, eventid, type, desc, eventDetails, compName, bSafe) {

    this._compID = compid;
    this._eventId = eventid;
    this._type = type;
    this._desc = desc;
    this._eventDetails = eventDetails;
    this._compName = compName;
    this._isSafe = bSafe;
}

function TrackerEventsArgs(trackerid, followupaction, eventid, type, desc) {

    this._trackerID = trackerid;
    this._followupaction = followupaction;
    this._eventId = eventid;
    this._type = type;
    this._desc = desc;
}

function TaskInfo(taskInfo, assignmentMode) {
    if (taskInfo.id != undefined && taskInfo["@id"] == undefined) {
        taskInfo["@id"] = taskInfo.id;
    }
    this._id = taskInfo["@id"];
    this._appID = taskInfo.appID;
    this._Name = taskInfo.description;
    this._text = taskInfo.text;
	this._launchStepID = taskInfo.stepID;
    this._ActionDictionary = [];
    this._No = taskInfo.questionIndex;
    this._lmsQnId = taskInfo.lmsQnID != null ? taskInfo.lmsQnID.trim() : "";
    this.questionPoints = taskInfo.questionPoints != null ? taskInfo.questionPoints : "0";

    if (taskInfo.questionType != null) {
        switch (taskInfo.questionType) {

            case SIMS.SharedData.QuestionType.NATIVE_TRUEFALSE:
            case SIMS.SharedData.QuestionType.NATIVE_MATCHING:
            case SIMS.SharedData.QuestionType.NATIVE_RANKING:
            case SIMS.SharedData.QuestionType.NATIVE_FIB:
            case SIMS.SharedData.QuestionType.NATIVE_MC:
            case SIMS.SharedData.QuestionType.NATIVE_MR:
                this.questionType = taskInfo.questionType;
                this.questionXml = taskInfo.questionXml ? taskInfo.questionXml.trim() : "";
                break;
            case SIMS.SharedData.QuestionType.SIM:
            default:
                this.questionType = SIMS.SharedData.QuestionType.SIM;
                this.questionXml = "";
                break;
        }
    }
    else {
        this.questionType = SIMS.SharedData.QuestionType.SIM;
        this.questionXml = "";
    }

	
	
	this._userResponse = "";
   
    if (taskInfo.result != null) {
        //this._Status = taskInfo.result.questionAttemptStatus != null ? taskInfo.result.questionAttemptStatus : SIMS.SharedData.QuestionStatus.NOTATTEMPTED;

        if (taskInfo.result.questionAttemptStatus != null) {
            switch (taskInfo.result.questionAttemptStatus) {
                case SIMS.SharedData.QuestionStatus.NOTGRADED:
                case SIMS.SharedData.QuestionStatus.CORRECT:
                case SIMS.SharedData.QuestionStatus.INCORRECT:
                    if (this.questionType === SIMS.SharedData.QuestionType.SIM) {
                        this._Status = taskInfo.result.questionAttemptStatus;
                    }
                    else {
                        this._Status = SIMS.SharedData.QuestionStatus.NOTGRADED;
                    }
                    break;

                case SIMS.SharedData.QuestionStatus.INCOMPLETE:
                    this._Status = taskInfo.result.questionAttemptStatus;
                    break;
                default:
                    this._Status = SIMS.SharedData.QuestionStatus.NOTATTEMPTED;
                    break;
            }
        }
        else {
            this._Status = SIMS.SharedData.QuestionStatus.NOTATTEMPTED;
        }
        this._timeConsumed = taskInfo.result.timeConsumedInSec != null ? parseInt(taskInfo.result.timeConsumedInSec) : -1;
        this._attemptsLeft = taskInfo.result.remainingAttempts != null ? parseInt(taskInfo.result.remainingAttempts) : -1;
    }
    else {
        this._Status = SIMS.SharedData.QuestionStatus.NOTATTEMPTED;
        this._timeConsumed = -1;
        this._attemptsLeft = -1;
    }

    if (assignmentMode == SIMS.SharedData.AssignmentMode.TRAINING) {
        this.LearningAidViewed = { Practice: 0, Read: 0, Watch: 0};
    }
}

function ActionsInfo(eventArgs, stepStatus) {
    if (eventArgs._desc != null && eventArgs._desc != "" && eventArgs._desc != undefined) {
        this._txt = eventArgs._desc;
    }
    else {
        this._txt = eventArgs._eventDetails.EventDesc;
    }
    this._StepStatus = stepStatus;
}

function ReportInfo(examDetails) {
    if (examDetails != null) {
        this.userid = examDetails.config.examsettings.userid;
        this.examid = examDetails.config.examsettings.examid;
        this.username = examDetails.config.examsettings.username;
        this.totaltime = examDetails.config.examsettings.totaltime;
        this.returnData = examDetails.config.examsettings.returnData;
        this.assessmentstatus = SIMS.Core.AssessmentStatus.InProgress;
        this.StartFromLMSQuestionID = -1;
        this.submittedtime = undefined;
        this.grade = undefined;
        this.correctattempts = undefined;
        this.incorrectAttemptPerTask = examDetails.config.examsettings.incorrectAttemptPerTask;        
        this.TaskDictionary = new jsDictionary();
    }
    else {
        this.userid = "";
        this.examid = "";
        this.username = "";
        this.totaltime = -1;
        this.returnData = null;
        this.assessmentstatus = SIMS.Core.AssessmentStatus.InProgress;
        this.StartFromLMSQuestionID = -1;
        this.submittedtime = undefined;
        this.grade = undefined;
        this.correctattempts = undefined;
        this.incorrectAttemptPerTask = -1;        
        this.TaskDictionary = new jsDictionary();
    }
}


function SIMComponent(compJS, compHTML, className) {

    this._compJS = compJS;
    this._compHTML = compHTML;
    this._className = className;
}


function ReportParams(jsonString, taskid, type) {

    this.jsonstring = jsonString;
    this.taskid = taskid;
    this.type = type;
}

function CompInfo(compname, id, comptype) {
    this.compName = compname;
    this.className = compname;
    this["@id"] = id;
    this["@name"] = compname;
    //this["@className"] = compname;
    this["@type"] = comptype;
    this["@mode"] = "new";
    this.compType = comptype;
}

function ComponentCachingData(compName, id, baseComp, lastUsed) {
    this.compName = compName;
    this.prevId = id;
    this.baseComp = baseComp;
    this.lastUsed = lastUsed;    
}

function SIMSTaskRelaunchData(key, taskSequence, activeLmsQnId, attemptsLeft) {
    this.key = key;
    this.taskSequence = taskSequence;
    this.activeLmsQnId = activeLmsQnId;
    this.attemptsLeft = attemptsLeft;

    this.parseJson = function (jsonStr) {
        var bSuccess = false, obj;

        try {
            obj = JSON.parse(jsonStr);    //excepted type - SIMSTaskRelaunchData
        }
        catch (err) {
            bSuccess = false;
            return bSuccess;
        }

        if (obj.key && obj.taskSequence && obj.activeLmsQnId && (obj.attemptsLeft!==undefined)) {
            bSuccess = true;

            this.key = obj.key;
            this.taskSequence = obj.taskSequence;
            this.activeLmsQnId = obj.activeLmsQnId;
            this.attemptsLeft = obj.attemptsLeft;
        }

        return bSuccess;
    };
}

function Win10TaskbarAppStruct(CompID, AppName, Title, TaskbarImage, IconPath, DesktopId) {
    this.CompID = CompID || -1;
    this.Title = Title || "";
    this.TaskbarImage = TaskbarImage || { imgPath: "" };
    this.IconPath = IconPath || "";
    this.AppName = AppName || "";
    this.DesktopId = DesktopId || "";
}
'use strict';
namespace("SIMS.Controls");

//Enum for Tab stops in a dialog
SIMS.Controls.EventId = {
    CHECKED: "1",
    KEY_DOWN: "3"
},

//Class Declaration
SIMS.Controls.BaseControl = Base.extend({// instance interface

    //Class Methods

    //Helper
    createControl: function (controlID, controlParams, callbackFuncOwner, callbackFunc) { },

    //Helper
    attachEventHandlers: function ($control, controlID, controlParams, callbackFuncOwner, callbackFunc) { },

    fireEvent: function (callBackFuncOwner, callbackFunction, args) {

        if (callbackFunction != null) {
            return callbackFunction.apply(callBackFuncOwner, args);
        }
    },

    reinitialize: function ($control, controlParams) {
    },

    enable: function ($control, bEnable) {
        //Add enable Status to control's data
        //Should be added to overridden function as well
        $control.data("enableStatus", bEnable);
    },

    //Indicates control is enabled.
    isEnabled: function ($control) {
        var enableStatus = $control.data("enableStatus");
        if (enableStatus === undefined || enableStatus === null) {
            enableStatus = true;
        }
        return enableStatus;
    },

    focalize: function ($control, bFocalise) {
        if (bFocalise == false) {
            $control.blur();
        }
        else {
            $control.focus();
            //To be updated in individual Control's focalize
            this.triggerFocusEvent($control);
        }
    },

    isFocused: function ($control) {
        return $control.is(":focus");
    },

    handleAccessKey: function ($control, data) {

    },

    handleAccessKeyMultiControl: function ($control, data) {
        this.handleAccessKey($control, data);        
    },
    //Interface Method
    //Param: controlID : ID of the control
    //Param: controlParams : The data from which the control will be initialized
    //Param: callbackFuncOwner : The object on which the callback function is to called
    //Param: callbackFunc : The call back function (handler) for control events
    //Returns : The generated control as a jQuery element
    //Desc : generates the control specified by this class
    generateControl: function (controlID, controlParams, callbackFuncOwner, callbackFunc) {
        var $control = this.createControl(controlID, controlParams, callbackFuncOwner, callbackFunc);
        this.attachEventHandlers($control, controlID, controlParams, callbackFuncOwner, callbackFunc);
        this.attachControlData($control, controlID, controlParams, callbackFuncOwner, callbackFunc);
        return $control;
    },

    attachControlData: function ($control, controlID, controlParams, callbackFuncOwner, callbackFunc) {
        var _this = this;

        if ($control != null && $control.length > 0) {
            $control.addClass('sims-control');
            $control.data('type', controlParams.type);
            $control.data('controlName', controlID);


            if (controlParams.type != null && controlParams.type != "") {
                $control.addClass('sims-' + controlParams.type);
            }


            //Adding focus functionality
            if (controlParams.focusable !== false) {
                var tabIndex = controlParams.tabIndex != null ? parseInt(controlParams.tabIndex) : -1;
                $control.attr("tabindex", tabIndex);


                if (controlParams.accesskeys != null && controlParams.accesskeys != "") {
                    $control.data('accesskeys', controlParams.accesskeys);
                }

                //Temp code for testing 
//                 $control.focusin(function () {                    
//                     $control.css("border", "1px solid red");
//                 });

                $control.focus(function () {
                    //Debug code
                    console.log("focus acquired by " + $control.text());
                });

                $control.focusout(function () {
                    //Temp code for testing 
                    //$control.css("border", "none");
                    console.log("focus lost by " + $control.text());
                });
                //Debug code
            }

            //        if (controlID) {
            //            $control.attr('id', controlID);
            //        }
        }
    },

    //Interface Method
    setData: function ($control, controlParams) { },

    //Interface Method
    getData: function ($control) { },

    //Function to register focus gained by the control
    triggerFocusEvent: function ($control) {
        $control.trigger("FOCUS_GAINED", $control);
        return false;
    }
});




'use strict';
//namespace declaration
namespace("SIMS.Controls");

//Class Declaration
SIMS.Controls.Factory = function () { };

SIMS.Controls.Factory.Generators = {};

SIMS.Controls.Factory.$controlList = $();   //Memory fix: SIMS-106375

//Interface Method
//Param: controlID : ID of the control
//Param: controlParams : The data from which the control will be initialized
//Param: callbackFuncOwner : The object on which the callback function is to called
//Param: callbackFunc : The call back function (handler) for control events
//Returns : The generated control as a jQuery element
//Desc : generates the control specified by the data in 'controlParams'
SIMS.Controls.Factory.getControl = function (controlID, controlParams, callbackFuncOwner, callbackFunc) {
    var type = controlParams.type;
    var controlGenerator = this.getGenerator(type);
    if (controlGenerator != null) {
        var $control = controlGenerator.generateControl(controlID, controlParams, callbackFuncOwner, callbackFunc);

        //$controlList will be removed later while unloading task
        SIMS.Controls.Factory.$controlList = SIMS.Controls.Factory.$controlList.add($control);

        return $control;
    }
    else {
        throw "SIMSControlFactory : Control Type empty or null " + type;
    }
};

SIMS.Controls.Factory.getGenerator = function (type) {
    if (type != null && type != "") {

        var controlGenerator = this.Generators[type];
        if (!controlGenerator) {
            if (SIMS.SharedData.AssignmentVersion == SIMS.SharedData.AssignmentVersions.OFFICE2016
                && SIMS.Controls2016 != null
                && SIMS.Controls2016[type] != null) {
                controlGenerator = SIMS.Controls2016[type];
            }
            else {
                controlGenerator = SIMS.Controls[type];
            }
            if (!controlGenerator) {
                throw "SIMSControlFactory : Invalid Control Type " + type;
                return;
            }
            else {
                this.Generators[type] = new controlGenerator();
            }
        }
        return this.Generators[type];
    }
};

/*
Function is called from SIMPlayer during unloading of task
*/
SIMS.Controls.Factory.DisposeControlList = function () {
    SIMS.Controls.Factory.$controlList.remove();    //remove will clear jQuery data and bound events in addition to element itself
    SIMS.Controls.Factory.$controlList = $();

    //Closures in Inner classes of SpinControl cause leakage in Ribbon, so delete SpinControl static utility class
    //This peice of should be removed once proper fix is implemented in the control itself
    delete SIMS.Controls.Factory.Generators["SpinControl"];
}
'use strict';
$.fn.getData = function () {
    var controlType = $(this).data('type');
    return SIMS.Controls.Factory.getGenerator(controlType).getData($(this));
};

$.fn.setData = function (data) {
    var controlType = $(this).data('type');
    return SIMS.Controls.Factory.getGenerator(controlType).setData($(this), data);
};

$.fn.focalize = function (data) {
    var controlType = $(this).data('type');
    return SIMS.Controls.Factory.getGenerator(controlType).focalize($(this), data);
};

$.fn.enable = function (data) {
    var controlType = $(this).data('type');
    return SIMS.Controls.Factory.getGenerator(controlType).enable($(this), data);
}; 

$.fn.reinitialize = function (data) {
    var controlType = $(this).data('type');
    return SIMS.Controls.Factory.getGenerator(controlType).reinitialize($(this), data);
};

$.fn.handleAccessKey = function (data) {
    var controlType = $(this).data('type');
    return SIMS.Controls.Factory.getGenerator(controlType).handleAccessKey($(this), data);
};

$.fn.handleAccessKeyMultiControl = function (data) {
    var controlType = $(this).data('type');
    return SIMS.Controls.Factory.getGenerator(controlType).handleAccessKeyMultiControl($(this), data);
};

$.fn.isFocused = function (data) {
    var controlType = $(this).data('type');
    return SIMS.Controls.Factory.getGenerator(controlType).isFocused($(this));
};

$.fn.isEnabled = function(data) {
    var controlType = $(this).data('type');
    if (controlType != undefined)
        return SIMS.Controls.Factory.getGenerator(controlType).isEnabled($(this));
    else
        return false;
};

$.fn.showTableMarkers = function (data) {
    var controlType = $(this).data('type');
    return SIMS.Controls.Factory.getGenerator(controlType).showTableMarkers($(this), data);
};
'use strict';
namespace("SIMS.Controls");

//Class Declaration
SIMS.Controls.ColorGrid = SIMS.Controls.BaseControl.extend({

    cacheControl: {
        cache: {
            mainBodyCache: {},
            secondLineCache: {}
        },

        cacheHit: false,
        cachableMainBody: false,
        secondLineCacheHit: false
    },
    /*
    Sample JSON :
    Possible Options for
    colorGridType = backgroundColor, patternColor
    For colorGridType - backgroundColor
    controlParams =
    {
    "type":"ColorGrid",
    "colorGridType" : "backgroundColor",
    "application":"word",
    "theme":"OfficeExcel",
    "index" : "1"
    }
    OR
    For colorGridType - patternColor

    Groups names, start and end positions to be specified.
    The biggest group i.e. mainBody by default contains a singleLine and the containers for various color shades

    controlParams =
    {
    "type":"ColorGrid",
    "colorGridType" : "patternColor",
    "application":"word",
    "theme":"Office",
    "patternType":"simplePattern",
    "index" : "0"
    }

    */
    //Creates the Actual Control
    createControl: function (controlID, controlParams, callbackFuncOwner, callbackFunc) {
        var self = this;

        if (controlParams.theme == null || controlParams.theme == "" || controlParams.theme == undefined) {
            controlParams.theme = 'Office';
        }
        
        var $control = $('<div class="sims-ColorGrid" />');

        if (this.cacheControl.cache.mainBodyCache[controlParams.theme]) {
            $control.data('controlid', controlID);
            $control.data('controlType', 'ColorGrid');
            $control.data('callbackFuncOwner', callbackFuncOwner);
            $control.data('callbackFunc', callbackFunc);            
            self.makeControl($control, controlParams);
	    
        }
        else {
            $control.data('controlid', controlID);
            $control.data('controlType', 'ColorGrid');

            self.makeControl($control, controlParams);

            $control.find(".grid-container").remove();

            $control.data('callbackFuncOwner', callbackFuncOwner);
            $control.data('callbackFunc', callbackFunc);
            self.makeControl($control, controlParams);
        }     

        if (controlParams.focalizeOnAccessKey != null && (controlParams.focalizeOnAccessKey === true || controlParams.focalizeOnAccessKey === "true" )) {
            $control.data("focalizeOnAccessKey", true);  // param added to call focalize from HandleAccessKey() // SO-43268
        }
        else {
            $control.data("focalizeOnAccessKey", false);
        }
        

        return $control;
    },

    makeControl: function ($control, controlParams) {
        var self = this;
        //Make Grid Container
        var $gridContainer = UIUtils.getUnselectableGenericElement("ul", "", "grid-container");
        $control.append($gridContainer);
        self.updateControl($control, controlParams);
        return $control;
    },

    makeControlWithRecentColor: function ($control, controlParams) {
        var self = this;
        controlParams.application = $control.data('application');
        controlParams.patternType = $control.data('patternType');
        controlParams.theme = $control.data('theme');
        controlParams.top = $control.data('top');
        controlParams.left = $control.data('left');

        //Find grid-container and remove
        $control.find(".grid-container").remove();

        self.makeControl($control, controlParams);
        self.attachEventHandlers($control, $control.data('controlid'), controlParams, $control.data('callbackFuncOwner'), $control.data('callbackFunc'));
        return $control;
    },

    makeControlOnThemeChange: function ($control, controlParams) {
        var self = this;
        controlParams.application = $control.data('application');
        controlParams.patternType = $control.data('patternType');
        controlParams.top = $control.data('top');
        controlParams.left = $control.data('left');

        //Find grid-container and remove
        $control.find(".grid-container").remove();

        self.makeControl($control, controlParams);
        self.attachEventHandlers($control, $control.data('controlid'), controlParams, $control.data('callbackFuncOwner'), $control.data('callbackFunc'));
        return $control;
    },

    attachEventHandlers: function ($control, controlID, controlParams, callbackFuncOwner, callbackFunc) {
        //return;
        //Local variable required for your controls will be declared here
        var $control = $control;
        var myCallbackData = { controlId: controlID };
        var myCallBackFunc = callbackFunc;
        var myCallbackFuncOwner = callbackFuncOwner;
        var self = this;

        var NumberOfElementsInRecentColor = 0;

        var isRecentClr = false;
        if (controlParams.recentColors !== null && controlParams.recentColors !== "" && controlParams.recentColors !== undefined) {
            NumberOfElementsInRecentColor = controlParams.recentColors.length;
            isRecentClr = true;
        }

        // unbinding the events before binding them again.
        $control.off("click", ".color");
        $control.find(".item, .eyeDropper").unbind('click');
        $control.unbind('keydown');

        if (controlParams.allowEnterandSpaceBar == false || controlParams.allowEnterandSpaceBar == "false") {
            controlParams.allowEnterandSpaceBar = false;
        }
        else {
            controlParams.allowEnterandSpaceBar = true;
        }
        $control.on("click", ".color", function () {
            var selectedColor = $(this).attr('clr');
            var index = $(this).attr('i');

            self.selectColor($control, selectedColor, index);

            if ($control.data('colorGridType') === 'patternColor') {
                myCallbackData.text = $(this).attr('text');
            }
            myCallbackData.selectedColor = selectedColor;
            myCallbackData.index = index;
            myCallbackData.eventID = 1;
            if (myCallBackFunc !== null) {
                //myCallBackFunc.apply(myCallbackFuncOwner, [myCallbackData]);
                self.fireEvent(myCallbackFuncOwner, myCallBackFunc, [controlID, $control, myCallbackData]);
            }
        });

        $control.find(".item, .eyeDropper").click(function (e) {
            //Added code for handling of Multiple Standards theme
            var patternType = $control.data("patternType");
            if (patternType === "ThemeAndMultipleStandardAndMoreColors")
                myCallbackData.index = 131;
            else
                if (patternType === "ThemeMultipleStandardTransparentAndMoreColors") {
                    if ($(this).hasClass("transparentItem")) {
                        myCallbackData.index = 132;
                        myCallbackData.message = "Transparent Clicked";
                        console.log("** 132 Transparent clicked");
                    }
                    else {

                        myCallbackData.index = 131;
                        myCallbackData.message = "More Colors Clicked";
                        console.log("** 131 More Colors clicked");
                    }
                }
                else
                    myCallbackData.index = $(this).attr('i');
            if (patternType !== "ThemeMultipleStandardTransparentAndMoreColors")
                myCallbackData.message = "More Colors Clicked";
            myCallbackData.selectedColor = null;
            myCallbackData.text = null;
            myCallbackData.eventID = 2;
            if (myCallBackFunc !== null) {
                self.fireEvent(myCallbackFuncOwner, myCallBackFunc, [controlID, $control, myCallbackData]);
            }
        });




        var colorGridType = $control.data('colorGridType');
        var currIndex = 1;
        var nextIndex = 2;
        var $focusEle = null;
        var $selectedEle = null;

        if (colorGridType === "backgroundColor") {

            $control.find(".grid-container").hover(function () {

                $control.find(".grid-container").css("background-color", "transparent");
            });

            $control.keydown(function (event) {

                $focusEle = $(document.activeElement);
                currIndex = parseInt($focusEle.attr('i'));

                if (!(currIndex >= 0 && currIndex <= 70)) {
                    currIndex = 0;
                }

                switch (event.which) {
                    case 13:  //ENTER
                    case 32:  //space
                        self.selectColor($control, null, currIndex);
                        $selectedEle = $control.find('.i-' + currIndex);
                        myCallbackData.selectedColor = $selectedEle.attr('clr');
                        myCallbackData.index = $selectedEle.attr('i');
                        //myCallbackData.text = $selectedEle.attr('text');
                        myCallbackData.eventID = 3;  // for enter or spacebar key press
                        if (myCallBackFunc !== null) {
                            self.fireEvent(myCallbackFuncOwner, myCallBackFunc, [controlID, $control, myCallbackData]);
                        }
                        event.preventDefault();
                        event.stopPropagation();
                        break;

                    case 9: //Tab
                        $control.find(".i-" + currIndex).removeClass('clr-focus');
                        break;

                    case 37: //Left Key
                        if (currIndex > 0) {
                            nextIndex = currIndex - 1;
                        }
                        else if (currIndex == 0) {
                            nextIndex = 70;
                        }
                        self.focusChange($control, currIndex, nextIndex);
                        event.preventDefault();
                        event.stopPropagation();
                        break;

                    case 39: //Right Key
                        if (currIndex < 70) {
                            nextIndex = currIndex + 1;
                        }
                        else if (currIndex == 70) {
                            nextIndex = 0;
                        }
                        self.focusChange($control, currIndex, nextIndex);
                        event.preventDefault();
                        event.stopPropagation();
                        break;

                    case 38: //Up Key
                        if ((currIndex > 0 && currIndex <= 10) || (currIndex > 60 && currIndex <= 70)) {
                            nextIndex = currIndex - 1;
                        }
                        else if ((currIndex > 20 && currIndex <= 60) || currIndex == 11) {
                            nextIndex = currIndex - 10;
                        }
                        else if (currIndex > 11 && currIndex <= 20) {
                            nextIndex = currIndex + 39;
                        }
                        else if (currIndex == 0) {
                            nextIndex = 61;
                        }
                        self.focusChange($control, currIndex, nextIndex);
                        event.preventDefault();
                        event.stopPropagation();
                        break;

                    case 40:  //Down Key
                        if ((currIndex >= 0 && currIndex < 10) || (currIndex > 60 && currIndex < 70)) {
                            nextIndex = currIndex + 1;
                        }
                        else if ((currIndex > 10 && currIndex <= 50) || currIndex == 60 || currIndex == 10) {
                            nextIndex = currIndex + 10;
                        }
                        else if (currIndex >= 51 && currIndex < 60) {
                            nextIndex = currIndex - 39;
                        }
                        else if (currIndex == 70) {
                            nextIndex = 0;
                        }
                        self.focusChange($control, currIndex, nextIndex);
                        event.preventDefault();
                        event.stopPropagation();
                        break;
                    default:
                        break;
                }
            });
        }

        else if (colorGridType === "patternColor") {
            //Added code for handling of Multiple Standards theme
            $control.keydown(function (event) {

                var patternType = $control.data("patternType");
                $focusEle = $(document.activeElement);
                currIndex = parseInt($focusEle.attr('i'));

                if ($focusEle.hasClass('sims-ColorGrid')) {
                    var groups = $control.data('groups');
                    if (groups[groups.length - 1].type == 'mainBody') {
                        if (patternType == "ThemeAndMultipleStandard")
                            currIndex = 130;
                        else
                            currIndex = 70;
                        if (isRecentClr) {
                            currIndex += NumberOfElementsInRecentColor;
                        }
                    }
                    else {

                        currIndex = groups[groups.length - 1].index;
                    }
                }

                else
                    if (patternType === "ThemeAndMultipleStandardAndMoreColors") {
                        if (!(currIndex >= 0 && currIndex <= 131)) {
                            currIndex = 1;
                        }
                    }
                    else if (patternType === "ThemeMultipleStandardTransparentAndMoreColors") {
                        if (!(currIndex >= 0 && currIndex <= 132)) {
                            currIndex = 1;
                        }
                    }
                    else if (patternType == "ThemeAndMultipleStandard") {
                        if (!(currIndex >= 0 && currIndex <= 130)) {
                            currIndex = 1;
                        }
                    }
                    else if (patternType === "ColorsAndMoreColorAndEyeDropper") {
                        if (!((currIndex >= 0 && currIndex <= 71) || currIndex === 100 || currIndex === 101)) {
                            currIndex = 1;
                        }
                    }
                    else {
                        var finalIndex = 71;
                        if (isRecentClr) {
                            finalIndex += NumberOfElementsInRecentColor;
                        }
                        if (!((currIndex >= 0 && currIndex <= finalIndex) || currIndex === 100)) {
                            currIndex = 1;
                        }
                    }

                switch (event.which) {
                    case 13:  //ENTER
                    case 32:  //space

                        if (currIndex == 131 && (patternType === "ThemeAndMultipleStandardAndMoreColors" || patternType === "ThemeMultipleStandardTransparentAndMoreColors")) {
                            myCallbackData.index = 131;
                            myCallbackData.message = "More Colors Clicked";
                            myCallbackData.selectedColor = null;
                            myCallbackData.text = null;
                        }
                        else if (currIndex == 132 && patternType === "ThemeMultipleStandardTransparentAndMoreColors") {
                            myCallbackData.index = 132;
                            myCallbackData.message = "Transparent Clicked";
                            myCallbackData.selectedColor = null;
                            myCallbackData.text = null;
                        }
                        else {
                            if (currIndex == 100 && patternType !== "ThemeAndMultipleStandardAndMoreColors" && patternType !== "ThemeMultipleStandardTransparentAndMoreColors") {

                                myCallbackData.index = 100;
                                myCallbackData.message = "More Colors Clicked";
                                myCallbackData.selectedColor = null;
                                myCallbackData.text = null;
                            }
                            else {
                                self.selectColor($control, null, currIndex);
                                $selectedEle = $control.find('.i-' + currIndex);
                                myCallbackData.selectedColor = $selectedEle.attr('clr');
                                myCallbackData.index = $selectedEle.attr('i');
                                myCallbackData.text = $selectedEle.attr('text');
                                myCallbackData.eventID = 3; // for enter or spacebar key press
                            }
                        }

                        if (myCallBackFunc !== null) {
                            $focusEle.blur();
                            self.fireEvent(myCallbackFuncOwner, myCallBackFunc, [controlID, $control, myCallbackData]);
                        }
                        if (controlParams.allowEnterandSpaceBar !== false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        break;

                    case 9: //Tab
                        if (event.shiftKey) {
                            var lastIndex = 70;
                            if (patternType === "ThemeAndMultipleStandardAndMoreColors" || patternType === "ThemeMultipleStandardTransparentAndMoreColors" || patternType === "ThemeAndMultipleStandard")
                                lastIndex = 130;
                            if (isRecentClr) {
                                lastIndex += NumberOfElementsInRecentColor;
                            }
                            if (currIndex >= 2 && currIndex <= lastIndex) {
                                nextIndex = currIndex - 1;
                            }
                            else {
                                nextIndex = self.findNextIndex($control, currIndex, 'SHIFT+TAB', isRecentClr);
                            }

                        }
                        else {
                            var lastIndex = 69;
                            if (patternType === "ThemeAndMultipleStandardAndMoreColors" || patternType === "ThemeMultipleStandardTransparentAndMoreColors" || patternType === "ThemeAndMultipleStandard")
                                lastIndex = 129;
                            if (isRecentClr) {
                                lastIndex += NumberOfElementsInRecentColor;
                            }
                            if (currIndex >= 1 && currIndex <= lastIndex) {
                                nextIndex = currIndex + 1;
                            }
                            else {
                                if($control.data('preventCircularTabAndDown')) {
                                    nextIndex = null;
                                }
                                else {
                                   nextIndex = self.findNextIndex($control, currIndex, 'TAB', isRecentClr);
                                }  
                            }
                        }


                        if (nextIndex != null) {
                            self.focusChange($control, currIndex, nextIndex)
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        else {
                            if($control.data('preventCircularTabAndDown')) {
                                $control.closest('.SIMSGenericContextUsed').focus();
                            }
                            else {
                               $focusEle.blur();
                            }
                            $control.find('.i-' + currIndex).removeClass('clr-focus');
                            $($control).parent().data("goToNext", true);
                        }

                        break;

                    case 37: //Left Key
                        var moveIndex = 100;
                        var lastIndex = 71;
                        var moveIndexNew = NaN;
                        if (patternType === "ThemeAndMultipleStandardAndMoreColors" || patternType === "ThemeAndMultipleStandard") {
                            moveIndex = 131;
                            lastIndex = 0;
                        }
                        else if (patternType === "ThemeMultipleStandardTransparentAndMoreColors") {
                            moveIndex = 131;
                            lastIndex = 0;
                            moveIndexNew = 132;
                        }
                        if (isRecentClr) {
                            lastIndex += NumberOfElementsInRecentColor;
                        }
                        if (currIndex === moveIndex || currIndex === 0 || currIndex === lastIndex || currIndex === moveIndexNew) {
                            nextIndex = currIndex;
                        }
                        else if ((currIndex >= 71 && currIndex <= nextIndex) && (isRecentClr)) {
                            if (currIndex % (currIndex % NumberOfElementsInRecentColor) === 1) {
                                nextIndex = currIndex + NumberOfElementsInRecentColor - 1;
                            }
                            else {
                                nextIndex = currIndex - 1;
                            }

                        }
                        else if (currIndex % 10 === 1) {
                            nextIndex = currIndex + 9;
                        }
                        else {
                            nextIndex = currIndex - 1;
                        }
                        self.focusChange($control, currIndex, nextIndex);
                        event.preventDefault();
                        event.stopPropagation();
                        break;

                    case 39: //Right Key
                        var moveIndex = 100;
                        var lastIndex = 71;
                        var moveIndexNew = NaN;
                        if (patternType === "ThemeAndMultipleStandardAndMoreColors" || patternType === "ThemeAndMultipleStandard") {
                            moveIndex = 131;
                            lastIndex = 0;
                        }
                        else if (patternType === "ThemeMultipleStandardTransparentAndMoreColors") {
                            moveIndex = 131;
                            lastIndex = 0;
                            moveIndexNew = 132;
                        }
                        if (isRecentClr) {
                            lastIndex += NumberOfElementsInRecentColor;
                        }
                        if (currIndex === moveIndex || currIndex === 0 || currIndex === lastIndex || currIndex === moveIndexNew) {
                            nextIndex = currIndex;
                        }
                        else if ((currIndex >= 71 && currIndex <= nextIndex) && (isRecentClr)) {
                            if (currIndex % (currIndex % NumberOfElementsInRecentColor) !== 0) {
                                nextIndex = currIndex + 1;
                            }
                            else {
                                nextIndex = currIndex - NumberOfElementsInRecentColor + 1;
                            }
                        }
                        else if (currIndex % 10 !== 0) {
                            nextIndex = currIndex + 1;
                        }
                        else if (currIndex / 10 > 0 && currIndex !== moveIndex) {
                            nextIndex = currIndex - 9;
                        }
                        self.focusChange($control, currIndex, nextIndex);
                        event.preventDefault();
                        event.stopPropagation();
                        break;

                    case 38: //Up Key
                        var moveIndex = 100;
                        var lastColorIndex = 71;
                        var lastIndex = 71;
                        var moveIndexNew = NaN;
                        if (patternType === "ThemeAndMultipleStandardAndMoreColors" || patternType === "ThemeAndMultipleStandard") {
                            moveIndex = 131;
                            lastColorIndex = 131;
                            lastIndex = 0;
                        }
                        else if (patternType === "ThemeMultipleStandardTransparentAndMoreColors") {
                            moveIndex = 131;
                            lastColorIndex = 132;
                            lastIndex = 0;
                            moveIndexNew = 132;
                        }
                        if (patternType === "ColorsAndMoreColorAndEyeDropper") {
                            moveIndexNew = 101;
                        }
                        if (isRecentClr) {
                            lastColorIndex += NumberOfElementsInRecentColor;
                        }
                        if (currIndex > 10 && currIndex < lastColorIndex) {
                            nextIndex = currIndex - 10;
                        }
                        else if ((currIndex >= 1 && currIndex <= 10) || currIndex === 0 || currIndex === lastIndex || currIndex === moveIndex || currIndex == moveIndexNew) {
                            nextIndex = self.findNextIndex($control, currIndex, 'UP', isRecentClr);
                        }
                        if (nextIndex != null) {
                            self.focusChange($control, currIndex, nextIndex);
                            event.preventDefault();
                            event.stopPropagation();

                        }
                        else {
                            $focusEle.blur();
                            $control.find('.i-' + currIndex).removeClass('clr-focus');
                            $($control).parent().data("goToNext", true);
                        }
                        break;

                    case 40:  //Down Key

                        var moveIndex = 100;
                        var lastColorIndex = 71;
                        var lastIndex = 60;
                        var lastRowStartIndex = 61;
                        var lastRowEndIndex = 70;
                        var moveIndexNew = NaN;
                        if (patternType === "ThemeAndMultipleStandardAndMoreColors" || patternType === "ThemeAndMultipleStandard") {
                            moveIndex = 131;
                            lastColorIndex = 131;
                            lastIndex = 120;
                            lastRowStartIndex = 121;
                            lastRowEndIndex = 130;
                        }
                        if (patternType === "ThemeMultipleStandardTransparentAndMoreColors") {
                            moveIndex = 131;
                            lastColorIndex = 132;
                            lastIndex = 120;
                            lastRowStartIndex = 121;
                            lastRowEndIndex = 130;
                            moveIndexNew = 132;
                        }
                        if (patternType === "ColorsAndMoreColorAndEyeDropper") {
                            moveIndexNew = 101;
                        }

                        if (isRecentClr) {
                            lastRowEndIndex += NumberOfElementsInRecentColor;
                            lastColorIndex += NumberOfElementsInRecentColor;
                            lastIndex = 60 + NumberOfElementsInRecentColor;
                        }

                        if (currIndex >= 1 && currIndex <= lastIndex) {
                            nextIndex = currIndex + 10;
                        }
                        else if ((currIndex >= lastRowStartIndex && currIndex <= lastRowEndIndex) || currIndex === moveIndex || currIndex === 0 || currIndex == lastColorIndex || currIndex === moveIndexNew) {
                            if($control.data('preventCircularTabAndDown')) {
                                nextIndex = null;
                            }
                            else {
                                nextIndex = self.findNextIndex($control, currIndex, 'DOWN', isRecentClr);
                            }
                            
                        }
                        console.log("next index is DOWN::" + nextIndex);
                        if (nextIndex != null) {
                            self.focusChange($control, currIndex, nextIndex);
                            event.preventDefault();
                            event.stopPropagation();

                        }
                        else {
                            if($control.data('preventCircularTabAndDown')) {
                                $control.closest('.SIMSGenericContextUsed').focus();
                            }
                            else {
                               $focusEle.blur();
                            }
                            $control.find('.i-' + currIndex).removeClass('clr-focus');
                            $($control).parent().data("goToNext", true);
                        }

                        break;

                    case 77:  //M Key for More Options   
                        if (patternType !== "ThemeAndMultipleStandardAndMoreColors" && patternType !== "ThemeMultipleStandardTransparentAndMoreColors")
                            myCallbackData.index = 100;
                        else
                            myCallbackData.index = 131;
                        myCallbackData.selectedColor = null;
                        myCallbackData.message = "More Colors Clicked";
                        myCallbackData.selectedColor = null;
                        myCallbackData.text = null;
                        myCallbackData.eventID = 2;

                        if (myCallBackFunc !== null) {
                            $focusEle.blur();
                            self.fireEvent(myCallbackFuncOwner, myCallBackFunc, [controlID, $control, myCallbackData]);
                        }
                        event.preventDefault();
                        event.stopPropagation();
                        break;
                    case 84:  //T Key for transparent
                        if (patternType === "ThemeMultipleStandardTransparentAndMoreColors") {

                            myCallbackData.index = 132;
                            myCallbackData.selectedColor = null;
                            myCallbackData.message = "Transparent Clicked";
                            myCallbackData.selectedColor = null;
                            myCallbackData.text = null;
                            myCallbackData.eventID = 2;

                            if (myCallBackFunc !== null) {
                                $focusEle.blur();
                                self.fireEvent(myCallbackFuncOwner, myCallBackFunc, [controlID, $control, myCallbackData]);
                            }
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        break;

                    default:
                        break;
                }
            });
        }
    },

    focusChange: function ($control, currIndex, nextIndex) {
        var selectedString = '.i-' + nextIndex;
        $control.find(':not(' + selectedString + ')').removeClass('clr-focus');
        $control.find('.i-' + nextIndex).addClass('clr-focus').focus();
    },

    findNextIndex: function ($control, currIndex, keyPressed, isRecentClr) {
        var groups = $control.data('groups');
        var groupsLength = groups.length;
        var type = 'mainBody';
        var patternType = $control.data("patternType");
        var nextIndex = currIndex;

        //to check if its required to navigate to next item in ribbon
        if ($($control).parent().siblings().length == 0 || ($($control).parent().is(".ribbon .dropdown-item") == false)) {
            switch (currIndex) {
                case 0:
                    type = 'single0';
                    break;
                case 71:
                    if (patternType !== "ThemeAndMultipleStandardAndMoreColors" && patternType !== "ThemeMultipleStandardTransparentAndMoreColors" && patternType !== "ThemeAndMultipleStandard") {
                        if (!isRecentClr) {
                            type = 'single71';
                        }
                    }
                    break;
                case 100:
                    type = 'item';
                    break;

                case 101:
                    type = 'eyeDropper';
                    break;

                case 131:
                    type = 'multipleStandardItem';
                    break;
                case 132:
                    type = 'transparentItem';
                    break;

                default:
                    type = 'mainBody';
                    break;
            }

            var i = 0;
            var currGroup = 0;
            var nextGroup = 0;
            for (i = 0; i < groupsLength; i++) {
                if (groups[i]['type'] == type) {
                    currGroup = i;
                }
            }
            var move = 'PREV';
            if (keyPressed == 'UP' || keyPressed == 'SHIFT+TAB') {
                move = 'PREV';
            }
            else if (keyPressed == 'DOWN' || keyPressed == 'TAB') {
                move = 'NEXT';
            }

            //To determine the next active group
            if (move == 'PREV') {
                if (currGroup > 0) {
                    nextGroup = currGroup - 1;
                }
                else {
                    nextGroup = groupsLength - 1;
                }
            }
            else if (move == 'NEXT') {
                if (currGroup < (groupsLength - 1)) {
                    nextGroup = currGroup + 1;
                }
                else {
                    nextGroup = 0;
                }
            }

            //To determine the next active Index
            var currType = groups[nextGroup].type;

            if (currType == 'mainBody') {
                switch (keyPressed) {
                    case 'UP':
                        if (patternType !== "ThemeAndMultipleStandardAndMoreColors" && patternType !== "ThemeMultipleStandardTransparentAndMoreColors" && patternType !== "ThemeAndMultipleStandard") {
                            nextIndex = 66;

                            if (isRecentClr) {
                                for (i = 0; i < groupsLength; i++) {
                                    if (groups[i]['type'] == 'mainBody') {
                                        if (70 != groups[i].end) {
                                            nextIndex = groups[i].end;
                                        }
                                    }
                                }
                            }
                        }
                        else
                            nextIndex = 126;
                        break;
                    case 'DOWN':
                        nextIndex = 6;
                        break;
                    case 'TAB':
                        nextIndex = 1;
                        break;
                    case 'SHIFT+TAB':
                        if (patternType !== "ThemeAndMultipleStandardAndMoreColors" && patternType !== "ThemeMultipleStandardTransparentAndMoreColors" && patternType !== "ThemeAndMultipleStandard") {
                            nextIndex = 70;
                            if (isRecentClr) {
                                for (i = 0; i < groupsLength; i++) {
                                    if (groups[i]['type'] == 'mainBody') {
                                        if (70 != groups[i].end) {
                                            nextIndex = groups[i].end;
                                        }
                                    }
                                }
                            }
                        }
                        else
                            nextIndex = 130;
                        break;
                    default:
                        break;
                }
            }

            else {
                nextIndex = groups[nextGroup].index;
            }
            return nextIndex;
        }

        else {
            return null;

        }



    },

    //Interface Method
    //Sets the Data
    setData: function ($control, controlParams) {
        var self = this;
        if (controlParams.index !== null && controlParams.index !== "" && controlParams.index !== undefined) {
            if ($control.find('i-' + controlParams.index) !== null) {
                self.selectColor($control, null, controlParams.index);
            }
        }

        else if (controlParams.selectedColor !== null && controlParams.selectedColor !== "" && controlParams.selectedColor !== undefined) {
            if ($control.find('.c-' + controlParams.selectedColor) !== null) {
                self.selectColor($control, controlParams.selectedColor, null);
            }
        }
        if (controlParams.application !== null && controlParams.application !== "" && controlParams.application !== undefined) {
            $control.data({ 'application': controlParams.application });
            $control.find('.grid-container').addClass(controlParams.application);
        }
        else {
            $control.data({ 'application': 'word' });
            $control.find('.grid-container').addClass('word');
        }
        if (controlParams.patternType !== null && controlParams.patternType !== "" && controlParams.patternType !== undefined) {
            $control.data({ 'patternType': controlParams.patternType });
            self.makeControlOnThemeChange($control, controlParams);

        }

        if (controlParams.theme !== null && controlParams.theme !== "" && controlParams.theme !== undefined) {
            var newTheme = controlParams.theme;
            var existingTheme = $control.data('theme');
            if (newTheme !== existingTheme) {

                if (controlParams.colorGridType == "backgroundColor") {
                    var newControlParams = { 'theme': newTheme, 'colorGridType': 'backgroundColor' };
                    self.makeControlOnThemeChange($control, controlParams);
                }
                else {
                    var newControlParams = { 'theme': newTheme, 'colorGridType': 'patternColor' };
                    self.makeControlOnThemeChange($control, controlParams);
                }
            }
        }

        if (controlParams.dropDownTop !== null && controlParams.dropDownTop !== "" && controlParams.dropDownTop !== undefined) {
            var top = controlParams.dropDownTop + 'px';
            $control.data("top", top);
            $control.css("top", top);
        }
        else {
            //We are not doing anything..
        }

        //<<<<<<<<<<<<<<For Recent Colors>>>>>>>>>>//
        if (controlParams.recentColors !== null && controlParams.recentColors !== "" && controlParams.recentColors !== undefined) {
            self.makeControlWithRecentColor($control, controlParams);
            //<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>//
        }
        //Set Control left
        if (controlParams.dropDownLeft !== null && controlParams.dropDownLeft !== "" && controlParams.dropDownLeft !== undefined) {
            var left = controlParams.dropDownLeft + 'px';
            $control.data("left", left);
            $control.css("left", left);
        }
        else {
            //We are not doing anything..
        }
    },

    updateControl: function ($control, controlParams) {

        var $mainBodyHeader = null;
        var $colorLine1 = null;
        var $colorGroupContainer = null;
        var $standardColorHeader = null;
        var $colorGroup2 = null;

        var self = this;
        var i = 0;

        var $gridContainer = $control.find('.grid-container');


        if (controlParams.colorGridType !== null && controlParams.colorGridType !== "" && controlParams.colorGridType !== undefined) {
            $control.data({ 'colorGridType': controlParams.colorGridType });
            $control.find('.grid-container').addClass(controlParams.colorGridType);
        }
        else {
            $control.data({ 'colorGridType': 'patternColor' });
            $control.find('.grid-container').addClass('patternColor');
        }
        var colorGridType = $control.data('colorGridType');

        //Set Control Top
        if (controlParams.dropDownTop !== null && controlParams.dropDownTop !== "" && controlParams.dropDownTop !== undefined) {
            var top = controlParams.dropDownTop + 'px';
            $control.data("top", top);
            $control.css("top", top);
        }
        else {
            //We are not doing anything..
        }

        //Set Control left
        if (controlParams.dropDownLeft !== null && controlParams.dropDownLeft !== "" && controlParams.dropDownLeft !== undefined) {
            var left = controlParams.dropDownLeft + 'px';
            $control.data("left", left);
            $control.css("left", left);
        }
        else {
            //We are not doing anything..
        }


        if (controlParams.application !== null && controlParams.application !== "" && controlParams.application !== undefined) {
            $control.data({ 'application': controlParams.application });
            $control.find('.grid-container').addClass(controlParams.application);
        }
        else {
            $control.data({ 'application': 'word' });
            $control.find('.grid-container').addClass('word');
        }

        if (controlParams.focalizefirstcolor && controlParams.focalizefirstcolor == "true") {
            $control.data({ 'focalizefirstcolor': controlParams.focalizefirstcolor });
        }
        else {
            $control.data({ 'focalizefirstcolor': undefined });
        }

        if (controlParams.theme !== null && controlParams.theme !== "" && controlParams.theme !== undefined) {
            $control.data({ 'theme': controlParams.theme });
        }
        else {
            $control.data({ 'theme': 'Office' });
        }

        if (controlParams.preventCircularTabAndDown && controlParams.preventCircularTabAndDown == "true") {
            $control.data({ 'preventCircularTabAndDown': true });
        }
        else {
            $control.data({ 'preventCircularTabAndDown': false });
        }

        var theme = $control.data('theme');

        if (colorGridType === 'patternColor') {
            if (controlParams.patternType !== null && controlParams.patternType !== "" && controlParams.patternType !== undefined) {
                $control.data({ 'patternType': controlParams.patternType });
            }
            else {
                $control.data({ 'patternType': 'simplePattern' });
            }
        }
        var patternType = $control.data('patternType');

        // To Get colors from ColorGridInputList.js

        var colorsLength = ColorGridInputList.length;
        var colors = null;
        for (i = 0; i < colorsLength; i = i + 1) {
            if (ColorGridInputList[i].colorGridType === colorGridType && ColorGridInputList[i].theme === theme) {
                colors = ColorGridInputList[i].colors;
            }
        }

        //Generation Code for the Grid
        if (colors !== null && colors !== undefined) {
            var length = colors.length;
            var $colorEle = null;
            //Start and End Indices for patternColor Type
            var start = 0;
            var end = 70;


            //Color Generations for backgroundColor Type
            if (colorGridType === 'backgroundColor') {
                for (i = 0; i < length; i++) {
                    //To Add Separators
                    if (i === 11 || i === 61) {
                        var $separator = UIUtils.getUnselectableDiv("", "separator");
                        $gridContainer.append($separator);
                    }
                    //Call to construct color
                    $gridContainer.append(self.AddColor(colors[i]));

                    //Margin adjustments for positioning
                    if (i % 10 === 1) {
                        $control.find('.grid-container').find('.i-' + i).addClass('margin-left-2');
                    }
                }
            }

            else if (colorGridType === 'patternColor') {
                var groups = null;

                switch (patternType) {
                    case 'simplePattern':
                        var endVal = 70;
                        if (controlParams.recentColors !== null && controlParams.recentColors !== "" && controlParams.recentColors !== undefined) {
                            endVal += controlParams.recentColors.length;
                        }
                        groups = [{ "type": "single0", "index": 0 },
                                  { "type": "mainBody", "text": "Theme Colors", "start": 1, "end": endVal },
                                  { "type": "item", "text": "More Colors...", "index": 100 }
                                 ];
                        break;
                    case 'onlyColors':
                        groups = [{ "type": "mainBody", "text": "Theme Colors", "start": 1, "end": 70}];
                        start = 1;
                        break;
                    case 'AutomaticAndColors':
                        groups = [{ "type": "single0", "index": 0 },
                                    { "type": "mainBody", "text": "Theme Colors", "start": 1, "end": 70}];
                        break;
                    case 'ColorsAndMoreColors':
                        groups = [{ "type": "mainBody", "text": "Theme Colors", "start": 1, "end": 70 },
                                    { "type": "item", "text": "More Colors...", "index": 100}];
                        start = 1;
                        break;
                    case 'ColorsAndNoFill':
                        groups = [{ "type": "mainBody", "text": "Theme Colors", "start": 1, "end": 70 },
                                    { "type": "single71", "index": 71}];
                        start = 1;
                        end = 71;
                        break;
                    case 'AutomaticAndColorsAndNoFill':
                        groups = [{ "type": "single0", "index": 0 },
                                    { "type": "mainBody", "text": "Theme Colors", "start": 1, "end": 70 },
                                    { "type": "single71", "index": 71}];
                        end = 71;
                        break;
                    case 'ColorsAndNoOutline':
                        groups = [{ "type": "mainBody", "text": "Theme Colors", "start": 1, "end": 70 },
                                { "type": "single71", "index": 71}];
                        start = 1;
                        end = 71;
                        break;
                    case 'AutomaticAndColorsAndNoOutline':
                        groups = [{ "type": "single0", "index": 0 },
                                 { "type": "mainBody", "text": "Theme Colors", "start": 1, "end": 70 },
                                { "type": "single71", "index": 71}];
                        end = 71;
                        break;
                    case 'ColorsAndAutomatic':
                        groups = [{ "type": "mainBody", "text": "Theme Colors", "start": 1, "end": 70 },
                                    { "type": "single0", "index": 0}];
                        break;
                    case 'ColorsAndAutomaticAndMoreColors':
                        groups = [{ "type": "mainBody", "text": "Theme Colors", "start": 1, "end": 70 },
                                    { "type": "single0", "index": 0 },
                                    { "type": "item", "text": "More Colors...", "index": 100}];
                        break;
                    case 'ColorsAndNoColor':
                        groups = [{ "type": "mainBody", "text": "Theme Colors", "start": 1, "end": 70 },
                                    { "type": "single71", "index": 71}];
                        start = 1;
                        end = 71;
                        break;
                    case 'ColorsAndNoColorAndMoreColors':
                        groups = [{ "type": "mainBody", "text": "Theme Colors", "start": 1, "end": 70 },
                                    { "type": "single71", "index": 71 },
                                    { "type": "item", "text": "More Colors...", "index": 100}];
                        start = 1;
                        end = 71;
                        break;
                    case 'ColorsAndNoFillAndMoreColors':
                        groups = [{ "type": "mainBody", "text": "Theme Colors", "start": 1, "end": 70 },
                                    { "type": "single71", "index": 71 },
                                    { "type": "item", "text": "More Colors...", "index": 100}];
                        start = 1;
                        end = 71;
                        break;
                    case 'ColorsAndMoreColorAndEyeDropper':
                        groups = [{ "type": "mainBody", "text": "Theme Colors", "start": 1, "end": 70 },
                                   { "type": "item", "text": "More Colors...", "index": 100 },
                                    { "type": "eyeDropper", "text": "Eyedropper", "index": 101}];
                        start = 1;
                        end = 71;
                        break;
                    case 'ThemeAndMultipleStandardAndMoreColors':

                        groups = [{ "type": "single0", "index": 0 },
                            { "type": "mainBody", "text": "Theme Colors", "start": 1, "end": 130 },
                            { "type": "multipleStandardItem", "text": "More Colors...", "index": 131 }

                        ];
                        start = 0;
                        end = 130;
                        break;
                    case 'MultipleStandardAndMoreColors':
                        groups = [{ "type": "single0", "index": 0 },
                                  { "type": "mainBody", "text": "Theme Colors", "start": 1, "end": 70 },
                                  { "type": "item", "text": "More Colors...", "index": 100 }
                                 ];
                        start = 0;
                        end = 71;
                        break;
                    case 'ThemeMultipleStandardTransparentAndMoreColors':

                        groups = [{ "type": "single0", "index": 0 },
                            { "type": "mainBody", "text": "Theme Colors", "start": 1, "end": 130 },
                            { "type": "transparentItem", "text": "Transparent", "index": 132 },
                            { "type": "multipleStandardItem", "text": "More Colors...", "index": 131 }


                        ];
                        start = 0;
                        end = 130;
                        break;
                    case 'ThemeAndMultipleStandard':

                        groups = [{ "type": "single0", "index": 0 },
                            { "type": "mainBody", "text": "Theme Colors", "start": 1, "end": 130 }


                        ];
                        start = 0;
                        end = 130;
                        break;
                }
                $control.data('groups', groups);

                var groupLength = groups.length;

                var j = 0, k = 0;

                for (j = 0; j < groups.length; j++) {
                    //first list item //optional
                    if (groups[j].type === "single0") {
                        $gridContainer.append(UIUtils.getUnselectableGenericElement("div", "", "single single0"));
                    }

                    //last list item //optional
                    if (groups[j].type === "single71") {
                        $gridContainer.append(UIUtils.getUnselectableGenericElement("div", "", "single single71"));
                    }

                    if (groups[j].type === "mainBody") {

                        if (patternType != "MultipleStandardAndMoreColors") {

                            if (this.cacheControl.cache.mainBodyCache[$control.data('theme')]) {
                                for (var nds = 0; nds < this.cacheControl.cache.mainBodyCache[$control.data('theme')].length; nds++) {
                                    $gridContainer.append(this.cacheControl.cache.mainBodyCache[$control.data('theme')][nds].clone());
                                }

                                if (this.cacheControl.cache.secondLineCache[$control.data('theme')][patternType]) {
                                    $gridContainer.append(this.cacheControl.cache.secondLineCache[$control.data('theme')][patternType].clone());
                                    this.cacheControl.secondLineCacheHit = true;
                                }
                                else {
                                    $colorGroup2 = UIUtils.getUnselectableGenericElement("div", "", "singleLine line2");
                                    $gridContainer.append($colorGroup2);

                                    if (start <= 61 && end >= 70) {
                                        for (var i = 61; i <= 70; i++) {
                                            $colorEle = self.AddColorNTooltip(patternType, colors[i]);
                                            $gridContainer.find('.line2').append($colorEle);
                                        }
                                    }

                                    if (patternType == "ThemeAndMultipleStandardAndMoreColors" || patternType == "ThemeMultipleStandardTransparentAndMoreColors" || patternType == "ThemeAndMultipleStandard") {
                                        for (var i = 71; i <= end; i++) {
                                            $colorEle = self.AddColorNTooltip(patternType, colors[i]);
                                            $gridContainer.find('.line2').append($colorEle);
                                        }
                                    }

                                    this.cacheControl.secondLineCacheHit = false;
                                }

                                this.cacheControl.cacheHit = true;
                                this.cacheControl.cachableMainBody = false; //dont cache body... already cached.
                            }
                            else {

                                //refs.
                                $mainBodyHeader = UIUtils.getUnselectableGenericElement("div", "", "header").text('Theme Colors');
                                $colorLine1 = UIUtils.getUnselectableGenericElement("div", "", "singleLine line1");
                                $colorGroupContainer = UIUtils.getUnselectableGenericElement("div", "", "colorContainer");
                                $standardColorHeader = UIUtils.getUnselectableGenericElement("div", "", "header").text('Standard Colors');
                                $colorGroup2 = UIUtils.getUnselectableGenericElement("div", "", "singleLine line2");


                                for (k = 1; k <= 10; k++) {
                                    var classNames = "container container-" + k;
                                    $colorGroupContainer.append(UIUtils.getUnselectableGenericElement("div", "", classNames));
                                }

                                $gridContainer.append($mainBodyHeader)
                                            .append($colorLine1)
                                            .append($colorGroupContainer)
                                            .append($standardColorHeader)
                                            .append($colorGroup2);

                                this.cacheControl.secondLineCacheHit = false;
                                this.cacheControl.cacheHit = false;
                                this.cacheControl.cachableMainBody = true; //cache body
                            }

                        }
                        else {
                            //refs.
                            // for  MultipleStandardAndMoreColors
                            $mainBodyHeader = UIUtils.getUnselectableGenericElement("div", "", "header").text('Standard Colors');
                            $colorLine1 = UIUtils.getUnselectableGenericElement("div", "", "singleLine line1");
                            $colorGroupContainer = UIUtils.getUnselectableGenericElement("div", "", "colorContainer");
                            $colorGroup2 = UIUtils.getUnselectableGenericElement("div", "", "singleLine line2");

                            for (k = 1; k <= 10; k++) {
                                var classNames = "container container-" + k;
                                $colorGroupContainer.append(UIUtils.getUnselectableGenericElement("div", "", classNames));
                            }

                            $gridContainer.append($mainBodyHeader)
                                        .append($colorLine1)
                                        .append($colorGroupContainer)
                                        .append($colorGroup2);

                            this.cacheControl.secondLineCacheHit = false;
                            this.cacheControl.cacheHit = false;
                            this.cacheControl.cachableMainBody = false; //dont cache body


                        }

                        //<<<<<<<<<<<<<<<Creating Recent Colors>>>>>>>>>>>>>>>>>>>>>>//
                        if (controlParams.recentColors !== null && controlParams.recentColors !== "" && controlParams.recentColors !== undefined) {
                            $gridContainer.append(UIUtils.getUnselectableGenericElement("div", "", "header").text('Recent Colors'));

                            var $recentClrDiv = UIUtils.getUnselectableGenericElement("div", "", "singleLine recentClrDiv");
                            $gridContainer.append($recentClrDiv);

                            var RecentColor = controlParams.recentColors;
                            for (i = 0; i < RecentColor.length; i++) {
                                var $MoreCol = self.AddColorNTooltip(patternType, RecentColor[i], true);
                                $recentClrDiv.append($MoreCol);
                            }
                        }
                        //<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

                    }

                    //list item type
                    if (groups[j].type === "item") {

                        $gridContainer.append(UIUtils.getUnselectableGenericElement("div", "", "item i-100").attr("tabindex", "0").attr('i', '100').text(groups[j].text));

                    }

                    //list item type
                    if (groups[j].type === "eyeDropper") {
                        $gridContainer.append(UIUtils.getUnselectableGenericElement("div", "", "eyeDropper i-101").attr("tabindex", "0").attr('i', '101').text(groups[j].text));
                    }



                    if (groups[j].type === "multipleStandardItem") {
                        $gridContainer.append(UIUtils.getUnselectableGenericElement("div", "", "item i-131").attr("tabindex", "0").attr('i', '131').text(groups[j].text));
                    }

                    if (groups[j].type === "transparentItem") {
                        $gridContainer.append(UIUtils.getUnselectableGenericElement("div", "", "item i-132 transparentItem").attr("tabindex", "0").attr('i', '132').text(groups[j].text));

                    }

                }

                if (this.cacheControl.cacheHit) {

                    if (0 >= start && 0 <= end) {
                        $colorEle = self.AddColorNTooltip(patternType, colors[0]);
                        $gridContainer.find(".single0").append($colorEle);
                    }

                    if (71 >= start && 71 <= end) {
                        $colorEle = self.AddColorNTooltip(patternType, colors[71]);
                        $gridContainer.find(".single71").append($colorEle);
                    }

                }
                else {
                    for (i = start; i <= end; i++) {
                        //Call to construct Color
                        $colorEle = self.AddColorNTooltip(patternType, colors[i]);

                        if (i === 0 || i === 71) {
                            var targetClass = '.single' + i;
                            $gridContainer.find(targetClass).append($colorEle);
                        }

                        if (i >= 1 && i <= 10) {
                            $gridContainer.find('.line1').append($colorEle);
                        }

                        if (i >= 61 && i <= 70) {
                            $gridContainer.find('.line2').append($colorEle);
                        }


                        if (patternType == "ThemeAndMultipleStandardAndMoreColors" || patternType == "ThemeMultipleStandardTransparentAndMoreColors" || patternType == "ThemeAndMultipleStandard") {
                            if (i >= 71) {
                                $gridContainer.find('.line2').append($colorEle);
                            }
                        }

                        if (i >= 11 && i <= 60) {
                            j = i % 10;
                            if (j === 0) {
                                $gridContainer.find('.container-10').append($colorEle);
                            }
                            else {
                                $gridContainer.find('.container-' + j).append($colorEle);
                            }

                            //For positioning
                            if (i >= 11 && i <= 20) {
                                $control.find('.grid-container').find('.i-' + i).addClass('top-row');
                            }
                            else if (i >= 51 && i <= 60) {
                                $control.find('.grid-container').find('.i-' + i).addClass('bottom-row');
                            }
                            else {
                                $control.find('.grid-container').find('.i-' + i).addClass('middle-rows');
                            }
                        }

                    }
                }

            }
            
            //CACHE MAIN BODY WITHOUT COLORGROUP2
            //cache code...
            if (this.cacheControl.cachableMainBody) {

                var arr = this.cacheControl.cache.mainBodyCache[$control.data('theme')] = [];
                if ($mainBodyHeader != null) {
                    arr.push($mainBodyHeader.clone());
                }
                if ($colorLine1 != null) {
                    arr.push($colorLine1.clone());
                }
                if ($colorGroupContainer != null) {
                    arr.push($colorGroupContainer.clone());
                }
                if ($standardColorHeader != null) {
                    arr.push($standardColorHeader.clone());
                }
            }

            //CACHE COLORGROUP2
            //cache code...
            if (!this.cacheControl.secondLineCacheHit) {
                if (!this.cacheControl.cache.secondLineCache[$control.data('theme')]) {
                    this.cacheControl.cache.secondLineCache[$control.data('theme')] = {};
                }

                if ($colorGroup2) {
                    this.cacheControl.cache.secondLineCache[$control.data('theme')][patternType] = $colorGroup2.clone();
                }
                
            }

            if (controlParams.index !== null && controlParams.index !== "" && controlParams.index !== undefined) {
                if ($control.find('.i-' + controlParams.index) !== null) {
                    self.selectColor($control, null, controlParams.index);
                }

            }
            else if (controlParams.selectedColor !== null && controlParams.selectedColor !== "" && controlParams.selectedColor !== undefined) {
                if ($control.find('.c-' + controlParams.selectedColor) !== null) {
                    self.selectColor($control, controlParams.selectedColor, null);
                }
            }
            else {
                self.selectColor($control, null, 1);
            }

        }
    },

    //Returns controlParams
    getData: function ($control) {
        var controlParams = {};

        //Only selectedColor is returned
        var $selectedColor = $control.find(".clr-selected");
        controlParams.index = $selectedColor.attr('i');
        controlParams.selectedColor = $selectedColor.attr('clr');

        if ($control.data('colorGridType') === 'patternColor') {
            controlParams.text = $selectedColor.attr('text');
        }
        return controlParams;
    },

    AddColor: function (color) {
        var clr = color.clr;
        var i = color.i;

        //Adding Color
        var $color = UIUtils.getUnselectableGenericElement("li", "", "color");
        $color.addClass("c-" + clr);
        $color.addClass("i-" + i);
        $color
            .attr('clr', clr)
            .attr('i', i);

        var $kid = UIUtils.getUnselectableGenericElement("div", "", "kid");

        if (clr === "NoColor") {
            $kid.text("No Color");
        }
        else {
            $kid.css({ "background-color": "#" + clr });
        }

        $color.append($kid);
        $color.attr("tabindex", "0");
        return $color;
    },

    //For ColorDropDown, Color + Tooltips - to be Updated for Tooltips
    AddColorNTooltip: function (patternType, color, isRecentClr) {
        var self = this;

        var $color = UIUtils.getUnselectableGenericElement("div", "", "color");

        var tt = color.tt;
        var i = color.i;
        var clr = color.clr;
        if (patternType == "ThemeAndMultipleStandardAndMoreColors" || patternType == "ThemeMultipleStandardTransparentAndMoreColors" || patternType == "ThemeAndMultipleStandard") {
            var $wrapper = UIUtils.getUnselectableGenericElement("div", "", "wrapper");
            var $colorPart = UIUtils.getUnselectableGenericElement("div", "", "color-part");
            var $textDiv = UIUtils.getUnselectableGenericElement("div", "", "text-part");
            if (i === "0" || i === 0) {
                $color.addClass('automatic');
                $textDiv.text('Automatic');
                tt = 'Automatic';
                $wrapper.append($colorPart);
                $color.append($wrapper);
                $color.append($textDiv);
            }
            if (i > 0 && i < 131) {
                $color.css({ "background-color": "#" + clr });
                var $kid = UIUtils.getUnselectableGenericElement("div", "", "kid");
                $color.append($kid);
            }
        }
        else {

            if (i > 0 && i < 71) {
                $color.css({ "background-color": "#" + clr });
                var $kid = UIUtils.getUnselectableGenericElement("div", "", "kid");
                $color.append($kid);
            }
            //<<<<<<<<<<<<For Recent Colors>>>>>>>>>>>>>>>>>//
            else if (isRecentClr && (i >= 71 && i <= 80)) {

                $color.css({ "background-color": "#" + clr });
                var $kid = UIUtils.getUnselectableGenericElement("div", "", "kid");
                $color.append($kid);
            }
            //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>//
            else {

                var $wrapper = UIUtils.getUnselectableGenericElement("div", "", "wrapper");
                var $colorPart = UIUtils.getUnselectableGenericElement("div", "", "color-part");
                var $textDiv = UIUtils.getUnselectableGenericElement("div", "", "text-part");

                if (i === "0" || i === 0) {
                    $color.addClass('automatic');
                    $textDiv.text('Automatic');
                    tt = 'Automatic';
                }
                else if (i === "71" || i === 71) {
                    if (patternType === "ColorsAndNoFill" || patternType === "AutomaticAndColorsAndNoFill" || patternType === "ColorsAndNoFillAndMoreColors") {
                        $color.addClass('no-fill');
                        tt = 'No Fill';
                        $textDiv.text('NoFill');
                    }
                    else if (patternType === "ColorsAndNoOutline" || patternType === "AutomaticAndColorsAndNoOutline") {
                        $color.addClass('no-outline');
                        tt = 'No Outline';
                        $textDiv.text('No Outline');
                        clr = "NoOutline";
                    }
                    else if (patternType === "ColorsAndNoColor" || patternType === "ColorsAndNoColorAndMoreColors") {
                        $color.addClass('no-color');
                        tt = 'No Color';
                        $textDiv.text('No Color');
                        clr = "NoColor";
                    }
                }

                $wrapper.append($colorPart);
                $color.append($wrapper);
                $color.append($textDiv);
            }
        }
        $color.attr('title', tt);
        $color.addClass("c-" + clr);
        $color.addClass("i-" + i);
        $color
            .attr('clr', clr)
            .attr('i', i)
            .attr('text', tt);

        $color.attr("tabindex", "0");
        return $color;

    },

    selectColor: function ($control, selectedColor, index) {
        var selectedString = null;

        if (index !== undefined && index !== null && index !== "") {
            selectedString = '.i-' + index;
        }
        else if (selectedColor !== undefined && selectedColor !== null && selectedColor !== "") {
            selectedString = '.c-' + selectedColor;
        }
        else {
            selectedString = '.i-1';
        }
        $control.find(':not(' + selectedString + ')').removeClass('clr-focus');
        $control.find(':not(' + selectedString + ')').removeClass('clr-selected');
        $control.find(selectedString).addClass('clr-selected');

    },

    handleAccessKey: function ($control, data) {

        if ($control.data("focalizeOnAccessKey")) {
            this.focalize($control, true);
        }
        else {
            $control.focus();    
        }        
    },

    focalize: function ($control, isFocus) {
        if (isFocus == true) {
            if ($control.data('focalizefirstcolor') == "true") {
                $control.find(".color").first().addClass('clr-focus').focus();
            }
            else {
                $control.focus();
                this.base($control, isFocus);
            }
        }
    }
});
/***********************To Do***************************
This is a place holder for Office 2016 control js file.
The class of office 2016 control should be extended from its respective Office 2013 control class.
All the functionality related to Office 2016 should be overridden/implemented here.
*******************************************************/
/*
Color Grid Inputs for various colorGridTypes and Themes
Possible Options for colorGridType = backgroundColor, patternColor
    
Entries present for 
1. "colorGridType" : "backgroundColor", 
"theme":"OfficeExcel"
2. "colorGridType" : "patternColor", 
"theme":"OfficeExcel"
3. "colorGridType" : "patternColor", 
"theme":"Office"
*/
var ColorGridInputList = [
	{
	    "colorGridType": "backgroundColor",
	    "theme": "OfficeExcel",
	    "colors": [
		{ "i": "0", "clr": "NoColor" },
		{ "i": "1", "clr": "FFFFFF" },
		{ "i": "2", "clr": "000000" },
		{ "i": "3", "clr": "E7E6E6" },
		{ "i": "4", "clr": "44546A" },
		{ "i": "5", "clr": "5B9BD5" },
		{ "i": "6", "clr": "ED7D31" },
		{ "i": "7", "clr": "A5A5A5" },
		{ "i": "8", "clr": "FFC000" },
		{ "i": "9", "clr": "4472C4" },
		{ "i": "10", "clr": "70AD47" },
		{ "i": "11", "clr": "F2F2F2" },
		{ "i": "12", "clr": "808080" },
		{ "i": "13", "clr": "D0CECE" },
		{ "i": "14", "clr": "D6DCE4" },
		{ "i": "15", "clr": "DDEBF7" },
		{ "i": "16", "clr": "FCE4D6" },
		{ "i": "17", "clr": "EDEDED" },
		{ "i": "18", "clr": "FFF2CC" },
		{ "i": "19", "clr": "D9E1F2" },
		{ "i": "20", "clr": "E2EFDA" },
		{ "i": "21", "clr": "D9D9D9" },
		{ "i": "22", "clr": "595959" },
		{ "i": "23", "clr": "AEAAAA" },
		{ "i": "24", "clr": "ACB9CA" },
		{ "i": "25", "clr": "BDD7EE" },
		{ "i": "26", "clr": "F8CBAD" },
		{ "i": "27", "clr": "DBDBDB" },
		{ "i": "28", "clr": "FFE699" },
		{ "i": "29", "clr": "B4C6E7" },
		{ "i": "30", "clr": "C6E0B4" },
		{ "i": "31", "clr": "BFBFBF" },
		{ "i": "32", "clr": "404040" },
		{ "i": "33", "clr": "757171" },
		{ "i": "34", "clr": "8497B0" },
		{ "i": "35", "clr": "9BC2E6" },
		{ "i": "36", "clr": "F4B084" },
		{ "i": "37", "clr": "C9C9C9" },
		{ "i": "38", "clr": "FFD966" },
		{ "i": "39", "clr": "8EA9DB" },
		{ "i": "40", "clr": "A9D08E" },
		{ "i": "41", "clr": "A6A6A6" },
		{ "i": "42", "clr": "262626" },
		{ "i": "43", "clr": "3A3838" },
		{ "i": "44", "clr": "333F4F" },
		{ "i": "45", "clr": "2F75B5" },
		{ "i": "46", "clr": "C65911" },
		{ "i": "47", "clr": "7B7B7B" },
		{ "i": "48", "clr": "BF8F00" },
		{ "i": "49", "clr": "305496" },
		{ "i": "50", "clr": "548235" },
		{ "i": "51", "clr": "808080" },
		{ "i": "52", "clr": "0D0D0D" },
		{ "i": "53", "clr": "161616" },
		{ "i": "54", "clr": "222B35" },
		{ "i": "55", "clr": "1F4E78" },
		{ "i": "56", "clr": "833C0C" },
		{ "i": "57", "clr": "525252" },
		{ "i": "58", "clr": "806000" },
		{ "i": "59", "clr": "203764" },
		{ "i": "60", "clr": "375623" },
		{ "i": "61", "clr": "C00000" },
		{ "i": "62", "clr": "FF0000" },
		{ "i": "63", "clr": "FFC000" },
		{ "i": "64", "clr": "FFFF00" },
		{ "i": "65", "clr": "92D050" },
		{ "i": "66", "clr": "00B050" },
		{ "i": "67", "clr": "00B0F0" },
		{ "i": "68", "clr": "0070C0" },
		{ "i": "69", "clr": "002060" },
		{ "i": "70", "clr": "7030A0" }
    ]
	},
	{
	    "type": "ColorGrid",
	    "colorGridType": "patternColor",
	    "theme": "OfficeExcel",
	    "colors": [
		{ "i": "0", "clr": "Automatic", "tt": "No Color" },
		{ "i": "1", "clr": "FFFFFF", "tt": "White, Background 1" },
		{ "i": "2", "clr": "000000", "tt": "Black, Text 1" },
		{ "i": "3", "clr": "E7E6E6", "tt": "Gray-25%, Background 2" },
		{ "i": "4", "clr": "44546A", "tt": "Blue-Gray, Text 2" },
		{ "i": "5", "clr": "5B9BD5", "tt": "Blue, Accent 1" },
		{ "i": "6", "clr": "ED7D31", "tt": "Orange, Accent 2" },
		{ "i": "7", "clr": "A5A5A5", "tt": "Gray-50%, Accent 3" },
		{ "i": "8", "clr": "FFC000", "tt": "Gold, Accent 4" },
		{ "i": "9", "clr": "4472C4", "tt": "Blue, Accent 5" },
		{ "i": "10", "clr": "70AD47", "tt": "Green, Accent 6" },
		{ "i": "11", "clr": "F2F2F2", "tt": "White, Background 1, Darker 5%" },
		{ "i": "12", "clr": "7F7F7F", "tt": "Black, Text 1, Lighter 50%" },
		{ "i": "13", "clr": "D0CECE", "tt": "Gray-25%, Background 2, Darker 10%" },
		{ "i": "14", "clr": "D6DCE4", "tt": "Blue-Gray, Text 2, Lighter 80%" },
		{ "i": "15", "clr": "DEEBF6", "tt": "Blue, Accent 1, Lighter 80%" },
		{ "i": "16", "clr": "FBE5D5", "tt": "Orange, Accent 2, Lighter 80%" },
		{ "i": "17", "clr": "EDEDED", "tt": "Gray-50%, Accent 3, Lighter 80%" },
		{ "i": "18", "clr": "FFF2CC", "tt": "Gold, Accent 4, Lighter 80%" },
		{ "i": "19", "clr": "D9E2F3", "tt": "Blue, Accent 5, Lighter 80%" },
		{ "i": "20", "clr": "E2EFD9", "tt": "Green, Accent 6, Lighter 80%" },
		{ "i": "21", "clr": "D8D8D8", "tt": "White, Background 1, Darker 15%" },
		{ "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
		{ "i": "23", "clr": "AEABAB", "tt": "Gray-25%, Background 2, Darker 25%" },
		{ "i": "24", "clr": "ADB9CA", "tt": "Blue-Gray, Text 2, Lighter 60%" },
		{ "i": "25", "clr": "BDD7EE", "tt": "Blue, Accent 1, Lighter 60%" },
		{ "i": "26", "clr": "F7CBAC", "tt": "Orange, Accent 2, Lighter 60%" },
		{ "i": "27", "clr": "DBDBDB", "tt": "Gray-50%, Accent 3, Lighter 60%" },
		{ "i": "28", "clr": "FEE599", "tt": "Gold, Accent 4, Lighter 60%" },
		{ "i": "29", "clr": "B4C6E7", "tt": "Blue, Accent 5, Lighter 60%" },
		{ "i": "30", "clr": "C5E0B3", "tt": "Green, Accent 6, Lighter 60%" },
		{ "i": "31", "clr": "BFBFBF", "tt": "White, Background 1, Darker 25%" },
		{ "i": "32", "clr": "3F3F3F", "tt": "Black, Text 1, Lighter 25%" },
		{ "i": "33", "clr": "757070", "tt": "Gray-25%, Background 2, Darker 50%" },
		{ "i": "34", "clr": "8496B0", "tt": "Blue-Gray, Text 2, Lighter 40%" },
		{ "i": "35", "clr": "9CC3E5", "tt": "Blue, Accent 1, Lighter 40%" },
		{ "i": "36", "clr": "F4B183", "tt": "Orange, Accent 2, Lighter 40%" },
		{ "i": "37", "clr": "C9C9C9", "tt": "Gray-50%, Accent 3, Lighter 40%" },
		{ "i": "38", "clr": "FFD965", "tt": "Gold, Accent 4, Lighter 40%" },
		{ "i": "39", "clr": "8EAADB", "tt": "Blue, Accent 5, Lighter 40%" },
		{ "i": "40", "clr": "A8D08D", "tt": "Green, Accent 6, Lighter 40%" },
		{ "i": "41", "clr": "A5A5A5", "tt": "White, Background 1, Darker 35%" },
		{ "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
		{ "i": "43", "clr": "3A3838", "tt": "Gray-25%, Background 2, Darker 75%" },
		{ "i": "44", "clr": "323F4F", "tt": "Blue-Gray, Text 2, Darker 25%" },
		{ "i": "45", "clr": "2E75B5", "tt": "Blue, Accent 1, Darker 25%" },
		{ "i": "46", "clr": "C55A11", "tt": "Orange, Accent 2, Darker 25%" },
		{ "i": "47", "clr": "7B7B7B", "tt": "Gray-50%, Accent 3, Darker 25%" },
		{ "i": "48", "clr": "BF9000", "tt": "Gold, Accent 4, Darker 25%" },
		{ "i": "49", "clr": "2F5496", "tt": "Blue, Accent 5, Darker 25%" },
		{ "i": "50", "clr": "538135", "tt": "Green, Accent 6, Darker 25%" },
		{ "i": "51", "clr": "7F7F7F", "tt": "White, Background 1, Darker 50%" },
		{ "i": "52", "clr": "0C0C0C", "tt": "Black, Text 1, Lighter 5%" },
		{ "i": "53", "clr": "171616", "tt": "Gray-25%, Background 2, Darker 90%" },
		{ "i": "54", "clr": "222A35", "tt": "Blue-Gray, Text 2, Darker 50%" },
		{ "i": "55", "clr": "1E4E79", "tt": "Blue, Accent 1, Darker 50%" },
		{ "i": "56", "clr": "833C0B", "tt": "Orange, Accent 2, Darker 50%" },
		{ "i": "57", "clr": "525252", "tt": "Gray-50%, Accent 3, Darker 50%" },
		{ "i": "58", "clr": "7F6000", "tt": "Gold, Accent 4, Darker 50%" },
		{ "i": "59", "clr": "1F3864", "tt": "Blue, Accent 5, Darker 50%" },
		{ "i": "60", "clr": "375623", "tt": "Green, Accent 6, Darker 50%" },
		{ "i": "61", "clr": "C00000", "tt": "Dark Red" },
		{ "i": "62", "clr": "FF0000", "tt": "Red" },
		{ "i": "63", "clr": "FFC000", "tt": "Orange" },
		{ "i": "64", "clr": "FFFF00", "tt": "Yellow" },
		{ "i": "65", "clr": "92D050", "tt": "Light Green" },
		{ "i": "66", "clr": "00B050", "tt": "Green" },
		{ "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
		{ "i": "68", "clr": "0070C0", "tt": "Blue" },
		{ "i": "69", "clr": "002060", "tt": "Dark Blue" },
		{ "i": "70", "clr": "7030A0", "tt": "Purple" },
        { "i": "71", "clr": "NoFill", "tt": "NoFill" }
    ]
	},
    {
        "type": "ColorGrid",
        "colorGridType": "patternColor",
        "theme": "PPTParallax",
        "colors": [
        { "i": "0", "clr": "Automatic", "tt": "No Color" },
        { "i": "1", "clr": "FFFFFF", "tt": "White, Background 1" },
        { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
        { "i": "3", "clr": "E7E6E6", "tt": "Gray-25%, Background 2" },
        { "i": "4", "clr": "212121", "tt": "Gray-80%, Text 2" },
        { "i": "5", "clr": "5B9BD5", "tt": "Blue, Accent 1" },
        { "i": "6", "clr": "87C347", "tt": "Lime, Accent 2" },
        { "i": "7", "clr": "DC9C33", "tt": "Orange, Accent 3" },
        { "i": "8", "clr": "CE4836", "tt": "Red, Accent 4" },
        { "i": "9", "clr": "CE4687", "tt": "Pink, Accent 5" },
        { "i": "10", "clr": "A367E4", "tt": "Lavender, Accent 6" },
        { "i": "11", "clr": "F2F2F2", "tt": "White, Background 1, Darker 5%" },
        { "i": "12", "clr": "7F7F7F", "tt": "Black, Text 1, Lighter 50%" },
        { "i": "13", "clr": "D0CECE", "tt": "Gray-25%, Background 2, Darker 10%" },
        { "i": "14", "clr": "E8E8E8", "tt": "Gray-80%, Text 2, Lighter 90%" },
        { "i": "15", "clr": "DEEBF6", "tt": "Blue, Accent 1, Lighter 80%" },
        { "i": "16", "clr": "E6F3DA", "tt": "Lime, Accent 2, Lighter 80%" },
        { "i": "17", "clr": "F7EBD7", "tt": "Orange, Accent 3, Lighter 80%" },
        { "i": "18", "clr": "F3DAD7", "tt": "Red, Accent 4, Lighter 80%" },
        { "i": "19", "clr": "F4DAE7", "tt": "Pink, Accent 5, Lighter 80%" },
        { "i": "20", "clr": "ECE0F9", "tt": "Lavender, Accent 6, Lighter 80%" },
        { "i": "21", "clr": "D8D8D8", "tt": "White, Background 1, Darker 15%" },
        { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
        { "i": "23", "clr": "AEABAB", "tt": "Gray-25%, Background 2, Darker 25%" },
        { "i": "24", "clr": "C7C7C7", "tt": "Gray-80%, Text 2, Lighter 75%" },
        { "i": "25", "clr": "BDD7EE", "tt": "Blue, Accent 1, Lighter 60%" },
        { "i": "26", "clr": "CEE7B6", "tt": "Lime, Accent 2, Lighter 60%" },
        { "i": "27", "clr": "F0D7AF", "tt": "Orange, Accent 3, Lighter 60%" },
        { "i": "28", "clr": "E9B6AF", "tt": "Red, Accent 4, Lighter 60%" },
        { "i": "29", "clr": "EAB5CF", "tt": "Pink, Accent 5, Lighter 60%" },
        { "i": "30", "clr": "D9C1F3", "tt": "Lavender, Accent 6, Lighter 60%" },
        { "i": "31", "clr": "BFBFBF", "tt": "White, Background 1, Darker 25%" },
        { "i": "32", "clr": "3F3F3F", "tt": "Black, Text 1, Lighter 25%" },
        { "i": "33", "clr": "757070", "tt": "Gray-25%, Background 2, Darker 50%" },
        { "i": "34", "clr": "909090", "tt": "Gray-80%, Text 2, Lighter 50%" },
        { "i": "35", "clr": "9CC3E5", "tt": "Blue, Accent 1, Lighter 40%" },
        { "i": "36", "clr": "B6DB92", "tt": "Lime, Accent 2, Lighter 40%" },
        { "i": "37", "clr": "E9C487", "tt": "Orange, Accent 3, Lighter 40%" },
        { "i": "38", "clr": "E09187", "tt": "Red, Accent 4, Lighter 40%" },
        { "i": "39", "clr": "E09187", "tt": "Pink, Accent 5, Lighter 40%" },
        { "i": "40", "clr": "C7A3EE", "tt": "Lavender, Accent 6, Lighter 40%" },
        { "i": "41", "clr": "A5A5A5", "tt": "White, Background 1, Darker 35%" },
        { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
        { "i": "43", "clr": "3A3838", "tt": "Gray-25%, Background 2, Darker 75%" },
        { "i": "44", "clr": "585858", "tt": "Gray-80%, Text 2, Lighter 25%" },
        { "i": "45", "clr": "2E75B5", "tt": "Blue, Accent 1, Darker 25%" },
        { "i": "46", "clr": "64992C", "tt": "Lime, Accent 2, Darker 25%" },
        { "i": "47", "clr": "B67706", "tt": "Orange, Accent 3, Darker 25%" },
        { "i": "48", "clr": "A22E1E", "tt": "Red, Accent 4, Darker 25%" },
        { "i": "49", "clr": "A72463", "tt": "Pink, Accent 5, Darker 25%" },
        { "i": "50", "clr": "7A2AD0", "tt": "Lavender, Accent 6, Darker 25%" },
        { "i": "51", "clr": "7F7F7F", "tt": "White, Background 1, Darker 50%" },
        { "i": "52", "clr": "0C0C0C", "tt": "Black, Text 1, Lighter 5%" },
        { "i": "53", "clr": "171616", "tt": "Gray-25%, Background 2, Darker 90%" },
        { "i": "54", "clr": "373737", "tt": "Gray-80%, Text 2, Lighter 10%" },
        { "i": "55", "clr": "1E4E79", "tt": "Blue, Accent 1, Darker 50%" },
        { "i": "56", "clr": "43661D", "tt": "Lime, Accent 2, Darker 50%" },
        { "i": "57", "clr": "795007", "tt": "Orange, Accent 3, Darker 50%" },
        { "i": "58", "clr": "6B1F14", "tt": "Red, Accent 4, Darker 50%" },
        { "i": "59", "clr": "6F1842", "tt": "Pink, Accent 5, Darker 50%" },
        { "i": "60", "clr": "511B8A", "tt": "Lavender, Accent 6, Darker 50%" },
        { "i": "61", "clr": "C00000", "tt": "Dark Red" },
        { "i": "62", "clr": "FF0000", "tt": "Red" },
        { "i": "63", "clr": "FFC000", "tt": "Orange" },
        { "i": "64", "clr": "FFFF00", "tt": "Yellow" },
        { "i": "65", "clr": "92D050", "tt": "Light Green" },
        { "i": "66", "clr": "00B050", "tt": "Green" },
        { "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
        { "i": "68", "clr": "0070C0", "tt": "Blue" },
        { "i": "69", "clr": "002060", "tt": "Dark Blue" },
        { "i": "70", "clr": "7030A0", "tt": "Purple" },
        { "i": "71", "clr": "NoFill", "tt": "NoFill" }
        ]
    },
    {
        "type": "ColorGrid",
        "colorGridType": "patternColor",
        "theme": "OfficeExcel",
        "colors": [
		{ "i": "0", "clr": "Automatic", "tt": "No Color" },
		{ "i": "1", "clr": "FFFFFF", "tt": "White, Background 1" },
		{ "i": "2", "clr": "000000", "tt": "Black, Text 1" },
		{ "i": "3", "clr": "E7E6E6", "tt": "Gray-25%, Background 2" },
		{ "i": "4", "clr": "44546A", "tt": "Blue-Gray, Text 2" },
		{ "i": "5", "clr": "5B9BD5", "tt": "Blue, Accent 1" },
		{ "i": "6", "clr": "ED7D31", "tt": "Orange, Accent 2" },
		{ "i": "7", "clr": "A5A5A5", "tt": "Gray-50%, Accent 3" },
		{ "i": "8", "clr": "FFC000", "tt": "Gold, Accent 4" },
		{ "i": "9", "clr": "4472C4", "tt": "Blue, Accent 5" },
		{ "i": "10", "clr": "70AD47", "tt": "Green, Accent 6" },
		{ "i": "11", "clr": "F2F2F2", "tt": "White, Background 1, Darker 5%" },
		{ "i": "12", "clr": "7F7F7F", "tt": "Black, Text 1, Lighter 50%" },
		{ "i": "13", "clr": "D0CECE", "tt": "Gray-25%, Background 2, Darker 10%" },
		{ "i": "14", "clr": "D6DCE4", "tt": "Blue-Gray, Text 2, Lighter 80%" },
		{ "i": "15", "clr": "DEEBF6", "tt": "Blue, Accent 1, Lighter 80%" },
		{ "i": "16", "clr": "FBE5D5", "tt": "Orange, Accent 2, Lighter 80%" },
		{ "i": "17", "clr": "EDEDED", "tt": "Gray-50%, Accent 3, Lighter 80%" },
		{ "i": "18", "clr": "FFF2CC", "tt": "Gold, Accent 4, Lighter 80%" },
		{ "i": "19", "clr": "D9E2F3", "tt": "Blue, Accent 5, Lighter 80%" },
		{ "i": "20", "clr": "E2EFD9", "tt": "Green, Accent 6, Lighter 80%" },
		{ "i": "21", "clr": "D8D8D8", "tt": "White, Background 1, Darker 15%" },
		{ "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
		{ "i": "23", "clr": "AEABAB", "tt": "Gray-25%, Background 2, Darker 25%" },
		{ "i": "24", "clr": "ADB9CA", "tt": "Blue-Gray, Text 2, Lighter 60%" },
		{ "i": "25", "clr": "BDD7EE", "tt": "Blue, Accent 1, Lighter 60%" },
		{ "i": "26", "clr": "F7CBAC", "tt": "Orange, Accent 2, Lighter 60%" },
		{ "i": "27", "clr": "DBDBDB", "tt": "Gray-50%, Accent 3, Lighter 60%" },
		{ "i": "28", "clr": "FEE599", "tt": "Gold, Accent 4, Lighter 60%" },
		{ "i": "29", "clr": "B4C6E7", "tt": "Blue, Accent 5, Lighter 60%" },
		{ "i": "30", "clr": "C5E0B3", "tt": "Green, Accent 6, Lighter 60%" },
		{ "i": "31", "clr": "BFBFBF", "tt": "White, Background 1, Darker 25%" },
		{ "i": "32", "clr": "3F3F3F", "tt": "Black, Text 1, Lighter 25%" },
		{ "i": "33", "clr": "757070", "tt": "Gray-25%, Background 2, Darker 50%" },
		{ "i": "34", "clr": "8496B0", "tt": "Blue-Gray, Text 2, Lighter 40%" },
		{ "i": "35", "clr": "9CC3E5", "tt": "Blue, Accent 1, Lighter 40%" },
		{ "i": "36", "clr": "F4B183", "tt": "Orange, Accent 2, Lighter 40%" },
		{ "i": "37", "clr": "C9C9C9", "tt": "Gray-50%, Accent 3, Lighter 40%" },
		{ "i": "38", "clr": "FFD965", "tt": "Gold, Accent 4, Lighter 40%" },
		{ "i": "39", "clr": "8EAADB", "tt": "Blue, Accent 5, Lighter 40%" },
		{ "i": "40", "clr": "A8D08D", "tt": "Green, Accent 6, Lighter 40%" },
		{ "i": "41", "clr": "A5A5A5", "tt": "White, Background 1, Darker 35%" },
		{ "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
		{ "i": "43", "clr": "3A3838", "tt": "Gray-25%, Background 2, Darker 75%" },
		{ "i": "44", "clr": "323F4F", "tt": "Blue-Gray, Text 2, Darker 25%" },
		{ "i": "45", "clr": "2E75B5", "tt": "Blue, Accent 1, Darker 25%" },
		{ "i": "46", "clr": "C55A11", "tt": "Orange, Accent 2, Darker 25%" },
		{ "i": "47", "clr": "7B7B7B", "tt": "Gray-50%, Accent 3, Darker 25%" },
		{ "i": "48", "clr": "BF9000", "tt": "Gold, Accent 4, Darker 25%" },
		{ "i": "49", "clr": "2F5496", "tt": "Blue, Accent 5, Darker 25%" },
		{ "i": "50", "clr": "538135", "tt": "Green, Accent 6, Darker 25%" },
		{ "i": "51", "clr": "7F7F7F", "tt": "White, Background 1, Darker 50%" },
		{ "i": "52", "clr": "0C0C0C", "tt": "Black, Text 1, Lighter 5%" },
		{ "i": "53", "clr": "171616", "tt": "Gray-25%, Background 2, Darker 90%" },
		{ "i": "54", "clr": "222A35", "tt": "Blue-Gray, Text 2, Darker 50%" },
		{ "i": "55", "clr": "1E4E79", "tt": "Blue, Accent 1, Darker 50%" },
		{ "i": "56", "clr": "833C0B", "tt": "Orange, Accent 2, Darker 50%" },
		{ "i": "57", "clr": "525252", "tt": "Gray-50%, Accent 3, Darker 50%" },
		{ "i": "58", "clr": "7F6000", "tt": "Gold, Accent 4, Darker 50%" },
		{ "i": "59", "clr": "1F3864", "tt": "Blue, Accent 5, Darker 50%" },
		{ "i": "60", "clr": "375623", "tt": "Green, Accent 6, Darker 50%" },
		{ "i": "61", "clr": "C00000", "tt": "Dark Red" },
		{ "i": "62", "clr": "FF0000", "tt": "Red" },
		{ "i": "63", "clr": "FFC000", "tt": "Orange" },
		{ "i": "64", "clr": "FFFF00", "tt": "Yellow" },
		{ "i": "65", "clr": "92D050", "tt": "Light Green" },
		{ "i": "66", "clr": "00B050", "tt": "Green" },
		{ "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
		{ "i": "68", "clr": "0070C0", "tt": "Blue" },
		{ "i": "69", "clr": "002060", "tt": "Dark Blue" },
		{ "i": "70", "clr": "7030A0", "tt": "Purple" },
        { "i": "71", "clr": "NoFill", "tt": "NoFill" }
    ]
    },
    {
        "type": "ColorGrid",
        "colorGridType": "patternColor",
        "theme": "Blue2",
        "colors": [
		{ "i": "0", "clr": "Automatic", "tt": "No Color" },
        { "i": "1", "clr": "ffffff", "tt": "White, Background 1" },
        { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
        { "i": "3", "clr": "dfe3e5", "tt": "Ice Blue, Background 2" },
        { "i": "4", "clr": "335b74", "tt": "Dark Teal, Text 2" },
        { "i": "5", "clr": "1cade4", "tt": "Turquoise, Accent 1" },
        { "i": "6", "clr": "2683c6", "tt": "Blue, Accent 2" },
        { "i": "7", "clr": "27ced7", "tt": "Turquoise, Accent 3" },
        { "i": "8", "clr": "42ba97", "tt": "Green, Accent 4" },
        { "i": "9", "clr": "3e8853", "tt": "Dark Green, Accent 5" },
        { "i": "10", "clr": "62a39f", "tt": "Teal, Accent 6" },
        { "i": "11", "clr": "f2f2f2", "tt": "White, Background 1, Darker 5%" },
        { "i": "12", "clr": "7f7f7f", "tt": "Black, Text 1, Lighter 50%" },
        { "i": "13", "clr": "c6cdd0", "tt": "Ice Blue, Background 2, Darker 10%" },
        { "i": "14", "clr": "cfdfea", "tt": "Dark Teal, Text 2, Lighter 80%" },
        { "i": "15", "clr": "d1eef9", "tt": "Turquoise, Accent 1, Lighter 80%" },
        { "i": "16", "clr": "d1e6f6", "tt": "Blue, Accent 2, Lighter 80%" },
        { "i": "17", "clr": "d3f5f7", "tt": "Turquoise, Accent 3, Lighter 80%" },
        { "i": "18", "clr": "d8f1ea", "tt": "Green, Accent 4, Lighter 80%" },
        { "i": "19", "clr": "d4ebda", "tt": "Dark Green, Accent 5, Lighter 80%" },
        { "i": "20", "clr": "dfeceb", "tt": "Teal, Accent 6, Lighter 80%" },
        { "i": "21", "clr": "d8d8d8", "tt": "White, Background 1, Darker 15%" },
        { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
        { "i": "23", "clr": "a0acb2", "tt": "Ice Blue, Background 2, Darker 25%" },
        { "i": "24", "clr": "9fc0d5", "tt": "Dark Teal, Text 2, Lighter 60%" },
        { "i": "25", "clr": "a4def4", "tt": "Turquoise, Accent 1, Lighter 60%" },
        { "i": "26", "clr": "a3ceed", "tt": "Blue, Accent 2, Lighter 60%" },
        { "i": "27", "clr": "a8ebef", "tt": "Turquoise, Accent 3, Lighter 60%" },
        { "i": "28", "clr": "b2e3d5", "tt": "Green, Accent 4, Lighter 60%" },
        { "i": "29", "clr": "a9d7b6", "tt": "Dark Green, Accent 5, Lighter 60%" },
        { "i": "30", "clr": "c0dad8", "tt": "Teal, Accent 6, Lighter 60%" },
        { "i": "31", "clr": "bfbfbf", "tt": "White, Background 1, Darker 25%" },
        { "i": "32", "clr": "3f3f3f", "tt": "Black, Text 1, Lighter 25%" },
        { "i": "33", "clr": "65747c", "tt": "Ice Blue, Background 2, Darker 50%" },
        { "i": "34", "clr": "70a1c0", "tt": "Dark Teal, Text 2, Lighter 40%" },
        { "i": "35", "clr": "76cdee", "tt": "Turquoise, Accent 1, Lighter 40%" },
        { "i": "36", "clr": "75b5e4", "tt": "Blue, Accent 2, Lighter 40%" },
        { "i": "37", "clr": "7ce1e7", "tt": "Turquoise, Accent 3, Lighter 40%" },
        { "i": "38", "clr": "8cd6c0", "tt": "Green, Accent 4, Lighter 40%" },
        { "i": "39", "clr": "7ec492", "tt": "Dark Green, Accent 5, Lighter 40%" },
        { "i": "40", "clr": "a0c7c5", "tt": "Teal, Accent 6, Lighter 40%" },
        { "i": "41", "clr": "a5a5a5", "tt": "White, Background 1, Darker 35%" },
        { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
        { "i": "43", "clr": "323a3e", "tt": "Ice Blue, Background 2, Darker 75%" },
        { "i": "44", "clr": "264457", "tt": "Dark Teal, Text 2, Darker 25%" },
        { "i": "45", "clr": "1482ab", "tt": "Turquoise, Accent 1, Darker 25%" },
        { "i": "46", "clr": "1c6294", "tt": "Blue, Accent 2, Darker 25%" },
        { "i": "47", "clr": "1d9aa1", "tt": "Turquoise, Accent 3, Darker 25%" },
        { "i": "48", "clr": "318b71", "tt": "Green, Accent 4, Darker 25%" },
        { "i": "49", "clr": "2e663e", "tt": "Dark Green, Accent 5, Darker 25%" },
        { "i": "50", "clr": "487b78", "tt": "Teal, Accent 6, Darker 25%" },
        { "i": "51", "clr": "7f7f7f", "tt": "White, Background 1, Darker 50%" },
        { "i": "52", "clr": "0c0c0c", "tt": "Black, Text 1, Lighter 5%" },
        { "i": "53", "clr": "141718", "tt": "Ice Blue, Background 2, Darker 90%" },
        { "i": "54", "clr": "192d3a", "tt": "Dark Teal, Text 2, Darker 50%" },
        { "i": "55", "clr": "0d5672", "tt": "Turquoise, Accent 1, Darker 50%" },
        { "i": "56", "clr": "124163", "tt": "Blue, Accent 2, Darker 50%" },
        { "i": "57", "clr": "13676b", "tt": "Turquoise, Accent 3, Darker 50%" },
        { "i": "58", "clr": "215d4b", "tt": "Green, Accent 4, Darker 50%" },
        { "i": "59", "clr": "1e4429", "tt": "Dark Green, Accent 5, Darker 50%" },
        { "i": "60", "clr": "305250", "tt": "Teal, Accent 6, Darker 50%" },
		{ "i": "61", "clr": "C00000", "tt": "Dark Red" },
		{ "i": "62", "clr": "FF0000", "tt": "Red" },
		{ "i": "63", "clr": "FFC000", "tt": "Orange" },
		{ "i": "64", "clr": "FFFF00", "tt": "Yellow" },
		{ "i": "65", "clr": "92D050", "tt": "Light Green" },
		{ "i": "66", "clr": "00B050", "tt": "Green" },
		{ "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
		{ "i": "68", "clr": "0070C0", "tt": "Blue" },
		{ "i": "69", "clr": "002060", "tt": "Dark Blue" },
		{ "i": "70", "clr": "7030A0", "tt": "Purple" },
        { "i": "71", "clr": "NoFill", "tt": "NoFill" }
    ]
    },
    {
        "type": "ColorGrid",
        "colorGridType": "patternColor",
        "theme": "Blue3",
        "colors": [
		{ "i": "0", "clr": "Automatic", "tt": "No Color" },
        { "i": "1", "clr": "ffffff", "tt": "White, Background 1" },
        { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
        { "i": "3", "clr": "dfe3e5", "tt": "Ice Blue, Background 2" },
        { "i": "4", "clr": "335b74", "tt": "Dark Teal, Text 2" },
        { "i": "5", "clr": "1cade4", "tt": "Turquoise, Accent 1" },
        { "i": "6", "clr": "5eccf3", "tt": "Turquoise Accent 2" },
        { "i": "7", "clr": "27ced7", "tt": "Turquoise, Accent 3" },
        { "i": "8", "clr": "42ba97", "tt": "Green, Accent 4" },
        { "i": "9", "clr": "3e8853", "tt": "Dark Green, Accent 5" },
        { "i": "10", "clr": "62a39f", "tt": "Teal, Accent 6" },
        { "i": "11", "clr": "f2f2f2", "tt": "White, Background 1, Darker 5%" },
        { "i": "12", "clr": "7f7f7f", "tt": "Black, Text 1, Lighter 50%" },
        { "i": "13", "clr": "c6cdd0", "tt": "Ice Blue, Background 2, Darker 10%" },
        { "i": "14", "clr": "cfdfea", "tt": "Dark Teal, Text 2, Lighter 80%" },
        { "i": "15", "clr": "d1eef9", "tt": "Turquoise, Accent 1, Lighter 80%" },
        { "i": "16", "clr": "ddf5fd", "tt": "Turquoise Accent 2, Lighter 80%" },
        { "i": "17", "clr": "d3f5f7", "tt": "Turquoise, Accent 3, Lighter 80%" },
        { "i": "18", "clr": "d8f1ea", "tt": "Green, Accent 4, Lighter 80%" },
        { "i": "19", "clr": "d4ebda", "tt": "Dark Green, Accent 5, Lighter 80%" },
        { "i": "20", "clr": "dfeceb", "tt": "Teal, Accent 6, Lighter 80%" },
        { "i": "21", "clr": "d8d8d8", "tt": "White, Background 1, Darker 15%" },
        { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
        { "i": "23", "clr": "a0acb2", "tt": "Ice Blue, Background 2, Darker 25%" },
        { "i": "24", "clr": "9fc0d5", "tt": "Dark Teal, Text 2, Lighter 60%" },
        { "i": "25", "clr": "a4def4", "tt": "Turquoise, Accent 1, Lighter 60%" },
        { "i": "26", "clr": "beebfa", "tt": "Turquoise Accent 2, Lighter 60%" },
        { "i": "27", "clr": "a8ebef", "tt": "Turquoise, Accent 3, Lighter 60%" },
        { "i": "28", "clr": "b2e3d5", "tt": "Green, Accent 4, Lighter 60%" },
        { "i": "29", "clr": "a9d7b6", "tt": "Dark Green, Accent 5, Lighter 60%" },
        { "i": "30", "clr": "c0dad8", "tt": "Teal, Accent 6, Lighter 60%" },
        { "i": "31", "clr": "bfbfbf", "tt": "White, Background 1, Darker 25%" },
        { "i": "32", "clr": "3f3f3f", "tt": "Black, Text 1, Lighter 25%" },
        { "i": "33", "clr": "65747c", "tt": "Ice Blue, Background 2, Darker 50%" },
        { "i": "34", "clr": "70a1c0", "tt": "Dark Teal, Text 2, Lighter 40%" },
        { "i": "35", "clr": "76cdee", "tt": "Turquoise, Accent 1, Lighter 40%" },
        { "i": "36", "clr": "9ee1f8", "tt": "Turquoise Accent 2, Lighter 40%" },
        { "i": "37", "clr": "7ce1e7", "tt": "Turquoise, Accent 3, Lighter 40%" },
        { "i": "38", "clr": "8cd6c0", "tt": "Green, Accent 4, Lighter 40%" },
        { "i": "39", "clr": "7ec492", "tt": "Dark Green, Accent 5, Lighter 40%" },
        { "i": "40", "clr": "a0c7c5", "tt": "Teal, Accent 6, Lighter 40%" },
        { "i": "41", "clr": "a5a5a5", "tt": "White, Background 1, Darker 35%" },
        { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
        { "i": "43", "clr": "323a3e", "tt": "Ice Blue, Background 2, Darker 75%" },
        { "i": "44", "clr": "264457", "tt": "Dark Teal, Text 2, Darker 25%" },
        { "i": "45", "clr": "1482ab", "tt": "Turquoise, Accent 1, Darker 25%" },
        { "i": "46", "clr": "11b6ec", "tt": "Turquoise Accent 2, Darker 25%" },
        { "i": "47", "clr": "1d9aa1", "tt": "Turquoise, Accent 3, Darker 25%" },
        { "i": "48", "clr": "318b71", "tt": "Green, Accent 4, Darker 25%" },
        { "i": "49", "clr": "2e663e", "tt": "Dark Green, Accent 5, Darker 25%" },
        { "i": "50", "clr": "487b78", "tt": "Teal, Accent 6, Darker 25%" },
        { "i": "51", "clr": "7f7f7f", "tt": "White, Background 1, Darker 50%" },
        { "i": "52", "clr": "0c0c0c", "tt": "Black, Text 1, Lighter 5%" },
        { "i": "53", "clr": "141718", "tt": "Ice Blue, Background 2, Darker 90%" },
        { "i": "54", "clr": "192d3a", "tt": "Dark Teal, Text 2, Darker 50%" },
        { "i": "55", "clr": "0d5672", "tt": "Turquoise, Accent 1, Darker 50%" },
        { "i": "56", "clr": "0c789c", "tt": "Turquoise Accent 2, Darker 50%" },
        { "i": "57", "clr": "13676b", "tt": "Turquoise, Accent 3, Darker 50%" },
        { "i": "58", "clr": "215d4b", "tt": "Green, Accent 4, Darker 50%" },
        { "i": "59", "clr": "1e4429", "tt": "Dark Green, Accent 5, Darker 50%" },
        { "i": "60", "clr": "305250", "tt": "Teal, Accent 6, Darker 50%" },
		{ "i": "61", "clr": "C00000", "tt": "Dark Red" },
		{ "i": "62", "clr": "FF0000", "tt": "Red" },
		{ "i": "63", "clr": "FFC000", "tt": "Orange" },
		{ "i": "64", "clr": "FFFF00", "tt": "Yellow" },
		{ "i": "65", "clr": "92D050", "tt": "Light Green" },
		{ "i": "66", "clr": "00B050", "tt": "Green" },
		{ "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
		{ "i": "68", "clr": "0070C0", "tt": "Blue" },
		{ "i": "69", "clr": "002060", "tt": "Dark Blue" },
		{ "i": "70", "clr": "7030A0", "tt": "Purple" },
        { "i": "71", "clr": "NoFill", "tt": "NoFill" }
    ]
    },
    {
        "type": "ColorGrid",
        "colorGridType": "patternColor",
        "theme": "Perspective",
        "colors": [
        { "i": "0", "clr": "Automatic", "tt": "No Color" },
        { "i": "1", "clr": "ffffff", "tt": "White, Background 1" },
        { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
        { "i": "3", "clr": "b4dcfa", "tt": "Light Blue, Background 2" },
        { "i": "4", "clr": "212745", "tt": "Indigo 2" },
        { "i": "5", "clr": "4e67c8", "tt": "Blue, Accent 1" },
		{ "i": "6", "clr": "5eccf3", "tt": "Turquoise Accent 2" },
		{ "i": "7", "clr": "a7ea52", "tt": "Green, Accent 2" },
		{ "i": "8", "clr": "5dceaf", "tt": "Green, Accent 4" },
		{ "i": "9", "clr": "ff8021", "tt": "Orange, Accent 5" },	
		{ "i": "10", "clr": "f14124", "tt": "Red, Accent 6" },	
        { "i": "11", "clr": "f2f2f2", "tt": "White, Background 1, Darker 5%" },
        { "i": "12", "clr": "7f7f7f", "tt": "Black, Text 1, Lighter 50%" },
        { "i": "13", "clr": "8bc9f7", "tt": "Light Blue, Background 2, Darker 10%" },
        { "i": "14", "clr": "c7cce4", "tt": "Indigo 2, Lighter 80%" },
        { "i": "15", "clr": "dbe0f3", "tt": "Blue, Accent 1, Lighter 80%" },
        { "i": "16", "clr": "ddf5fd", "tt": "Turquoise Accent 2, Lighter 80%" },
        { "i": "17", "clr": "edfadc", "tt": "Green, Accent 2, Lighter 80%" },
        { "i": "18", "clr": "def5ef", "tt": "Green, Accent 4, Lighter 80%" },
        { "i": "19", "clr": "ffe5d2", "tt": "Orange, Accent 5, Lighter 80%" },
        { "i": "20", "clr": "fcd9d3", "tt": "Red, Accent 6, Lighter 80%" },
        { "i": "21", "clr": "d8d8d8", "tt": "White, Background 1, Darker 15%" },
        { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
        { "i": "23", "clr": "4facf3", "tt": "Light Blue, Background 2, Darker 25%" },
        { "i": "24", "clr": "909aca", "tt": "Indigo 2, Lighter 60%" },
        { "i": "25", "clr": "b8c2e9", "tt": "Blue, Accent 1, Lighter 60%" },
        { "i": "26", "clr": "beebfa", "tt": "Turquoise Accent 2, Lighter 60%" },
        { "i": "27", "clr": "dbf6b9", "tt": "Green, Accent 2, Lighter 60%" },
        { "i": "28", "clr": "beebdf", "tt": "Green, Accent 4, Lighter 60%" },
        { "i": "29", "clr": "fecca6", "tt": "Orange, Accent 5, Lighter 60%" },
        { "i": "30", "clr": "f9b3a7", "tt": "Red, Accent 6, Lighter 60%" },
        { "i": "31", "clr": "bfbfbf", "tt": "White, Background 1, Darker 25%" },
        { "i": "32", "clr": "3f3f3f", "tt": "Black, Text 1, Lighter 25%" },
        { "i": "33", "clr": "0d78c9", "tt": "Light Blue, Background 2, Darker 50%" },
        { "i": "34", "clr": "5967af", "tt": "Indigo 2, Lighter 40%" },
        { "i": "35", "clr": "94a3dd", "tt": "Blue, Accent 1, Lighter 40%" },
        { "i": "36", "clr": "9ee1f8", "tt": "Turquoise Accent 2, Lighter 40%" },
        { "i": "37", "clr": "caf297", "tt": "Green, Accent 2, Lighter 40%" },
        { "i": "38", "clr": "9de1ce", "tt": "Green, Accent 4, Lighter 40%" },
        { "i": "39", "clr": "ffb279", "tt": "Orange, Accent 5, Lighter 40%" },
        { "i": "40", "clr": "f68d7b", "tt": "Red, Accent 6, Lighter 40%" },
        { "i": "41", "clr": "a5a5a5", "tt": "White, Background 1, Darker 35%" },
        { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
        { "i": "43", "clr": "063c64", "tt": "Light Blue, Background 2, Darker 75%" },
        { "i": "44", "clr": "181d33", "tt": "Indigo 2, Darker 25%" },
        { "i": "45", "clr": "31479f", "tt": "Blue, Accent 1, Darker 25%" },
        { "i": "46", "clr": "11b6ec", "tt": "Turquoise Accent 2, Darker 25%" },
        { "i": "47", "clr": "81d319", "tt": "Green, Accent 2, Darker 25%" },
        { "i": "48", "clr": "34ac8b", "tt": "Green, Accent 4, Darker 25%" },
        { "i": "49", "clr": "d85c00", "tt": "Orange, Accent 5, Darker 25%" },
        { "i": "50", "clr": "c3260c", "tt": "Red, Accent 6, Darker 25%" },
        { "i": "51", "clr": "7f7f7f", "tt": "White, Background 1, Darker 50%" },
        { "i": "52", "clr": "0c0c0c", "tt": "Black, Text 1, Lighter 5%" },
        { "i": "53", "clr": "021828", "tt": "Light Blue, Background 2, Darker 90%" },
        { "i": "54", "clr": "101322", "tt": "Indigo 2, Darker 50%" },
        { "i": "55", "clr": "202f6a", "tt": "Blue, Accent 1, Darker 50%" },
        { "i": "56", "clr": "0c789c", "tt": "Turquoise Accent 2, Darker 50%" },
        { "i": "57", "clr": "568c11", "tt": "Green, Accent 2, Darker 50%" },
        { "i": "58", "clr": "22725c", "tt": "Green, Accent 4, Darker 50%" },
        { "i": "59", "clr": "903d00", "tt": "Orange, Accent 5, Darker 50%" },
        { "i": "60", "clr": "821908", "tt": "Red, Accent 6, Darker 50%" },
		{ "i": "61", "clr": "C00000", "tt": "Dark Red" },
		{ "i": "62", "clr": "FF0000", "tt": "Red" },
		{ "i": "63", "clr": "FFC000", "tt": "Orange" },
		{ "i": "64", "clr": "FFFF00", "tt": "Yellow" },
		{ "i": "65", "clr": "92D050", "tt": "Light Green" },
		{ "i": "66", "clr": "00B050", "tt": "Green" },
		{ "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
		{ "i": "68", "clr": "0070C0", "tt": "Blue" },
		{ "i": "69", "clr": "002060", "tt": "Dark Blue" },
		{ "i": "70", "clr": "7030A0", "tt": "Purple" },
		{ "i": "71", "clr": "NoFill", "tt": "NoFill" }
    ]
    },
    {
        "type": "ColorGrid",
        "colorGridType": "patternColor",
        "theme": "Blue",
        "colors": [
            { "i": "0", "clr": "Automatic", "tt": "No Color" },
            { "i": "1", "clr": "ffffff", "tt": "White, Background 1" },
            { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
            { "i": "3", "clr": "dfe3e5", "tt": "Ice Blue, Background 2" },
            { "i": "4", "clr": "335b74", "tt": "Dark Teal, Text 2" },
            { "i": "5", "clr": "1cade4", "tt": "Turquoise, Accent 1" },
            { "i": "6", "clr": "2683c6", "tt": "Blue, Accent 2" },
            { "i": "7", "clr": "27ced7", "tt": "Turquoise, Accent 3" },
            { "i": "8", "clr": "42ba97", "tt": "Bright Green, Accent 4" },
            { "i": "9", "clr": "3e8853", "tt": "Green, Accent 5" },
            { "i": "10", "clr": "62a39f", "tt": "Teal, Accent 6" },
            { "i": "11", "clr": "f2f2f2", "tt": "White, Background 1, Darker 5%" },
            { "i": "12", "clr": "7f7f7f", "tt": "Black, Text 1, Lighter 50%" },
            { "i": "13", "clr": "c6cdd0", "tt": "Ice Blue, Background 2, Darker 10%" },
            { "i": "14", "clr": "cfdfea", "tt": "Dark Teal, Text 2, Lighter 80%" },
            { "i": "15", "clr": "d1eef9", "tt": "Turquoise, Accent 1, Lighter 80%" },
            { "i": "16", "clr": "d1e6f6", "tt": "Blue, Accent 2, Lighter 80%" },
            { "i": "17", "clr": "d3f5f7", "tt": "Turquoise, Accent 3, Lighter 80%" },
            { "i": "18", "clr": "d8f1ea", "tt": "Bright Green, Accent 4, Lighter 80%" },
            { "i": "19", "clr": "d4ebda", "tt": "Green, Accent 5, Lighter 80%" },
            { "i": "20", "clr": "dfeceb", "tt": "Teal, Accent 6, Lighter 80%" },
            { "i": "21", "clr": "d8d8d8", "tt": "White, Background 1, Darker 15%" },
            { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
            { "i": "23", "clr": "a0acb2", "tt": "Ice Blue, Background 2, Darker 25%" },
            { "i": "24", "clr": "9fc0d5", "tt": "Dark Teal, Text 2, Lighter 60%" },
            { "i": "25", "clr": "a4def4", "tt": "Turquoise, Accent 1, Lighter 60%" },
            { "i": "26", "clr": "a3ceed", "tt": "Blue, Accent 2, Lighter 60%" },
            { "i": "27", "clr": "a8ebef", "tt": "Turquoise, Accent 3, Lighter 60%" },
            { "i": "28", "clr": "b2e3d5", "tt": "Bright Green, Accent 4, Lighter 60%" },
            { "i": "29", "clr": "a9d7b6", "tt": "Green, Accent 5, Lighter 60%" },
            { "i": "30", "clr": "c0dad8", "tt": "Teal, Accent 6, Lighter 60%" },
            { "i": "31", "clr": "bfbfbf", "tt": "White, Background 1, Darker 25%" },
            { "i": "32", "clr": "3f3f3f", "tt": "Black, Text 1, Lighter 25%" },
            { "i": "33", "clr": "65747c", "tt": "Ice Blue, Background 2, Darker 50%" },
            { "i": "34", "clr": "70a1c0", "tt": "Dark Teal, Text 2, Lighter 40%" },
            { "i": "35", "clr": "76cdee", "tt": "Turquoise, Accent 1, Lighter 40%" },
            { "i": "36", "clr": "75b5e4", "tt": "Blue, Accent 2, Lighter 40%" },
            { "i": "37", "clr": "7ce1e7", "tt": "Turquoise, Accent 3, Lighter 40%" },
            { "i": "38", "clr": "8cd6c0", "tt": "Bright Green, Accent 4, Lighter 40%" },
            { "i": "39", "clr": "7ec492", "tt": "Green, Accent 5, Lighter 40%" },
            { "i": "40", "clr": "a0c7c5", "tt": "Teal, Accent 6, Lighter 40%" },
            { "i": "41", "clr": "a5a5a5", "tt": "White, Background 1, Darker 35%" },
            { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
            { "i": "43", "clr": "323a3e", "tt": "Ice Blue, Background 2, Darker 75%" },
            { "i": "44", "clr": "264457", "tt": "Dark Teal, Text 2, Darker 25%" },
            { "i": "45", "clr": "1482ab", "tt": "Turquoise, Accent 1, Darker 25%" },
            { "i": "46", "clr": "1c6294", "tt": "Blue, Accent 2, Darker 25%" },
            { "i": "47", "clr": "1d9aa1", "tt": "Turquoise, Accent 3, Darker 25%" },
            { "i": "48", "clr": "318b71", "tt": "Bright Green, Accent 4, Darker 25%" },
            { "i": "49", "clr": "2e663e", "tt": "Green, Accent 5, Darker 25%" },
            { "i": "50", "clr": "487b78", "tt": "Teal, Accent 6, Darker 25%" },
            { "i": "51", "clr": "7f7f7f", "tt": "White, Background 1, Darker 50%" },
            { "i": "52", "clr": "0c0c0c", "tt": "Black, Text 1, Lighter 5%" },
            { "i": "53", "clr": "141718", "tt": "Ice Blue, Background 2, Darker 90%" },
            { "i": "54", "clr": "192d3a", "tt": "Dark Teal, Text 2, Darker 50%" },
            { "i": "55", "clr": "0d5672", "tt": "Turquoise, Accent 1, Darker 50%" },
            { "i": "56", "clr": "124163", "tt": "Blue, Accent 2, Darker 50%" },
            { "i": "57", "clr": "13676b", "tt": "Turquoise, Accent 3, Darker 50%" },
            { "i": "58", "clr": "215d4b", "tt": "Bright Green, Accent 4, Darker 50%" },
            { "i": "59", "clr": "1e4429", "tt": "Green, Accent 5, Darker 50%" },
            { "i": "60", "clr": "305250", "tt": "Teal, Accent 6, Darker 50%" },
            { "i": "61", "clr": "C00000", "tt": "Dark Red" },
            { "i": "62", "clr": "FF0000", "tt": "Red" },
            { "i": "63", "clr": "FFC000", "tt": "Orange" },
            { "i": "64", "clr": "FFFF00", "tt": "Yellow" },
            { "i": "65", "clr": "92D050", "tt": "Light Green" },
            { "i": "66", "clr": "00B050", "tt": "Green" },
            { "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
            { "i": "68", "clr": "0070C0", "tt": "Blue" },
            { "i": "69", "clr": "002060", "tt": "Dark Blue" },
            { "i": "70", "clr": "7030A0", "tt": "Purple" },
            { "i": "71", "clr": "NoFill", "tt": "NoFill" }
        ]
    },
    {
        "type": "ColorGrid",
        "colorGridType": "patternColor",
        "theme": "Violet2",
        "colors": [
		{ "i": "0", "clr": "Automatic", "tt": "No Color" },
        { "i": "1", "clr": "ffffff", "tt": "White, Background 1" },
        { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
        { "i": "3", "clr": "eae5eb", "tt": "Lavender, Background 2" },
        { "i": "4", "clr": "632e62", "tt": "Dark Purple, Text 2" },
        { "i": "5", "clr": "92278f", "tt": "Plum, Accent 1" },
        { "i": "6", "clr": "9b57d3", "tt": "Purple, Accent 2" },
        { "i": "7", "clr": "755dd9", "tt": "Blue, Accent 3" },
        { "i": "8", "clr": "665eb8", "tt": "Purple, Accent 4" },
        { "i": "9", "clr": "45a5ed", "tt": "Blue, Accent 5" },
        { "i": "10", "clr": "5982db", "tt": "Blue, Accent 6" },
        { "i": "11", "clr": "f2f2f2", "tt": "White, Background 1, Darker 5%" },
        { "i": "12", "clr": "7f7f7f", "tt": "Black, Text 1, Lighter 50%" },
        { "i": "13", "clr": "d4cad6", "tt": "Lavender, Background 2, Darker 10%" },
        { "i": "14", "clr": "e7cde7", "tt": "Dark Purple, Text 2, Lighter 80%" },
        { "i": "15", "clr": "f1cbf0", "tt": "Plum, Accent 1, Lighter 80%" },
        { "i": "16", "clr": "ebddf6", "tt": "Purple, Accent 2, Lighter 80%" },
        { "i": "17", "clr": "e3def7", "tt": "Blue, Accent 3, Lighter 80%" },
        { "i": "18", "clr": "e0def0", "tt": "Purple, Accent 4, Lighter 80%" },
        { "i": "19", "clr": "d9edfb", "tt": "Blue, Accent 5, Lighter 80%" },
        { "i": "20", "clr": "dde6f7", "tt": "Blue, Accent 6, Lighter 80%" },
        { "i": "21", "clr": "d8d8d8", "tt": "White, Background 1, Darker 15%" },
        { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
        { "i": "23", "clr": "b5a3b8", "tt": "Lavender, Background 2, Darker 25%" },
        { "i": "24", "clr": "d09bcf", "tt": "Dark Purple, Text 2, Lighter 60%" },
        { "i": "25", "clr": "e398e1", "tt": "Plum, Accent 1, Lighter 60%" },
        { "i": "26", "clr": "d7bbed", "tt": "Purple, Accent 2, Lighter 60%" },
        { "i": "27", "clr": "c7beef", "tt": "Blue, Accent 3, Lighter 60%" },
        { "i": "28", "clr": "c1bee2", "tt": "Purple, Accent 4, Lighter 60%" },
        { "i": "29", "clr": "b4dbf7", "tt": "Blue, Accent 5, Lighter 60%" },
        { "i": "30", "clr": "bccdf0", "tt": "Blue, Accent 6, Lighter 60%" },
        { "i": "31", "clr": "bfbfbf", "tt": "White, Background 1, Darker 25%" },
        { "i": "32", "clr": "3f3f3f", "tt": "Black, Text 1, Lighter 25%" },
        { "i": "33", "clr": "7e6483", "tt": "Lavender, Background 2, Darker 50%" },
        { "i": "34", "clr": "b969b8", "tt": "Dark Purple, Text 2, Lighter 40%" },
        { "i": "35", "clr": "d565d2", "tt": "Plum, Accent 1, Lighter 40%" },
        { "i": "36", "clr": "c39ae4", "tt": "Purple, Accent 2, Lighter 40%" },
        { "i": "37", "clr": "ac9de8", "tt": "Blue, Accent 3, Lighter 40%" },
        { "i": "38", "clr": "a39ed4", "tt": "Purple, Accent 4, Lighter 40%" },
        { "i": "39", "clr": "8fc9f4", "tt": "Blue, Accent 5, Lighter 40%" },
        { "i": "40", "clr": "9bb4e9", "tt": "Blue, Accent 6, Lighter 40%" },
        { "i": "41", "clr": "a5a5a5", "tt": "White, Background 1, Darker 35%" },
        { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
        { "i": "43", "clr": "3f3241", "tt": "Lavender, Background 2, Darker 75%" },
        { "i": "44", "clr": "4a2249", "tt": "Dark Purple, Text 2, Darker 25%" },
        { "i": "45", "clr": "6d1d6b", "tt": "Plum, Accent 1, Darker 25%" },
        { "i": "46", "clr": "762eb1", "tt": "Purple, Accent 2, Darker 25%" },
        { "i": "47", "clr": "482cbc", "tt": "Blue, Accent 3, Darker 25%" },
        { "i": "48", "clr": "463f90", "tt": "Purple, Accent 4, Darker 25%" },
        { "i": "49", "clr": "1480d1", "tt": "Blue, Accent 5, Darker 25%" },
        { "i": "50", "clr": "2958bd", "tt": "Blue, Accent 6, Darker 25%" },
        { "i": "51", "clr": "7f7f7f", "tt": "White, Background 1, Darker 50%" },
        { "i": "52", "clr": "0c0c0c", "tt": "Black, Text 1, Lighter 5%" },
        { "i": "53", "clr": "19141a", "tt": "Lavender, Background 2, Darker 90%" },
        { "i": "54", "clr": "311631", "tt": "Dark Purple, Text 2, Darker 50%" },
        { "i": "55", "clr": "491347", "tt": "Plum, Accent 1, Darker 50%" },
        { "i": "56", "clr": "4e1e76", "tt": "Purple, Accent 2, Darker 50%" },
        { "i": "57", "clr": "301d7d", "tt": "Blue, Accent 3, Darker 50%" },
        { "i": "58", "clr": "2f2a60", "tt": "Purple, Accent 4, Darker 50%" },
        { "i": "59", "clr": "0d558b", "tt": "Blue, Accent 5, Darker 50%" },
        { "i": "60", "clr": "1b3a7e", "tt": "Blue, Accent 6, Darker 50%" },
		{ "i": "61", "clr": "C00000", "tt": "Dark Red" },
		{ "i": "62", "clr": "FF0000", "tt": "Red" },
		{ "i": "63", "clr": "FFC000", "tt": "Orange" },
		{ "i": "64", "clr": "FFFF00", "tt": "Yellow" },
		{ "i": "65", "clr": "92D050", "tt": "Light Green" },
		{ "i": "66", "clr": "00B050", "tt": "Green" },
		{ "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
		{ "i": "68", "clr": "0070C0", "tt": "Blue" },
		{ "i": "69", "clr": "002060", "tt": "Dark Blue" },
		{ "i": "70", "clr": "7030A0", "tt": "Purple" },
        { "i": "71", "clr": "NoFill", "tt": "NoFill" }
    ]
    },
	{
	    "colorGridType": "backgroundColor",
	    "theme": "Office",
	    "colors": [
		{ "i": "0", "clr": "NoColor" },
		{ "i": "1", "clr": "FFFFFF" },
		{ "i": "2", "clr": "000000" },
		{ "i": "3", "clr": "EEECE1" },
		{ "i": "4", "clr": "1F497D" },
		{ "i": "5", "clr": "4F81BD" },
		{ "i": "6", "clr": "C0504D" },
		{ "i": "7", "clr": "9BBB59" },
		{ "i": "8", "clr": "8064A2" },
		{ "i": "9", "clr": "4BACC6" },
		{ "i": "10", "clr": "F79646" },
		{ "i": "11", "clr": "F2F2F2" },
		{ "i": "12", "clr": "808080" },
		{ "i": "13", "clr": "DDD9C4" },
		{ "i": "14", "clr": "C5D9F1" },
		{ "i": "15", "clr": "DCE6F1" },
		{ "i": "16", "clr": "F2DCDB" },
		{ "i": "17", "clr": "EBF1DE" },
		{ "i": "18", "clr": "E4DFEC" },
		{ "i": "19", "clr": "DAEEF3" },
		{ "i": "20", "clr": "FDE9D9" },
		{ "i": "21", "clr": "D9D9D9" },
		{ "i": "22", "clr": "595959" },
		{ "i": "23", "clr": "C4BD97" },
		{ "i": "24", "clr": "8DB4E2" },
		{ "i": "25", "clr": "B8CCE4" },
		{ "i": "26", "clr": "E6B8B7" },
		{ "i": "27", "clr": "D8E4BC" },
		{ "i": "28", "clr": "CCC0DA" },
		{ "i": "29", "clr": "B7DEE8" },
		{ "i": "30", "clr": "FCD5B4" },
		{ "i": "31", "clr": "BFBFBF" },
		{ "i": "32", "clr": "404040" },
		{ "i": "33", "clr": "948A54" },
		{ "i": "34", "clr": "538DD5" },
		{ "i": "35", "clr": "95B3D7" },
		{ "i": "36", "clr": "DA9694" },
		{ "i": "37", "clr": "C4D79B" },
		{ "i": "38", "clr": "B1A0C7" },
		{ "i": "39", "clr": "92CDDC" },
		{ "i": "40", "clr": "FABF8F" },
		{ "i": "41", "clr": "A6A6A6" },
		{ "i": "42", "clr": "262626" },
		{ "i": "43", "clr": "494529" },
		{ "i": "44", "clr": "16365C" },
		{ "i": "45", "clr": "366092" },
		{ "i": "46", "clr": "963634" },
		{ "i": "47", "clr": "76933C" },
		{ "i": "48", "clr": "60497A" },
		{ "i": "49", "clr": "31869B" },
		{ "i": "50", "clr": "E26B0A" },
		{ "i": "51", "clr": "808080" },
		{ "i": "52", "clr": "0D0D0D" },
		{ "i": "53", "clr": "1D1B10" },
		{ "i": "54", "clr": "0F243E" },
		{ "i": "55", "clr": "244062" },
		{ "i": "56", "clr": "632523" },
		{ "i": "57", "clr": "4F6228" },
		{ "i": "58", "clr": "403151" },
		{ "i": "59", "clr": "215967" },
		{ "i": "60", "clr": "974706" },
		{ "i": "61", "clr": "C00000" },
		{ "i": "62", "clr": "FF0000" },
		{ "i": "63", "clr": "FFC000" },
		{ "i": "64", "clr": "FFFF00" },
		{ "i": "65", "clr": "92D050" },
		{ "i": "66", "clr": "00B050" },
		{ "i": "67", "clr": "00B0F0" },
		{ "i": "68", "clr": "0070C0" },
		{ "i": "69", "clr": "002060" },
		{ "i": "70", "clr": "7030A0" }
    ]
	},
    {
        "colorGridType": "backgroundColor",
        "theme": "EmeraldCoast", // used in task GO13.XL13.05.5A.06.T1
        "colors": [
		{ "i": "0", "clr": "NoColor" },
		{ "i": "1", "clr": "FFFFFF" },
		{ "i": "2", "clr": "000000" },
		{ "i": "3", "clr": "DBF5F9" },
		{ "i": "4", "clr": "04617B" },
		{ "i": "5", "clr": "0F6FC6" },
		{ "i": "6", "clr": "009DD9" },
		{ "i": "7", "clr": "0BD0D9" },
		{ "i": "8", "clr": "10CF9B" },
		{ "i": "9", "clr": "7CCA62" },
		{ "i": "10", "clr": "A5C249" },
		{ "i": "11", "clr": "D9D9D9" },
        { "i": "12", "clr": "808080" },
		{ "i": "13", "clr": "B3EBF2" },
		{ "i": "14", "clr": "BFEDFD" },
		{ "i": "15", "clr": "C8E2FB" },
		{ "i": "16", "clr": "C4EFFF" },
		{ "i": "17", "clr": "C9FAFC" },
		{ "i": "18", "clr": "CAFBED" },
		{ "i": "19", "clr": "E4F4DF" },
		{ "i": "20", "clr": "EDF2DB" },
		{ "i": "21", "clr": "BFBFBF" },
        { "i": "22", "clr": "595959" },
		{ "i": "23", "clr": "77DAE8" },
		{ "i": "24", "clr": "6BDAFA" },
		{ "i": "25", "clr": "91C6F7" },
		{ "i": "26", "clr": "88DEFF" },
		{ "i": "27", "clr": "92F4FA" },
		{ "i": "28", "clr": "95F7DC" },
		{ "i": "29", "clr": "CAEABF" },
		{ "i": "30", "clr": "DBE7B6" },
		{ "i": "31", "clr": "A6A6A6" },
        { "i": "32", "clr": "404040" },
		{ "i": "33", "clr": "22B4C8" },
		{ "i": "34", "clr": "21C8F8" },
		{ "i": "35", "clr": "59AAF2" },
		{ "i": "36", "clr": "4FCEFF" },
		{ "i": "37", "clr": "5EEFF7" },
		{ "i": "38", "clr": "5FF3CB" },
		{ "i": "39", "clr": "AFDF9F" },
		{ "i": "40", "clr": "C8DA92" },
		{ "i": "41", "clr": "808080" },
        { "i": "42", "clr": "262626" },
		{ "i": "43", "clr": "115964" },
		{ "i": "44", "clr": "03485C" },
		{ "i": "45", "clr": "0C5394" },
		{ "i": "46", "clr": "0075A2" },
		{ "i": "47", "clr": "099AA2" },
		{ "i": "48", "clr": "0C9A73" },
		{ "i": "49", "clr": "54A738" },
		{ "i": "50", "clr": "7D9632" },
		{ "i": "51", "clr": "808080" },
        { "i": "52", "clr": "0D0D0D" },
		{ "i": "53", "clr": "062428" },
		{ "i": "54", "clr": "02303E" },
		{ "i": "55", "clr": "073763" },
		{ "i": "56", "clr": "004F6C" },
		{ "i": "57", "clr": "05666B" },
		{ "i": "58", "clr": "07674D" },
		{ "i": "59", "clr": "387025" },
		{ "i": "60", "clr": "546521" },		
		{ "i": "61", "clr": "C00000" },
		{ "i": "62", "clr": "FF0000" },
		{ "i": "63", "clr": "FFC000" },
		{ "i": "64", "clr": "FFFF00" },
		{ "i": "65", "clr": "92D050" },
		{ "i": "66", "clr": "00B050" },
		{ "i": "67", "clr": "00B0F0" },
		{ "i": "68", "clr": "0070C0" },
		{ "i": "69", "clr": "002060" },
		{ "i": "70", "clr": "7030A0" }
    ]
    },
    {
        "type": "ColorGrid",
        "colorGridType": "patternColor",
        "theme": "PPT_ION_BOARDROOM",
        "colors": [
            { "i": "0", "clr": "Automatic", "tt": "No Color" },
            { "i": "1", "clr": "ffffff", "tt": "White, Background 1" },
            { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
            { "i": "3", "clr": "dfe3e5", "tt": "Ice Blue, Background 2" },
            { "i": "4", "clr": "335b74", "tt": "Dark Teal, Text 2" },
            { "i": "5", "clr": "1cade4", "tt": "Turquoise, Accent 1" },
            { "i": "6", "clr": "2683c6", "tt": "Blue, Accent 2" },
            { "i": "7", "clr": "27ced7", "tt": "Turquoise, Accent 3" },
            { "i": "8", "clr": "42ba97", "tt": "Green, Accent 4" },
            { "i": "9", "clr": "3e8853", "tt": "Dark Green, Accent 5" },
            { "i": "10", "clr": "9E5E9B", "tt": "Purple, Accent 6" },
            { "i": "11", "clr": "f2f2f2", "tt": "White, Background 1, Darker 5%" },
            { "i": "12", "clr": "7f7f7f", "tt": "Black, Text 1, Lighter 50%" },
            { "i": "13", "clr": "c6cdd0", "tt": "Ice Blue, Background 2, Darker 10%" },
            { "i": "14", "clr": "cfdfea", "tt": "Dark Teal, Text 2, Lighter 80%" },
            { "i": "15", "clr": "d1eef9", "tt": "Turquoise, Accent 1, Lighter 80%" },
            { "i": "16", "clr": "d1e6f6", "tt": "Blue, Accent 2, Lighter 80%" },
            { "i": "17", "clr": "d3f5f7", "tt": "Turquoise, Accent 3, Lighter 80%" },
            { "i": "18", "clr": "d8f1ea", "tt": "Green, Accent 4, Lighter 80%" },
            { "i": "19", "clr": "d4ebda", "tt": "Dark Green, Accent 5, Lighter 80%" },
            { "i": "20", "clr": "EBDEEB", "tt": "Purple, Accent 6, Lighter 80%" },
            { "i": "21", "clr": "d8d8d8", "tt": "White, Background 1, Darker 15%" },
            { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
            { "i": "23", "clr": "a0acb2", "tt": "Ice Blue, Background 2, Darker 25%" },
            { "i": "24", "clr": "9fc0d5", "tt": "Dark Teal, Text 2, Lighter 60%" },
            { "i": "25", "clr": "a4def4", "tt": "Turquoise, Accent 1, Lighter 60%" },
            { "i": "26", "clr": "a3ceed", "tt": "Blue, Accent 2, Lighter 60%" },
            { "i": "27", "clr": "a8ebef", "tt": "Turquoise, Accent 3, Lighter 60%" },
            { "i": "28", "clr": "b2e3d5", "tt": "Green, Accent 4, Lighter 60%" },
            { "i": "29", "clr": "a9d7b6", "tt": "Dark Green, Accent 5, Lighter 60%" },
            { "i": "30", "clr": "D8BED7", "tt": "Purple, Accent 6, Lighter 60%" },
            { "i": "31", "clr": "bfbfbf", "tt": "White, Background 1, Darker 25%" },
            { "i": "32", "clr": "3f3f3f", "tt": "Black, Text 1, Lighter 25%" },
            { "i": "33", "clr": "65747c", "tt": "Ice Blue, Background 2, Darker 50%" },
            { "i": "34", "clr": "70a1c0", "tt": "Dark Teal, Text 2, Lighter 40%" },
            { "i": "35", "clr": "76cdee", "tt": "Turquoise, Accent 1, Lighter 40%" },
            { "i": "36", "clr": "75b5e4", "tt": "Blue, Accent 2, Lighter 40%" },
            { "i": "37", "clr": "7ce1e7", "tt": "Turquoise, Accent 3, Lighter 40%" },
            { "i": "38", "clr": "8cd6c0", "tt": "Green, Accent 4, Lighter 40%" },
            { "i": "39", "clr": "7ec492", "tt": "Dark Green, Accent 5, Lighter 40%" },
            { "i": "40", "clr": "C59DC3", "tt": "Purple, Accent 6, Lighter 40%" },
            { "i": "41", "clr": "a5a5a5", "tt": "White, Background 1, Darker 35%" },
            { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
            { "i": "43", "clr": "323a3e", "tt": "Ice Blue, Background 2, Darker 75%" },
            { "i": "44", "clr": "264457", "tt": "Dark Teal, Text 2, Darker 25%" },
            { "i": "45", "clr": "1482ab", "tt": "Turquoise, Accent 1, Darker 25%" },
            { "i": "46", "clr": "1c6294", "tt": "Blue, Accent 2, Darker 25%" },
            { "i": "47", "clr": "1d9aa1", "tt": "Turquoise, Accent 3, Darker 25%" },
            { "i": "48", "clr": "318b71", "tt": "Green, Accent 4, Darker 25%" },
            { "i": "49", "clr": "2e663e", "tt": "Dark Green, Accent 5, Darker 25%" },
            { "i": "50", "clr": "764674", "tt": "Purple, Accent 6, Darker 25%" },
            { "i": "51", "clr": "7f7f7f", "tt": "White, Background 1, Darker 50%" },
            { "i": "52", "clr": "0c0c0c", "tt": "Black, Text 1, Lighter 5%" },
            { "i": "53", "clr": "141718", "tt": "Ice Blue, Background 2, Darker 90%" },
            { "i": "54", "clr": "192d3a", "tt": "Dark Teal, Text 2, Darker 50%" },
            { "i": "55", "clr": "0d5672", "tt": "Turquoise, Accent 1, Darker 50%" },
            { "i": "56", "clr": "124163", "tt": "Blue, Accent 2, Darker 50%" },
            { "i": "57", "clr": "13676b", "tt": "Turquoise, Accent 3, Darker 50%" },
            { "i": "58", "clr": "215d4b", "tt": "Green, Accent 4, Darker 50%" },
            { "i": "59", "clr": "1e4429", "tt": "Dark Green, Accent 5, Darker 50%" },
            { "i": "60", "clr": "4F2F4D", "tt": "Purple, Accent 6, Darker 50%" },
            { "i": "61", "clr": "C00000", "tt": "Dark Red" },
            { "i": "62", "clr": "FF0000", "tt": "Red" },
            { "i": "63", "clr": "FFC000", "tt": "Orange" },
            { "i": "64", "clr": "FFFF00", "tt": "Yellow" },
            { "i": "65", "clr": "92D050", "tt": "Light Green" },
            { "i": "66", "clr": "00B050", "tt": "Green" },
            { "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
            { "i": "68", "clr": "0070C0", "tt": "Blue" },
            { "i": "69", "clr": "002060", "tt": "Dark Blue" },
            { "i": "70", "clr": "7030A0", "tt": "Purple" },
            { "i": "71", "clr": "NoFill", "tt": "NoFill" }
        ]
    },
    {
        "type": "ColorGrid",
        "colorGridType": "patternColor",
        "theme": "Integral",
        "colors": [
            { "i": "0", "clr": "Automatic", "tt": "No Color" },
            { "i": "1", "clr": "FFFFFF", "tt": "White, Background 1" },
            { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
            { "i": "3", "clr": "EEECE1", "tt": "Tan, Background 2" },
            { "i": "4", "clr": "605b4f", "tt": "Brown, Text 2" },
            { "i": "5", "clr": "4F81BD", "tt": "Blue, Accent 1" },
            { "i": "6", "clr": "C0504D", "tt": "Red, Accent 2" },
            { "i": "7", "clr": "9BBB59", "tt": "Olive Green, Accent 3" },
            { "i": "8", "clr": "8064A2", "tt": "Purple, Accent 4" },
            { "i": "9", "clr": "4BACC6", "tt": "Aqua, Accent 5" },
            { "i": "10", "clr": "F79646", "tt": "Orange, Accent 6" },
            { "i": "11", "clr": "F2F2F2", "tt": "White, Background 1, Darker 5%" },
            { "i": "12", "clr": "7F7F7F", "tt": "Black, Text 1, Lighter 50%" },
            { "i": "13", "clr": "DDD9C3", "tt": "Tan, Background 2, Darker 10%" },
            { "i": "14", "clr": "e0deda", "tt": "Brown, Text 2, Lighter 80%" },
            { "i": "15", "clr": "DBE5F1", "tt": "Blue, Accent 1, Lighter 80%" },
            { "i": "16", "clr": "F2DCDB", "tt": "Red, Accent 2, Lighter 80%" },
            { "i": "17", "clr": "EBF1DD", "tt": "Olive Green, Accent 3, Lighter 80%" },
            { "i": "18", "clr": "E5E0EC", "tt": "Purple, Accent 4, Lighter 80%" },
            { "i": "19", "clr": "DBEEF3", "tt": "Aqua, Accent 5, Lighter 80%" },
            { "i": "20", "clr": "FDEADA", "tt": "Orange, Accent 6, Lighter 80%" },
            { "i": "21", "clr": "D8D8D8", "tt": "White, Background 1, Darker 15%" },
            { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
            { "i": "23", "clr": "C4BD97", "tt": "Tan, Background 2, Darker 25%" },
            { "i": "24", "clr": "c2beb5", "tt": "Brown, Text 2, Lighter 60%" },
            { "i": "25", "clr": "B8CCE4", "tt": "Blue, Accent 1, Lighter 60%" },
            { "i": "26", "clr": "E5B9B7", "tt": "Red, Accent 2, Lighter 60%" },
            { "i": "27", "clr": "D7E3BC", "tt": "Olive Green, Accent 3, Lighter 60%" },
            { "i": "28", "clr": "CCC1D9", "tt": "Purple, Accent 4, Lighter 60%" },
            { "i": "29", "clr": "B7DDE8", "tt": "Aqua, Accent 5, Lighter 60%" },
            { "i": "30", "clr": "FBD5B5", "tt": "Orange, Accent 6, Lighter 60%" },
            { "i": "31", "clr": "BFBFBF", "tt": "White, Background 1, Darker 25%" },
            { "i": "32", "clr": "3F3F3F", "tt": "Black, Text 1, Lighter 25%" },
            { "i": "33", "clr": "938953", "tt": "Tan, Background 2, Darker 50%" },
            { "i": "34", "clr": "a49e90", "tt": "Brown, Text 2, Lighter 40%" },
            { "i": "35", "clr": "95B3D7", "tt": "Blue, Accent 1, Lighter 40%" },
            { "i": "36", "clr": "D99694", "tt": "Red, Accent 2, Lighter 40%" },
            { "i": "37", "clr": "C3D69B", "tt": "Olive Green, Accent 3, Lighter 40%" },
            { "i": "38", "clr": "B2A1C7", "tt": "Purple, Accent 4, Lighter 40%" },
            { "i": "39", "clr": "92CDDC", "tt": "Aqua, Accent 5, Lighter 40%" },
            { "i": "40", "clr": "FAC08F", "tt": "Orange, Accent 6, Lighter 40%" },
            { "i": "41", "clr": "A5A5A5", "tt": "White, Background 1, Darker 35%" },
            { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
            { "i": "43", "clr": "494429", "tt": "Tan, Background 2, Darker 75%" },
            { "i": "44", "clr": "47443b", "tt": "Brown, Text 2, Darker 25%" },
            { "i": "45", "clr": "366092", "tt": "Blue, Accent 1, Darker 25%" },
            { "i": "46", "clr": "953734", "tt": "Red, Accent 2, Darker 25%" },
            { "i": "47", "clr": "76923C", "tt": "Olive Green, Accent 3, Darker 25%" },
            { "i": "48", "clr": "5F497A", "tt": "Purple, Accent 4, Darker 25%" },
            { "i": "49", "clr": "31859B", "tt": "Aqua, Accent 5, Darker 25%" },
            { "i": "50", "clr": "E36C09", "tt": "Orange, Accent 6, Darker 25%" },
            { "i": "51", "clr": "7F7F7F", "tt": "White, Background 1, Darker 50%" },
            { "i": "52", "clr": "0C0C0C", "tt": "Black, Text 1, Lighter 5%" },
            { "i": "53", "clr": "1D1B10", "tt": "Tan, Background 2, Darker 90%" },
            { "i": "54", "clr": "302d27", "tt": "Brown, Text 2, Darker 50%" },
            { "i": "55", "clr": "244061", "tt": "Blue, Accent 1, Darker 50%" },
            { "i": "56", "clr": "632423", "tt": "Red, Accent 2, Darker 50%" },
            { "i": "57", "clr": "4F6128", "tt": "Olive Green, Accent 3, Darker 50%" },
            { "i": "58", "clr": "3F3151", "tt": "Purple, Accent 4, Darker 50%" },
            { "i": "59", "clr": "205867", "tt": "Aqua, Accent 5, Darker 50%" },
            { "i": "60", "clr": "974806", "tt": "Orange, Accent 6, Darker 50%" },
            { "i": "61", "clr": "C00000", "tt": "Dark Red" },
            { "i": "62", "clr": "FF0000", "tt": "Red" },
            { "i": "63", "clr": "FFC000", "tt": "Orange" },
            { "i": "64", "clr": "FFFF00", "tt": "Yellow" },
            { "i": "65", "clr": "92D050", "tt": "Light Green" },
            { "i": "66", "clr": "00B050", "tt": "Green" },
            { "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
            { "i": "68", "clr": "0070C0", "tt": "Blue" },
            { "i": "69", "clr": "002060", "tt": "Dark Blue" },
            { "i": "70", "clr": "7030A0", "tt": "Purple" },
            { "i": "71", "clr": "NoFill", "tt": "NoFill" }
        ]
    },
	{
	    "type": "ColorGrid",
	    "colorGridType": "patternColor",
	    "theme": "Office",
	    "colors": [
	{ "i": "0", "clr": "Automatic", "tt": "No Color" },
    { "i": "1", "clr": "FFFFFF", "tt": "White, Background 1" },
    { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
    { "i": "3", "clr": "EEECE1", "tt": "Tan, Background 2" },
    { "i": "4", "clr": "1F497D", "tt": "Dark Blue, Text 2" },
    { "i": "5", "clr": "4F81BD", "tt": "Blue, Accent 1" },
    { "i": "6", "clr": "C0504D", "tt": "Red, Accent 2" },
    { "i": "7", "clr": "9BBB59", "tt": "Olive Green, Accent 3" },
    { "i": "8", "clr": "8064A2", "tt": "Purple, Accent 4" },
    { "i": "9", "clr": "4BACC6", "tt": "Aqua, Accent 5" },
    { "i": "10", "clr": "F79646", "tt": "Orange, Accent 6" },
    { "i": "11", "clr": "F2F2F2", "tt": "White, Background 1, Darker 5%" },
    { "i": "12", "clr": "7F7F7F", "tt": "Black, Text 1, Lighter 50%" },
    { "i": "13", "clr": "DDD9C3", "tt": "Tan, Background 2, Darker 10%" },
    { "i": "14", "clr": "C6D9F0", "tt": "Dark Blue, Text 2, Lighter 80%" },
    { "i": "15", "clr": "DBE5F1", "tt": "Blue, Accent 1, Lighter 80%" },
    { "i": "16", "clr": "F2DCDB", "tt": "Red, Accent 2, Lighter 80%" },
    { "i": "17", "clr": "EBF1DD", "tt": "Olive Green, Accent 3, Lighter 80%" },
    { "i": "18", "clr": "E5E0EC", "tt": "Purple, Accent 4, Lighter 80%" },
    { "i": "19", "clr": "DBEEF3", "tt": "Aqua, Accent 5, Lighter 80%" },
    { "i": "20", "clr": "FDEADA", "tt": "Orange, Accent 6, Lighter 80%" },
    { "i": "21", "clr": "D8D8D8", "tt": "White, Background 1, Darker 15%" },
    { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
    { "i": "23", "clr": "C4BD97", "tt": "Tan, Background 2, Darker 25%" },
    { "i": "24", "clr": "8DB3E2", "tt": "Dark Blue, Text 2, Lighter 60%" },
    { "i": "25", "clr": "B8CCE4", "tt": "Blue, Accent 1, Lighter 60%" },
    { "i": "26", "clr": "E5B9B7", "tt": "Red, Accent 2, Lighter 60%" },
    { "i": "27", "clr": "D7E3BC", "tt": "Olive Green, Accent 3, Lighter 60%" },
    { "i": "28", "clr": "CCC1D9", "tt": "Purple, Accent 4, Lighter 60%" },
    { "i": "29", "clr": "B7DDE8", "tt": "Aqua, Accent 5, Lighter 60%" },
    { "i": "30", "clr": "FBD5B5", "tt": "Orange, Accent 6, Lighter 60%" },
    { "i": "31", "clr": "BFBFBF", "tt": "White, Background 1, Darker 25%" },
    { "i": "32", "clr": "3F3F3F", "tt": "Black, Text 1, Lighter 25%" },
    { "i": "33", "clr": "938953", "tt": "Tan, Background 2, Darker 50%" },
    { "i": "34", "clr": "548DD4", "tt": "Dark Blue, Text 2, Lighter 40%" },
    { "i": "35", "clr": "95B3D7", "tt": "Blue, Accent 1, Lighter 40%" },
    { "i": "36", "clr": "D99694", "tt": "Red, Accent 2, Lighter 40%" },
    { "i": "37", "clr": "C3D69B", "tt": "Olive Green, Accent 3, Lighter 40%" },
    { "i": "38", "clr": "B2A1C7", "tt": "Purple, Accent 4, Lighter 40%" },
    { "i": "39", "clr": "92CDDC", "tt": "Aqua, Accent 5, Lighter 40%" },
    { "i": "40", "clr": "FAC08F", "tt": "Orange, Accent 6, Lighter 40%" },
    { "i": "41", "clr": "A5A5A5", "tt": "White, Background 1, Darker 35%" },
    { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
    { "i": "43", "clr": "494429", "tt": "Tan, Background 2, Darker 75%" },
    { "i": "44", "clr": "17365D", "tt": "Dark Blue, Text 2, Darker 25%" },
    { "i": "45", "clr": "366092", "tt": "Blue, Accent 1, Darker 25%" },
    { "i": "46", "clr": "953734", "tt": "Red, Accent 2, Darker 25%" },
    { "i": "47", "clr": "76923C", "tt": "Olive Green, Accent 3, Darker 25%" },
    { "i": "48", "clr": "5F497A", "tt": "Purple, Accent 4, Darker 25%" },
    { "i": "49", "clr": "31859B", "tt": "Aqua, Accent 5, Darker 25%" },
    { "i": "50", "clr": "E36C09", "tt": "Orange, Accent 6, Darker 25%" },
    { "i": "51", "clr": "7F7F7F", "tt": "White, Background 1, Darker 50%" },
    { "i": "52", "clr": "0C0C0C", "tt": "Black, Text 1, Lighter 5%" },
    { "i": "53", "clr": "1D1B10", "tt": "Tan, Background 2, Darker 90%" },
    { "i": "54", "clr": "0F243E", "tt": "Dark Blue, Text 2, Darker 50%" },
    { "i": "55", "clr": "244061", "tt": "Blue, Accent 1, Darker 50%" },
    { "i": "56", "clr": "632423", "tt": "Red, Accent 2, Darker 50%" },
    { "i": "57", "clr": "4F6128", "tt": "Olive Green, Accent 3, Darker 50%" },
    { "i": "58", "clr": "3F3151", "tt": "Purple, Accent 4, Darker 50%" },
    { "i": "59", "clr": "205867", "tt": "Aqua, Accent 5, Darker 50%" },
    { "i": "60", "clr": "974806", "tt": "Orange, Accent 6, Darker 50%" },
    { "i": "61", "clr": "C00000", "tt": "Dark Red" },
    { "i": "62", "clr": "FF0000", "tt": "Red" },
    { "i": "63", "clr": "FFC000", "tt": "Orange" },
    { "i": "64", "clr": "FFFF00", "tt": "Yellow" },
    { "i": "65", "clr": "92D050", "tt": "Light Green" },
    { "i": "66", "clr": "00B050", "tt": "Green" },
    { "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
    { "i": "68", "clr": "0070C0", "tt": "Blue" },
    { "i": "69", "clr": "002060", "tt": "Dark Blue" },
    { "i": "70", "clr": "7030A0", "tt": "Purple" },
    { "i": "71", "clr": "NoFill", "tt": "NoFill" },
    { "i": "72", "clr": "929292", "tt": "Dark Gray 1" },
    { "i": "73", "clr": "CCC8C2", "tt": "Medium Gray 1" },
    { "i": "74", "clr": "DFE5ED", "tt": "Dark Blue 1" },
    { "i": "75", "clr": "EFF2F7", "tt": "Light Blue 1" },
    { "i": "76", "clr": "F9EDED", "tt": "Maroon 1" },
    { "i": "77", "clr": "F7F9F1", "tt": "Green 1" },
    { "i": "78", "clr": "F3F0F6", "tt": "Purple 1" },
    { "i": "79", "clr": "EEF8FA", "tt": "Aqua Blue 1" },
    { "i": "80", "clr": "FEFBF8", "tt": "Brown 1" },
    { "i": "81", "clr": "D8D8D8", "tt": "Light Gray 2" },
    { "i": "82", "clr": "7F7F7F", "tt": "Dark Gray 2" },
    { "i": "83", "clr": "BBB6AE", "tt": "Medium Gray 2" },
    { "i": "84", "clr": "C6D1DE", "tt": "Dark Blue 2" },
    { "i": "85", "clr": "D6DFEC", "tt": "Light Blue 2" },
    { "i": "86", "clr": "EFD3D2", "tt": "Maroon 2" },
    { "i": "87", "clr": "E6EDD7", "tt": "Green 2" },
    { "i": "88", "clr": "DFDBE7", "tt": "Purple 2" },
    { "i": "89", "clr": "D0EAF0", "tt": "Aqua Blue 2" },
    { "i": "90", "clr": "FCE6D4", "tt": "Brown 2" },
    { "i": "91", "clr": "BFBFBF", "tt": "Light Gray 3" },
    { "i": "92", "clr": "727272", "tt": "Dark Gray 3" },
    { "i": "93", "clr": "A29096", "tt": "Medium Gray 3" },
    { "i": "94", "clr": "8EA3BD", "tt": "Dark Blue 3" },
    { "i": "95", "clr": "ADC0D9", "tt": "Light Blue 3" },
    { "i": "96", "clr": "DFA7A5", "tt": "Maroon 3" },
    { "i": "97", "clr": "CDDCAF", "tt": "Green 3" },
    { "i": "98", "clr": "BFB2CF", "tt": "Purple 3" },
    { "i": "99", "clr": "A4D5E2", "tt": "Aqua Blue 3" },
    { "i": "100", "clr": "F9CDAA", "tt": "Brown 3" },
    { "i": "101", "clr": "A5A5A5", "tt": "Light Gray 4" },
    { "i": "102", "clr": "595959", "tt": "Dark Gray 4" },
    { "i": "103", "clr": "7D7974", "tt": "Medium Gray 4" },
    { "i": "104", "clr": "56769D", "tt": "Dark Blue 4" },
    { "i": "105", "clr": "84A1C6", "tt": "Light Blue 4" },
    { "i": "106", "clr": "CF7B79", "tt": "Maroon 4" },
    { "i": "107", "clr": "B5CB88", "tt": "Green 4" },
    { "i": "108", "clr": "9F8CB7", "tt": "Purple 4" },
    { "i": "109", "clr": "77C0D4", "tt": "Aqua Blue 4" },
    { "i": "110", "clr": "F7B580", "tt": "Brown 4" },
    { "i": "111", "clr": "8C8C8C", "tt": "Light Gray 5" },
    { "i": "112", "clr": "3F3F3F", "tt": "Dark Gray 5" },
    { "i": "113", "clr": "575551", "tt": "Medium Gray 5" },
    { "i": "114", "clr": "17365D", "tt": "Dark Blue 5" },
    { "i": "115", "clr": "456287", "tt": "Light Blue 5" },
    { "i": "116", "clr": "903C39", "tt": "Maroon 5" },
    { "i": "117", "clr": "758C48", "tt": "Green 5" },
    { "i": "118", "clr": "604C78", "tt": "Purple 5" },
    { "i": "119", "clr": "3B8194", "tt": "Aqua Blue 5" },
    { "i": "120", "clr": "7A4e28", "tt": "Brown 5" },
    { "i": "121", "clr": "C00000", "tt": "Dark Red" },
    { "i": "122", "clr": "FF0000", "tt": "Red" },
    { "i": "123", "clr": "FFC000", "tt": "Orange" },
    { "i": "124", "clr": "FFFF00", "tt": "Yellow" },
    { "i": "125", "clr": "92D050", "tt": "Light Green" },
    { "i": "126", "clr": "00B050", "tt": "Green" },
    { "i": "127", "clr": "00B0F0", "tt": "Light Blue" },
    { "i": "128", "clr": "0070C0", "tt": "Blue" },
    { "i": "129", "clr": "002060", "tt": "Dark Blue" },
    { "i": "130", "clr": "7030A0", "tt": "Purple" }

    ]
	},
	{
	    "type": "ColorGrid",
	    "colorGridType": "patternColor",
	    "theme": "OfficeAccess4",
	    "colors": [
	{ "i": "0", "clr": "Automatic", "tt": "No Color" },
    { "i": "1", "clr": "FFFFFF", "tt": "White, Background 1" },
    { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
    { "i": "3", "clr": "EEECE1", "tt": "Tan, Background 2" },
    { "i": "4", "clr": "1F497D", "tt": "Dark Blue, Text 2" },
    { "i": "5", "clr": "4F81BD", "tt": "Blue, Accent 1" },
    { "i": "6", "clr": "C0504D", "tt": "Red, Accent 2" },
    { "i": "7", "clr": "9BBB59", "tt": "Olive Green, Accent 3" },
    { "i": "8", "clr": "8064A2", "tt": "Purple, Accent 4" },
    { "i": "9", "clr": "4BACC6", "tt": "Aqua, Accent 5" },
    { "i": "10", "clr": "F79646", "tt": "Brown" },
    { "i": "11", "clr": "F2F2F2", "tt": "White, Background 1, Darker 5%" },
    { "i": "12", "clr": "7F7F7F", "tt": "Black, Text 1, Lighter 50%" },
    { "i": "13", "clr": "DDD9C3", "tt": "Tan, Background 2, Darker 10%" },
    { "i": "14", "clr": "C6D9F0", "tt": "Dark Blue, Text 2, Lighter 80%" },
    { "i": "15", "clr": "DBE5F1", "tt": "Blue, Accent 1, Lighter 80%" },
    { "i": "16", "clr": "F2DCDB", "tt": "Red, Accent 2, Lighter 80%" },
    { "i": "17", "clr": "EBF1DD", "tt": "Olive Green, Accent 3, Lighter 80%" },
    { "i": "18", "clr": "E5E0EC", "tt": "Purple, Accent 4, Lighter 80%" },
    { "i": "19", "clr": "DBEEF3", "tt": "Aqua, Accent 5, Lighter 80%" },
    { "i": "20", "clr": "FDEADA", "tt": "Brown 1" },
    { "i": "21", "clr": "D8D8D8", "tt": "White, Background 1, Darker 15%" },
    { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
    { "i": "23", "clr": "C4BD97", "tt": "Tan, Background 2, Darker 25%" },
    { "i": "24", "clr": "8DB3E2", "tt": "Dark Blue, Text 2, Lighter 60%" },
    { "i": "25", "clr": "B8CCE4", "tt": "Blue, Accent 1, Lighter 60%" },
    { "i": "26", "clr": "E5B9B7", "tt": "Red, Accent 2, Lighter 60%" },
    { "i": "27", "clr": "D7E3BC", "tt": "Olive Green, Accent 3, Lighter 60%" },
    { "i": "28", "clr": "CCC1D9", "tt": "Purple, Accent 4, Lighter 60%" },
    { "i": "29", "clr": "B7DDE8", "tt": "Aqua, Accent 5, Lighter 60%" },
    { "i": "30", "clr": "FBD5B5", "tt": "Brown 2" },
    { "i": "31", "clr": "BFBFBF", "tt": "White, Background 1, Darker 25%" },
    { "i": "32", "clr": "3F3F3F", "tt": "Black, Text 1, Lighter 25%" },
    { "i": "33", "clr": "938953", "tt": "Tan, Background 2, Darker 50%" },
    { "i": "34", "clr": "548DD4", "tt": "Dark Blue, Text 2, Lighter 40%" },
    { "i": "35", "clr": "95B3D7", "tt": "Blue, Accent 1, Lighter 40%" },
    { "i": "36", "clr": "D99694", "tt": "Red, Accent 2, Lighter 40%" },
    { "i": "37", "clr": "C3D69B", "tt": "Olive Green, Accent 3, Lighter 40%" },
    { "i": "38", "clr": "B2A1C7", "tt": "Purple, Accent 4, Lighter 40%" },
    { "i": "39", "clr": "92CDDC", "tt": "Aqua, Accent 5, Lighter 40%" },
    { "i": "40", "clr": "FAC08F", "tt": "Brown 3" },
    { "i": "41", "clr": "A5A5A5", "tt": "White, Background 1, Darker 35%" },
    { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
    { "i": "43", "clr": "494429", "tt": "Tan, Background 2, Darker 75%" },
    { "i": "44", "clr": "17365D", "tt": "Dark Blue, Text 2, Darker 25%" },
    { "i": "45", "clr": "366092", "tt": "Blue, Accent 1, Darker 25%" },
    { "i": "46", "clr": "953734", "tt": "Red, Accent 2, Darker 25%" },
    { "i": "47", "clr": "76923C", "tt": "Olive Green, Accent 3, Darker 25%" },
    { "i": "48", "clr": "5F497A", "tt": "Purple, Accent 4, Darker 25%" },
    { "i": "49", "clr": "31859B", "tt": "Aqua, Accent 5, Darker 25%" },
    { "i": "50", "clr": "E36C09", "tt": "Brown 4" },
    { "i": "51", "clr": "7F7F7F", "tt": "White, Background 1, Darker 50%" },
    { "i": "52", "clr": "0C0C0C", "tt": "Black, Text 1, Lighter 5%" },
    { "i": "53", "clr": "1D1B10", "tt": "Tan, Background 2, Darker 90%" },
    { "i": "54", "clr": "0F243E", "tt": "Dark Blue, Text 2, Darker 50%" },
    { "i": "55", "clr": "244061", "tt": "Blue, Accent 1, Darker 50%" },
    { "i": "56", "clr": "632423", "tt": "Red, Accent 2, Darker 50%" },
    { "i": "57", "clr": "4F6128", "tt": "Olive Green, Accent 3, Darker 50%" },
    { "i": "58", "clr": "3F3151", "tt": "Purple, Accent 4, Darker 50%" },
    { "i": "59", "clr": "205867", "tt": "Aqua, Accent 5, Darker 50%" },
    { "i": "60", "clr": "974806", "tt": "Brown 5" },
    { "i": "61", "clr": "C00000", "tt": "Dark Red" },
    { "i": "62", "clr": "FF0000", "tt": "Red" },
    { "i": "63", "clr": "FFC000", "tt": "Orange" },
    { "i": "64", "clr": "FFFF00", "tt": "Yellow" },
    { "i": "65", "clr": "92D050", "tt": "Light Green" },
    { "i": "66", "clr": "00B050", "tt": "Green" },
    { "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
    { "i": "68", "clr": "0070C0", "tt": "Blue" },
    { "i": "69", "clr": "002060", "tt": "Dark Blue" },
    { "i": "70", "clr": "7030A0", "tt": "Purple" },
    { "i": "71", "clr": "NoFill", "tt": "NoFill" },
    { "i": "72", "clr": "929292", "tt": "Dark Gray 1" },
    { "i": "73", "clr": "CCC8C2", "tt": "Medium Gray 1" },
    { "i": "74", "clr": "DFE5ED", "tt": "Dark Blue 1" },
    { "i": "75", "clr": "EFF2F7", "tt": "Light Blue 1" },
    { "i": "76", "clr": "F9EDED", "tt": "Maroon 1" },
    { "i": "77", "clr": "F7F9F1", "tt": "Green 1" },
    { "i": "78", "clr": "F3F0F6", "tt": "Purple 1" },
    { "i": "79", "clr": "EEF8FA", "tt": "Aqua Blue 1" },
    { "i": "80", "clr": "FEFBF8", "tt": "Brown 1" },
    { "i": "81", "clr": "D8D8D8", "tt": "Light Gray 2" },
    { "i": "82", "clr": "7F7F7F", "tt": "Dark Gray 2" },
    { "i": "83", "clr": "BBB6AE", "tt": "Medium Gray 2" },
    { "i": "84", "clr": "C6D1DE", "tt": "Dark Blue 2" },
    { "i": "85", "clr": "D6DFEC", "tt": "Light Blue 2" },
    { "i": "86", "clr": "EFD3D2", "tt": "Maroon 2" },
    { "i": "87", "clr": "E6EDD7", "tt": "Green 2" },
    { "i": "88", "clr": "DFDBE7", "tt": "Purple 2" },
    { "i": "89", "clr": "D0EAF0", "tt": "Aqua Blue 2" },
    { "i": "90", "clr": "FCE6D4", "tt": "Brown 2" },
    { "i": "91", "clr": "BFBFBF", "tt": "Light Gray 3" },
    { "i": "92", "clr": "727272", "tt": "Dark Gray 3" },
    { "i": "93", "clr": "A29096", "tt": "Medium Gray 3" },
    { "i": "94", "clr": "8EA3BD", "tt": "Dark Blue 3" },
    { "i": "95", "clr": "ADC0D9", "tt": "Light Blue 3" },
    { "i": "96", "clr": "DFA7A5", "tt": "Maroon 3" },
    { "i": "97", "clr": "CDDCAF", "tt": "Green 3" },
    { "i": "98", "clr": "BFB2CF", "tt": "Purple 3" },
    { "i": "99", "clr": "A4D5E2", "tt": "Aqua Blue 3" },
    { "i": "100", "clr": "F9CDAA", "tt": "Brown 3" },
    { "i": "101", "clr": "A5A5A5", "tt": "Light Gray 4" },
    { "i": "102", "clr": "595959", "tt": "Dark Gray 4" },
    { "i": "103", "clr": "7D7974", "tt": "Medium Gray 4" },
    { "i": "104", "clr": "56769D", "tt": "Dark Blue 4" },
    { "i": "105", "clr": "84A1C6", "tt": "Light Blue 4" },
    { "i": "106", "clr": "CF7B79", "tt": "Maroon 4" },
    { "i": "107", "clr": "B5CB88", "tt": "Green 4" },
    { "i": "108", "clr": "9F8CB7", "tt": "Purple 4" },
    { "i": "109", "clr": "77C0D4", "tt": "Aqua Blue 4" },
    { "i": "110", "clr": "F7B580", "tt": "Brown 4" },
    { "i": "111", "clr": "8C8C8C", "tt": "Light Gray 5" },
    { "i": "112", "clr": "3F3F3F", "tt": "Dark Gray 5" },
    { "i": "113", "clr": "575551", "tt": "Medium Gray 5" },
    { "i": "114", "clr": "17365D", "tt": "Dark Blue 5" },
    { "i": "115", "clr": "456287", "tt": "Light Blue 5" },
    { "i": "116", "clr": "903C39", "tt": "Maroon 5" },
    { "i": "117", "clr": "758C48", "tt": "Green 5" },
    { "i": "118", "clr": "604C78", "tt": "Purple 5" },
    { "i": "119", "clr": "3B8194", "tt": "Aqua Blue 5" },
    { "i": "120", "clr": "7A4e28", "tt": "Brown 5" },
    { "i": "121", "clr": "C00000", "tt": "Dark Red" },
    { "i": "122", "clr": "FF0000", "tt": "Red" },
    { "i": "123", "clr": "FFC000", "tt": "Orange" },
    { "i": "124", "clr": "FFFF00", "tt": "Yellow" },
    { "i": "125", "clr": "92D050", "tt": "Light Green" },
    { "i": "126", "clr": "00B050", "tt": "Green" },
    { "i": "127", "clr": "00B0F0", "tt": "Light Blue" },
    { "i": "128", "clr": "0070C0", "tt": "Blue" },
    { "i": "129", "clr": "002060", "tt": "Dark Blue" },
    { "i": "130", "clr": "7030A0", "tt": "Purple" }

    ]
	},
    {
        "type": "ColorGrid",
        "colorGridType": "patternColor",
        "theme": "RetrospectThemeStandardAndMoreColors",
        "colors": [
	{ "i": "0", "clr": "Automatic", "tt": "No Color" },
    { "i": "1", "clr": "FFFFFF", "tt": "White, Background 1" },
    { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
    { "i": "3", "clr": "CCDDEA", "tt": "Ice Blue, Background 2" },
    { "i": "4", "clr": "637052", "tt": "Olive Green, Text 2" },
    { "i": "5", "clr": "E48312", "tt": "Orange, Accent 1" },
    { "i": "6", "clr": "BD582C", "tt": "Orange, Accent 2" },
    { "i": "7", "clr": "865640", "tt": "Brown, Accent 3" },
    { "i": "8", "clr": "9B8357", "tt": "Brown, Accent 4" },
    { "i": "9", "clr": "C2BC80", "tt": "Tan, Accent 5" },
    { "i": "10", "clr": "94A088", "tt": "Green, Accent 6" },
    { "i": "11", "clr": "F2F2F2", "tt": "White, Background 1, Darker 5%" },
    { "i": "12", "clr": "7F7F7F", "tt": "Black, Text 1, Lighter 50%" },
    { "i": "13", "clr": "ACC8DD", "tt": "Ice Blue, Background 2, Darker 10%" },
    { "i": "14", "clr": "EDE4DA", "tt": "Olive Green, Text 2, Lighter 80%" },
    { "i": "15", "clr": "FBE6CE", "tt": "Orange, Accent 1, Lighter 80%" },
    { "i": "16", "clr": "F4DCD2", "tt": "Orange, Accent 2, Lighter 80%" },
    { "i": "17", "clr": "EADBD4", "tt": "Brown, Accent 3, Lighter 80%" },
    { "i": "18", "clr": "EBE6DC", "tt": "Brown, Accent 4, Lighter 80%" },
    { "i": "19", "clr": "F2F1E5", "tt": "Tan, Accent 5, Lighter 80%" },
    { "i": "20", "clr": "E9EBE7", "tt": "Green, Accent 6, Lighter 80%" },
    { "i": "21", "clr": "D8D8dD", "tt": "White, Background 1, Darker 15%" },
    { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
    { "i": "23", "clr": "7EA9CA", "tt": "Ice Blue, Background 2, Darker 25%" },
    { "i": "24", "clr": "C1C9B6", "tt": "Olive Green, Text 2, Lighter 60%" },
    { "i": "25", "clr": "F7CD9D", "tt": "Orange, Accent 1, Lighter 60%" },
    { "i": "26", "clr": "EABAA5", "tt": "Orange, Accent 2, Lighter 60%" },
    { "i": "27", "clr": "D6B8AA", "tt": "Brown, Accent 3, Lighter 60%" },
    { "i": "28", "clr": "D8CDBA", "tt": "Brown, Accent 4, Lighter 60%" },
    { "i": "29", "clr": "E6E4CC", "tt": "Tan, Accent 5, Lighter 60%" },
    { "i": "30", "clr": "D4D9CF", "tt": "Green, Accent 6, Lighter 60%" },
    { "i": "31", "clr": "BFBFBF", "tt": "White, Background 1, Darker 25%" },
    { "i": "32", "clr": "3F3F3F", "tt": "Black, Text 1, Lighter 25%" },
    { "i": "33", "clr": "3F7393", "tt": "Ice Blue, Background 2, Darker 50%" },
    { "i": "34", "clr": "A2AE91", "tt": "Olive Green, Text 2, Lighter 40%" },
    { "i": "35", "clr": "F3B46C", "tt": "Orange, Accent 1, Lighter 40%" },
    { "i": "36", "clr": "DF9778", "tt": "Orange, Accent 2, Lighter 40%" },
    { "i": "37", "clr": "C29580", "tt": "Brown, Accent 3, Lighter 40%" },
    { "i": "38", "clr": "D8CDBA", "tt": "Brown, Accent 4, Lighter 40%" },
    { "i": "39", "clr": "E6E4CC", "tt": "Tan, Accent 5, Lighter 40%" },
    { "i": "40", "clr": "D4D9CF", "tt": "Green, Accent 6, Lighter 40%" },
    { "i": "41", "clr": "A5A5A5", "tt": "White, Background 1, Darker 35%" },
    { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
    { "i": "43", "clr": "1F394D", "tt": "Ice Blue, Background 2, Darker 75%" },
    { "i": "44", "clr": "4A533D", "tt": "Olive Green, Text 2, Darker 25%" },
    { "i": "45", "clr": "AB620D", "tt": "Orange, Accent 1, Darker 25%" },
    { "i": "46", "clr": "8D4220", "tt": "Orange, Accent 2, Darker 25%" },
    { "i": "47", "clr": "644030", "tt": "Brown, Accent 3, Darker 25%" },
    { "i": "48", "clr": "746241", "tt": "Brown, Accent 4, Darker 25%" },
    { "i": "49", "clr": "A39B4E", "tt": "Tan, Accent 5, Darker 25%" },
    { "i": "50", "clr": "6F7B62", "tt": "Green, Accent 6, Darker 25%" },
    { "i": "51", "clr": "7F7F7F", "tt": "White, Background 1, Darker 50%" },
    { "i": "52", "clr": "0C0C0C", "tt": "Black, Text 1, Lighter 5%" },
    { "i": "53", "clr": "0C171F", "tt": "Ice Blue, Background 2, Darker 90%" },
    { "i": "54", "clr": "313829", "tt": "Olive Green, Text 2, Darker 50%" },
    { "i": "55", "clr": "724108", "tt": "Orange, Accent 1, Darker 50%" },
    { "i": "56", "clr": "5E2C16", "tt": "Orange, Accent 2, Darker 50%" },
    { "i": "57", "clr": "432B20", "tt": "Brown, Accent 3, Darker 50%" },
    { "i": "58", "clr": "404128", "tt": "Brown, Accent 4, Darker 50%" },
    { "i": "59", "clr": "6C6734", "tt": "Tan, Accent 5, Darker 50%" },
    { "i": "60", "clr": "4A5241", "tt": "Green, Accent 6, Darker 50%" },
    { "i": "61", "clr": "FFFFFF", "tt": "White" },
    { "i": "62", "clr": "000000", "tt": "Black" },
    { "i": "63", "clr": "FAF3E8", "tt": "Medium Gray" },
    { "i": "64", "clr": "1F497D", "tt": "Dark Blue" },
    { "i": "65", "clr": "5C83B4", "tt": "Light Blue" },
    { "i": "66", "clr": "C0504D", "tt": "Maroon" },
    { "i": "67", "clr": "9DBB61", "tt": "Green" },
    { "i": "68", "clr": "8066A0", "tt": "Purple" },
    { "i": "69", "clr": "4BACC6", "tt": "Aqua Blue" },
    { "i": "70", "clr": "F59D56", "tt": "Brown" },
    { "i": "71", "clr": "ECECEC", "tt": "Light Gray 1" },
    { "i": "72", "clr": "929292", "tt": "Dark Gray 1" },
    { "i": "73", "clr": "CCC8C2", "tt": "Medium Gray 1" },
    { "i": "74", "clr": "DFE5ED", "tt": "Dark Blue 1" },
    { "i": "75", "clr": "EFF2F7", "tt": "Light Blue 1" },
    { "i": "76", "clr": "F9EDED", "tt": "Maroon 1" },
    { "i": "77", "clr": "F7F9F1", "tt": "Green 1" },
    { "i": "78", "clr": "F3F0F6", "tt": "Purple 1" },
    { "i": "79", "clr": "EEF8FA", "tt": "Aqua Blue 1" },
    { "i": "80", "clr": "FEFBF8", "tt": "Brown 1" },
    { "i": "81", "clr": "D8D8D8", "tt": "Light Gray 2" },
    { "i": "82", "clr": "7F7F7F", "tt": "Dark Gray 2" },
    { "i": "83", "clr": "BBB6AE", "tt": "Medium Gray 2" },
    { "i": "84", "clr": "C6D1DE", "tt": "Dark Blue 2" },
    { "i": "85", "clr": "D6DFEC", "tt": "Light Blue 2" },
    { "i": "86", "clr": "EFD3D2", "tt": "Maroon 2" },
    { "i": "87", "clr": "E6EDD7", "tt": "Green 2" },
    { "i": "88", "clr": "DFDBE7", "tt": "Purple 2" },
    { "i": "89", "clr": "D0EAF0", "tt": "Aqua Blue 2" },
    { "i": "90", "clr": "FCE6D4", "tt": "Brown 2" },
    { "i": "91", "clr": "BFBFBF", "tt": "Light Gray 3" },
    { "i": "92", "clr": "727272", "tt": "Dark Gray 3" },
    { "i": "93", "clr": "A29096", "tt": "Medium Gray 3" },
    { "i": "94", "clr": "8EA3BD", "tt": "Dark Blue 3" },
    { "i": "95", "clr": "ADC0D9", "tt": "Light Blue 3" },
    { "i": "96", "clr": "DFA7A5", "tt": "Maroon 3" },
    { "i": "97", "clr": "CDDCAF", "tt": "Green 3" },
    { "i": "98", "clr": "BFB2CF", "tt": "Purple 3" },
    { "i": "99", "clr": "A4D5E2", "tt": "Aqua Blue 3" },
    { "i": "100", "clr": "F9CDAA", "tt": "Brown 3" },
    { "i": "101", "clr": "A5A5A5", "tt": "Light Gray 4" },
    { "i": "102", "clr": "595959", "tt": "Dark Gray 4" },
    { "i": "103", "clr": "7D7974", "tt": "Medium Gray 4" },
    { "i": "104", "clr": "56769D", "tt": "Dark Blue 4" },
    { "i": "105", "clr": "84A1C6", "tt": "Light Blue 4" },
    { "i": "106", "clr": "CF7B79", "tt": "Maroon 4" },
    { "i": "107", "clr": "B5CB88", "tt": "Green 4" },
    { "i": "108", "clr": "9F8CB7", "tt": "Purple 4" },
    { "i": "109", "clr": "77C0D4", "tt": "Aqua Blue 4" },
    { "i": "110", "clr": "F7B580", "tt": "Brown 4" },
     { "i": "111", "clr": "8C8C8C", "tt": "Light Gray 5" },
    { "i": "112", "clr": "3F3F3F", "tt": "Dark Gray 5" },
    { "i": "113", "clr": "575551", "tt": "Medium Gray 5" },
    { "i": "114", "clr": "17365D", "tt": "Dark Blue 5" },
    { "i": "115", "clr": "456287", "tt": "Light Blue 5" },
    { "i": "116", "clr": "903C39", "tt": "Maroon 5" },
    { "i": "117", "clr": "758C48", "tt": "Green 5" },
    { "i": "118", "clr": "604C78", "tt": "Purple 5" },
    { "i": "119", "clr": "3B8194", "tt": "Aqua Blue 5" },
    { "i": "120", "clr": "7A4e28", "tt": "Brown 5" },
    { "i": "121", "clr": "C00000", "tt": "Dark Red" },
    { "i": "122", "clr": "FF0000", "tt": "Red" },
    { "i": "123", "clr": "FFC000", "tt": "Orange" },
    { "i": "124", "clr": "FFFF00", "tt": "Yellow" },
    { "i": "125", "clr": "92D050", "tt": "Light Green" },
    { "i": "126", "clr": "00B050", "tt": "Green" },
    { "i": "127", "clr": "00B0F0", "tt": "Light Blue" },
    { "i": "128", "clr": "0070C0", "tt": "Blue" },
    { "i": "129", "clr": "002060", "tt": "Dark Blue" },
    { "i": "130", "clr": "7030A0", "tt": "Purple" },

    ]
    },
    {
        "type": "ColorGrid",
        "colorGridType": "patternColor",
        "theme": "BlueWarm",
        "colors": [
	{ "i": "0", "clr": "Automatic" ,"tt": "No Color" },
    { "i": "1", "clr":"ffffff" ,"tt": "White, Background 1" },
    { "i": "2", "clr":"000000" ,"tt": "Black, Text 1" },
    { "i": "3", "clr":"accbf9" ,"tt": "Light Blue, Background 2" },
    { "i": "4", "clr":"242852" ,"tt": "Dark Purple, Text 2" },
    { "i": "5", "clr":"4a66ac" ,"tt": "Blue-Gray, Accent 1" },
    { "i": "6", "clr":"629dd1" ,"tt": "Blue, Accent 2" },
    { "i": "7", "clr":"297fd5" ,"tt": "Blue, Accent 3" },
    { "i": "8", "clr":"7f8fa9" ,"tt": "Blue-Gray, Accent 4" },
    { "i": "9", "clr":"5aa2ae" ,"tt": "Teal, Accent 5" },
    { "i": "10", "clr":"9d90a0" ,"tt": "Gray-50%, Accent 6" },
    { "i": "11", "clr":"f2f2f2" ,"tt": "White, Background 1, Darker 5%" },
    { "i": "12", "clr":"7f7f7f" ,"tt": "Black, Text 1, Lighter 50%" },
    { "i": "13", "clr":"84b2f6" ,"tt": "Light Blue, Background 2, Darker 10%" },
    { "i": "14", "clr":"c8cbe7" ,"tt": "Dark Purple, Text 2, Lighter 80%" },
    { "i": "15", "clr":"dae0ef" ,"tt": "Blue-Gray, Accent 1, Lighter 80%" },
    { "i": "16", "clr":"dfebf5" ,"tt": "Blue, Accent 2, Lighter 80%" },
    { "i": "17", "clr":"d4e5f6" ,"tt": "Blue, Accent 3, Lighter 80%" },
    { "i": "18", "clr":"e5e8ed" ,"tt": "Blue-Gray, Accent 4, Lighter 80%" },
    { "i": "19", "clr":"ddecee" ,"tt": "Teal, Accent 5, Lighter 80%" },
    { "i": "20", "clr":"ebe8ec" ,"tt": "Gray-50%, Accent 6, Lighter 80%" },
    { "i": "21", "clr":"d8d8d8" ,"tt": "White, Background 1, Darker 15%" },
    { "i": "22", "clr":"595959" ,"tt": "Black, Text 1, Lighter 35%" },
    { "i": "23", "clr":"498df1" ,"tt": "Light Blue, Background 2, Darker 25%" },
    { "i": "24", "clr":"9297cf" ,"tt": "Dark Purple, Text 2, Lighter 60%" },
    { "i": "25", "clr":"b5c1df" ,"tt": "Blue-Gray, Accent 1, Lighter 60%" },
    { "i": "26", "clr":"c0d7ec" ,"tt": "Blue, Accent 2, Lighter 60%" },
    { "i": "27", "clr":"a9cbee" ,"tt": "Blue, Accent 3, Lighter 60%" },
    { "i": "28", "clr":"cbd2dc" ,"tt": "Blue-Gray, Accent 4, Lighter 60%" },
    { "i": "29", "clr":"bdd9de" ,"tt": "Teal, Accent 5, Lighter 60%" },
    { "i": "30", "clr":"d7d2d9" ,"tt": "Gray-50%, Accent 6, Lighter 60%" },
    { "i": "31", "clr":"bfbfbf" ,"tt": "White, Background 1, Darker 25%" },
    { "i": "32", "clr":"3f3f3f" ,"tt": "Black, Text 1, Lighter 25%" },
    { "i": "33", "clr":"0e57c4" ,"tt": "Light Blue, Background 2, Darker 50%" },
    { "i": "34", "clr":"5b63b7" ,"tt": "Dark Purple, Text 2, Lighter 40%" },
    { "i": "35", "clr":"90a2cf" ,"tt": "Blue-Gray, Accent 1, Lighter 40%" },
    { "i": "36", "clr":"a0c4e3" ,"tt": "Blue, Accent 2, Lighter 40%" },
    { "i": "37", "clr":"7eb2e6" ,"tt": "Blue, Accent 3, Lighter 40%" },
    { "i": "38", "clr":"b2bbcb" ,"tt": "Blue-Gray, Accent 4, Lighter 40%" },
    { "i": "39", "clr":"9bc7ce" ,"tt": "Teal, Accent 5, Lighter 40%" },
    { "i": "40", "clr":"c4bcc6" ,"tt": "Gray-50%, Accent 6, Lighter 40%" },
    { "i": "41", "clr":"a5a5a5" ,"tt": "White, Background 1, Darker 35%" },
    { "i": "42", "clr":"262626" ,"tt": "Black, Text 1, Lighter 15%" },
    { "i": "43", "clr":"072b62" ,"tt": "Light Blue, Background 2, Darker 75%" },
    { "i": "44", "clr":"1b1e3d" ,"tt": "Dark Purple, Text 2, Darker 25%" },
    { "i": "45", "clr":"374c81" ,"tt": "Blue-Gray, Accent 1, Darker 25%" },
    { "i": "46", "clr":"3477b2" ,"tt": "Blue, Accent 2, Darker 25%" },
    { "i": "47", "clr":"1e5f9f" ,"tt": "Blue, Accent 3, Darker 25%" },
    { "i": "48", "clr":"596984" ,"tt": "Blue-Gray, Accent 4, Darker 25%" },
    { "i": "49", "clr":"417b84" ,"tt": "Teal, Accent 5, Darker 25%" },
    { "i": "50", "clr":"77697a" ,"tt": "Gray-50%, Accent 6, Darker 25%" },
    { "i": "51", "clr":"7f7f7f" ,"tt": "White, Background 1, Darker 50%" },
    { "i": "52", "clr":"0c0c0c" ,"tt": "Black, Text 1, Lighter 5%" },
    { "i": "53", "clr":"021127" ,"tt": "Light Blue, Background 2, Darker 90%" },
    { "i": "54", "clr":"121429" ,"tt": "Dark Purple, Text 2, Darker 50%" },
    { "i": "55", "clr":"253356" ,"tt": "Blue-Gray, Accent 1, Darker 50%" },
    { "i": "56", "clr":"224f76" ,"tt": "Blue, Accent 2, Darker 50%" },
    { "i": "57", "clr":"143f6a" ,"tt": "Blue, Accent 3, Darker 50%" },
    { "i": "58", "clr":"3b4658" ,"tt": "Blue-Gray, Accent 4, Darker 50%" },
    { "i": "59", "clr":"2b5258" ,"tt": "Teal, Accent 5, Darker 50%" },
    { "i": "60", "clr":"4f4651" ,"tt": "Gray-50%, Accent 6, Darker 50%" },
    { "i": "61", "clr": "FFFFFF" ,"tt": "White" },
    { "i": "62", "clr": "000000" ,"tt": "Black" },
    { "i": "63", "clr": "FAF3E8" ,"tt": "Medium Gray" },
    { "i": "64", "clr": "1F497D" ,"tt": "Dark Blue" },
    { "i": "65", "clr": "5C83B4" ,"tt": "Light Blue" },
    { "i": "66", "clr": "C0504D" ,"tt": "Maroon" },
    { "i": "67", "clr": "9DBB61" ,"tt": "Green" },
    { "i": "68", "clr": "8066A0" ,"tt": "Purple" },
    { "i": "69", "clr": "4BACC6" ,"tt": "Aqua Blue" },
    { "i": "70", "clr": "F59D56" ,"tt": "Brown" },
    { "i": "71", "clr": "ECECEC" ,"tt": "Light Gray 1" },
    { "i": "72", "clr": "929292" ,"tt": "Dark Gray 1" },
    { "i": "73", "clr": "CCC8C2" ,"tt": "Medium Gray 1" },
    { "i": "74", "clr": "DFE5ED" ,"tt": "Dark Blue 1" },
    { "i": "75", "clr": "EFF2F7" ,"tt": "Light Blue 1" },
    { "i": "76", "clr": "F9EDED" ,"tt": "Maroon 1" },
    { "i": "77", "clr": "F7F9F1" ,"tt": "Green 1" },
    { "i": "78", "clr": "F3F0F6" ,"tt": "Purple 1" },
    { "i": "79", "clr": "EEF8FA" ,"tt": "Aqua Blue 1" },
    { "i": "80", "clr": "FEFBF8" ,"tt": "Brown 1" },
    { "i": "81", "clr": "D8D8D8" ,"tt": "Light Gray 2" },
    { "i": "82", "clr": "7F7F7F" ,"tt": "Dark Gray 2" },
    { "i": "83", "clr": "BBB6AE" ,"tt": "Medium Gray 2" },
    { "i": "84", "clr": "C6D1DE" ,"tt": "Dark Blue 2" },
    { "i": "85", "clr": "D6DFEC" ,"tt": "Light Blue 2" },
    { "i": "86", "clr": "EFD3D2" ,"tt": "Maroon 2" },
    { "i": "87", "clr": "E6EDD7" ,"tt": "Green 2" },
    { "i": "88", "clr": "DFDBE7" ,"tt": "Purple 2" },
    { "i": "89", "clr": "D0EAF0" ,"tt": "Aqua Blue 2" },
    { "i": "90", "clr": "FCE6D4" ,"tt": "Brown 2" },
    { "i": "91", "clr": "BFBFBF" ,"tt": "Light Gray 3" },
    { "i": "92", "clr": "727272" ,"tt": "Dark Gray 3" },
    { "i": "93", "clr": "A29096" ,"tt": "Medium Gray 3" },
    { "i": "94", "clr": "8EA3BD" ,"tt": "Dark Blue 3" },
    { "i": "95", "clr": "ADC0D9" ,"tt": "Light Blue 3" },
    { "i": "96", "clr": "DFA7A5" ,"tt": "Maroon 3" },
    { "i": "97", "clr": "CDDCAF" ,"tt": "Green 3" },
    { "i": "98", "clr": "BFB2CF" ,"tt": "Purple 3" },
    { "i": "99", "clr": "A4D5E2" ,"tt": "Aqua Blue 3" },
    { "i": "100", "clr": "F9CDAA" ,"tt": "Brown 3" },
    { "i": "101", "clr": "A5A5A5" ,"tt": "Light Gray 4" },
    { "i": "102", "clr": "595959" ,"tt": "Dark Gray 4" },
    { "i": "103", "clr": "7D7974" ,"tt": "Medium Gray 4" },
    { "i": "104", "clr": "56769D" ,"tt": "Dark Blue 4" },
    { "i": "105", "clr": "84A1C6" ,"tt": "Light Blue 4" },
    { "i": "106", "clr": "CF7B79" ,"tt": "Maroon 4" },
    { "i": "107", "clr": "B5CB88" ,"tt": "Green 4" },
    { "i": "108", "clr": "9F8CB7" ,"tt": "Purple 4" },
    { "i": "109", "clr": "77C0D4" ,"tt": "Aqua Blue 4" },
    { "i": "110", "clr": "F7B580" ,"tt": "Brown 4" },
     { "i": "111", "clr": "8C8C8C" ,"tt": "Light Gray 5" },
    { "i": "112", "clr": "3F3F3F" ,"tt": "Dark Gray 5" },
    { "i": "113", "clr": "575551" ,"tt": "Medium Gray 5" },
    { "i": "114", "clr": "17365D" ,"tt": "Dark Blue 5" },
    { "i": "115", "clr": "456287" ,"tt": "Light Blue 5" },
    { "i": "116", "clr": "903C39" ,"tt": "Maroon 5" },
    { "i": "117", "clr": "758C48" ,"tt": "Green 5" },
    { "i": "118", "clr": "604C78" ,"tt": "Purple 5" },
    { "i": "119", "clr": "3B8194" ,"tt": "Aqua Blue 5" },
    { "i": "120", "clr": "7A4e28" ,"tt": "Brown 5" },
    { "i": "121", "clr": "C00000" ,"tt": "Dark Red" },
    { "i": "122", "clr": "FF0000" ,"tt": "Red" },
    { "i": "123", "clr": "FFC000" ,"tt": "Orange" },
    { "i": "124", "clr": "FFFF00" ,"tt": "Yellow" },
    { "i": "125", "clr": "92D050" ,"tt": "Light Green" },
    { "i": "126", "clr": "00B050" ,"tt": "Green" },
    { "i": "127", "clr": "00B0F0" ,"tt": "Light Blue" },
    { "i": "128", "clr": "0070C0" ,"tt": "Blue" },
    { "i": "129", "clr": "002060" ,"tt": "Dark Blue" },
    { "i": "130", "clr": "7030A0" ,"tt": "Purple" }
    ]
    }
    ,
    {
        "type": "ColorGrid",
        "colorGridType": "patternColor",
        "theme": "RetrospectThemeTealColor",
        "colors": [
	{ "i": "0", "clr": "Automatic", "tt": "No Color" },
    { "i": "1", "clr": "ffffff", "tt": "White, Background 1" },
    { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
    { "i": "3", "clr": "dfe3e5", "tt": "Ice Blue, Background 2" },
    { "i": "4", "clr": "335b74", "tt": "Dark Teal, Text 2" },
    { "i": "5", "clr": "1cade4", "tt": "Turquoise, Accent 1" },
    { "i": "6", "clr": "2683c6", "tt": "Blue, Accent 2" },
    { "i": "7", "clr": "27ced7", "tt": "Turquoise, Accent 3" },
    { "i": "8", "clr": "42ba97", "tt": "Green, Accent 4" },
    { "i": "9", "clr": "3e8853", "tt": "Dark Green, Accent 5" },
    { "i": "10", "clr": "62a39f", "tt": "Teal, Accent 6" },
    { "i": "11", "clr": "f2f2f2", "tt": "White, Background 1, Darker 5%" },
    { "i": "12", "clr": "7f7f7f", "tt": "Black, Text 1, Lighter 50%" },
    { "i": "13", "clr": "c6cdd0", "tt": "Ice Blue, Background 2, Darker 10%" },
    { "i": "14", "clr": "cfdfea", "tt": "Dark Teal, Text 2, Lighter 80%" },
    { "i": "15", "clr": "d1eef9", "tt": "Turquoise, Accent 1, Lighter 80%" },
    { "i": "16", "clr": "d1e6f6", "tt": "Blue, Accent 2, Lighter 80%" },
    { "i": "17", "clr": "d3f5f7", "tt": "Turquoise, Accent 3, Lighter 80%" },
    { "i": "18", "clr": "d8f1ea", "tt": "Green, Accent 4, Lighter 80%" },
    { "i": "19", "clr": "d4ebda", "tt": "Dark Green, Accent 5, Lighter 80%" },
    { "i": "20", "clr": "dfeceb", "tt": "Teal, Accent 6, Lighter 80%" },
    { "i": "21", "clr": "d8d8d8", "tt": "White, Background 1, Darker 15%" },
    { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
    { "i": "23", "clr": "a0acb2", "tt": "Ice Blue, Background 2, Darker 25%" },
    { "i": "24", "clr": "9fc0d5", "tt": "Dark Teal, Text 2, Lighter 60%" },
    { "i": "25", "clr": "a4def4", "tt": "Turquoise, Accent 1, Lighter 60%" },
    { "i": "26", "clr": "a3ceed", "tt": "Blue, Accent 2, Lighter 60%" },
    { "i": "27", "clr": "a8ebef", "tt": "Turquoise, Accent 3, Lighter 60%" },
    { "i": "28", "clr": "b2e3d5", "tt": "Green, Accent 4, Lighter 60%" },
    { "i": "29", "clr": "a9d7b6", "tt": "Dark Green, Accent 5, Lighter 60%" },
    { "i": "30", "clr": "c0dad8", "tt": "Teal, Accent 6, Lighter 60%" },
    { "i": "31", "clr": "bfbfbf", "tt": "White, Background 1, Darker 25%" },
    { "i": "32", "clr": "3f3f3f", "tt": "Black, Text 1, Lighter 25%" },
    { "i": "33", "clr": "65747c", "tt": "Ice Blue, Background 2, Darker 50%" },
    { "i": "34", "clr": "70a1c0", "tt": "Dark Teal, Text 2, Lighter 40%" },
    { "i": "35", "clr": "76cdee", "tt": "Turquoise, Accent 1, Lighter 40%" },
    { "i": "36", "clr": "75b5e4", "tt": "Blue, Accent 2, Lighter 40%" },
    { "i": "37", "clr": "7ce1e7", "tt": "Turquoise, Accent 3, Lighter 40%" },
    { "i": "38", "clr": "8cd6c0", "tt": "Green, Accent 4, Lighter 40%" },
    { "i": "39", "clr": "7ec492", "tt": "Dark Green, Accent 5, Lighter 40%" },
    { "i": "40", "clr": "a0c7c5", "tt": "Teal, Accent 6, Lighter 40%" },
    { "i": "41", "clr": "a5a5a5", "tt": "White, Background 1, Darker 35%" },
    { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
    { "i": "43", "clr": "323a3e", "tt": "Ice Blue, Background 2, Darker 75%" },
    { "i": "44", "clr": "264457", "tt": "Dark Teal, Text 2, Darker 25%" },
    { "i": "45", "clr": "1482ab", "tt": "Turquoise, Accent 1, Darker 25%" },
    { "i": "46", "clr": "1c6294", "tt": "Blue, Accent 2, Darker 25%" },
    { "i": "47", "clr": "1d9aa1", "tt": "Turquoise, Accent 3, Darker 25%" },
    { "i": "48", "clr": "318b71", "tt": "Green, Accent 4, Darker 25%" },
    { "i": "49", "clr": "2e663e", "tt": "Dark Green, Accent 5, Darker 25%" },
    { "i": "50", "clr": "487b78", "tt": "Teal, Accent 6, Darker 25%" },
    { "i": "51", "clr": "7f7f7f", "tt": "White, Background 1, Darker 50%" },
    { "i": "52", "clr": "0c0c0c", "tt": "Black, Text 1, Lighter 5%" },
    { "i": "53", "clr": "141718", "tt": "Ice Blue, Background 2, Darker 90%" },
    { "i": "54", "clr": "192d3a", "tt": "Dark Teal, Text 2, Darker 50%" },
    { "i": "55", "clr": "0d5672", "tt": "Turquoise, Accent 1, Darker 50%" },
    { "i": "56", "clr": "124163", "tt": "Blue, Accent 2, Darker 50%" },
    { "i": "57", "clr": "13676b", "tt": "Turquoise, Accent 3, Darker 50%" },
    { "i": "58", "clr": "215d4b", "tt": "Green, Accent 4, Darker 50%" },
    { "i": "59", "clr": "1e4429", "tt": "Dark Green, Accent 5, Darker 50%" },
    { "i": "60", "clr": "305250", "tt": "Teal, Accent 6, Darker 50%" },
    { "i": "61", "clr": "FFFFFF", "tt": "White" },
    { "i": "62", "clr": "000000", "tt": "Black" },
    { "i": "63", "clr": "FAF3E8", "tt": "Medium Gray" },
    { "i": "64", "clr": "1F497D", "tt": "Dark Blue" },
    { "i": "65", "clr": "5C83B4", "tt": "Light Blue" },
    { "i": "66", "clr": "C0504D", "tt": "Maroon" },
    { "i": "67", "clr": "9DBB61", "tt": "Green" },
    { "i": "68", "clr": "8066A0", "tt": "Purple" },
    { "i": "69", "clr": "4BACC6", "tt": "Aqua Blue" },
    { "i": "70", "clr": "F59D56", "tt": "Brown" },
    { "i": "71", "clr": "ECECEC", "tt": "Light Gray 1" },
    { "i": "72", "clr": "929292", "tt": "Dark Gray 1" },
    { "i": "73", "clr": "CCC8C2", "tt": "Medium Gray 1" },
    { "i": "74", "clr": "DFE5ED", "tt": "Dark Blue 1" },
    { "i": "75", "clr": "EFF2F7", "tt": "Light Blue 1" },
    { "i": "76", "clr": "F9EDED", "tt": "Maroon 1" },
    { "i": "77", "clr": "F7F9F1", "tt": "Green 1" },
    { "i": "78", "clr": "F3F0F6", "tt": "Purple 1" },
    { "i": "79", "clr": "EEF8FA", "tt": "Aqua Blue 1" },
    { "i": "80", "clr": "FEFBF8", "tt": "Brown 1" },
    { "i": "81", "clr": "D8D8D8", "tt": "Light Gray 2" },
    { "i": "82", "clr": "7F7F7F", "tt": "Dark Gray 2" },
    { "i": "83", "clr": "BBB6AE", "tt": "Medium Gray 2" },
    { "i": "84", "clr": "C6D1DE", "tt": "Dark Blue 2" },
    { "i": "85", "clr": "D6DFEC", "tt": "Light Blue 2" },
    { "i": "86", "clr": "EFD3D2", "tt": "Maroon 2" },
    { "i": "87", "clr": "E6EDD7", "tt": "Green 2" },
    { "i": "88", "clr": "DFDBE7", "tt": "Purple 2" },
    { "i": "89", "clr": "D0EAF0", "tt": "Aqua Blue 2" },
    { "i": "90", "clr": "FCE6D4", "tt": "Brown 2" },
    { "i": "91", "clr": "BFBFBF", "tt": "Light Gray 3" },
    { "i": "92", "clr": "727272", "tt": "Dark Gray 3" },
    { "i": "93", "clr": "A29096", "tt": "Medium Gray 3" },
    { "i": "94", "clr": "8EA3BD", "tt": "Dark Blue 3" },
    { "i": "95", "clr": "ADC0D9", "tt": "Light Blue 3" },
    { "i": "96", "clr": "DFA7A5", "tt": "Maroon 3" },
    { "i": "97", "clr": "CDDCAF", "tt": "Green 3" },
    { "i": "98", "clr": "BFB2CF", "tt": "Purple 3" },
    { "i": "99", "clr": "A4D5E2", "tt": "Aqua Blue 3" },
    { "i": "100", "clr": "F9CDAA", "tt": "Brown 3" },
    { "i": "101", "clr": "A5A5A5", "tt": "Light Gray 4" },
    { "i": "102", "clr": "595959", "tt": "Dark Gray 4" },
    { "i": "103", "clr": "7D7974", "tt": "Medium Gray 4" },
    { "i": "104", "clr": "56769D", "tt": "Dark Blue 4" },
    { "i": "105", "clr": "84A1C6", "tt": "Light Blue 4" },
    { "i": "106", "clr": "CF7B79", "tt": "Maroon 4" },
    { "i": "107", "clr": "B5CB88", "tt": "Green 4" },
    { "i": "108", "clr": "9F8CB7", "tt": "Purple 4" },
    { "i": "109", "clr": "77C0D4", "tt": "Aqua Blue 4" },
    { "i": "110", "clr": "F7B580", "tt": "Brown 4" },
     { "i": "111", "clr": "8C8C8C", "tt": "Light Gray 5" },
    { "i": "112", "clr": "3F3F3F", "tt": "Dark Gray 5" },
    { "i": "113", "clr": "575551", "tt": "Medium Gray 5" },
    { "i": "114", "clr": "17365D", "tt": "Dark Blue 5" },
    { "i": "115", "clr": "456287", "tt": "Light Blue 5" },
    { "i": "116", "clr": "903C39", "tt": "Maroon 5" },
    { "i": "117", "clr": "758C48", "tt": "Green 5" },
    { "i": "118", "clr": "604C78", "tt": "Purple 5" },
    { "i": "119", "clr": "3B8194", "tt": "Aqua Blue 5" },
    { "i": "120", "clr": "7A4e28", "tt": "Brown 5" },
    { "i": "121", "clr": "C00000", "tt": "Dark Red" },
    { "i": "122", "clr": "FF0000", "tt": "Red" },
    { "i": "123", "clr": "FFC000", "tt": "Orange" },
    { "i": "124", "clr": "FFFF00", "tt": "Yellow" },
    { "i": "125", "clr": "92D050", "tt": "Light Green" },
    { "i": "126", "clr": "00B050", "tt": "Green" },
    { "i": "127", "clr": "00B0F0", "tt": "Light Blue" },
    { "i": "128", "clr": "0070C0", "tt": "Blue" },
    { "i": "129", "clr": "002060", "tt": "Dark Blue" },
    { "i": "130", "clr": "7030A0", "tt": "Purple" },

    ]
    },
    {
        "type": "ColorGrid",
        "colorGridType": "patternColor",
        "theme": "WispTheme",
        "colors": [
	{ "i": "0", "clr": "Automatic", "tt": "No Color" },
    { "i": "1", "clr": "FFFFFF", "tt": "White, Background 1" },
    { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
    { "i": "3", "clr": "DDDDDD", "tt": "Gray-25%, Background 2" },
    { "i": "4", "clr": "5E5E5E", "tt": "Gray-80%, Text 2" },
    { "i": "5", "clr": "418AB3", "tt": "Aqua, Accent 1" },
    { "i": "6", "clr": "A6B727", "tt": "Green, Accent 2" },
    { "i": "7", "clr": "F69200", "tt": "Orange, Accent 3" },
    { "i": "8", "clr": "838383", "tt": "Gray-50%, Accent 4" },
    { "i": "9", "clr": "FEC306", "tt": "Gold, Accent 5" },
    { "i": "10", "clr": "DF5327", "tt": "Red, Accent 6" },
    { "i": "11", "clr": "F2F2F2", "tt": "White, Background 1, Darker 5%" },
    { "i": "12", "clr": "7F7F7F", "tt": "Black, Text 1, Lighter 50%" },
    { "i": "13", "clr": "C6C6C6", "tt": "Gray-25%, Background 2, Darker 10%" },
    { "i": "14", "clr": "DEDEDE", "tt": "Gray-80%, Text 2, Lighter 80%" },
    { "i": "15", "clr": "D7E7F0", "tt": "Aqua, Accent 1, Lighter 80%" },
    { "i": "16", "clr": "F0F4CF", "tt": "Green, Accent 2, Lighter 80%" },
    { "i": "17", "clr": "F0F4CF", "tt": "Orange, Accent 3, Lighter 80%" },
    { "i": "18", "clr": "E6E6E6", "tt": "Gray-50%, Accent 4, Lighter 80%" },
    { "i": "19", "clr": "FEF3CD", "tt": "Gold, Accent 5, Lighter 80%" },
    { "i": "20", "clr": "F8DCD3", "tt": "Red, Accent 6, Lighter 80%" },
    { "i": "21", "clr": "D8D8D8", "tt": "White, Background 1, Darker 15%" },
    { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
    { "i": "23", "clr": "A5A5A5", "tt": "Gray-25%, Background 2, Darker 25%" },
    { "i": "24", "clr": "BEBEBE", "tt": "Gray-80%, Text 2, Lighter 60%" },
    { "i": "25", "clr": "B0D0E2", "tt": "Aqua, Accent 1, Lighter 60%" },
    { "i": "26", "clr": "E1EAA0", "tt": "Green, Accent 2, Lighter 60%" },
    { "i": "27", "clr": "FFD495", "tt": "Orange, Accent 3, Lighter 60%" },
    { "i": "28", "clr": "CDCDCD", "tt": "Gray-50%, Accent 4, Lighter 60%" },
    { "i": "29", "clr": "FEE79B", "tt": "Gold, Accent 5, Lighter 60%" },
    { "i": "30", "clr": "F2BAA8", "tt": "Red, Accent 6, Lighter 60%" },
    { "i": "31", "clr": "BFBFBF", "tt": "White, Background 1, Darker 25%" },
    { "i": "32", "clr": "3F3F3F", "tt": "Black, Text 1, Lighter 25%" },
    { "i": "33", "clr": "6E6E6E", "tt": "Gray-25%, Background 2, Darker 50%" },
    { "i": "34", "clr": "9E9E9E", "tt": "Gray-80%, Text 2, Lighter 40%" },
    { "i": "35", "clr": "89B9D4", "tt": "Aqua, Accent 1, Lighter 40%" },
    { "i": "36", "clr": "D3E070", "tt": "Green, Accent 2, Lighter 40%" },
    { "i": "37", "clr": "FFBE60", "tt": "Orange, Accent 3, Lighter 40%" },
    { "i": "38", "clr": "B4B4B4", "tt": "Gray-50%, Accent 4, Lighter 40%" },
    { "i": "39", "clr": "FEDB69", "tt": "Gold, Accent 5, Lighter 40%" },
    { "i": "40", "clr": "EB977D", "tt": "Red, Accent 6, Lighter 40%" },
    { "i": "41", "clr": "A5A5A5", "tt": "White, Background 1, Darker 35%" },
    { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
    { "i": "43", "clr": "373737", "tt": "Gray-25%, Background 2, Darker 75%" },
    { "i": "44", "clr": "464646", "tt": "Gray-80%, Text 2, Darker 25%" },
    { "i": "45", "clr": "306786", "tt": "Aqua, Accent 1, Darker 25%" },
    { "i": "46", "clr": "7C891D", "tt": "Green, Accent 2, Darker 25%" },
    { "i": "47", "clr": "B86D00", "tt": "Orange, Accent 3, Darker 25%" },
    { "i": "48", "clr": "626262", "tt": "Gray-50%, Accent 4, Darker 25%" },
    { "i": "49", "clr": "C29400", "tt": "Gold, Accent 5, Darker 25%" },
    { "i": "50", "clr": "AB3C19", "tt": "Red, Accent 6, Darker 25%" },
    { "i": "51", "clr": "7F7F7F", "tt": "White, Background 1, Darker 50%" },
    { "i": "52", "clr": "0C0C0C", "tt": "Black, Text 1, Lighter 5%" },
    { "i": "53", "clr": "161616", "tt": "Gray-25%, Background 2, Darker 90%" },
    { "i": "54", "clr": "2F2F2F", "tt": "Gray-80%, Text 2, Darker 50%" },
    { "i": "55", "clr": "204559", "tt": "Aqua, Accent 1, Darker 50%" },
    { "i": "56", "clr": "535B13", "tt": "Green, Accent 2, Darker 50%" },
    { "i": "57", "clr": "7B4900", "tt": "Orange, Accent 3, Darker 50%" },
    { "i": "58", "clr": "414141", "tt": "Gray-50%, Accent 4, Darker 50%" },
    { "i": "59", "clr": "816200", "tt": "Gold, Accent 5, Darker 50%" },
    { "i": "60", "clr": "722810", "tt": "Red, Accent 6, Darker 50%" },
    { "i": "61", "clr": "FFFFFF", "tt": "White" },
    { "i": "62", "clr": "000000", "tt": "Black" },
    { "i": "63", "clr": "FAF3E8", "tt": "Medium Gray" },
    { "i": "64", "clr": "1F497D", "tt": "Dark Blue" },
    { "i": "65", "clr": "5C83B4", "tt": "Light Blue" },
    { "i": "66", "clr": "C0504D", "tt": "Maroon" },
    { "i": "67", "clr": "9DBB61", "tt": "Green" },
    { "i": "68", "clr": "8066A0", "tt": "Purple" },
    { "i": "69", "clr": "4BACC6", "tt": "Aqua Blue" },
    { "i": "70", "clr": "F59D56", "tt": "Brown" },
    { "i": "71", "clr": "ECECEC", "tt": "Light Gray 1" },
    { "i": "72", "clr": "929292", "tt": "Dark Gray 1" },
    { "i": "73", "clr": "CCC8C2", "tt": "Medium Gray 1" },
    { "i": "74", "clr": "DFE5ED", "tt": "Dark Blue 1" },
    { "i": "75", "clr": "EFF2F7", "tt": "Light Blue 1" },
    { "i": "76", "clr": "F9EDED", "tt": "Maroon 1" },
    { "i": "77", "clr": "F7F9F1", "tt": "Green 1" },
    { "i": "78", "clr": "F3F0F6", "tt": "Purple 1" },
    { "i": "79", "clr": "EEF8FA", "tt": "Aqua Blue 1" },
    { "i": "80", "clr": "FEFBF8", "tt": "Brown 1" },
    { "i": "81", "clr": "D8D8D8", "tt": "Light Gray 2" },
    { "i": "82", "clr": "7F7F7F", "tt": "Dark Gray 2" },
    { "i": "83", "clr": "BBB6AE", "tt": "Medium Gray 2" },
    { "i": "84", "clr": "C6D1DE", "tt": "Dark Blue 2" },
    { "i": "85", "clr": "D6DFEC", "tt": "Light Blue 2" },
    { "i": "86", "clr": "EFD3D2", "tt": "Maroon 2" },
    { "i": "87", "clr": "E6EDD7", "tt": "Green 2" },
    { "i": "88", "clr": "DFDBE7", "tt": "Purple 2" },
    { "i": "89", "clr": "D0EAF0", "tt": "Aqua Blue 2" },
    { "i": "90", "clr": "FCE6D4", "tt": "Brown 2" },
    { "i": "91", "clr": "BFBFBF", "tt": "Light Gray 3" },
    { "i": "92", "clr": "727272", "tt": "Dark Gray 3" },
    { "i": "93", "clr": "A29096", "tt": "Medium Gray 3" },
    { "i": "94", "clr": "8EA3BD", "tt": "Dark Blue 3" },
    { "i": "95", "clr": "ADC0D9", "tt": "Light Blue 3" },
    { "i": "96", "clr": "DFA7A5", "tt": "Maroon 3" },
    { "i": "97", "clr": "CDDCAF", "tt": "Green 3" },
    { "i": "98", "clr": "BFB2CF", "tt": "Purple 3" },
    { "i": "99", "clr": "A4D5E2", "tt": "Aqua Blue 3" },
    { "i": "100", "clr": "F9CDAA", "tt": "Brown 3" },
    { "i": "101", "clr": "A5A5A5", "tt": "Light Gray 4" },
    { "i": "102", "clr": "595959", "tt": "Dark Gray 4" },
    { "i": "103", "clr": "7D7974", "tt": "Medium Gray 4" },
    { "i": "104", "clr": "56769D", "tt": "Dark Blue 4" },
    { "i": "105", "clr": "84A1C6", "tt": "Light Blue 4" },
    { "i": "106", "clr": "CF7B79", "tt": "Maroon 4" },
    { "i": "107", "clr": "B5CB88", "tt": "Green 4" },
    { "i": "108", "clr": "9F8CB7", "tt": "Purple 4" },
    { "i": "109", "clr": "77C0D4", "tt": "Aqua Blue 4" },
    { "i": "110", "clr": "F7B580", "tt": "Brown 4" },
     { "i": "111", "clr": "8C8C8C", "tt": "Light Gray 5" },
    { "i": "112", "clr": "3F3F3F", "tt": "Dark Gray 5" },
    { "i": "113", "clr": "575551", "tt": "Medium Gray 5" },
    { "i": "114", "clr": "17365D", "tt": "Dark Blue 5" },
    { "i": "115", "clr": "456287", "tt": "Light Blue 5" },
    { "i": "116", "clr": "903C39", "tt": "Maroon 5" },
    { "i": "117", "clr": "758C48", "tt": "Green 5" },
    { "i": "118", "clr": "604C78", "tt": "Purple 5" },
    { "i": "119", "clr": "3B8194", "tt": "Aqua Blue 5" },
    { "i": "120", "clr": "7A4e28", "tt": "Brown 5" },
    { "i": "121", "clr": "C00000", "tt": "Dark Red" },
    { "i": "122", "clr": "FF0000", "tt": "Red" },
    { "i": "123", "clr": "FFC000", "tt": "Orange" },
    { "i": "124", "clr": "FFFF00", "tt": "Yellow" },
    { "i": "125", "clr": "92D050", "tt": "Light Green" },
    { "i": "126", "clr": "00B050", "tt": "Green" },
    { "i": "127", "clr": "00B0F0", "tt": "Light Blue" },
    { "i": "128", "clr": "0070C0", "tt": "Blue" },
    { "i": "129", "clr": "002060", "tt": "Dark Blue" },
    { "i": "130", "clr": "7030A0", "tt": "Purple" },

    ]
    },



    {
        "type": "ColorGrid",
        "colorGridType": "patternColor",
        "theme": "SliceThemeStandardAndMoreColors",
        "colors": [
	{ "i": "0", "clr": "Automatic", "tt": "No Color" },
    { "i": "1", "clr": "FFFFFF", "tt": "White, Background 1" },
    { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
    { "i": "3", "clr": "76DBF4", "tt": "Light Turquoise, Background 2" },
    { "i": "4", "clr": "146194", "tt": "Dark Blue, Text 2" },
    { "i": "5", "clr": "052F61", "tt": "Dark Blue, Accent 1" },
    { "i": "6", "clr": "A50E82", "tt": "Dark Purple, Accent 2" },
    { "i": "7", "clr": "14967C", "tt": "Dark Green, Accent 3" },
    { "i": "8", "clr": "6A9E1F", "tt": "Dark Green, Accent 4" },
    { "i": "9", "clr": "E87D37", "tt": "Orange, Accent 5" },
    { "i": "10", "clr": "C62324", "tt": "Red, Accent 6" },
    { "i": "11", "clr": "F2F2F2", "tt": "White, Background 1, Darker 5%" },
    { "i": "12", "clr": "7F7F7F", "tt": "Black, Text 1, Lighter 50%" },
    { "i": "13", "clr": "E3F7FC", "tt": "Light Turquoise, Background 2, Lighter 80%" },
    { "i": "14", "clr": "C2E2F6", "tt": "Dark Blue, Text 2, Lighter 80%" },
    { "i": "15", "clr": "B1D3FA", "tt": "Dark Blue, Accent 1, Lighter 80%" },
    { "i": "16", "clr": "F9C1EC", "tt": "Dark Purple, Accent 2, Lighter 80%" },
    { "i": "17", "clr": "C3F7EC", "tt": "Dark Green, Accent 3, Lighter 80%" },
    { "i": "18", "clr": "E2F4C9", "tt": "Dark Green, Accent 4, Lighter 80%" },
    { "i": "19", "clr": "FAE5D7", "tt": "Orange, Accent 5, Lighter 80%" },
    { "i": "20", "clr": "F6CFD0", "tt": "Red, Accent 6, Lighter 80%" },
    { "i": "21", "clr": "D8D8dD", "tt": "White, Background 1, Darker 15%" },
    { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
    { "i": "23", "clr": "C8F0FA", "tt": "Light Turquoise, Background 2,Lighter 60%" },
    { "i": "24", "clr": "86C5EE", "tt": "Dark Blue, Text 2, Lighter 60%" },
    { "i": "25", "clr": "63A7F7", "tt": "Dark Blue, Accent 1, Lighter 60%" },
    { "i": "26", "clr": "F484DA", "tt": "Dark Purple, Accent 2, Lighter 60%" },
    { "i": "27", "clr": "87EFDA", "tt": "Dark Green, Accent 3, Lighter 60%" },
    { "i": "28", "clr": "C6E993", "tt": "Dark Green, Accent 4, Lighter 60%" },
    { "i": "29", "clr": "F5CBAF", "tt": "Orange, Accent 5, Lighter 60%" },
    { "i": "30", "clr": "EEA0A1", "tt": "Red, Accent 6, Lighter 60%" },
    { "i": "31", "clr": "BFBFBF", "tt": "White, Background 1, Darker 25%" },
    { "i": "32", "clr": "3F3F3F", "tt": "Black, Text 1, Lighter 25%" },
    { "i": "33", "clr": "ACE9F8", "tt": "Light Turquoise, Background 2, Lighter 40%" },
    { "i": "34", "clr": "4AA8E6", "tt": "Dark Blue, Text 2, Lighter 40%" },
    { "i": "35", "clr": "167BF3", "tt": "Dark Blue, Accent 1, Lighter 40%" },
    { "i": "36", "clr": "EF47C8", "tt": "Dark Purple, Accent 2, Lighter 40%" },
    { "i": "37", "clr": "4BE7E7", "tt": "Dark Green, Accent 3, Lighter 40%" },
    { "i": "38", "clr": "AADF5D", "tt": "Dark Green, Accent 4, Lighter 40%" },
    { "i": "39", "clr": "F1B187", "tt": "Orange, Accent 5, Lighter 40%" },
    { "i": "40", "clr": "E67172", "tt": "Red, Accent 6, Lighter 40%" },
    { "i": "41", "clr": "A5A5A5", "tt": "White, Background 1, Darker 35%" },
    { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
    { "i": "43", "clr": "22C4ED", "tt": "Light Turquoise, Background 2, Darker 25%" },
    { "i": "44", "clr": "0F486F", "tt": "Dark Blue, Text 2, Darker 25%" },
    { "i": "45", "clr": "032348", "tt": "Dark Blue, Accent 1, Darker 25%" },
    { "i": "46", "clr": "7B0A61", "tt": "Dark Purple, Accent 2, Darker 25%" },
    { "i": "47", "clr": "0E7051", "tt": "Dark Green, Accent 3, Darker 25%" },
    { "i": "48", "clr": "4F7617", "tt": "Dark Green, Accent 4, Darker 25%" },
    { "i": "49", "clr": "C15916", "tt": "Orange, Accent 5, Darker 25%" },
    { "i": "50", "clr": "941A1B", "tt": "Red, Accent 6, Darker 25%" },
    { "i": "51", "clr": "7F7F7F", "tt": "White, Background 1, Darker 50%" },
    { "i": "52", "clr": "0C0C0C", "tt": "Black, Text 1, Lighter 5%" },
    { "i": "53", "clr": "0D88A7", "tt": "Light Turquoise, Background 2, Darker 50%" },
    { "i": "54", "clr": "09304A", "tt": "Dark Blue, Text 2, Darker 50%" },
    { "i": "55", "clr": "021730", "tt": "Dark Blue, Accent 1, Darker 50%" },
    { "i": "56", "clr": "520641", "tt": "Dark Purple, Accent 2, Darker 50%" },
    { "i": "57", "clr": "094B3E", "tt": "Dark Green, Accent 3, Darker 50%" },
    { "i": "58", "clr": "354F0F", "tt": "Dark Green, Accent 4, Darker 50%" },
    { "i": "59", "clr": "803B0E", "tt": "Orange, Accent 5, Darker 50%" },
    { "i": "60", "clr": "631112", "tt": "Red, Accent 6, Darker 50%" },
    { "i": "61", "clr": "FFFFFF", "tt": "White" },
    { "i": "62", "clr": "000000", "tt": "Black" },
    { "i": "63", "clr": "FAF3E8", "tt": "Medium Gray" },
    { "i": "64", "clr": "1F497D", "tt": "Dark Blue" },
    { "i": "65", "clr": "5C83B4", "tt": "Light Blue" },
    { "i": "66", "clr": "C0504D", "tt": "Maroon" },
    { "i": "67", "clr": "9DBB61", "tt": "Green" },
    { "i": "68", "clr": "8066A0", "tt": "Purple" },
    { "i": "69", "clr": "4BACC6", "tt": "Aqua Blue" },
    { "i": "70", "clr": "F59D56", "tt": "Brown" },
    { "i": "71", "clr": "ECECEC", "tt": "Light Gray 1" },
    { "i": "72", "clr": "929292", "tt": "Dark Gray 1" },
    { "i": "73", "clr": "CCC8C2", "tt": "Medium Gray 1" },
    { "i": "74", "clr": "DFE5ED", "tt": "Dark Blue 1" },
    { "i": "75", "clr": "EFF2F7", "tt": "Light Blue 1" },
    { "i": "76", "clr": "F9EDED", "tt": "Maroon 1" },
    { "i": "77", "clr": "F7F9F1", "tt": "Green 1" },
    { "i": "78", "clr": "F3F0F6", "tt": "Purple 1" },
    { "i": "79", "clr": "EEF8FA", "tt": "Aqua Blue 1" },
    { "i": "80", "clr": "FEFBF8", "tt": "Brown 1" },
    { "i": "81", "clr": "D8D8D8", "tt": "Light Gray 2" },
    { "i": "82", "clr": "7F7F7F", "tt": "Dark Gray 2" },
    { "i": "83", "clr": "BBB6AE", "tt": "Medium Gray 2" },
    { "i": "84", "clr": "C6D1DE", "tt": "Dark Blue 2" },
    { "i": "85", "clr": "D6DFEC", "tt": "Light Blue 2" },
    { "i": "86", "clr": "EFD3D2", "tt": "Maroon 2" },
    { "i": "87", "clr": "E6EDD7", "tt": "Green 2" },
    { "i": "88", "clr": "DFDBE7", "tt": "Purple 2" },
    { "i": "89", "clr": "D0EAF0", "tt": "Aqua Blue 2" },
    { "i": "90", "clr": "FCE6D4", "tt": "Brown 2" },
    { "i": "91", "clr": "BFBFBF", "tt": "Light Gray 3" },
    { "i": "92", "clr": "727272", "tt": "Dark Gray 3" },
    { "i": "93", "clr": "A29096", "tt": "Medium Gray 3" },
    { "i": "94", "clr": "8EA3BD", "tt": "Dark Blue 3" },
    { "i": "95", "clr": "ADC0D9", "tt": "Light Blue 3" },
    { "i": "96", "clr": "DFA7A5", "tt": "Maroon 3" },
    { "i": "97", "clr": "CDDCAF", "tt": "Green 3" },
    { "i": "98", "clr": "BFB2CF", "tt": "Purple 3" },
    { "i": "99", "clr": "A4D5E2", "tt": "Aqua Blue 3" },
    { "i": "100", "clr": "F9CDAA", "tt": "Brown 3" },
    { "i": "101", "clr": "A5A5A5", "tt": "Light Gray 4" },
    { "i": "102", "clr": "595959", "tt": "Dark Gray 4" },
    { "i": "103", "clr": "7D7974", "tt": "Medium Gray 4" },
    { "i": "104", "clr": "56769D", "tt": "Dark Blue 4" },
    { "i": "105", "clr": "84A1C6", "tt": "Light Blue 4" },
    { "i": "106", "clr": "CF7B79", "tt": "Maroon 4" },
    { "i": "107", "clr": "B5CB88", "tt": "Green 4" },
    { "i": "108", "clr": "9F8CB7", "tt": "Purple 4" },
    { "i": "109", "clr": "77C0D4", "tt": "Aqua Blue 4" },
    { "i": "110", "clr": "F7B580", "tt": "Brown 4" },
     { "i": "111", "clr": "8C8C8C", "tt": "Light Gray 5" },
    { "i": "112", "clr": "3F3F3F", "tt": "Dark Gray 5" },
    { "i": "113", "clr": "575551", "tt": "Medium Gray 5" },
    { "i": "114", "clr": "17365D", "tt": "Dark Blue 5" },
    { "i": "115", "clr": "456287", "tt": "Light Blue 5" },
    { "i": "116", "clr": "903C39", "tt": "Maroon 5" },
    { "i": "117", "clr": "758C48", "tt": "Green 5" },
    { "i": "118", "clr": "604C78", "tt": "Purple 5" },
    { "i": "119", "clr": "3B8194", "tt": "Aqua Blue 5" },
    { "i": "120", "clr": "7A4e28", "tt": "Brown 5" },
    { "i": "121", "clr": "C00000", "tt": "Dark Red" },
    { "i": "122", "clr": "FF0000", "tt": "Red" },
    { "i": "123", "clr": "FFC000", "tt": "Orange" },
    { "i": "124", "clr": "FFFF00", "tt": "Yellow" },
    { "i": "125", "clr": "92D050", "tt": "Light Green" },
    { "i": "126", "clr": "00B050", "tt": "Green" },
    { "i": "127", "clr": "00B0F0", "tt": "Light Blue" },
    { "i": "128", "clr": "0070C0", "tt": "Blue" },
    { "i": "129", "clr": "002060", "tt": "Dark Blue" },
    { "i": "130", "clr": "7030A0", "tt": "Purple" },

    ]
    },
    {
        "type": "ColorGrid",
        "colorGridType": "patternColor",
        "theme": "PPT_PARALLAX", //Used Column 5,6,8 in SIMS Project(Update Column# Used)
        "colors": [
	        { "i": "0", "clr": "Automatic", "tt": "No Color" },
            { "i": "1", "clr": "FFFFFF", "tt": "White, Background 1" },
            { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
            { "i": "3", "clr": "EEECE1", "tt": "Tan, Background 2" },
            { "i": "4", "clr": "605b4f", "tt": "Brown, Text 2" },
            { "i": "5", "clr": "865331", "tt": "Brown, Accent 1" },
            { "i": "6", "clr": "B13228", "tt": "Red, Accent 2" },
            { "i": "7", "clr": "8064A2", "tt": "Purple, Accent 4" },
            { "i": "8", "clr": "b73c26", "tt": "Red, Accent 4" },
            { "i": "9", "clr": "4BACC6", "tt": "Aqua, Accent 5" },
            { "i": "10", "clr": "F79646", "tt": "Orange, Accent 6" },

            { "i": "11", "clr": "F2F2F2", "tt": "White, Background 1, Darker 5%" },
            { "i": "12", "clr": "7F7F7F", "tt": "Black, Text 1, Lighter 50%" },
            { "i": "13", "clr": "DDD9C3", "tt": "Tan, Background 2, Darker 10%" },
            { "i": "14", "clr": "e0deda", "tt": "Brown, Text 2, Lighter 80%" },
            { "i": "15", "clr": "eddbcf", "tt": "Brown, Accent 1, Lighter 80%" },
            { "i": "16", "clr": "F4D1CF", "tt": "Red, Accent 2, Lighter 80%" },
            { "i": "17", "clr": "E5E0EC", "tt": "Purple, Accent 4, Lighter 80%" },
            { "i": "18", "clr": "f5d4cf", "tt": "Red, Accent 4, Lighter 80%" },
            { "i": "19", "clr": "DBEEF3", "tt": "Aqua, Accent 5, Lighter 80%" },
            { "i": "20", "clr": "FDEADA", "tt": "Orange, Accent 6, Lighter 80%" },

            { "i": "21", "clr": "D8D8D8", "tt": "White, Background 1, Darker 15%" },
            { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
            { "i": "23", "clr": "C4BD97", "tt": "Tan, Background 2, Darker 25%" },
            { "i": "24", "clr": "c2beb5", "tt": "Brown, Text 2, Lighter 60%" },
            { "i": "25", "clr": "dbb79f", "tt": "Brown, Accent 1, Lighter 60%" },
            { "i": "26", "clr": "E9A49F", "tt": "Red, Accent 2, Lighter 60%" },
            { "i": "27", "clr": "CCC1D9", "tt": "Purple, Accent 4, Lighter 60%" },
            { "i": "28", "clr": "ebaa9f", "tt": "Red, Accent 4, Lighter 60%" },
            { "i": "29", "clr": "B7DDE8", "tt": "Aqua, Accent 5, Lighter 60%" },
            { "i": "30", "clr": "FBD5B5", "tt": "Orange, Accent 6, Lighter 60%" },

            { "i": "31", "clr": "BFBFBF", "tt": "White, Background 1, Darker 25%" },
            { "i": "32", "clr": "3F3F3F", "tt": "Black, Text 1, Lighter 25%" },
            { "i": "33", "clr": "938953", "tt": "Tan, Background 2, Darker 50%" },
            { "i": "34", "clr": "a49e90", "tt": "Brown, Text 2, Lighter 40%" },
            { "i": "35", "clr": "ca936f", "tt": "Brown, Accent 1, Lighter 40%" },
            { "i": "36", "clr": "DE776F", "tt": "Red, Accent 2, Lighter 40%" },
            { "i": "37", "clr": "B2A1C7", "tt": "Purple, Accent 4, Lighter 40%" },
            { "i": "38", "clr": "e1806f", "tt": "Red, Accent 4, Lighter 40%" },
            { "i": "39", "clr": "92CDDC", "tt": "Aqua, Accent 5, Lighter 40%" },
            { "i": "40", "clr": "FAC08F", "tt": "Orange, Accent 6, Lighter 40%" },

            { "i": "41", "clr": "A5A5A5", "tt": "White, Background 1, Darker 35%" },
            { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
            { "i": "43", "clr": "494429", "tt": "Tan, Background 2, Darker 75%" },
            { "i": "44", "clr": "47443b", "tt": "Brown, Text 2, Darker 25%" },
            { "i": "45", "clr": "643e24", "tt": "Brown, Accent 1, Darker 25%" },
            { "i": "46", "clr": "84251D", "tt": "Red, Accent 2, Darker 25%" },
            { "i": "47", "clr": "5F497A", "tt": "Purple, Accent 4, Darker 25%" },
            { "i": "48", "clr": "892c1c", "tt": "Red, Accent 4, Darker 25%" },
            { "i": "49", "clr": "31859B", "tt": "Aqua, Accent 5, Darker 25%" },
            { "i": "50", "clr": "E36C09", "tt": "Orange, Accent 6, Darker 25%" },

            { "i": "51", "clr": "7F7F7F", "tt": "White, Background 1, Darker 50%" },
            { "i": "52", "clr": "0C0C0C", "tt": "Black, Text 1, Lighter 5%" },
            { "i": "53", "clr": "1D1B10", "tt": "Tan, Background 2, Darker 90%" },
            { "i": "54", "clr": "302d27", "tt": "Brown, Text 2, Darker 50%" },
            { "i": "55", "clr": "432918", "tt": "Brown, Accent 1, Darker 50%" },
            { "i": "56", "clr": "581813", "tt": "Red, Accent 2, Darker 50%" },
            { "i": "57", "clr": "3F3151", "tt": "Purple, Accent 4, Darker 50%" },
            { "i": "58", "clr": "5b1d12", "tt": "Red, Accent 4, Darker 50%" },
            { "i": "59", "clr": "205867", "tt": "Aqua, Accent 5, Darker 50%" },
            { "i": "60", "clr": "974806", "tt": "Orange, Accent 6, Darker 50%" },

            { "i": "61", "clr": "C00000", "tt": "Dark Red" },
            { "i": "62", "clr": "FF0000", "tt": "Red" },
            { "i": "63", "clr": "FFC000", "tt": "Orange" },
            { "i": "64", "clr": "FFFF00", "tt": "Yellow" },
            { "i": "65", "clr": "92D050", "tt": "Light Green" },
            { "i": "66", "clr": "00B050", "tt": "Green" },
            { "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
            { "i": "68", "clr": "0070C0", "tt": "Blue" },
            { "i": "69", "clr": "002060", "tt": "Dark Blue" },
            { "i": "70", "clr": "7030A0", "tt": "Purple" },
            { "i": "71", "clr": "NoFill", "tt": "NoFill" }

    ]
    },
    {
        "type": "ColorGrid",
        "colorGridType": "patternColor",
        "theme": "OfficeAccess",
        "colors": [
            { "i": "0", "clr": "Automatic", "tt": "No Color" },
            { "i": "1", "clr": "FFFFFF", "tt": "White, Background 1" },
            { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
            { "i": "3", "clr": "CEDDEB", "tt": "Tan, Background 2" },
            { "i": "4", "clr": "647051", "tt": "Dark Blue, Text 2" },
            { "i": "5", "clr": "DD8200", "tt": "Blue, Accent 1" },
            { "i": "6", "clr": "82563E", "tt": "Red, Accent 2" },
            { "i": "7", "clr": "9A8456", "tt": "Olive Green, Accent 3" },
            { "i": "8", "clr": "C1BC7F", "tt": "Purple, Accent 4" },
            { "i": "9", "clr": "95A087", "tt": "Aqua, Accent 5" },
            { "i": "10", "clr": "95A087", "tt": "Green,Accent 6" },
            { "i": "11", "clr": "F2F2F2", "tt": "White, Background 1, Darker 5%" },
            { "i": "12", "clr": "7F7F7F", "tt": "Black, Text 1, Lighter 50%" },
            { "i": "13", "clr": "AFC8DE", "tt": "Tan, Background 2, Darker 10%" },
            { "i": "14", "clr": "E0E4DA", "tt": "Dark Blue, Text 2, Lighter 80%" },
            { "i": "15", "clr": "F9E6CD", "tt": "Blue, Accent 1, Lighter 80%" },
            { "i": "16", "clr": "F2DCD1", "tt": "Red, Accent 2, Lighter 80%" },
            { "i": "17", "clr": "E8DBD4", "tt": "Olive Green, Accent 3, Lighter 80%" },
            { "i": "18", "clr": "EAE6DC", "tt": "Purple, Accent 4, Lighter 80%" },
            { "i": "19", "clr": "EAE5DB", "tt": "Aqua, Accent 5, Lighter 80%" },
            { "i": "20", "clr": "E9EBE7", "tt": "Green,Accent 6,Lighter 80%" },
            { "i": "21", "clr": "D8D8D8", "tt": "White, Background 1, Darker 15%" },
            { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
            { "i": "23", "clr": "84A9CB", "tt": "Tan, Background 2, Darker 25%" },
            { "i": "24", "clr": "C2C9B5", "tt": "Dark Blue, Text 2, Lighter 60%" },
            { "i": "25", "clr": "F3CD9A", "tt": "Blue, Accent 1, Lighter 60%" },
            { "i": "26", "clr": "F2DCD1", "tt": "Red, Accent 2, Lighter 60%" },
            { "i": "27", "clr": "D3B8A9", "tt": "Olive Green, Accent 3, Lighter 60%" },
            { "i": "28", "clr": "D7CDB9", "tt": "Purple, Accent 4, Lighter 60%" },
            { "i": "29", "clr": "E6E4CB", "tt": "Aqua, Accent 5, Lighter 60%" },
            { "i": "30", "clr": "D4D9CF", "tt": "Green,Accent 6,Lighter 60%" },
            { "i": "31", "clr": "BFBFBF", "tt": "White, Background 1, Darker 25%" },
            { "i": "32", "clr": "3F3F3F", "tt": "Black, Text 1, Lighter 25%" },
            { "i": "33", "clr": "938953", "tt": "Tan, Background 2, Darker 50%" },
            { "i": "34", "clr": "548DD4", "tt": "Dark Blue, Text 2, Lighter 40%" },
            { "i": "35", "clr": "95B3D7", "tt": "Blue, Accent 1, Lighter 40%" },
            { "i": "36", "clr": "D99694", "tt": "Red, Accent 2, Lighter 40%" },
            { "i": "37", "clr": "C3D69B", "tt": "Olive Green, Accent 3, Lighter 40%" },
            { "i": "38", "clr": "B2A1C7", "tt": "Purple, Accent 4, Lighter 40%" },
            { "i": "39", "clr": "92CDDC", "tt": "Aqua, Accent 5, Lighter 40%" },
            { "i": "40", "clr": "BFC6B5", "tt": "Green,Accent 6,Lighter 40%" },
            { "i": "41", "clr": "A5A5A5", "tt": "White, Background 1, Darker 35%" },
            { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
            { "i": "43", "clr": "494429", "tt": "Tan, Background 2, Darker 75%" },
            { "i": "44", "clr": "17365D", "tt": "Dark Blue, Text 2, Darker 25%" },
            { "i": "45", "clr": "366092", "tt": "Blue, Accent 1, Darker 25%" },
            { "i": "46", "clr": "953734", "tt": "Red, Accent 2, Darker 25%" },
            { "i": "47", "clr": "76923C", "tt": "Olive Green, Accent 3, Darker 25%" },
            { "i": "48", "clr": "5F497A", "tt": "Purple, Accent 4, Darker 25%" },
            { "i": "49", "clr": "31859B", "tt": "Aqua, Accent 5, Darker 25%" },
            { "i": "50", "clr": "6E795F", "tt": "Green,Accent 6,Darker 25%" },
            { "i": "51", "clr": "7F7F7F", "tt": "White, Background 1, Darker 50%" },
            { "i": "52", "clr": "0C0C0C", "tt": "Black, Text 1, Lighter 5%" },
            { "i": "53", "clr": "1D1B10", "tt": "Tan, Background 2, Darker 90%" },
            { "i": "54", "clr": "0F243E", "tt": "Olive Green, Text 2, Darker 50%" },
            { "i": "55", "clr": "244061", "tt": "Blue, Accent 1, Darker 50%" },
            { "i": "56", "clr": "632423", "tt": "Red, Accent 2, Darker 50%" },
            { "i": "57", "clr": "4F6128", "tt": "Olive Green, Accent 3, Darker 50%" },
            { "i": "58", "clr": "3F3151", "tt": "Purple, Accent 4, Darker 50%" },
            { "i": "59", "clr": "205867", "tt": "Aqua, Accent 5, Darker 50%" },
            { "i": "60", "clr": "4B5240", "tt": "Green,Accent 6,Darker 50%" },
            { "i": "61", "clr": "FFFFFF", "tt": "White" },
            { "i": "62", "clr": "000000", "tt": "Black" },
            { "i": "63", "clr": "FAF3E8", "tt": "Medium Gray" },
            { "i": "64", "clr": "1F497D", "tt": "Dark Blue" },
            { "i": "65", "clr": "5C83B4", "tt": "Light Blue" },
            { "i": "66", "clr": "C0504D", "tt": "Maroon" },
            { "i": "67", "clr": "9DBB61", "tt": "Green" },
            { "i": "68", "clr": "8066A0", "tt": "Purple" },
            { "i": "69", "clr": "4BACC6", "tt": "Aqua Blue" },
            { "i": "70", "clr": "F59D56", "tt": "Brown" },
            { "i": "71", "clr": "ECECEC", "tt": "Light Gray 1" },
            { "i": "72", "clr": "929292", "tt": "Dark Gray 1" },
            { "i": "73", "clr": "CCC8C2", "tt": "Medium Gray 1" },
            { "i": "74", "clr": "DFE5ED", "tt": "Dark Blue 1" },
            { "i": "75", "clr": "EFF2F7", "tt": "Light Blue 1" },
            { "i": "76", "clr": "F9EDED", "tt": "Maroon 1" },
            { "i": "77", "clr": "F7F9F1", "tt": "Green 1" },
            { "i": "78", "clr": "F3F0F6", "tt": "Purple 1" },
            { "i": "79", "clr": "EEF8FA", "tt": "Aqua Blue 1" },
            { "i": "80", "clr": "FEFBF8", "tt": "Brown 1" },
            { "i": "81", "clr": "D8D8D8", "tt": "Light Gray 2" },
            { "i": "82", "clr": "7F7F7F", "tt": "Dark Gray 2" },
            { "i": "83", "clr": "BBB6AE", "tt": "Medium Gray 2" },
            { "i": "84", "clr": "C6D1DE", "tt": "Dark Blue 2" },
            { "i": "85", "clr": "D6DFEC", "tt": "Light Blue 2" },
            { "i": "86", "clr": "EFD3D2", "tt": "Maroon 2" },
            { "i": "87", "clr": "E6EDD7", "tt": "Green 2" },
            { "i": "88", "clr": "DFDBE7", "tt": "Purple 2" },
            { "i": "89", "clr": "D0EAF0", "tt": "Aqua Blue 2" },
            { "i": "90", "clr": "FCE6D4", "tt": "Brown 2" },
            { "i": "91", "clr": "BFBFBF", "tt": "Light Gray 3" },
            { "i": "92", "clr": "727272", "tt": "Dark Gray 3" },
            { "i": "93", "clr": "A29096", "tt": "Medium Gray 3" },
            { "i": "94", "clr": "8EA3BD", "tt": "Dark Blue 3" },
            { "i": "95", "clr": "ADC0D9", "tt": "Light Blue 3" },
            { "i": "96", "clr": "DFA7A5", "tt": "Maroon 3" },
            { "i": "97", "clr": "CDDCAF", "tt": "Green 3" },
            { "i": "98", "clr": "BFB2CF", "tt": "Purple 3" },
            { "i": "99", "clr": "A4D5E2", "tt": "Aqua Blue 3" },
            { "i": "100", "clr": "F9CDAA", "tt": "Brown 3" },
            { "i": "101", "clr": "A5A5A5", "tt": "Light Gray 4" },
            { "i": "102", "clr": "595959", "tt": "Dark Gray 4" },
            { "i": "103", "clr": "7D7974", "tt": "Medium Gray 4" },
            { "i": "104", "clr": "56769D", "tt": "Dark Blue 4" },
            { "i": "105", "clr": "84A1C6", "tt": "Light Blue 4" },
            { "i": "106", "clr": "CF7B79", "tt": "Maroon 4" },
            { "i": "107", "clr": "B5CB88", "tt": "Green 4" },
            { "i": "108", "clr": "9F8CB7", "tt": "Purple 4" },
            { "i": "109", "clr": "77C0D4", "tt": "Aqua Blue 4" },
            { "i": "110", "clr": "F7B580", "tt": "Brown 4" },
            { "i": "111", "clr": "8C8C8C", "tt": "Light Gray 5" },
            { "i": "112", "clr": "3F3F3F", "tt": "Dark Gray 5" },
            { "i": "113", "clr": "575551", "tt": "Medium Gray 5" },
            { "i": "114", "clr": "17365D", "tt": "Dark Blue 5" },
            { "i": "115", "clr": "456287", "tt": "Light Blue 5" },
            { "i": "116", "clr": "903C39", "tt": "Maroon 5" },
            { "i": "117", "clr": "758C48", "tt": "Green 5" },
            { "i": "118", "clr": "604C78", "tt": "Purple 5" },
            { "i": "119", "clr": "3B8194", "tt": "Aqua Blue 5" },
            { "i": "120", "clr": "7A4e28", "tt": "Brown 5" },
            { "i": "121", "clr": "C00000", "tt": "Dark Red" },
            { "i": "122", "clr": "FF0000", "tt": "Red" },
            { "i": "123", "clr": "FFC000", "tt": "Orange" },
            { "i": "124", "clr": "FFFF00", "tt": "Yellow" },
            { "i": "125", "clr": "92D050", "tt": "Light Green" },
            { "i": "126", "clr": "00B050", "tt": "Green" },
            { "i": "127", "clr": "00B0F0", "tt": "Light Blue" },
            { "i": "128", "clr": "0070C0", "tt": "Blue" },
            { "i": "129", "clr": "002060", "tt": "Dark Blue" },
            { "i": "130", "clr": "7030A0", "tt": "Purple" }


        ]
    },
    {
        "type": "ColorGrid",
        "colorGridType": "patternColor",
        "theme": "OfficeAccess2",
        "colors": [
            { "i": "0", "clr": "Automatic", "tt": "No Color" },
            { "i": "1", "clr": "FFFFFF", "tt": "White, Background 1" },
            { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
            { "i": "3", "clr": "76DBF4", "tt": "Light Turquoise, Background 2" },
            { "i": "4", "clr": "146194", "tt": "Dark Blue, Text 2" },
            { "i": "5", "clr": "052F61", "tt": "Dark Blue, Accent 1" },
            { "i": "6", "clr": "A50E82", "tt": "Dark purple, Accent 2" },
            { "i": "7", "clr": "14967C", "tt": "Dark Green, Accent 3" },
            { "i": "8", "clr": "6A9E1F", "tt": "Dark Green, Accent 4" },
            { "i": "9", "clr": "E87D37", "tt": "Orange, Accent 5" },
            { "i": "10", "clr": "C62324", "tt": "Red,Accent 6" },
            { "i": "11", "clr": "F2F2F2", "tt": "White, Background 1, Darker 5%" },
            { "i": "12", "clr": "7F7F7F", "tt": "Black, Text 1, Lighter 50%" },
            { "i": "13", "clr": "E3F7FC", "tt": "Light Turquoise, Background 2, Lighter 80%" },
            { "i": "14", "clr": "E0E4DA", "tt": "Dark Blue, Text 2, Lighter 80%" },
            { "i": "15", "clr": "F9E6CD", "tt": "Blue, Accent 1, Lighter 80%" },
            { "i": "16", "clr": "F2DCD1", "tt": "Red, Accent 2, Lighter 80%" },
            { "i": "17", "clr": "E8DBD4", "tt": "Olive Green, Accent 3, Lighter 80%" },
            { "i": "18", "clr": "EAE6DC", "tt": "Purple, Accent 4, Lighter 80%" },
            { "i": "19", "clr": "EAE5DB", "tt": "Aqua, Accent 5, Lighter 80%" },
            { "i": "20", "clr": "E9EBE7", "tt": "Green,Accent 6,Lighter 80%" },
            { "i": "21", "clr": "D8D8D8", "tt": "White, Background 1, Darker 15%" },
            { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
            { "i": "23", "clr": "C8F0FA", "tt": "Light Turquoise, Background 2, Lighter 60%" },
            { "i": "24", "clr": "C2C9B5", "tt": "Dark Blue, Text 2, Lighter 60%" },
            { "i": "25", "clr": "F3CD9A", "tt": "Blue, Accent 1, Lighter 60%" },
            { "i": "26", "clr": "F2DCD1", "tt": "Red, Accent 2, Lighter 60%" },
            { "i": "27", "clr": "D3B8A9", "tt": "Olive Green, Accent 3, Lighter 60%" },
            { "i": "28", "clr": "D7CDB9", "tt": "Purple, Accent 4, Lighter 60%" },
            { "i": "29", "clr": "E6E4CB", "tt": "Aqua, Accent 5, Lighter 60%" },
            { "i": "30", "clr": "D4D9CF", "tt": "Green,Accent 6,Lighter 60%" },
            { "i": "31", "clr": "BFBFBF", "tt": "White, Background 1, Darker 25%" },
            { "i": "32", "clr": "3F3F3F", "tt": "Black, Text 1, Lighter 25%" },
            { "i": "33", "clr": "ACE9F8", "tt": "Light Turquoise, Background 2, Lighter 40%" },
            { "i": "34", "clr": "548DD4", "tt": "Dark Blue, Text 2, Lighter 40%" },
            { "i": "35", "clr": "95B3D7", "tt": "Blue, Accent 1, Lighter 40%" },
            { "i": "36", "clr": "D99694", "tt": "Red, Accent 2, Lighter 40%" },
            { "i": "37", "clr": "C3D69B", "tt": "Olive Green, Accent 3, Lighter 40%" },
            { "i": "38", "clr": "B2A1C7", "tt": "Purple, Accent 4, Lighter 40%" },
            { "i": "39", "clr": "92CDDC", "tt": "Aqua, Accent 5, Lighter 40%" },
            { "i": "40", "clr": "BFC6B5", "tt": "Green,Accent 6,Lighter 40%" },
            { "i": "41", "clr": "A5A5A5", "tt": "White, Background 1, Darker 35%" },
            { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
            { "i": "43", "clr": "22C4ED", "tt": "Light Turquoise, Background 2, Lighter 25%" },
            { "i": "44", "clr": "17365D", "tt": "Dark Blue, Text 2, Darker 25%" },
            { "i": "45", "clr": "366092", "tt": "Blue, Accent 1, Darker 25%" },
            { "i": "46", "clr": "953734", "tt": "Red, Accent 2, Darker 25%" },
            { "i": "47", "clr": "76923C", "tt": "Olive Green, Accent 3, Darker 25%" },
            { "i": "48", "clr": "5F497A", "tt": "Purple, Accent 4, Darker 25%" },
            { "i": "49", "clr": "31859B", "tt": "Aqua, Accent 5, Darker 25%" },
            { "i": "50", "clr": "6E795F", "tt": "Green,Accent 6,Darker 25%" },
            { "i": "51", "clr": "7F7F7F", "tt": "White, Background 1, Darker 50%" },
            { "i": "52", "clr": "0C0C0C", "tt": "Black, Text 1, Lighter 5%" },
            { "i": "53", "clr": "0D88A7", "tt": "Light Turquoise, Background 2, Lighter 50%" },
            { "i": "54", "clr": "0F243E", "tt": "Olive Green, Text 2, Darker 50%" },
            { "i": "55", "clr": "244061", "tt": "Blue, Accent 1, Darker 50%" },
            { "i": "56", "clr": "632423", "tt": "Red, Accent 2, Darker 50%" },
            { "i": "57", "clr": "4F6128", "tt": "Olive Green, Accent 3, Darker 50%" },
            { "i": "58", "clr": "3F3151", "tt": "Purple, Accent 4, Darker 50%" },
            { "i": "59", "clr": "205867", "tt": "Aqua, Accent 5, Darker 50%" },
            { "i": "60", "clr": "4B5240", "tt": "Green,Accent 6,Darker 50%" },
            { "i": "61", "clr": "FFFFFF", "tt": "White" },
            { "i": "62", "clr": "000000", "tt": "Black" },
            { "i": "63", "clr": "FAF3E8", "tt": "Medium Gray" },
            { "i": "64", "clr": "1F497D", "tt": "Dark Blue" },
            { "i": "65", "clr": "5C83B4", "tt": "Light Blue" },
            { "i": "66", "clr": "C0504D", "tt": "Maroon" },
            { "i": "67", "clr": "9DBB61", "tt": "Green" },
            { "i": "68", "clr": "8066A0", "tt": "Purple" },
            { "i": "69", "clr": "4BACC6", "tt": "Aqua Blue" },
            { "i": "70", "clr": "F59D56", "tt": "Brown" },
            { "i": "71", "clr": "ECECEC", "tt": "Light Gray 1" },
            { "i": "72", "clr": "929292", "tt": "Dark Gray 1" },
            { "i": "73", "clr": "CCC8C2", "tt": "Medium Gray 1" },
            { "i": "74", "clr": "DFE5ED", "tt": "Dark Blue 1" },
            { "i": "75", "clr": "EFF2F7", "tt": "Light Blue 1" },
            { "i": "76", "clr": "F9EDED", "tt": "Maroon 1" },
            { "i": "77", "clr": "F7F9F1", "tt": "Green 1" },
            { "i": "78", "clr": "F3F0F6", "tt": "Purple 1" },
            { "i": "79", "clr": "EEF8FA", "tt": "Aqua Blue 1" },
            { "i": "80", "clr": "FEFBF8", "tt": "Brown 1" },
            { "i": "81", "clr": "D8D8D8", "tt": "Light Gray 2" },
            { "i": "82", "clr": "7F7F7F", "tt": "Dark Gray 2" },
            { "i": "83", "clr": "BBB6AE", "tt": "Medium Gray 2" },
            { "i": "84", "clr": "C6D1DE", "tt": "Dark Blue 2" },
            { "i": "85", "clr": "D6DFEC", "tt": "Light Blue 2" },
            { "i": "86", "clr": "EFD3D2", "tt": "Maroon 2" },
            { "i": "87", "clr": "E6EDD7", "tt": "Green 2" },
            { "i": "88", "clr": "DFDBE7", "tt": "Purple 2" },
            { "i": "89", "clr": "D0EAF0", "tt": "Aqua Blue 2" },
            { "i": "90", "clr": "FCE6D4", "tt": "Brown 2" },
            { "i": "91", "clr": "BFBFBF", "tt": "Light Gray 3" },
            { "i": "92", "clr": "727272", "tt": "Dark Gray 3" },
            { "i": "93", "clr": "A29096", "tt": "Medium Gray 3" },
            { "i": "94", "clr": "8EA3BD", "tt": "Dark Blue 3" },
            { "i": "95", "clr": "ADC0D9", "tt": "Light Blue 3" },
            { "i": "96", "clr": "DFA7A5", "tt": "Maroon 3" },
            { "i": "97", "clr": "CDDCAF", "tt": "Green 3" },
            { "i": "98", "clr": "BFB2CF", "tt": "Purple 3" },
            { "i": "99", "clr": "A4D5E2", "tt": "Aqua Blue 3" },
            { "i": "100", "clr": "F9CDAA", "tt": "Brown 3" },
            { "i": "101", "clr": "A5A5A5", "tt": "Light Gray 4" },
            { "i": "102", "clr": "595959", "tt": "Dark Gray 4" },
            { "i": "103", "clr": "7D7974", "tt": "Medium Gray 4" },
            { "i": "104", "clr": "56769D", "tt": "Dark Blue 4" },
            { "i": "105", "clr": "84A1C6", "tt": "Light Blue 4" },
            { "i": "106", "clr": "CF7B79", "tt": "Maroon 4" },
            { "i": "107", "clr": "B5CB88", "tt": "Green 4" },
            { "i": "108", "clr": "9F8CB7", "tt": "Purple 4" },
            { "i": "109", "clr": "77C0D4", "tt": "Aqua Blue 4" },
            { "i": "110", "clr": "F7B580", "tt": "Brown 4" },
            { "i": "111", "clr": "8C8C8C", "tt": "Light Gray 5" },
            { "i": "112", "clr": "3F3F3F", "tt": "Dark Gray 5" },
            { "i": "113", "clr": "575551", "tt": "Medium Gray 5" },
            { "i": "114", "clr": "17365D", "tt": "Dark Blue 5" },
            { "i": "115", "clr": "456287", "tt": "Light Blue 5" },
            { "i": "116", "clr": "903C39", "tt": "Maroon 5" },
            { "i": "117", "clr": "758C48", "tt": "Green 5" },
            { "i": "118", "clr": "604C78", "tt": "Purple 5" },
            { "i": "119", "clr": "3B8194", "tt": "Aqua Blue 5" },
            { "i": "120", "clr": "7A4e28", "tt": "Brown 5" },
            { "i": "121", "clr": "C00000", "tt": "Dark Red" },
            { "i": "122", "clr": "FF0000", "tt": "Red" },
            { "i": "123", "clr": "FFC000", "tt": "Orange" },
            { "i": "124", "clr": "FFFF00", "tt": "Yellow" },
            { "i": "125", "clr": "92D050", "tt": "Light Green" },
            { "i": "126", "clr": "00B050", "tt": "Green" },
            { "i": "127", "clr": "00B0F0", "tt": "Light Blue" },
            { "i": "128", "clr": "0070C0", "tt": "Blue" },
            { "i": "129", "clr": "002060", "tt": "Dark Blue" },
            { "i": "130", "clr": "7030A0", "tt": "Purple" }


        ]
    },
    {
        "type": "ColorGrid",
        "colorGridType": "patternColor",
        "theme": "PPT_Retrospect",
        "colors": [
            { "i": "0", "clr": "Automatic", "tt": "No Color" },
            { "i": "1", "clr": "FFFFFF", "tt": "White, Background 1" },
            { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
            { "i": "3", "clr": "E3EDE1", "tt": "Tan, Background 2" },
            { "i": "4", "clr": "455F51", "tt": "Dark Green, Text 2" },
            { "i": "5", "clr": "549E39", "tt": "Green, Accent 1" },
            { "i": "6", "clr": "8AB833", "tt": "Lime, Accent 2" },
            { "i": "7", "clr": "C0CF3A", "tt": "Lime, Accent 3" },
            { "i": "8", "clr": "029676", "tt": "Dark Teal, Accent 4" },
            { "i": "9", "clr": "4AB5C4", "tt": "Aqua, Accent 5" },
            { "i": "10", "clr": "0989B1", "tt": "Turquoise, Accent 6" },
            { "i": "11", "clr": "F2F2F2", "tt": "White, Background 1, Darker 5%" },
            { "i": "12", "clr": "7F7F7F", "tt": "Black, Text 1, Lighter 50%" },
            { "i": "13", "clr": "D2CAB5", "tt": "Tan, Background 2, Darker 10%" },
            { "i": "14", "clr": "D6E1DB", "tt": "Dark Green, Text 2, Lighter 80%" },
            { "i": "15", "clr": "DBEFD3", "tt": "Green, Accent 1, Lighter 80%" },
            { "i": "16", "clr": "E8F3D3", "tt": "Lime, Accent 2, Lighter 80%" },
            { "i": "17", "clr": "F2F5D7", "tt": "Lime, Accent 3, Lighter 80%" },
            { "i": "18", "clr": "B8FEEE", "tt": "Dark Teal, Accent 4, Lighter 80%" },
            { "i": "19", "clr": "DAF0F3", "tt": "Aqua, Accent 5, Lighter 80%" },
            { "i": "20", "clr": "C1EDFB", "tt": "Turquoise, Accent 6, Lighter 80%" },
            { "i": "21", "clr": "D8D8D8", "tt": "White, Background 1, Darker 15%" },
            { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
            { "i": "23", "clr": "B9AD8D", "tt": "Tan, Background 2, Darker 25%" },
            { "i": "24", "clr": "AEC4B8", "tt": "Dark Green, Text 2, Lighter 60%" },
            { "i": "25", "clr": "B7DFA8", "tt": "Green, Accent 1, Lighter 60%" },
            { "i": "26", "clr": "D1E7A8", "tt": "Lime, Accent 2, Lighter 60%" },
            { "i": "27", "clr": "E5EBB0", "tt": "Lime, Accent 3, Lighter 60%" },
            { "i": "28", "clr": "71FDDE", "tt": "Dark Teal, Accent 4, Lighter 60%" },
            { "i": "29", "clr": "B6E1E7", "tt": "Aqua, Accent 5, Lighter 60%" },
            { "i": "30", "clr": "83DCF8", "tt": "Turquoise, Accent 6, Lighter 60%" },
            { "i": "31", "clr": "BFBFBF", "tt": "White, Background 1, Darker 25%" },
            { "i": "32", "clr": "3F3F3F", "tt": "Black, Text 1, Lighter 25%" },
            { "i": "33", "clr": "877852", "tt": "Tan, Background 2, Darker 50%" },
            { "i": "34", "clr": "86A795", "tt": "Dark Green, Text 2, Lighter 40%" },
            { "i": "35", "clr": "93D07C", "tt": "Green, Accent 1, Lighter 40%" },
            { "i": "36", "clr": "BADB7D", "tt": "Lime, Accent 2, Lighter 40%" },
            { "i": "37", "clr": "D9E288", "tt": "Lime, Accent 3, Lighter 40%" },
            { "i": "38", "clr": "2BFCCE", "tt": "Dark Teal, Accent 4, Lighter 40%" },
            { "i": "39", "clr": "92D2DB", "tt": "Aqua, Accent 5, Lighter 40%" },
            { "i": "40", "clr": "46CBF5", "tt": "Turquoise, Accent 6, Lighter 40%" },
            { "i": "41", "clr": "A5A5A5", "tt": "White, Background 1, Darker 35%" },
            { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
            { "i": "43", "clr": "433C29", "tt": "Tan, Background 2, Darker 75%" },
            { "i": "44", "clr": "33473C", "tt": "Dark Green, Text 2, Darker 25%" },
            { "i": "45", "clr": "3F762A", "tt": "Green, Accent 1, Darker 25%" },
            { "i": "46", "clr": "678A26", "tt": "Lime, Accent 2, Darker 25%" },
            { "i": "47", "clr": "939F26", "tt": "Lime, Accent 3, Darker 25%" },
            { "i": "48", "clr": "017058", "tt": "Dark Teal, Accent 4, Darker 25%" },
            { "i": "49", "clr": "318C98", "tt": "Aqua, Accent 5, Darker 25%" },
            { "i": "50", "clr": "066684", "tt": "Turquoise, Accent 6, Darker 25%" },
            { "i": "51", "clr": "7F7F7F", "tt": "White, Background 1, Darker 50%" },
            { "i": "52", "clr": "0C0C0C", "tt": "Black, Text 1, Lighter 5%" },
            { "i": "53", "clr": "1B1B10", "tt": "Tan, Background 2, Darker 90%" },
            { "i": "54", "clr": "222F28", "tt": "Dark Green, Text 2, Darker 50%" },
            { "i": "55", "clr": "2A4F1C", "tt": "Green, Accent 1, Darker 50%" },
            { "i": "56", "clr": "455C19", "tt": "Lime, Accent 2, Darker 50%" },
            { "i": "57", "clr": "626A19", "tt": "Lime, Accent 3, Darker 50%" },
            { "i": "58", "clr": "004B3A", "tt": "Dark Teal, Accent 4, Darker 50%" },
            { "i": "59", "clr": "215D65", "tt": "Aqua, Accent 5, Darker 50%" },
            { "i": "60", "clr": "044458", "tt": "Turquoise, Accent 6, Darker 50%" },
            { "i": "61", "clr": "C00000", "tt": "Dark Red" },
            { "i": "62", "clr": "FF0000", "tt": "Red" },
            { "i": "63", "clr": "FFC000", "tt": "Orange" },
            { "i": "64", "clr": "FFFF00", "tt": "Yellow" },
            { "i": "65", "clr": "92D050", "tt": "Light Green" },
            { "i": "66", "clr": "00B050", "tt": "Green" },
            { "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
            { "i": "68", "clr": "0070C0", "tt": "Blue" },
            { "i": "69", "clr": "002060", "tt": "Dark Blue" },
            { "i": "70", "clr": "7030A0", "tt": "Purple" },
            { "i": "71", "clr": "NoFill", "tt": "NoFill" }
        ]
    },
    {
        "type": "ColorGrid",
        "colorGridType": "patternColor",
        "theme": "PPT_Whisp",
        "colors": [
            { "i": "0", "clr": "Automatic", "tt": "No Color" },
            { "i": "1", "clr": "FFFFFF", "tt": "White, Background 1" },
            { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
            { "i": "3", "clr": "eae8cf", "tt": "Tan, Background 2" },
            { "i": "4", "clr": "647252", "tt": "Olive Green, Text 2" },
            { "i": "5", "clr": "e78712", "tt": "Orange, Accent 1" },
            { "i": "6", "clr": "b73c26", "tt": "Red, Accent 2" },
            { "i": "7", "clr": "865331", "tt": "Brown, Accent 3" },
            { "i": "8", "clr": "b38648", "tt": "Brown, Accent 4" },
            { "i": "9", "clr": "bbb473", "tt": "Tan, Accent 5" },
            { "i": "10", "clr": "849276", "tt": "Green, Accent 6" },
            { "i": "11", "clr": "F2F2F2", "tt": "White, Background 1, Darker 5%" },
            { "i": "12", "clr": "7F7F7F", "tt": "Black, Text 1, Lighter 50%" },
            { "i": "13", "clr": "dcd9b0", "tt": "Tan, Background 2, Darker 10%" },
            { "i": "14", "clr": "e0e4da", "tt": "Olive Green, Text 2, Lighter 80%" },
            { "i": "15", "clr": "fbe7ce", "tt": "Orange, Accent 1, Lighter 80%" },
            { "i": "16", "clr": "f5d4cf", "tt": "Red, Accent 2, Lighter 80%" },
            { "i": "17", "clr": "eddbcf", "tt": "Brown, Accent 3, Lighter 80%" },
            { "i": "18", "clr": "f0e6da", "tt": "Brown, Accent 4, Lighter 80%" },
            { "i": "19", "clr": "f1f0e3", "tt": "Tan, Accent 5, Lighter 80%" },
            { "i": "20", "clr": "e6e9e3", "tt": "Green, Accent 6, Lighter 80%" },
            { "i": "21", "clr": "D8D8D8", "tt": "White, Background 1, Darker 15%" },
            { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
            { "i": "23", "clr": "c8c382", "tt": "Tan, Background 2, Darker 25%" },
            { "i": "24", "clr": "c1cab5", "tt": "Olive Green, Text 2, Lighter 60%" },
            { "i": "25", "clr": "f7cf9e", "tt": "Orange, Accent 1, Lighter 60%" },
            { "i": "26", "clr": "ebaa9f", "tt": "Red, Accent 2, Lighter 60%" },
            { "i": "27", "clr": "dbb79f", "tt": "Brown, Accent 3, Lighter 60%" },
            { "i": "28", "clr": "e1ceb5", "tt": "Brown, Accent 4, Lighter 60%" },
            { "i": "29", "clr": "e3e1c7", "tt": "Tan, Accent 5, Lighter 60%" },
            { "i": "30", "clr": "cdd3c8", "tt": "Green, Accent 6, Lighter 60%" },
            { "i": "31", "clr": "BFBFBF", "tt": "White, Background 1, Darker 25%" },
            { "i": "32", "clr": "3F3F3F", "tt": "Black, Text 1, Lighter 25%" },
            { "i": "33", "clr": "999343", "tt": "Tan, Background 2, Darker 50%" },
            { "i": "34", "clr": "a2b091", "tt": "Olive Green, Text 2, Lighter 40%" },
            { "i": "35", "clr": "f3b76d", "tt": "Orange, Accent 1, Lighter 40%" },
            { "i": "36", "clr": "e1806f", "tt": "Red, Accent 2, Lighter 40%" },
            { "i": "37", "clr": "ca936f", "tt": "Brown, Accent 3, Lighter 40%" },
            { "i": "38", "clr": "d2b690", "tt": "Brown, Accent 4, Lighter 40%" },
            { "i": "39", "clr": "d6d1ab", "tt": "Tan, Accent 5, Lighter 40%" },
            { "i": "40", "clr": "b5bdac", "tt": "Green, Accent 6, Lighter 40%" },
            { "i": "41", "clr": "A5A5A5", "tt": "White, Background 1, Darker 35%" },
            { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
            { "i": "43", "clr": "4c4921", "tt": "Tan, Background 2, Darker 75%" },
            { "i": "44", "clr": "4b553d", "tt": "Olive Green, Text 2, Darker 25%" },
            { "i": "45", "clr": "ad650d", "tt": "Orange, Accent 1, Darker 25%" },
            { "i": "46", "clr": "892c1c", "tt": "Red, Accent 2, Darker 25%" },
            { "i": "47", "clr": "643e24", "tt": "Brown, Accent 3, Darker 25%" },
            { "i": "48", "clr": "866435", "tt": "Brown, Accent 4, Darker 25%" },
            { "i": "49", "clr": "98904a", "tt": "Tan, Accent 5, Darker 25%" },
            { "i": "50", "clr": "636e57", "tt": "Green, Accent 6, Darker 25%" },
            { "i": "51", "clr": "7F7F7F", "tt": "White, Background 1, Darker 50%" },
            { "i": "52", "clr": "0C0C0C", "tt": "Black, Text 1, Lighter 5%" },
            { "i": "53", "clr": "1e1d0d", "tt": "Tan, Background 2, Darker 90%" },
            { "i": "54", "clr": "323829", "tt": "Olive Green, Text 2, Darker 50%" },
            { "i": "55", "clr": "734308", "tt": "Orange, Accent 1, Darker 50%" },
            { "i": "56", "clr": "5b1d12", "tt": "Red, Accent 2, Darker 50%" },
            { "i": "57", "clr": "432918", "tt": "Brown, Accent 3, Darker 50%" },
            { "i": "58", "clr": "594323", "tt": "Brown, Accent 4, Darker 50%" },
            { "i": "59", "clr": "656031", "tt": "Tan, Accent 5, Darker 50%" },
            { "i": "60", "clr": "42493a", "tt": "Green, Accent 6, Darker 50%" },
            { "i": "61", "clr": "C00000", "tt": "Dark Red" },
            { "i": "62", "clr": "FF0000", "tt": "Red" },
            { "i": "63", "clr": "FFC000", "tt": "Orange" },
            { "i": "64", "clr": "FFFF00", "tt": "Yellow" },
            { "i": "65", "clr": "92D050", "tt": "Light Green" },
            { "i": "66", "clr": "00B050", "tt": "Green" },
            { "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
            { "i": "68", "clr": "0070C0", "tt": "Blue" },
            { "i": "69", "clr": "002060", "tt": "Dark Blue" },
            { "i": "70", "clr": "7030A0", "tt": "Purple" },
            { "i": "71", "clr": "NoFill", "tt": "NoFill" }
        ]
    },
    {
        "type": "ColorGrid",
        "colorGridType": "patternColor",
        "theme": "PPT_View",
        "colors": [
            { "i": "0", "clr": "Automatic", "tt": "No Color" },
            { "i": "1", "clr": "FFFFFF", "tt": "White, Background 1" },
            { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
            { "i": "3", "clr": "e9e5dc", "tt": "Tan, Background 2" },
            { "i": "4", "clr": "696464", "tt": "Gray-50%, Text 2" },
            { "i": "5", "clr": "d34817", "tt": "Orange, Accent 1" },
            { "i": "6", "clr": "9b2d1f", "tt": "Dark Red, Accent 2" },
            { "i": "7", "clr": "a28e6a", "tt": "Brown, Accent 3" },
            { "i": "8", "clr": "956251", "tt": "Brown, Accent 4" },
            { "i": "9", "clr": "918485", "tt": "Gray-50%, Accent 5" },
            { "i": "10", "clr": "855d5d", "tt": "Brown, Accent 6" },
            { "i": "11", "clr": "F2F2F2", "tt": "White, Background 1, Darker 5%" },
            { "i": "12", "clr": "7F7F7F", "tt": "Black, Text 1, Lighter 50%" },
            { "i": "13", "clr": "d7d0c0", "tt": "Tan, Background 2, Darker 10%" },
            { "i": "14", "clr": "e1dfdf", "tt": "Gray-50%, Text 2, Lighter 80%" },
            { "i": "15", "clr": "f9d8cd", "tt": "Orange, Accent 1, Lighter 80%" },
            { "i": "16", "clr": "f4cdc9", "tt": "Dark Red, Lighter 80%" },
            { "i": "17", "clr": "ece8e1", "tt": "Brown, Accent 3, Lighter 80%" },
            { "i": "18", "clr": "ebdeda", "tt": "Brown, Accent 4, Lighter 80%" },
            { "i": "19", "clr": "e9e6e6", "tt": "Gray-50%, Accent 5, Lighter 80%" },
            { "i": "20", "clr": "e7dddd", "tt": "Brown, Accent 6, Lighter 80%" },
            { "i": "21", "clr": "D8D8D8", "tt": "White, Background 1, Darker 15%" },
            { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
            { "i": "23", "clr": "bdb196", "tt": "Tan, Background 2, Darker 25%" },
            { "i": "24", "clr": "c3c0c0", "tt": "Gray-50%, Text 2, Lighter 60%" },
            { "i": "25", "clr": "f4b29b", "tt": "Orange, Accent 1, Lighter 60%" },
            { "i": "26", "clr": "e99c93", "tt": "Dark Red, Accent 2, Lighter 60%" },
            { "i": "27", "clr": "d9d1c3", "tt": "Brown, Accent 3, Lighter 60%" },
            { "i": "28", "clr": "d7beb6", "tt": "Brown, Accent 4, Lighter 60%" },
            { "i": "29", "clr": "d3cdce", "tt": "Gray-50%, Accent 5, Lighter 60%" },
            { "i": "30", "clr": "d0bcbc", "tt": "Brown, Accent 6, Lighter 60%" },
            { "i": "31", "clr": "BFBFBF", "tt": "White, Background 1, Darker 25%" },
            { "i": "32", "clr": "3F3F3F", "tt": "Black, Text 1, Lighter 25%" },
            { "i": "33", "clr": "8b7b57", "tt": "Tan, Background 2, Darker 50%" },
            { "i": "34", "clr": "a5a1a1", "tt": "Gray-50%, Text 2, Lighter 40%" },
            { "i": "35", "clr": "ee8c69", "tt": "Orange, Accent 1, Lighter 40%" },
            { "i": "36", "clr": "de6b5c", "tt": "Dark Red, Accent 2, Lighter 40%" },
            { "i": "37", "clr": "c7bba5", "tt": "Brown, Accent 3, Lighter 40%" },
            { "i": "38", "clr": "c39e92", "tt": "Brown, Accent 4, Lighter 40%" },
            { "i": "39", "clr": "bdb5b5", "tt": "Gray-50%, Accent 5, Lighter 40%" },
            { "i": "40", "clr": "b89a9a", "tt": "Brown, Accent 6, Lighter 40%" },
            { "i": "41", "clr": "A5A5A5", "tt": "White, Background 1, Darker 35%" },
            { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
            { "i": "43", "clr": "453d2b", "tt": "Tan, Background 2, Darker 75%" },
            { "i": "44", "clr": "4e4a4a", "tt": "Gray-50%, Text 2, Darker 25%" },
            { "i": "45", "clr": "9e3511", "tt": "Orange, Accent 1, Darker 25%" },
            { "i": "46", "clr": "742117", "tt": "Dark Red, Accent 2, Darker 25%" },
            { "i": "47", "clr": "7b6b4d", "tt": "Brown, Accent 3, Darker 25%" },
            { "i": "48", "clr": "6f493c", "tt": "Brown, Accent 4, Darker 25%" },
            { "i": "49", "clr": "6d6262", "tt": "Gray-50%, Accent 5, Darker 25%" },
            { "i": "50", "clr": "634545", "tt": "Brown, Accent 6, Darker 25%" },
            { "i": "51", "clr": "7F7F7F", "tt": "White, Background 1, Darker 50%" },
            { "i": "52", "clr": "0C0C0C", "tt": "Black, Text 1, Lighter 5%" },
            { "i": "53", "clr": "1b1811", "tt": "Tan, Background 2, Darker 90%" },
            { "i": "54", "clr": "343232", "tt": "Gray-50%, Text 2, Darker 50%" },
            { "i": "55", "clr": "69230b", "tt": "Orange, Accent 1, Darker 50%" },
            { "i": "56", "clr": "4d160f", "tt": "Dark Red, Accent 2, Darker 50%" },
            { "i": "57", "clr": "524733", "tt": "Brown, Accent 3, Darker 50%" },
            { "i": "58", "clr": "4a3128", "tt": "Brown, Accent 4, Darker 50%" },
            { "i": "59", "clr": "494141", "tt": "Gray-50%, Accent 5, Darker 50%" },
            { "i": "60", "clr": "422e2e", "tt": "Brown, Accent 6, Darker 50%" },
            { "i": "61", "clr": "C00000", "tt": "Dark Red" },
            { "i": "62", "clr": "FF0000", "tt": "Red" },
            { "i": "63", "clr": "FFC000", "tt": "Orange" },
            { "i": "64", "clr": "FFFF00", "tt": "Yellow" },
            { "i": "65", "clr": "92D050", "tt": "Light Green" },
            { "i": "66", "clr": "00B050", "tt": "Green" },
            { "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
            { "i": "68", "clr": "0070C0", "tt": "Blue" },
            { "i": "69", "clr": "002060", "tt": "Dark Blue" },
            { "i": "70", "clr": "7030A0", "tt": "Purple" },
            { "i": "71", "clr": "NoFill", "tt": "NoFill" }
        ]
    },
    {
        "type": "ColorGrid",
        "colorGridType": "patternColor",
        "theme": "PPT_Organic",
        "colors": [
            { "i": "0", "clr": "Automatic", "tt": "No Color" },
            { "i": "1", "clr": "FFFFFF", "tt": "White, Background 1" },
            { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
            { "i": "3", "clr": "e9e5dc", "tt": "Tan, Background 2" },
            { "i": "4", "clr": "696464", "tt": "Gray-50%, Text 2" },
            { "i": "5", "clr": "b15e28", "tt": "Brown, Accent 1" },
            { "i": "6", "clr": "9b2d1f", "tt": "Dark Red, Accent 2" },
            { "i": "7", "clr": "a28e6a", "tt": "Brown, Accent 3" },
            { "i": "8", "clr": "956251", "tt": "Brown, Accent 4" },
            { "i": "9", "clr": "918485", "tt": "Gray-50%, Accent 5" },
            { "i": "10", "clr": "855d5d", "tt": "Brown, Accent 6" },
            { "i": "11", "clr": "F2F2F2", "tt": "White, Background 1, Darker 5%" },
            { "i": "12", "clr": "7F7F7F", "tt": "Black, Text 1, Lighter 50%" },
            { "i": "13", "clr": "d7d0c0", "tt": "Tan, Background 2, Darker 10%" },
            { "i": "14", "clr": "e1dfdf", "tt": "Gray-50%, Text 2, Lighter 80%" },
            { "i": "15", "clr": "f4ddcf", "tt": "Brown, Accent 1, Lighter 80%" },
            { "i": "16", "clr": "f4cdc9", "tt": "Dark Red, Lighter 80%" },
            { "i": "17", "clr": "ece8e1", "tt": "Brown, Accent 3, Lighter 80%" },
            { "i": "18", "clr": "ebdeda", "tt": "Brown, Accent 4, Lighter 80%" },
            { "i": "19", "clr": "e9e6e6", "tt": "Gray-50%, Accent 5, Lighter 80%" },
            { "i": "20", "clr": "e7dddd", "tt": "Brown, Accent 6, Lighter 80%" },
            { "i": "21", "clr": "D8D8D8", "tt": "White, Background 1, Darker 15%" },
            { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
            { "i": "23", "clr": "bdb196", "tt": "Tan, Background 2, Darker 25%" },
            { "i": "24", "clr": "c3c0c0", "tt": "Gray-50%, Text 2, Lighter 60%" },
            { "i": "25", "clr": "e9bc9f", "tt": "Brown, Accent 1, Lighter 60%" },
            { "i": "26", "clr": "e99c93", "tt": "Dark Red, Accent 2, Lighter 60%" },
            { "i": "27", "clr": "d9d1c3", "tt": "Brown, Accent 3, Lighter 60%" },
            { "i": "28", "clr": "d7beb6", "tt": "Brown, Accent 4, Lighter 60%" },
            { "i": "29", "clr": "d3cdce", "tt": "Gray-50%, Accent 5, Lighter 60%" },
            { "i": "30", "clr": "d0bcbc", "tt": "Brown, Accent 6, Lighter 60%" },
            { "i": "31", "clr": "BFBFBF", "tt": "White, Background 1, Darker 25%" },
            { "i": "32", "clr": "3F3F3F", "tt": "Black, Text 1, Lighter 25%" },
            { "i": "33", "clr": "8b7b57", "tt": "Tan, Background 2, Darker 50%" },
            { "i": "34", "clr": "a5a1a1", "tt": "Gray-50%, Text 2, Lighter 40%" },
            { "i": "35", "clr": "de9b6f", "tt": "Brown, Accent 1, Lighter 40%" },
            { "i": "36", "clr": "de6b5c", "tt": "Dark Red, Accent 2, Lighter 40%" },
            { "i": "37", "clr": "c7bba5", "tt": "Brown, Accent 3, Lighter 40%" },
            { "i": "38", "clr": "c39e92", "tt": "Brown, Accent 4, Lighter 40%" },
            { "i": "39", "clr": "bdb5b5", "tt": "Gray-50%, Accent 5, Lighter 40%" },
            { "i": "40", "clr": "b89a9a", "tt": "Brown, Accent 6, Lighter 40%" },
            { "i": "41", "clr": "A5A5A5", "tt": "White, Background 1, Darker 35%" },
            { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
            { "i": "43", "clr": "453d2b", "tt": "Tan, Background 2, Darker 75%" },
            { "i": "44", "clr": "4e4a4a", "tt": "Gray-50%, Text 2, Darker 25%" },
            { "i": "45", "clr": "84461d", "tt": "Brown, Accent 1, Darker 25%" },
            { "i": "46", "clr": "742117", "tt": "Dark Red, Accent 2, Darker 25%" },
            { "i": "47", "clr": "7b6b4d", "tt": "Brown, Accent 3, Darker 25%" },
            { "i": "48", "clr": "6f493c", "tt": "Brown, Accent 4, Darker 25%" },
            { "i": "49", "clr": "6d6262", "tt": "Gray-50%, Accent 5, Darker 25%" },
            { "i": "50", "clr": "634545", "tt": "Brown, Accent 6, Darker 25%" },
            { "i": "51", "clr": "7F7F7F", "tt": "White, Background 1, Darker 50%" },
            { "i": "52", "clr": "0C0C0C", "tt": "Black, Text 1, Lighter 5%" },
            { "i": "53", "clr": "1b1811", "tt": "Tan, Background 2, Darker 90%" },
            { "i": "54", "clr": "343232", "tt": "Gray-50%, Text 2, Darker 50%" },
            { "i": "55", "clr": "582f13", "tt": "Brown, Accent 1, Darker 50%" },
            { "i": "56", "clr": "4d160f", "tt": "Dark Red, Accent 2, Darker 50%" },
            { "i": "57", "clr": "524733", "tt": "Brown, Accent 3, Darker 50%" },
            { "i": "58", "clr": "4a3128", "tt": "Brown, Accent 4, Darker 50%" },
            { "i": "59", "clr": "494141", "tt": "Gray-50%, Accent 5, Darker 50%" },
            { "i": "60", "clr": "422e2e", "tt": "Brown, Accent 6, Darker 50%" },
            { "i": "61", "clr": "C00000", "tt": "Dark Red" },
            { "i": "62", "clr": "FF0000", "tt": "Red" },
            { "i": "63", "clr": "FFC000", "tt": "Orange" },
            { "i": "64", "clr": "FFFF00", "tt": "Yellow" },
            { "i": "65", "clr": "92D050", "tt": "Light Green" },
            { "i": "66", "clr": "00B050", "tt": "Green" },
            { "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
            { "i": "68", "clr": "0070C0", "tt": "Blue" },
            { "i": "69", "clr": "002060", "tt": "Dark Blue" },
            { "i": "70", "clr": "7030A0", "tt": "Purple" },
            { "i": "71", "clr": "NoFill", "tt": "NoFill" }
        ]
    },
    {
        "type": "ColorGrid",
        "colorGridType": "patternColor",
        "theme": "WoodType",
        "colors": [
            { "i": "0", "clr": "Automatic", "tt": "No Color" },
            { "i": "1", "clr": "000000", "tt": "Black, Background 1" },
            { "i": "2", "clr": "FFFFFF", "tt": "White, Text 1" },
            { "i": "3", "clr": "E7E6E6", "tt": "Gray-25%, Background 2" },
            { "i": "4", "clr": "44546A", "tt": "Blue-Gray, Text 2" },
            { "i": "5", "clr": "ED7D31", "tt": "Orange, Accent 2" },
            { "i": "6", "clr": "9b2d1f", "tt": "Dark Red, Accent 2" },
            { "i": "7", "clr": "A5A5A5", "tt": "Gray-50%, Accent 3" },
            { "i": "8", "clr": "FFC000", "tt": "Gold, Accent 4" },
            { "i": "9", "clr": "4472C4", "tt": "Blue, Accent 5" },
            { "i": "10", "clr": "70AD47", "tt": "Green, Accent 6" },
            { "i": "11", "clr": "7F7F7F", "tt": "Black, Background 1, Lighter 50%" },
            { "i": "12", "clr": "F2F2F2", "tt": "White, Text 1, Darker 5%" },
            { "i": "13", "clr": "D0CECE", "tt": "Gray-25%, Background 2, Darker 10%" },
            { "i": "14", "clr": "D6DCE4", "tt": "Blue-Gray, Text 2, Lighter 80%" },
            { "i": "15", "clr": "FBE5D5", "tt": "Orange, Accent 2, Lighter 80%" },
            { "i": "16", "clr": "f4cdc9", "tt": "Dark Red, Accent 2, Lighter 80%" },
            { "i": "17", "clr": "EDEDED", "tt": "Gray-50%, Accent 3, Lighter 80%" },
            { "i": "18", "clr": "FFF2CC", "tt": "Gold, Accent 4, Lighter 80%" },
            { "i": "19", "clr": "D9E2F3", "tt": "Blue, Accent 5, Lighter 80%" },
            { "i": "20", "clr": "E2EFD9", "tt": "Green, Accent 6, Lighter 80%" },
            { "i": "21", "clr": "595959", "tt": "Black, Background 1, Lighter 35%" },
            { "i": "22", "clr": "D8D8D8", "tt": "White, Text 1, Darker 15%" },
            { "i": "23", "clr": "AEABAB", "tt": "Gray-25%, Background 2, Darker 25%" },
            { "i": "24", "clr": "ADB9CA", "tt": "Blue-Gray, Text 2, Lighter 60%" },
            { "i": "25", "clr": "F7CBAC", "tt": "Orange, Accent 2, Lighter 60%" },
            { "i": "26", "clr": "e79b92", "tt": "Dark Red, Accent 2, Lighter 60%" },
            { "i": "27", "clr": "DBDBDB", "tt": "Gray-50%, Accent 3, Lighter 60%" },
            { "i": "28", "clr": "FEE599", "tt": "Gold, Accent 4, Lighter 60%" },
            { "i": "29", "clr": "B4C6E7", "tt": "Blue, Accent 5, Lighter 60%" },
            { "i": "30", "clr": "C5E0B3", "tt": "Green, Accent 6, Lighter 60%" },
            { "i": "31", "clr": "3F3F3F", "tt": "Black, Background 1, Lighter 25%" },
            { "i": "32", "clr": "BFBFBF", "tt": "White, Text 1, Darker 25%" },
            { "i": "33", "clr": "757070", "tt": "Gray-25%, Background 2, Darker 50%" },
            { "i": "34", "clr": "8496B0", "tt": "Blue-Gray, Text 2, Lighter 40%" },
            { "i": "35", "clr": "F4B183", "tt": "Orange, Accent 2, Lighter 40%" },
            { "i": "36", "clr": "da695a", "tt": "Dark Red, Accent 2, Lighter 40%" },
            { "i": "37", "clr": "C9C9C9", "tt": "Gray-50%, Accent 3, Lighter 40%" },
            { "i": "38", "clr": "FFD965", "tt": "Gold, Accent 4, Lighter 40%" },
            { "i": "39", "clr": "8EAADB", "tt": "Blue, Accent 5, Lighter 40%" },
            { "i": "40", "clr": "A8D08D", "tt": "Green, Accent 6, Lighter 40%" },
            { "i": "41", "clr": "262626", "tt": "Black, Background 1, Lighter 15%" },
            { "i": "42", "clr": "A5A5A5", "tt": "White, Text 1, Darker 35%" },
            { "i": "43", "clr": "3A3838", "tt": "Gray-25%, Background 2, Darker 75%" },
            { "i": "44", "clr": "323F4F", "tt": "Blue-Gray, Text 2, Darker 25%" },
            { "i": "45", "clr": "C55A11", "tt": "Orange, Accent 2, Darker 25%" },
            { "i": "46", "clr": "742117", "tt": "Dark Red, Accent 2, Darker 25%" },
            { "i": "47", "clr": "7B7B7B", "tt": "Gray-50%, Accent 3, Darker 25%" },
            { "i": "48", "clr": "BF9000", "tt": "Gold, Accent 4, Darker 25%" },
            { "i": "49", "clr": "2F5496", "tt": "Blue, Accent 5, Darker 25%" },
            { "i": "50", "clr": "538135", "tt": "Green, Accent 6, Darker 25%" },
            { "i": "51", "clr": "0C0C0C", "tt": "Black, Background 1, Lighter 5%" },
            { "i": "52", "clr": "7F7F7F", "tt": "White, Text 1, Darker 50%" },
            { "i": "53", "clr": "171616", "tt": "Gray-25%, Background 2, Darker 90%" },
            { "i": "54", "clr": "222A35", "tt": "Blue-Gray, Text 2, Darker 50%" },
            { "i": "55", "clr": "833C0B", "tt": "Orange, Accent 2, Darker 50%" },
            { "i": "56", "clr": "4d160f", "tt": "Dark Red, Accent 2, Darker 50%" },
            { "i": "57", "clr": "525252", "tt": "Gray-50%, Accent 3, Darker 50%" },
            { "i": "58", "clr": "7F6000", "tt": "Gold, Accent 4, Darker 50%" },
            { "i": "59", "clr": "1F3864", "tt": "Blue, Accent 5, Darker 50%" },
            { "i": "60", "clr": "375623", "tt": "Green, Accent 6, Darker 50%" },
            { "i": "61", "clr": "C00000", "tt": "Dark Red" },
            { "i": "62", "clr": "FF0000", "tt": "Red" },
            { "i": "63", "clr": "FFC000", "tt": "Orange" },
            { "i": "64", "clr": "FFFF00", "tt": "Yellow" },
            { "i": "65", "clr": "92D050", "tt": "Light Green" },
            { "i": "66", "clr": "00B050", "tt": "Green" },
            { "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
            { "i": "68", "clr": "0070C0", "tt": "Blue" },
            { "i": "69", "clr": "002060", "tt": "Dark Blue" },
            { "i": "70", "clr": "7030A0", "tt": "Purple" },
            { "i": "71", "clr": "NoFill", "tt": "NoFill" }
        ]
    },
    {
        "type": "ColorGrid",
        "colorGridType": "patternColor",
        "theme": "Word_Wisp",
        "colors": [
		    { "i": "0", "clr": "Automatic", "tt": "No Color" },
            { "i": "1", "clr": "FFFFFF", "tt": "White, Background 1" },
            { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
            { "i": "3", "clr": "E3EACF", "tt": "Light Green, Background 2" },
            { "i": "4", "clr": "766F54", "tt": "Brown, Text 2" },
            { "i": "5", "clr": "A53010", "tt": "Dark Red, Accent 1" },
            { "i": "6", "clr": "DE7E18", "tt": "Orange, Accent 2" },
            { "i": "7", "clr": "9F8351", "tt": "Brown, Accent 3" },
            { "i": "8", "clr": "728653", "tt": "Olive Green, Accent 4" },
            { "i": "9", "clr": "92AA4C", "tt": "Olive Green, Accent 5" },
            { "i": "10", "clr": "6AAC91", "tt": "Green, Accent 6" },
            { "i": "11", "clr": "F2F2F2", "tt": "White, Background 1, Darker 5%" },
            { "i": "12", "clr": "7F7F7F", "tt": "Black, Text 1, Lighter 50%" },
            { "i": "13", "clr": "D1DCB0", "tt": "Light Green, Background 2, Darker 10%" },
            { "i": "14", "clr": "E5E3DB", "tt": "Brown, Text 2, Lighter 80%" },
            { "i": "15", "clr": "F9CEC3", "tt": "Dark Red, Accent 1, Lighter 80%" },
            { "i": "16", "clr": "F9E5CF", "tt": "Orange, Accent 2, Lighter 80%" },
            { "i": "17", "clr": "ECE6DB", "tt": "Brown, Accent 3, Lighter 80%" },
            { "i": "18", "clr": "E3E8DA", "tt": "Olive Green, Accent 4, Lighter 80%" },
            { "i": "19", "clr": "E9EEDA", "tt": "Olive Green, Accent 5, Lighter 80%" },
            { "i": "20", "clr": "E1EEE9", "tt": "Green, Accent 6, Lighter 80%" },
            { "i": "21", "clr": "D8D8D8", "tt": "White, Background 1, Darker 15%" },
            { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
            { "i": "23", "clr": "B6C882", "tt": "Light Green, Background 2, Darker 25%" },
            { "i": "24", "clr": "CBC7B7", "tt": "Brown, Text 2, Lighter 60%" },
            { "i": "25", "clr": "F39E87", "tt": "Dark Red, Accent 1, Lighter 60%" },
            { "i": "26", "clr": "F4CB9F", "tt": "Orange, Accent 2, Lighter 60%" },
            { "i": "27", "clr": "DACDB7", "tt": "Brown, Accent 3, Lighter 60%" },
            { "i": "28", "clr": "C7D2B6", "tt": "Olive Green, Accent 4, Lighter 60%" },
            { "i": "29", "clr": "D4DEB6", "tt": "Olive Green, Accent 5, Lighter 60%" },
            { "i": "30", "clr": "C3DDD3", "tt": "Green, Accent 6, Lighter 60%" },
            { "i": "31", "clr": "BFBFBF", "tt": "White, Background 1, Darker 25%" },
            { "i": "32", "clr": "3F3F3F", "tt": "Black, Text 1, Lighter 25%" },
            { "i": "33", "clr": "839943", "tt": "Light Green, Background 2, Darker 50%" },
            { "i": "34", "clr": "B2AB93", "tt": "Brown, Text 2, Lighter 40%" },
            { "i": "35", "clr": "ED6D4B", "tt": "Dark Red, Accent 1, Lighter 40%" },
            { "i": "36", "clr": "EFB170", "tt": "Orange, Accent 2, Lighter 40%" },
            { "i": "37", "clr": "C8B593", "tt": "Brown, Accent 3, Lighter 40%" },
            { "i": "38", "clr": "ABBB92", "tt": "Olive Green, Accent 4, Lighter 40%" },
            { "i": "39", "clr": "BECE91", "tt": "Olive Green, Accent 5, Lighter 40%" },
            { "i": "40", "clr": "A5CDBD", "tt": "Green, Accent 6, Lighter 40%" },
            { "i": "41", "clr": "A5A5A5", "tt": "White, Background 1, Darker 35%" },
            { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
            { "i": "43", "clr": "414C21", "tt": "Light Green, Background 2, Darker 75%" },
            { "i": "44", "clr": "58533E", "tt": "Brown, Text 2, Darker 25%" },
            { "i": "45", "clr": "7B230B", "tt": "Dark Red, Accent 1, Darker 25%" },
            { "i": "46", "clr": "A65E11", "tt": "Orange, Accent 2, Darker 25%" },
            { "i": "47", "clr": "77623C", "tt": "Brown, Accent 3, Darker 25%" },
            { "i": "48", "clr": "55643E", "tt": "Olive Green, Accent 4, Darker 25%" },
            { "i": "49", "clr": "6D7F39", "tt": "Olive Green, Accent 5, Darker 25%" },
            { "i": "50", "clr": "4A856D", "tt": "Green, Accent 6, Darker 25%" },
            { "i": "51", "clr": "7F7F7F", "tt": "White, Background 1, Darker 50%" },
            { "i": "52", "clr": "0C0C0C", "tt": "Black, Text 1, Lighter 5%" },
            { "i": "53", "clr": "1A1E0D", "tt": "Light Green, Background 2, Darker 90%" },
            { "i": "54", "clr": "3B372A", "tt": "Brown, Text 2, Darker 50%" },
            { "i": "55", "clr": "521807", "tt": "Dark Red, Accent 1, Darker 50%" },
            { "i": "56", "clr": "6E3F0C", "tt": "Orange, Accent 2, Darker 50%" },
            { "i": "57", "clr": "4F4128", "tt": "Brown, Accent 3, Darker 50%" },
            { "i": "58", "clr": "384229", "tt": "Olive Green, Accent 4, Darker 50%" },
            { "i": "59", "clr": "495526", "tt": "Olive Green, Accent 5, Darker 50%" },
            { "i": "60", "clr": "315949", "tt": "Green, Accent 6, Darker 50%" },
            { "i": "61", "clr": "C00000", "tt": "Dark Red" },
            { "i": "62", "clr": "FF0000", "tt": "Red" },
            { "i": "63", "clr": "FFC000", "tt": "Orange" },
            { "i": "64", "clr": "FFFF00", "tt": "Yellow" },
            { "i": "65", "clr": "92D050", "tt": "Light Green" },
            { "i": "66", "clr": "00B050", "tt": "Green" },
            { "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
            { "i": "68", "clr": "0070C0", "tt": "Blue" },
            { "i": "69", "clr": "002060", "tt": "Dark Blue" },
            { "i": "70", "clr": "7030A0", "tt": "Purple" },
            { "i": "71", "clr": "NoFill", "tt": "NoFill" }
        ]
       },
	{
	 	"type": "ColorGrid",
	 	"colorGridType": "patternColor",
	 	"theme": "PPT_PARALLAXTHIRD",
	 	"colors": [
            { "i": "0", "clr": "Automatic", "tt": "No Color" },
            { "i": "1", "clr": "FFFFFF", "tt": "White, Background 1" },
            { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
            { "i": "3", "clr": "CDD0D1", "tt": "Gray-25%, Background 2" },
            { "i": "4", "clr": "212121", "tt": "Gray-80%, Text 2" },
            { "i": "5", "clr": "8BB434", "tt": "Lime, Accent 1" },
            { "i": "6", "clr": "33A583", "tt": "Green, Accent 2" },
            { "i": "7", "clr": "3594B4", "tt": "Aqua, Accent 3" },
            { "i": "8", "clr": "6063B4", "tt": "Purple, Accent 4" },
            { "i": "9", "clr": "D35731", "tt": "Red, Accent 5" },
            { "i": "10", "clr": "EBAC4B", "tt": "Orange, Accent 6" },
            { "i": "11", "clr": "F2F2F2", "tt": "White, Background 1, Darker 5%" },
            { "i": "12", "clr": "7F7F7F", "tt": "Black, Text 1, Lighter 50%" },
            { "i": "13", "clr": "B7BBBD", "tt": "Gray-25%, Background 2, Darker 10%" },
            { "i": "14", "clr": "E8E8E8", "tt": "Gray-80%, Text 2, Lighter 90%" },
            { "i": "15", "clr": "E8F2D3", "tt": "Lime, Accent 1, Lighter 80%" },
            { "i": "16", "clr": "D2F1E7", "tt": "Green, Accent 2, Lighter 80%" },
            { "i": "17", "clr": "D4EAF2", "tt": "Aqua, Accent 3, Lighter 80%" },
            { "i": "18", "clr": "DFDFF0", "tt": "Purple, Accent 4, Lighter 80%" },
            { "i": "19", "clr": "F6DDD5", "tt": "Red, Accent 5, Lighter 80%" },
            { "i": "20", "clr": "FAEEDB", "tt": "Orange, Accent 6, Lighter 80%" },
            { "i": "21", "clr": "D8D8D8", "tt": "White, Background 1, Darker 15%" },
            { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
            { "i": "23", "clr": "979D9F", "tt": "Gray-25%, Background 2, Darker 25%" },
            { "i": "24", "clr": "C7C7C7", "tt": "Gray-80%, Text 2, Lighter 75%" },
            { "i": "25", "clr": "D2E6A8", "tt": "Lime, Accent 1, Lighter 60%" },
            { "i": "26", "clr": "A5E3D0", "tt": "Green, Accent 2, Lighter 60%" },
            { "i": "27", "clr": "A9D6E5", "tt": "Aqua, Accent 3, Lighter 60%" },
            { "i": "28", "clr": "BFC0E1", "tt": "Purple, Accent 4, Lighter 60%" },
            { "i": "29", "clr": "EDBBAC", "tt": "Red, Accent 5, Lighter 60%" },
            { "i": "30", "clr": "F6DDB7", "tt": "Orange, Accent 6, Lighter 60%" },
            { "i": "31", "clr": "BFBFBF", "tt": "White, Background 1, Darker 25%" },
            { "i": "32", "clr": "3F3F3F", "tt": "Black, Text 1, Lighter 25%" },
            { "i": "33", "clr": "979D9F", "tt": "Gray-25%, Background 2, Darker 50%" },
            { "i": "34", "clr": "63696B", "tt": "Gray-80%, Text 2, Lighter 50%" },
            { "i": "35", "clr": "BCD97D", "tt": "Lime, Accent 1, Lighter 40%" },
            { "i": "36", "clr": "267B62", "tt": "Green, Accent 2, Lighter 40%" },
            { "i": "37", "clr": "7EC2D9", "tt": "Aqua, Accent 3, Lighter 40%" },
            { "i": "38", "clr": "9FA1D2", "tt": "Purple, Accent 4, Lighter 40%" },
            { "i": "39", "clr": "E49A83", "tt": "Red, Accent 5, Lighter 40%" },
            { "i": "40", "clr": "F2CD93", "tt": "Orange, Accent 6, Lighter 40%" },
            { "i": "41", "clr": "A5A5A5", "tt": "White, Background 1, Darker 35%" },
            { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
            { "i": "43", "clr": "979D9F", "tt": "Gray-25%, Background 2, Darker 75%" },
            { "i": "44", "clr": "585858", "tt": "Gray-80%, Text 2, Lighter 25%" },
            { "i": "45", "clr": "688726", "tt": "Lime, Accent 1, Darker 25%" },
            { "i": "46", "clr": "195241", "tt": "Green, Accent 2, Darker 25%" },
            { "i": "47", "clr": "276F87", "tt": "Aqua, Accent 3, Darker 25%" },
            { "i": "48", "clr": "42448C", "tt": "Purple, Accent 4, Darker 25%" },
            { "i": "49", "clr": "A03F22", "tt": "Red, Accent 5, Darker 25%" },
            { "i": "50", "clr": "D18817", "tt": "Orange, Accent 6, Darker 25%" },
            { "i": "51", "clr": "7F7F7F", "tt": "White, Background 1, Darker 50%" },
            { "i": "52", "clr": "0C0C0C", "tt": "Black, Text 1, Lighter 5%" },
            { "i": "53", "clr": "979D9F", "tt": "Gray-25%, Background 2, Darker 90%" },
            { "i": "54", "clr": "373737", "tt": "Gray-80%, Text 2, Lighter 10%" },
            { "i": "55", "clr": "455A19", "tt": "Lime, Accent 1, Darker 50%" },
            { "i": "56", "clr": "195241", "tt": "Green, Accent 2, Darker 50%" },
            { "i": "57", "clr": "1A4A5A", "tt": "Aqua, Accent 3, Darker 50%" },
            { "i": "58", "clr": "2C2D5D", "tt": "Purple, Accent 4, Darker 50%" },
            { "i": "59", "clr": "6B2A16", "tt": "Red, Accent 5, Darker 50%" },
            { "i": "60", "clr": "8B5A0F", "tt": "Orange, Accent 6, Darker 50%" },
            { "i": "61", "clr": "C00000", "tt": "Dark Red" },
            { "i": "62", "clr": "FF0000", "tt": "Red" },
            { "i": "63", "clr": "FFC000", "tt": "Orange" },
            { "i": "64", "clr": "FFFF00", "tt": "Yellow" },
            { "i": "65", "clr": "92D050", "tt": "Light Green" },
            { "i": "66", "clr": "00B050", "tt": "Green" },
            { "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
            { "i": "68", "clr": "0070C0", "tt": "Blue" },
            { "i": "69", "clr": "002060", "tt": "Dark Blue" },
            { "i": "70", "clr": "7030A0", "tt": "Purple" },
            { "i": "71", "clr": "NoFill", "tt": "NoFill" }
        ]
        },
     {
         "type": "ColorGrid",
         "colorGridType": "patternColor",
         "theme": "PPT_PARALLAX1", //Used Column 5 in SIMS Project(Update Column# Used)
         "colors": [
		    { "i": "0", "clr": "Automatic", "tt": "No Color" },
            { "i": "1", "clr": "FFFFFF", "tt": "White, Background 1" },
            { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
            { "i": "3", "clr": "E3EACF", "tt": "Light Green, Background 2" },
            { "i": "4", "clr": "766F54", "tt": "Brown, Text 2" },
            { "i": "5", "clr": "A53010", "tt": "Red, Accent 1" },
            { "i": "6", "clr": "DE7E18", "tt": "Orange, Accent 2" },
            { "i": "7", "clr": "9F8351", "tt": "Brown, Accent 3" },
            { "i": "8", "clr": "728653", "tt": "Olive Green, Accent 4" },
            { "i": "9", "clr": "92AA4C", "tt": "Olive Green, Accent 5" },
            { "i": "10", "clr": "6AAC91", "tt": "Green, Accent 6" },
            { "i": "11", "clr": "F2F2F2", "tt": "White, Background 1, Darker 5%" },
            { "i": "12", "clr": "7F7F7F", "tt": "Black, Text 1, Lighter 50%" },
            { "i": "13", "clr": "D1DCB0", "tt": "Light Green, Background 2, Darker 10%" },
            { "i": "14", "clr": "E5E3DB", "tt": "Brown, Text 2, Lighter 80%" },
            { "i": "15", "clr": "F9CEC3", "tt": "Red, Accent 1, Lighter 80%" },
            { "i": "16", "clr": "F9E5CF", "tt": "Orange, Accent 2, Lighter 80%" },
            { "i": "17", "clr": "ECE6DB", "tt": "Brown, Accent 3, Lighter 80%" },
            { "i": "18", "clr": "E3E8DA", "tt": "Olive Green, Accent 4, Lighter 80%" },
            { "i": "19", "clr": "E9EEDA", "tt": "Olive Green, Accent 5, Lighter 80%" },
            { "i": "20", "clr": "E1EEE9", "tt": "Green, Accent 6, Lighter 80%" },
            { "i": "21", "clr": "D8D8D8", "tt": "White, Background 1, Darker 15%" },
            { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
            { "i": "23", "clr": "B6C882", "tt": "Light Green, Background 2, Darker 25%" },
            { "i": "24", "clr": "CBC7B7", "tt": "Brown, Text 2, Lighter 60%" },
            { "i": "25", "clr": "F39E87", "tt": "Red, Accent 1, Lighter 60%" },
            { "i": "26", "clr": "F4CB9F", "tt": "Orange, Accent 2, Lighter 60%" },
            { "i": "27", "clr": "DACDB7", "tt": "Brown, Accent 3, Lighter 60%" },
            { "i": "28", "clr": "C7D2B6", "tt": "Olive Green, Accent 4, Lighter 60%" },
            { "i": "29", "clr": "D4DEB6", "tt": "Olive Green, Accent 5, Lighter 60%" },
            { "i": "30", "clr": "C3DDD3", "tt": "Green, Accent 6, Lighter 60%" },
            { "i": "31", "clr": "BFBFBF", "tt": "White, Background 1, Darker 25%" },
            { "i": "32", "clr": "3F3F3F", "tt": "Black, Text 1, Lighter 25%" },
            { "i": "33", "clr": "839943", "tt": "Light Green, Background 2, Darker 50%" },
            { "i": "34", "clr": "B2AB93", "tt": "Brown, Text 2, Lighter 40%" },
            { "i": "35", "clr": "ED6D4B", "tt": "Red, Accent 1, Lighter 40%" },
            { "i": "36", "clr": "EFB170", "tt": "Orange, Accent 2, Lighter 40%" },
            { "i": "37", "clr": "C8B593", "tt": "Brown, Accent 3, Lighter 40%" },
            { "i": "38", "clr": "ABBB92", "tt": "Olive Green, Accent 4, Lighter 40%" },
            { "i": "39", "clr": "BECE91", "tt": "Olive Green, Accent 5, Lighter 40%" },
            { "i": "40", "clr": "A5CDBD", "tt": "Green, Accent 6, Lighter 40%" },
            { "i": "41", "clr": "A5A5A5", "tt": "White, Background 1, Darker 35%" },
            { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
            { "i": "43", "clr": "414C21", "tt": "Light Green, Background 2, Darker 75%" },
            { "i": "44", "clr": "58533E", "tt": "Brown, Text 2, Darker 25%" },
            { "i": "45", "clr": "7B230B", "tt": "Red, Accent 1, Darker 25%" },
            { "i": "46", "clr": "A65E11", "tt": "Orange, Accent 2, Darker 25%" },
            { "i": "47", "clr": "77623C", "tt": "Brown, Accent 3, Darker 25%" },
            { "i": "48", "clr": "55643E", "tt": "Olive Green, Accent 4, Darker 25%" },
            { "i": "49", "clr": "6D7F39", "tt": "Olive Green, Accent 5, Darker 25%" },
            { "i": "50", "clr": "4A856D", "tt": "Green, Accent 6, Darker 25%" },
            { "i": "51", "clr": "7F7F7F", "tt": "White, Background 1, Darker 50%" },
            { "i": "52", "clr": "0C0C0C", "tt": "Black, Text 1, Lighter 5%" },
            { "i": "53", "clr": "1A1E0D", "tt": "Light Green, Background 2, Darker 90%" },
            { "i": "54", "clr": "3B372A", "tt": "Brown, Text 2, Darker 50%" },
            { "i": "55", "clr": "521807", "tt": "Red, Accent 1, Darker 50%" },
            { "i": "56", "clr": "6E3F0C", "tt": "Orange, Accent 2, Darker 50%" },
            { "i": "57", "clr": "4F4128", "tt": "Brown, Accent 3, Darker 50%" },
            { "i": "58", "clr": "384229", "tt": "Olive Green, Accent 4, Darker 50%" },
            { "i": "59", "clr": "495526", "tt": "Olive Green, Accent 5, Darker 50%" },
            { "i": "60", "clr": "315949", "tt": "Green, Accent 6, Darker 50%" },
            { "i": "61", "clr": "C00000", "tt": "Dark Red" },
            { "i": "62", "clr": "FF0000", "tt": "Red" },
            { "i": "63", "clr": "FFC000", "tt": "Orange" },
            { "i": "64", "clr": "FFFF00", "tt": "Yellow" },
            { "i": "65", "clr": "92D050", "tt": "Light Green" },
            { "i": "66", "clr": "00B050", "tt": "Green" },
            { "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
            { "i": "68", "clr": "0070C0", "tt": "Blue" },
            { "i": "69", "clr": "002060", "tt": "Dark Blue" },
            { "i": "70", "clr": "7030A0", "tt": "Purple" },
            { "i": "71", "clr": "NoFill", "tt": "NoFill" }
        ]
     },
     // my color theme /////////////////////////////////////////////////////////////////
      {
      "type": "ColorGrid",
      "colorGridType": "patternColor",
      "theme": "Dark2",
      "colors": [
            { "i": "0", "clr": "Automatic", "tt": "No Color" },
            
            { "i": "1", "clr": "000000", "tt": "Black, Text 1" },
            { "i": "2", "clr": "FFFFFF", "tt": "White, Background 1" },
            { "i": "3", "clr": "212121", "tt": "Gray-80%, Background 2" },
            { "i": "4", "clr": "E7E6E6", "tt": "Gray-25%, Background 2" },
            { "i": "5", "clr": "83992A", "tt": "Green, Accent 1" },
            { "i": "6", "clr": "3C9770", "tt": "Teal, Accent 2" },
            { "i": "7", "clr": "44709D", "tt": "Blue-Gray, Accent 3" },
            { "i": "8", "clr": "b73c26", "tt": "Red, Accent 4" },
            { "i": "9", "clr": "E87D37", "tt": "Orange, Accent 5" },
            { "i": "10", "clr": "FFC000", "tt": "Gold, Accent 6" },
         
            { "i": "11", "clr": "7F7F7F", "tt": "Black, Text 1, Lighter 50%" },
            { "i": "12", "clr": "F2F2F2", "tt": "White, Background 1, Darker 5%" },
            { "i": "13", "clr": "E8E8E8", "tt": "Gray-80%, Background 2, Lighter 90%" },
            { "i": "14", "clr": "D0CECE", "tt": "Gray-25%, Background 2, Darker 10%" },
            { "i": "15", "clr": "EAF1CD", "tt": "Green, Accent 1, Lighter 80%" },
            { "i": "16", "clr": "D4EDE2", "tt": "Teal, Accent 2, Lighter 80%" },
            { "i": "17", "clr": "D7E2ED", "tt": "Blue-Gray, Accent 3, Lighter 80%" },
            { "i": "18", "clr": "f5d4cf", "tt": "Red, Accent 4, Lighter 80%" },
            { "i": "19", "clr": "FAE5D7", "tt": "Orange, Accent 5, Lighter 80%" },
             { "i": "20", "clr": "FFF2CC", "tt": "Gold, Accent 6, Lighter 80%" },
          
           
            { "i": "21", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
            { "i": "22", "clr": "D8D8D8", "tt": "White, Background 1, Darker 15%" },
            { "i": "23", "clr": "C7C7C7", "tt": "Gray-80%, Background 2, Lighter 75%" },
            { "i": "24", "clr": "AEABAB", "tt": "Gray-25%, Background 2, Darker 25%" },
            { "i": "25", "clr": "D5E39C", "tt": "Green, Accent 1, Lighter 60%" },
            { "i": "26", "clr": "A9DCC6", "tt": "Teal, Accent 2, Lighter 60%" },
            { "i": "27", "clr": "AFC5DC", "tt": "Blue-Gray, Accent 3, Lighter 60%" },
            { "i": "28", "clr": "ebaa9f", "tt": "Red, Accent 4, Lighter 60%" },
            { "i": "29", "clr": "F5CBAF", "tt": "Orange, Accent 5, Lighter 60%" },
            { "i": "30", "clr": "FEE599", "tt": "Gold, Accent 6, Lighter 60%" },
           
            { "i": "31", "clr": "3F3F3F", "tt": "Black, Text 1, Lighter 25%" },
            { "i": "32", "clr": "BFBFBF", "tt": "White, Background 1, Darker 25%" },
            { "i": "33", "clr": "909090", "tt": "Gray-80%, Background 2, Lighter 50%" },
            { "i": "34", "clr": "757070", "tt": "Gray-25%, Background 2, Darker 50%" },
            { "i": "35", "clr": "C0D66A", "tt": "Green, Accent 1, Lighter 40%" },
            { "i": "36", "clr": "7ECBAA", "tt": "Teal, Accent 2, Lighter 40%" },
            { "i": "37", "clr": "87A9CB", "tt": "Blue-Gray, Accent 3, Lighter 40%" },
            { "i": "38", "clr": "e1806f", "tt": "Red, Accent 4, Lighter 40%" },
            { "i": "39", "clr": "F1B187", "tt": "Orange, Accent 5, Lighter 40%" },
            { "i": "40", "clr": "FFD965", "tt": "Gold, Accent 6, Lighter 40%" },
            
           
            { "i": "41", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
            { "i": "42", "clr": "A5A5A5", "tt": "White, Background 1, Darker 35%" },
            { "i": "43", "clr": "585858", "tt": "Gray-80%, Background 2,Lighter 25%" },
            { "i": "44", "clr": "3A3838", "tt": "Gray-25%, Background 2, Darker 75%" },
            { "i": "45", "clr": "62721F", "tt": "Green, Accent 1, Darker 25%" },
            { "i": "46", "clr": "2C7153", "tt": "Teal, Accent 2, Darker 25%" },
            { "i": "47", "clr": "335375", "tt": "Blue-Gray, Accent 3, Darker 25%" },
            { "i": "48", "clr": "892c1c", "tt": "Red, Accent 4, Darker 25%" } ,
            { "i": "49", "clr": "C15916", "tt": "Orange, Accent 5, Darker 25%" },
            { "i": "50", "clr": "BF9000", "tt": "Gold, Accent 6, Darker 25%" },
           
            
            { "i": "51", "clr": "0C0C0C", "tt": "Black, Text 1, Lighter 5%" },
            { "i": "52", "clr": "7F7F7F", "tt": "White, Background 1, Darker 50%" },
            { "i": "53", "clr": "373737", "tt": "Gray-80%, Background 2, Lighter 10%" },
           	{ "i": "54", "clr": "171616", "tt": "Gray-25%, Background 2, Darker 90%" },
            { "i": "55", "clr": "414C14", "tt": "Green, Accent 1, Darker 50%" },
            { "i": "56", "clr": "1D4B38", "tt": "Teal, Accent 2, Darker 50%" },
            { "i": "57", "clr": "22374E", "tt": "Blue-Gray, Accent 3, Darker 50%" },
            { "i": "58", "clr": "5b1d12", "tt": "Red, Accent 4, Darker 50%" },
            { "i": "59", "clr": "803B0E", "tt": "Orange, Accent 5, Darker 50%" },
            { "i": "60", "clr": "795E15", "tt": "Gold, Accent 6, Darker 50%" },

            { "i": "61", "clr": "C00000", "tt": "Dark Red" },
            { "i": "62", "clr": "FF0000", "tt": "Red" },
            { "i": "63", "clr": "FFC000", "tt": "Orange" },
            { "i": "64", "clr": "FFFF00", "tt": "Yellow" },
            { "i": "65", "clr": "92D050", "tt": "Light Green" },
            { "i": "66", "clr": "00B050", "tt": "Green" },
            { "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
            { "i": "68", "clr": "0070C0", "tt": "Blue" },
            { "i": "69", "clr": "002060", "tt": "Dark Blue" },
            { "i": "70", "clr": "7030A0", "tt": "Purple" },
            { "i": "71", "clr": "NoFill", "tt": "NoFill" }
        ]
  },

     ///////////////////////////////////////////////////////////////////////////////////////

	 {
	 	"type": "ColorGrid",
	 	"colorGridType": "patternColor",
	 	"theme": "YO_PPT13_01_01_COLOR_THEME", 
	 	"colors": [
		    { "i": "0", "clr": "Automatic", "tt": "No Color" },
            { "i": "1", "clr": "FFFFFF", "tt": "White, Background 1" },
            { "i": "2", "clr": "BE1E2B", "tt": "Red, Text 1" },
            { "i": "3", "clr": "E2B279", "tt": "Light Orange, Background 2" },
            { "i": "4", "clr": "F7941E", "tt": "Orange, Text 2" },
            { "i": "5", "clr": "32A41A", "tt": "Dark Green, Accent 1" },
            { "i": "6", "clr": "81D270", "tt": "Green, Accent 2" },
            { "i": "7", "clr": "C5791F", "tt": "Brown, Accent 3" },
            { "i": "8", "clr": "946936", "tt": "Tan, Accent 4" },
            { "i": "9", "clr": "8F343D", "tt": "Dark Red, Accent 5" },
            { "i": "10", "clr": "7C0A15", "tt": "Dark Red, Accent 6" },
            { "i": "11", "clr": "F2F2F2", "tt": "White, Background 1, Darker 5%" },
            { "i": "12", "clr": "F7CCD0", "tt": "Red, Text 1, Lighter 80%" },
            { "i": "13", "clr": "F9EFE4", "tt": "Light Orange, Background 2, Lighter 80%" },
            { "i": "14", "clr": "FDE9D2", "tt": "Orange, Text 2, Lighter 80%" },
            { "i": "15", "clr": "CFF6C7", "tt": "Dark Green, Accent 1, Lighter 80%" },
            { "i": "16", "clr": "E5F6E2", "tt": "Green, Accent 2, Lighter 80%" },
            { "i": "17", "clr": "F7E4CE", "tt": "Brown, Accent 3, Lighter 80%" },
            { "i": "18", "clr": "EEE1D1", "tt": "Tan, Accent 4, Lighter 80%" },
            { "i": "19", "clr": "EED0D3", "tt": "Dark Red, Accent 5, Lighter 80%" },
            { "i": "20", "clr": "F9B9BF", "tt": "Dark Red, Accent 6, Lighter 80%" },
            { "i": "21", "clr": "D8D8D8", "tt": "White, Background 1, Darker 15%" },
            { "i": "22", "clr": "EF9AA2", "tt": "Red, Text 1, Lighter 60%" },
            { "i": "23", "clr": "F3E0C9", "tt": "Light Orange, Background 2, Lighter 60%" },
            { "i": "24", "clr": "FBD4A4", "tt": "Orange, Text 2, Lighter 60%" },
            { "i": "25", "clr": "A0ED90", "tt": "Dark Green, Accent 1, Lighter 60%" },
            { "i": "26", "clr": "CCEDC5", "tt": "Green, Accent 2, Lighter 60%" },
            { "i": "27", "clr": "EFCA9D", "tt": "Brown, Accent 3, Lighter 60%" },
            { "i": "28", "clr": "DEC3A4", "tt": "Tan, Accent 4, Lighter 60%" },
            { "i": "29", "clr": "DDA2A8", "tt": "Dark Red, Accent 5, Lighter 60%" },
            { "i": "30", "clr": "F37380", "tt": "Dark Red, Accent 6, Lighter 60%" },
            { "i": "31", "clr": "BFBFBF", "tt": "White, Background 1, Darker 25%" },
            { "i": "32", "clr": "E76874", "tt": "Red, Text 1, Lighter 40%" },
            { "i": "33", "clr": "EDD0AC", "tt": "Light Orange, Background 2, Lighter 40%" },
            { "i": "34", "clr": "FABE77", "tt": "Orange, Text 2, Lighter 40%" },
            { "i": "35", "clr": "71E459", "tt": "Dark Green, Accent 1, Lighter 40%" },
            { "i": "36", "clr": "B3E3A9", "tt": "Green, Accent 2, Lighter 40%" },
            { "i": "37", "clr": "E7AF6C", "tt": "Brown, Accent 3, Lighter 40%" },
            { "i": "38", "clr": "CDA677", "tt": "Tan, Accent 4, Lighter 40%" },
            { "i": "39", "clr": "CC747D", "tt": "Dark Red, Accent 5, Lighter 40%" },
            { "i": "40", "clr": "EE2E40", "tt": "Dark Red, Accent 6, Lighter 40%" },
            { "i": "41", "clr": "A5A5A5", "tt": "White, Background 1, Darker 35%" },
            { "i": "42", "clr": "8E1621", "tt": "Red, Text 1, Darker 25%" },
            { "i": "43", "clr": "D28931", "tt": "Light Orange, Background 2, Darker 25%" },
            { "i": "44", "clr": "C87007", "tt": "Orange, Text 2, Darker 25%" },
            { "i": "45", "clr": "257A13", "tt": "Dark Green, Accent 1, Darker 25%" },
            { "i": "46", "clr": "4FB739", "tt": "Green, Accent 2, Darker 25%" },
            { "i": "47", "clr": "935A17", "tt": "Brown, Accent 3, Darker 25%" },
            { "i": "48", "clr": "6F4E28", "tt": "Tan, Accent 4, Darker 25%" },
            { "i": "49", "clr": "6B262D", "tt": "Dark Red, Accent 5, Darker 25%" },
            { "i": "50", "clr": "5C070F", "tt": "Dark Red, Accent 6, Darker 25%" },
            { "i": "51", "clr": "7F7F7F", "tt": "White, Background 1, Darker 50%" },
            { "i": "52", "clr": "5F0E16", "tt": "Red, Text 1, Darker 50%" },
            { "i": "53", "clr": "8E5B1E", "tt": "Light Orange, Background 2, Darker 50%" },
            { "i": "54", "clr": "854A04", "tt": "Orange, Text 2, Darker 50%" },
            { "i": "55", "clr": "19520C", "tt": "Dark Green, Accent 1, Darker 50%" },
            { "i": "56", "clr": "357A26", "tt": "Green, Accent 2, Darker 50%" },
            { "i": "57", "clr": "623C0F", "tt": "Brown, Accent 3, Darker 50%" },
            { "i": "58", "clr": "4A341A", "tt": "Tan, Accent 4, Darker 50%" },
            { "i": "59", "clr": "47191E", "tt": "Dark Red, Accent 5, Darker 50%" },
            { "i": "60", "clr": "3E050A", "tt": "Dark Red, Accent 6, Darker 50%" },
            { "i": "61", "clr": "C00000", "tt": "Dark Red" },
            { "i": "62", "clr": "FF0000", "tt": "Red" },
            { "i": "63", "clr": "FFC000", "tt": "Orange" },
            { "i": "64", "clr": "FFFF00", "tt": "Yellow" },
            { "i": "65", "clr": "92D050", "tt": "Light Green" },
            { "i": "66", "clr": "00B050", "tt": "Green" },
            { "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
            { "i": "68", "clr": "0070C0", "tt": "Blue" },
            { "i": "69", "clr": "002060", "tt": "Dark Blue" },
            { "i": "70", "clr": "7030A0", "tt": "Purple" },
            { "i": "71", "clr": "NoFill", "tt": "NoFill" }
        ]
    },
	 {
	     "type": "ColorGrid",
	     "colorGridType": "patternColor",
	     "theme": "Word_celestial",
	     "colors": [
		    { "i": "0", "clr": "Automatic", "tt": "No Color" },
            { "i": "1", "clr": "ffffff", "tt": "White, Background 1" },
            { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
            { "i": "3", "clr": "ebebeb", "tt": "Gray-25%, Background 2" },
            { "i": "4", "clr": "1d256b", "tt": "Dark Blue, Text 2" },
            { "i": "5", "clr": "a836be", "tt": "Purple, Acent 1" },
            { "i": "6", "clr": "507acf", "tt": "Blue, Acent 2" },
            { "i": "7", "clr": "54b399", "tt": "Teal, Acent 3" },
            { "i": "8", "clr": "92bb53", "tt": "Olive Green, Accent 4" },
            { "i": "9", "clr": "d89d39", "tt": "Gold, Accent 5" },
            { "i": "10", "clr": "db4e47", "tt": "Red, Accent 6" },
            { "i": "11", "clr": "f2f2f2", "tt": "White, Background 1, Darker 5%" },
            { "i": "12", "clr": "7f7f7f", "tt": "Black, Text 1, Lighter 50%" },
            { "i": "13", "clr": "d3d3d3", "tt": "Gray-25%, Background 2, Darker 10%" },
            { "i": "14", "clr": "c2c9f0", "tt": "Dark Blue, Text 2, Lighter 80%" },
            { "i": "15", "clr": "edd7f1", "tt": "Purple, Acent 1, Lighter 80%" },
            { "i": "16", "clr": "dbe4f4", "tt": "Blue, Accent 2, Lighter 80%" },
            { "i": "17", "clr": "dbf0ea", "tt": "Teal, Acent 3, Lighter 80%" },
            { "i": "18", "clr": "e8f1dc", "tt": "Olive Green, Accent 4, Lighter 80%" },
            { "i": "19", "clr": "f7ebd6", "tt": "Gold, Accent 5, Lighter 80%" },
            { "i": "20", "clr": "f7dcda", "tt": "Red, Accent 6, Lighter 80%" },
            { "i": "21", "clr": "d8d8d8", "tt": "White, Background 1, Darker 15%" },
            { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
            { "i": "23", "clr": "b0b0b0", "tt": "Gray-25%, Background 2, Darker 25%" },
            { "i": "24", "clr": "8693e1", "tt": "Dark Blue, Text 2, Lighter 60%" },
            { "i": "25", "clr": "dbb0e5", "tt": "Purple, Acent 1, Lighter 60%" },
            { "i": "26", "clr": "b7caeb", "tt": "Blue, Acent 2, Lighter 60%" },
            { "i": "27", "clr": "b7e2d6", "tt": "Teal, Acent 3, Lighter 60%" },
            { "i": "28", "clr": "d3e4b9", "tt": "Olive Green, Accent 4, Lighter 60%" },
            { "i": "29", "clr": "efd7ae", "tt": "Gold, Accent 5, Lighter 60%" },
            { "i": "30", "clr": "efb8b5", "tt": "Red, Accent 6, Lighter 60%" },
            { "i": "31", "clr": "bfbfbf", "tt": "White, Background 1, Darker 25%" },
            { "i": "32", "clr": "3f3f3f", "tt": "Black, Text 1, Lighter 25%" },
            { "i": "33", "clr": "757575", "tt": "Gray-25%, Background 2, Darker 50%" },
            { "i": "34", "clr": "4c5dd2", "tt": "Dark Blue, Text 2, Lighter 40%" },
            { "i": "35", "clr": "ca88d7", "tt": "Purple, Acent 1, Lighter 40%" },
            { "i": "36", "clr": "94afe2", "tt": "Blue, Acent 2, Lighter 40%" },
            { "i": "37", "clr": "94d3c3", "tt": "Teal, Acent 3, Lighter 40%" },
            { "i": "38", "clr": "bdd696", "tt": "Olive Green, Accent 4, Lighter 40%" },
            { "i": "36", "clr": "e7c486", "tt": "Gold, Accent 5, Lighter 40%" },
            { "i": "40", "clr": "e89590", "tt": "Red, Accent 6, Lighter 40%" },
            { "i": "41", "clr": "a5a5a5", "tt": "White, Background 1, Darker 35%" },
            { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
            { "i": "43", "clr": "3a3a3a", "tt": "Gray-25%, Background 2, Darker 75%" },
            { "i": "44", "clr": "151c50", "tt": "Dark Blue, Text 2, Darker 25%" },
            { "i": "45", "clr": "7e288e", "tt": "Purple, Acent 1, Darker 25%" },
            { "i": "46", "clr": "3358a6", "tt": "Blue, Acent 2, Darker 25%" },
            { "i": "47", "clr": "3e8673", "tt": "Teal, Acent 3, Darker 25%" },
            { "i": "48", "clr": "6e8e3c", "tt": "Olive Green, Accent 4, Darker 25%" },
            { "i": "49", "clr": "a97723", "tt": "Gold, Accent 5, Darker 25%" },
            { "i": "50", "clr": "ba211e", "tt": "Red, Accent 6, Darker 25%" },
            { "i": "51", "clr": "7f7f7f", "tt": "White, Background 1, Darker 50%" },
            { "i": "52", "clr": "0c0c0c", "tt": "Black, Text 1, Lighter 5%" },
            { "i": "53", "clr": "171717", "tt": "Gray-25%, Background 2, Darker 90%" },
            { "i": "54", "clr": "0d1235", "tt": "Dark Blue, Text 2, Darker 50%" },
            { "i": "55", "clr": "541a5f", "tt": "Purple, Acent 1, Darker 50%" },
            { "i": "56", "clr": "213a6f", "tt": "Blue, Acent 2, Darker 50%" },
            { "i": "57", "clr": "295a4c", "tt": "Teal, Acent 3, Darker 50%" },
            { "i": "58", "clr": "495f28", "tt": "Olive Green, Accent 4, Darker 50%" },
            { "i": "59", "clr": "704f17", "tt": "Gold, Accent 5, Darker 50%" },
            { "i": "60", "clr": "7c1614", "tt": "Red, Accent 6, Darker 50%" },
            { "i": "61", "clr": "C00000", "tt": "Dark Red" },
            { "i": "62", "clr": "FF0000", "tt": "Red" },
            { "i": "63", "clr": "FFC000", "tt": "Orange" },
            { "i": "64", "clr": "FFFF00", "tt": "Yellow" },
            { "i": "65", "clr": "92D050", "tt": "Light Green" },
            { "i": "66", "clr": "00B050", "tt": "Green" },
            { "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
            { "i": "68", "clr": "0070C0", "tt": "Blue" },
            { "i": "69", "clr": "002060", "tt": "Dark Blue" },
            { "i": "70", "clr": "7030A0", "tt": "Purple" },
            { "i": "71", "clr": "NoFill", "tt": "NoFill" }
        ]
	},
    {
        "type": "ColorGrid",
        "colorGridType": "patternColor",
        "theme": "OfficeAccess3",
        "colors": [
            { "i": "0", "clr": "Automatic", "tt": "No Color" },
            { "i": "1", "clr": "FFFFFF", "tt": "White, Background 1" },
            { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
            { "i": "3", "clr": "dadada", "tt": "Gray-25%, Background 2" },
            { "i": "4", "clr": "212121", "tt": "Gray-80%, Text 2" },
            { "i": "5", "clr": "83992a", "tt": "Green, Accent 1" },
            { "i": "6", "clr": "3c9770", "tt": "Teal, Accent 2" },
            { "i": "7", "clr": "44709d", "tt": "Blue-Gray, Accent 3" },
            { "i": "8", "clr": "a23c33", "tt": "Red, Accent 4" },
            { "i": "9", "clr": "d97828", "tt": "Orange, Accent 5" },
            { "i": "10", "clr": "deb340", "tt": "Gold, Accent 6" },
            { "i": "11", "clr": "F2F2F2", "tt": "White, Background 1, Darker 5%" },
            { "i": "12", "clr": "7F7F7F", "tt": "Black, Text 1, Lighter 50%" },
            { "i": "13", "clr": "c4c4c4", "tt": "Gray-25%, Background 2, Darker 10%" },
            { "i": "14", "clr": "e8e8e8", "tt": "Gray-80%, Text 2, Lighter 90%" },
            { "i": "15", "clr": "eaf1cd", "tt": "Green, Accent 1, Lighter 80%" },
            { "i": "16", "clr": "d4ede2", "tt": "Teal, Accent 2, Lighter 80%" },
            { "i": "17", "clr": "d7e2ed", "tt": "Blue-Gray, Accent 3, Lighter 80%" },
            { "i": "18", "clr": "f0d4d1", "tt": "Red, Accent 4, Lighter 80%" },
            { "i": "19", "clr": "f7e4d4", "tt": "Orange, Accent 5, Lighter 80%" },
            { "i": "20", "clr": "f8efd8", "tt": "Gold, Accent 6, Lighter 80%" },
            { "i": "21", "clr": "D8D8D8", "tt": "White, Background 1, Darker 15%" },
            { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
            { "i": "23", "clr": "a3a3a3", "tt": "Gray-25%, Background 2, Darker 25%" },
            { "i": "24", "clr": "c7c7c7", "tt": "Gray-80%, Text 2, Lighter 75%" },
            { "i": "25", "clr": "d5e39c", "tt": "Green, Accent 1, Lighter 60%" },
            { "i": "26", "clr": "a9dcc6", "tt": "Teal, Accent 2, Lighter 60%" },
            { "i": "27", "clr": "afc5dc", "tt": "Blue-Gray, Accent 3, Lighter 60%" },
            { "i": "28", "clr": "e2a9a4", "tt": "Red, Accent 4, Lighter 60%" },
            { "i": "29", "clr": "efc9a9", "tt": "Orange, Accent 5, Lighter 60%" },
            { "i": "30", "clr": "f1e0b2", "tt": "Gold, Accent 6, Lighter 60%" },
            { "i": "31", "clr": "BFBFBF", "tt": "White, Background 1, Darker 25%" },
            { "i": "32", "clr": "3F3F3F", "tt": "Black, Text 1, Lighter 25%" },
            { "i": "33", "clr": "6d6d6d", "tt": "Gray-25%, Background 2, Darker 50%" },
            { "i": "34", "clr": "909090", "tt": "Gray-80%, Text 2, Lighter 50%" },
            { "i": "35", "clr": "c0d66a", "tt": "Green, Accent 1, Lighter 40%" },
            { "i": "36", "clr": "7ecbaa", "tt": "Teal, Accent 2, Lighter 40%" },
            { "i": "37", "clr": "87a9cb", "tt": "Blue-Gray, Accent 3, Lighter 40%" },
            { "i": "38", "clr": "d47e77", "tt": "Red, Accent 4, Lighter 40%" },
            { "i": "39", "clr": "e8ae7d", "tt": "Orange, Accent 5, Lighter 40%" },
            { "i": "40", "clr": "ebd18c", "tt": "Gold, Accent 6, Lighter 40%" },
            { "i": "41", "clr": "A5A5A5", "tt": "White, Background 1, Darker 35%" },
            { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
            { "i": "43", "clr": "363636", "tt": "Gray-25%, Background 2, Darker 75%" },
            { "i": "44", "clr": "585858", "tt": "Gray-80%, Text 2, Lighter 25%" },
            { "i": "45", "clr": "62721f", "tt": "Green, Accent 1, Darker 25%" },
            { "i": "46", "clr": "2c7153", "tt": "Teal, Accent 2, Darker 25%" },
            { "i": "47", "clr": "335375", "tt": "Blue-Gray, Accent 3, Darker 25%" },
            { "i": "48", "clr": "792c26", "tt": "Red, Accent 4, Darker 25%" },
            { "i": "49", "clr": "a3591c", "tt": "Orange, Accent 5, Darker 25%" },
            { "i": "50", "clr": "b68d1f", "tt": "Gold, Accent 6, Darker 25%" },
            { "i": "51", "clr": "7F7F7F", "tt": "White, Background 1, Darker 50%" },
            { "i": "52", "clr": "0C0C0C", "tt": "Black, Text 1, Lighter 5%" },
            { "i": "53", "clr": "151515", "tt": "Gray-25%, Background 2, Darker 90%" },
            { "i": "54", "clr": "373737", "tt": "Gray-80%, Text 2, Lighter 10%" },
            { "i": "55", "clr": "414c14", "tt": "Green, Accent 1, Darker 50%" },
            { "i": "56", "clr": "1d4b38", "tt": "Teal, Accent 2, Darker 50%" },
            { "i": "57", "clr": "22374e", "tt": "Blue-Gray, Accent 3, Darker 50%" },
            { "i": "58", "clr": "511d19", "tt": "Red, Accent 4, Darker 50%" },
            { "i": "59", "clr": "6d3b13", "tt": "Orange, Accent 5, Darker 50%" },
            { "i": "60", "clr": "795e15", "tt": "Gold, Accent 6, Darker 50%" },
            { "i": "61", "clr": "FFFFFF", "tt": "White" },
            { "i": "62", "clr": "000000", "tt": "Black" },
            { "i": "63", "clr": "FAF3E8", "tt": "Medium Gray" },
            { "i": "64", "clr": "1F497D", "tt": "Dark Blue" },
            { "i": "65", "clr": "5C83B4", "tt": "Light Blue" },
            { "i": "66", "clr": "C0504D", "tt": "Maroon" },
            { "i": "67", "clr": "9DBB61", "tt": "Green" },
            { "i": "68", "clr": "8066A0", "tt": "Purple" },
            { "i": "69", "clr": "4BACC6", "tt": "Aqua Blue" },
            { "i": "70", "clr": "F59D56", "tt": "Brown" },
            { "i": "71", "clr": "ECECEC", "tt": "Light Gray 1" },
            { "i": "72", "clr": "929292", "tt": "Dark Gray 1" },
            { "i": "73", "clr": "CCC8C2", "tt": "Medium Gray 1" },
            { "i": "74", "clr": "DFE5ED", "tt": "Dark Blue 1" },
            { "i": "75", "clr": "EFF2F7", "tt": "Light Blue 1" },
            { "i": "76", "clr": "F9EDED", "tt": "Maroon 1" },
            { "i": "77", "clr": "F7F9F1", "tt": "Green 1" },
            { "i": "78", "clr": "F3F0F6", "tt": "Purple 1" },
            { "i": "79", "clr": "EEF8FA", "tt": "Aqua Blue 1" },
            { "i": "80", "clr": "FEFBF8", "tt": "Brown 1" },
            { "i": "81", "clr": "D8D8D8", "tt": "Light Gray 2" },
            { "i": "82", "clr": "7F7F7F", "tt": "Dark Gray 2" },
            { "i": "83", "clr": "BBB6AE", "tt": "Medium Gray 2" },
            { "i": "84", "clr": "C6D1DE", "tt": "Dark Blue 2" },
            { "i": "85", "clr": "D6DFEC", "tt": "Light Blue 2" },
            { "i": "86", "clr": "EFD3D2", "tt": "Maroon 2" },
            { "i": "87", "clr": "E6EDD7", "tt": "Green 2" },
            { "i": "88", "clr": "DFDBE7", "tt": "Purple 2" },
            { "i": "89", "clr": "D0EAF0", "tt": "Aqua Blue 2" },
            { "i": "90", "clr": "FCE6D4", "tt": "Brown 2" },
            { "i": "91", "clr": "BFBFBF", "tt": "Light Gray 3" },
            { "i": "92", "clr": "727272", "tt": "Dark Gray 3" },
            { "i": "93", "clr": "A29096", "tt": "Medium Gray 3" },
            { "i": "94", "clr": "8EA3BD", "tt": "Dark Blue 3" },
            { "i": "95", "clr": "ADC0D9", "tt": "Light Blue 3" },
            { "i": "96", "clr": "DFA7A5", "tt": "Maroon 3" },
            { "i": "97", "clr": "CDDCAF", "tt": "Green 3" },
            { "i": "98", "clr": "BFB2CF", "tt": "Purple 3" },
            { "i": "99", "clr": "A4D5E2", "tt": "Aqua Blue 3" },
            { "i": "100", "clr": "F9CDAA", "tt": "Brown 3" },
            { "i": "101", "clr": "A5A5A5", "tt": "Light Gray 4" },
            { "i": "102", "clr": "595959", "tt": "Dark Gray 4" },
            { "i": "103", "clr": "7D7974", "tt": "Medium Gray 4" },
            { "i": "104", "clr": "56769D", "tt": "Dark Blue 4" },
            { "i": "105", "clr": "84A1C6", "tt": "Light Blue 4" },
            { "i": "106", "clr": "CF7B79", "tt": "Maroon 4" },
            { "i": "107", "clr": "B5CB88", "tt": "Green 4" },
            { "i": "108", "clr": "9F8CB7", "tt": "Purple 4" },
            { "i": "109", "clr": "77C0D4", "tt": "Aqua Blue 4" },
            { "i": "110", "clr": "F7B580", "tt": "Brown 4" },
            { "i": "111", "clr": "8C8C8C", "tt": "Light Gray 5" },
            { "i": "112", "clr": "3F3F3F", "tt": "Dark Gray 5" },
            { "i": "113", "clr": "575551", "tt": "Medium Gray 5" },
            { "i": "114", "clr": "17365D", "tt": "Dark Blue 5" },
            { "i": "115", "clr": "456287", "tt": "Light Blue 5" },
            { "i": "116", "clr": "903C39", "tt": "Maroon 5" },
            { "i": "117", "clr": "758C48", "tt": "Green 5" },
            { "i": "118", "clr": "604C78", "tt": "Purple 5" },
            { "i": "119", "clr": "3B8194", "tt": "Aqua Blue 5" },
            { "i": "120", "clr": "7A4e28", "tt": "Brown 5" },
            { "i": "121", "clr": "C00000", "tt": "Dark Red" },
            { "i": "122", "clr": "FF0000", "tt": "Red" },
            { "i": "123", "clr": "FFC000", "tt": "Orange" },
            { "i": "124", "clr": "FFFF00", "tt": "Yellow" },
            { "i": "125", "clr": "92D050", "tt": "Light Green" },
            { "i": "126", "clr": "00B050", "tt": "Green" },
            { "i": "127", "clr": "00B0F0", "tt": "Light Blue" },
            { "i": "128", "clr": "0070C0", "tt": "Blue" },
            { "i": "129", "clr": "002060", "tt": "Dark Blue" },
            { "i": "130", "clr": "7030A0", "tt": "Purple" }


        ]
    },
    {
        "type": "ColorGrid",
        "colorGridType": "patternColor",
        "theme": "PPTOrganic",
        "colors": [
            { "i": "0", "clr": "Automatic", "tt": "No Color" },
            { "i": "1", "clr": "FFFFFF", "tt": "White, Background 1" },
            { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
            { "i": "3", "clr": "DADADA", "tt": "Gray-25%, Background 2" },
            { "i": "4", "clr": "212121", "tt": "Gray-80%, Text 2" },
            { "i": "5", "clr": "b15e28", "tt": "Brown, Accent 1" },
            { "i": "6", "clr": "b13228", "tt": "Red, Accent 2" },
            { "i": "7", "clr": "8b7b56", "tt": "Brown, Accent 3" },
            { "i": "8", "clr": "E09C41", "tt": "Orange, Accent 4" },
            { "i": "9", "clr": "9EAE51", "tt": "Olive Green, Accent 5" },
            { "i": "10", "clr": "6E7355", "tt":"Olive Green, Accent 6" },

            { "i": "11", "clr": "F2F2F2", "tt": "White, Background 1, Darker 5%" },
            { "i": "12", "clr": "7F7F7F", "tt": "Black, Text 1, Lighter 50%" },
            { "i": "13", "clr": "C4C4C4", "tt": "Gray-25%, Background 2, Darker 10%" },
            { "i": "14", "clr": "E8E8E8", "tt": "Gray-80%, Lighter 90%" },
            { "i": "15", "clr": "f4ddcf", "tt": "Brown, Accent 1, Lighter 80%" },          
            { "i": "16", "clr": "f4d1cf", "tt": "Red, Accent 2, Lighter 80%" },            
            { "i": "17", "clr": "e9e5db", "tt": "Brown, Accent 3, Lighter 80%" },          
            { "i": "18", "clr": "f8ebd9", "tt": "Orange, Accent 4, Lighter 80%" },         
            { "i": "19", "clr": "EBEEDC", "tt": "Olive Green, Accent 5, Lighter 80%" },    
            { "i": "20", "clr": "E3E4DB", "tt": "Olive Green, Accent 6, Lighter 80%" },    

            { "i": "21", "clr": "D8D8D8", "tt": "White, Background 1, Darker 15%" },
            { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
            { "i": "23", "clr": "A3A3A3", "tt": "Gray-25%, Background 2, Darker 25%" },
            { "i": "24", "clr": "C7C7C7", "tt": "Gray-80%, Lighter 75%" },
            { "i": "25", "clr": "E9BC9F", "tt": "Brown, Accent 1, Lighter 60%" },       
            { "i": "26", "clr": "E9A49F", "tt": "Red, Accent 2, Lighter 60%" },         
            { "i": "27", "clr": "D3CBB8", "tt": "Brown, Accent 3, Lighter 60%" },       
            { "i": "28", "clr": "F2D7B3", "tt": "Orange, Accent 4, Lighter 60%" },      
            { "i": "29", "clr": "D8DEB9", "tt": "Olive Green, Accent 5, Lighter 60%" }, 
            { "i": "30", "clr": "C7CAB7", "tt": "Olive Green, Accent 6, Lighter 60%" }, 

            { "i": "31", "clr": "bebebe", "tt": "White, Background 1, Darker 25%" },
            { "i": "32", "clr": "3F3F3F", "tt": "Black, Text 1, Lighter 25%" },
            { "i": "33", "clr": "6D6D6D", "tt": "Gray-25%, Background 2, Darker 50%" },
            { "i": "34", "clr": "909090", "tt": "Gray-80%, Lighter 50%" },
            { "i": "35", "clr": "DE9B6F", "tt": "Brown, Accent 1, Lighter 40%" },       
            { "i": "36", "clr": "DE776F", "tt": "Red, Accent 2, Lighter 40%" },         
            { "i": "37", "clr": "BDB195", "tt": "Brown, Accent 3, Lighter 40%" },       
            { "i": "38", "clr": "ECC38D", "tt": "Orange, Accent 4, Lighter 40%" },      
            { "i": "39", "clr": "C4CE96", "tt": "Olive Green, Accent 5, Lighter 40%" }, 
            { "i": "40", "clr": "ABAF94", "tt": "Olive Green, Accent 6, Lighter 40%" }, 

            { "i": "41", "clr": "A5A5A5", "tt": "White, Background 1, Darker 35%" },
            { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
            { "i": "43", "clr": "363636", "tt": "Gray-25%, Background 2, Darker 75%" },
            { "i": "44", "clr": "585858", "tt": "Gray-80%, Lighter 25%" },
            { "i": "45", "clr": "84461D", "tt": "Brown, Accent 1, Darker 25%" },       
            { "i": "46", "clr": "84251D", "tt": "Red, Accent 2, Darker 25%" },         
            { "i": "47", "clr": "685C40", "tt": "Brown, Accent 3, Darker 25%" },       
            { "i": "48", "clr": "BA771E", "tt": "Orange, Accent 4, Darker 25%" },      
            { "i": "49", "clr": "76823C", "tt": "Olive Green, Accent 5, Darker 25%" }, 
            { "i": "50", "clr": "52563F", "tt": "Olive Green, Accent 6, Darker 25%" }, 

            { "i": "51", "clr": "7F7F7F", "tt": "White, Background 1, Darker 50%" },
            { "i": "52", "clr": "0C0C0C", "tt": "Black, Text 1, Lighter 5%" },
            { "i": "53", "clr": "151515", "tt": "Gray-25%, Background 2, Darker 90%" },
            { "i": "54", "clr": "373737", "tt": "Gray-80%, Lighter 10%" },
            { "i": "55", "clr": "582F13", "tt": "Brown, Accent 1, Darker 50%" },       
            { "i": "56", "clr": "581813", "tt": "Red, Accent 2, Darker 50%" },         
            { "i": "57", "clr": "453D2B", "tt": "Brown, Accent 3, Darker 50%" },       
            { "i": "58", "clr": "7C4F14", "tt": "Orange, Accent 4, Darker 50%" },      
            { "i": "59", "clr": "4F5728", "tt": "Olive Green, Accent 5, Darker 50%" }, 
            { "i": "60", "clr": "37392A", "tt": "Olive Green, Accent 6, Darker 50%" }, 

            { "i": "61", "clr": "C00000", "tt": "Dark Red" },
            { "i": "62", "clr": "FF0000", "tt": "Red" },
            { "i": "63", "clr": "FFC000", "tt": "Orange" },
            { "i": "64", "clr": "FFFF00", "tt": "Yellow" },
            { "i": "65", "clr": "92D050", "tt": "Light Green" },
            { "i": "66", "clr": "00B050", "tt": "Green" },
            { "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
            { "i": "68", "clr": "0070C0", "tt": "Blue" },
            { "i": "69", "clr": "002060", "tt": "Dark Blue" },
            { "i": "70", "clr": "7030A0", "tt": "Purple" },
            { "i": "71", "clr": "NoFill", "tt": "NoFill" }
        ]
    },
    {
      "type": "ColorGrid",
      "colorGridType": "patternColor",
      "theme": "PPT_FONT_DIALOG",
      "colors": [
				    { "i": "0","clr": "Automatic","tt": "No Color" },
				    { "i": "1","clr": "FFFFFF","tt": "White, Background 1" },
				    { "i": "2","clr": "000000","tt": "Black, Text 1" },
				    { "i": "3","clr": "E7E6E6","tt": "Gray-25%, Background 2" },
				    { "i": "4","clr": "44546A","tt": "Blue-Gray, Text 2" },
				    { "i": "5","clr": "32A41A","tt": "Dark Green, Accent 1" },
				    { "i": "6","clr": "8BC145","tt": "Lime, Accent 2" },
				    { "i": "7","clr": "36AFCE","tt": "Turquoise, Accent 3" },
				    { "i": "8","clr": "1D6FA9","tt": "Dark Blue, Accent 4" },
				    { "i": "9","clr": "B74919","tt": "Brown, Accent 5" },
				    { "i": "10","clr": "F19D19","tt": "Orange, Accent 6" },
				    { "i": "11","clr": "F2F2F2","tt": "White, Background 1, Darker 5%" },
				    { "i": "12","clr": "7F7F7F","tt": "Black, Text 1, Lighter 50%" },
				    { "i": "13","clr": "D0CECE","tt": "Gray-25%, Background 2, Darker 10%" },
				    { "i": "14","clr": "D6DCE4","tt": "Blue-Gray, Text 2, Lighter 80%" },
				    { "i": "15","clr": "C7F4E8","tt": "Dark Green, Accent 1, Lighter 80%" },
				    { "i": "16","clr": "E7F2D9","tt": "Lime, Accent 2, Lighter 80%" },
				    { "i": "17","clr": "D6EFF5","tt": "Turquoise, Accent 3, Lighter 80%" },
				    { "i": "18","clr": "C9E3F5","tt": "Dark Blue, Accent 4, Lighter 80%" },
				    { "i": "19","clr": "F7D7C9","tt": "Brown, Accent 5, Lighter 80%" },
				    { "i": "20","clr": "FCEBD1","tt": "Orange, Accent 6, Lighter 80%" },
				    { "i": "21","clr": "D8D8D8","tt": "White, Background 1, Darker 15%" },
				    { "i": "22","clr": "595959","tt": "Black, Text 1, Lighter 35%" },
				    { "i": "23","clr": "AEABAB","tt": "Gray-25%, Background 2, Darker 25%" },
				    { "i": "24","clr": "ADB9CA","tt": "Blue-Gray, Text 2, Lighter 60%" },
				    { "i": "25","clr": "90EAD1","tt": "Dark Green, Accent 1, Lighter 60%" },
				    { "i": "26","clr": "D0E6B4","tt": "Lime, Accent 2, Lighter 60%" },
				    { "i": "27","clr": "AEDFEB","tt": "Turquoise, Accent 3, Lighter 60%" },
				    { "i": "28","clr": "94C8EC","tt": "Dark Blue, Accent 4, Lighter 60%" },
				    { "i": "29","clr": "F0B094","tt": "Brown, Accent 5, Lighter 60%" },
				    { "i": "30","clr": "F9D7A3","tt": "Orange, Accent 6, Lighter 60%" },
				    { "i": "31","clr": "BFBFBF","tt": "White, Background 1, Darker 25%" },
				    { "i": "32","clr": "3F3F3F","tt": "Black, Text 1, Lighter 25%" },
				    { "i": "33","clr": "757070","tt": "Gray-25%, Background 2, Darker 50%" },
				    { "i": "34","clr": "8496B0","tt": "Blue-Gray, Text 2, Lighter 40%" },
				    { "i": "35","clr": "59DFBB","tt": "Dark Green, Accent 1, Lighter 40%" },
				    { "i": "36","clr": "B9D98F","tt": "Lime, Accent 2, Lighter 40%" },
				    { "i": "37","clr": "86CFE1","tt": "Turquoise, Accent 3, Lighter 40%" },
				    { "i": "38","clr": "5FACE3","tt": "Dark Blue, Accent 4, Lighter 40%" },
				    { "i": "39","clr": "E9895F","tt": "Brown, Accent 5, Lighter 40%" },
				    { "i": "40","clr": "F6C474","tt": "Orange, Accent 6, Lighter 40%" },
				    { "i": "41","clr": "A5A5A5","tt": "White, Background 1, Darker 35%" },
				    { "i": "42","clr": "262626","tt": "Black, Text 1, Lighter 15%" },
				    { "i": "43","clr": "3A3838","tt": "Gray-25%, Background 2, Darker 75%" },
				    { "i": "44","clr": "323F4F","tt": "Blue-Gray, Text 2, Darker 25%" },
				    { "i": "45","clr": "15735A","tt": "Dark Green, Accent 1, Darker 25%" },
				    { "i": "46","clr": "689331","tt": "Lime, Accent 2, Darker 25%" },
				    { "i": "47","clr": "26849C","tt": "Turquoise, Accent 3, Darker 25%" },
				    { "i": "48","clr": "15537E","tt": "Dark Blue, Accent 4, Darker 25%" },
				    { "i": "49","clr": "893612","tt": "Brown, Accent 5, Darker 25%" },
				    { "i": "50","clr": "BC770B","tt": "Orange, Accent 6, Darker 25%" },
				    { "i": "51","clr": "7F7F7F","tt": "White, Background 1, Darker 50%" },
				    { "i": "52","clr": "0C0C0C","tt": "Black, Text 1, Lighter 5%" },
				    { "i": "53","clr": "171616","tt": "Gray-25%, Background 2, Darker 90%" },
				    { "i": "54","clr": "222A35","tt": "Blue-Gray, Text 2, Darker 50%" },
				    { "i": "55","clr": "0E4D3C","tt": "Dark Green, Accent 1, Darker 50%" },
				    { "i": "56","clr": "456220","tt": "Lime, Accent 2, Darker 50%" },
				    { "i": "57","clr": "195868","tt": "Turquoise, Accent 3, Darker 50%" },
				    { "i": "58","clr": "0E3754","tt": "Dark Blue, Accent 4, Darker 50%" },
				    { "i": "59","clr": "5B240C","tt": "Brown, Accent 5, Darker 50%" },
				    { "i": "60","clr": "7D4F07","tt": "Orange, Accent 6, Darker 50%" },
				    { "i": "61","clr": "C00000","tt": "Dark Red" },
				    { "i": "62","clr": "FF0000","tt": "Red" },
				    { "i": "63","clr": "FFC000","tt": "Orange" },
				    { "i": "64","clr": "FFFF00","tt": "Yellow" },
				    { "i": "65","clr": "92D050","tt": "Light Green" },
				    { "i": "66","clr": "00B050","tt": "Green" },
				    { "i": "67","clr": "00B0F0","tt": "Light Blue" },
				    { "i": "68","clr": "0070C0","tt": "Blue" },
				    { "i": "69","clr": "002060","tt": "Dark Blue" },
				    { "i": "70","clr": "7030A0","tt": "Purple" },
				    { "i": "71","clr": "NoFill","tt": "NoFill" }
				]
		},
	    {
        "type": "ColorGrid",
        "colorGridType": "patternColor",
        "theme": "facet",
        "colors": [
				{ "i": "0", "clr": "Automatic", "tt": "No Color" },
				{ "i": "1", "clr": "FFFFFF", "tt": "White, Background 1" },
				{ "i": "2", "clr": "000000", "tt": "Black, Text 1" },
				{ "i": "3", "clr": "DADADA", "tt": "Gray-25%, Background 2" },
				{ "i": "4", "clr": "44546A", "tt": "Blue-Gray, Text 2" },
				{ "i": "5", "clr": "549E39", "tt": "Green, Accent 1" },
				{ "i": "6", "clr": "54A021", "tt": "Dark Green, Accent 2" },
				{ "i": "7", "clr": "E6B91E", "tt": "Gold, Accent 3" },
				{ "i": "8", "clr": "E09C41", "tt": "Orange, Accent 4" },
				{ "i": "9", "clr": "D35731", "tt": "Red, Accent 5" },
				{ "i": "10", "clr": "855d5d", "tt": "Brown, Accent 6" },

				{ "i": "11", "clr": "F2F2F2", "tt": "White, Background 1, Darker 5%" },
				{ "i": "12", "clr": "7F7F7F", "tt": "Black, Text 1, Lighter 50%" },
				{ "i": "13", "clr": "C4C4C4", "tt": "Gray-25%, Background 2, Darker 10%" },
				{ "i": "14", "clr": "D6DCE4", "tt": "Blue-Gray, Text 2, Lighter 80%" },
				{ "i": "15", "clr": "DBEFD3", "tt": "Green, Accent 1, Lighter 80%" },
				{ "i": "16", "clr": "DAF4CA", "tt": "Dark Green, Accent 2, Lighter 80%" },
				{ "i": "17", "clr": "FAF0D2", "tt": "Gold, Accent 3, Lighter 80%" },
				{ "i": "18", "clr": "f8ebd9", "tt": "Orange, Accent 4, Lighter 80%" }, 
				{ "i": "19", "clr": "F6DDD5", "tt": "Red, Accent 5, Lighter 80%" },    
				{ "i": "20", "clr": "e7dddd", "tt": "Brown, Accent 6, Lighter 80%" },

				{ "i": "21", "clr": "D8D8D8", "tt": "White, Background 1, Darker 15%" },
				{ "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
				{ "i": "23", "clr": "A3A3A3", "tt": "Gray-25%, Background 2, Darker 25%" },
				{ "i": "24", "clr": "ADB9CA", "tt": "Blue-Gray, Text 2, Lighter 60%" },
				{ "i": "25", "clr": "B7DFA8", "tt": "Green, Accent 1, Lighter 60%" },
				{ "i": "26", "clr": "B7E995", "tt": "Dark Green, Accent 2, Lighter 60%" },
				{ "i": "27", "clr": "F5E2A5", "tt": "Gold, Accent 3, Lighter 60%" },
				{ "i": "28", "clr": "F2D7B3", "tt": "Orange, Accent 4, Lighter 60%" },
				{ "i": "29", "clr": "EDBBAC", "tt": "Red, Accent 5, Lighter 60%" },
				{ "i": "30", "clr": "d0bcbc", "tt": "Brown, Accent 6, Lighter 60%" },

				{ "i": "31", "clr": "bebebe", "tt": "White, Background 1, Darker 25%" },
				{ "i": "32", "clr": "3F3F3F", "tt": "Black, Text 1, Lighter 25%" },
				{ "i": "33", "clr": "6D6D6D", "tt": "Gray-25%, Background 2, Darker 50%" },
				{ "i": "34", "clr": "8496B0", "tt": "Blue-Gray, Text 2, Lighter 40%" },
				{ "i": "35", "clr": "93D07C", "tt": "Green, Accent 1, Lighter 40%" },
				{ "i": "36", "clr": "93DE61", "tt": "Dark Green, Accent 2, Lighter 40%" },
				{ "i": "37", "clr": "F0D478", "tt": "Gold, Accent 3, Lighter 40%" },
				{ "i": "38", "clr": "ECC38D", "tt": "Orange, Accent 4, Lighter 40%" },
				{ "i": "39", "clr": "E49A83", "tt": "Red, Accent 5, Lighter 40%" },
				{ "i": "40", "clr": "b89a9a", "tt": "Brown, Accent 6, Lighter 40%" },

				{ "i": "41", "clr": "A5A5A5", "tt": "White, Background 1, Darker 35%" },
				{ "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
				{ "i": "43", "clr": "363636", "tt": "Gray-25%, Background 2, Darker 75%" },
				{ "i": "44", "clr": "323F4F", "tt": "Blue-Gray, Text 2, Darker 25%" },
				{ "i": "45", "clr": "3F762A", "tt": "Green, Accent 1, Darker 25%" },
				{ "i": "46", "clr": "3E7718", "tt": "Dark Green, Accent 2, Darker 25%" },
				{ "i": "47", "clr": "AF8B13", "tt": "Gold, Accent 3, Darker 25%" },
				{ "i": "48", "clr": "BA771E", "tt": "Orange, Accent 4, Darker 25%" },
				{ "i": "49", "clr": "A03F22", "tt": "Red, Accent 5, Darker 25%" },
				{ "i": "50", "clr": "634545", "tt": "Brown, Accent 6, Darker 25%" },

				{ "i": "51", "clr": "7F7F7F", "tt": "White, Background 1, Darker 50%" },
				{ "i": "52", "clr": "0C0C0C", "tt": "Black, Text 1, Lighter 5%" },
				{ "i": "53", "clr": "151515", "tt": "Gray-25%, Background 2, Darker 90%" },
				{ "i": "54", "clr": "222A35", "tt": "Blue-Gray, Text 2, Darker 50%" },
				{ "i": "55", "clr": "2A4F1C", "tt": "Green, Accent 1, Darker 50%" },
				{ "i": "56", "clr": "2A5010", "tt": "Dark Green, Accent 2, Darker 50%" },
				{ "i": "57", "clr": "755D0D", "tt": "Gold, Accent 3, Darker 50%" },
				{ "i": "58", "clr": "7C4F14", "tt": "Orange, Accent 4, Darker 50%" },
				{ "i": "59", "clr": "6B2A16", "tt": "Red, Accent 5, Darker 50%" },
				{ "i": "60", "clr": "422e2e", "tt": "Brown, Accent 6, Darker 50%" },

				{ "i": "61", "clr": "C00000", "tt": "Dark Red" },
				{ "i": "62", "clr": "FF0000", "tt": "Red" },
				{ "i": "63", "clr": "FFC000", "tt": "Orange" },
				{ "i": "64", "clr": "FFFF00", "tt": "Yellow" },
				{ "i": "65", "clr": "92D050", "tt": "Light Green" },
				{ "i": "66", "clr": "00B050", "tt": "Green" },
				{ "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
				{ "i": "68", "clr": "0070C0", "tt": "Blue" },
				{ "i": "69", "clr": "002060", "tt": "Dark Blue" },
				{ "i": "70", "clr": "7030A0", "tt": "Purple" }
        ]
    },
    {
        "type": "ColorGrid",
        "colorGridType": "patternColor",
        "theme": "Adjacency",
        "colors": [
				{ "i": "0", "clr": "Automatic", "tt": "No Color" },
				{ "i": "1", "clr": "ffffff", "tt": "White, Background 1" },
				{ "i": "2", "clr": "000000", "tt": "Black, Text 1" },
				{ "i": "3", "clr": "c8c8b1", "tt": "Tan, Background 2" },
				{ "i": "4", "clr": "d1282e", "tt": "Red, Text 2" },
				{ "i": "5", "clr": "7a7a7a", "tt": "Gray-50%, Accent 1" },
				{ "i": "6", "clr": "f5c201", "tt": "Gold, Accent 2" },
				{ "i": "7", "clr": "526db0", "tt": "Blue-Gray, Accent 3" },
				{ "i": "8", "clr": "989aac", "tt": "Blue-Gray, Accent 4" },
				{ "i": "9", "clr": "dc5924", "tt": "Orange, Accent 5" },
				{ "i": "10", "clr": "b4b392", "tt": "Tan, Accent 6" },

				{ "i": "11", "clr": "f2f2f2", "tt": "White, Background 1, Darker 5%" },
				{ "i": "12", "clr": "7f7f7f", "tt": "Black, Text 1, Lighter 50%" },
				{ "i": "13", "clr": "f4f4ef", "tt": "Tan, Background 2, Lighter 80%" },
				{ "i": "14", "clr": "f6d3d4", "tt": "Red, Text 2, Lighter 80%" },
				{ "i": "15", "clr": "e4e4e4", "tt": "Gray-50%, Accent 1, Lighter 80%" },
				{ "i": "16", "clr": "fef3ca", "tt": "Gold, Accent 2, Lighter 80%" },
				{ "i": "17", "clr": "dce1ef", "tt": "Blue-Gray, Accent 3, Lighter 80%" },
				{ "i": "18", "clr": "eaeaee", "tt": "Blue-Gray, Accent 4, Lighter 80%" }, 
				{ "i": "19", "clr": "f7ddd3", "tt": "Orange, Accent 5, Lighter 80%" },    
				{ "i": "20", "clr": "efefe9", "tt": "Tan, Accent 6, Lighter 80%" },

				{ "i": "21", "clr": "d8d8d8", "tt": "White, Background 1, Darker 15%" },
				{ "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
				{ "i": "23", "clr": "e9e9df", "tt": "Tan, Background 2, Lighter 60%" },
				{ "i": "24", "clr": "eea7a9", "tt": "Red, Text 2, Lighter 60%" },
				{ "i": "25", "clr": "c9c9c9", "tt": "Gray-50%, Accent 1, Lighter 60%" },
				{ "i": "26", "clr": "fee895", "tt": "Gold, Accent 2, Lighter 60%" },
				{ "i": "27", "clr": "b9c4df", "tt": "Blue-Gray, Accent 3, Lighter 60%" },
				{ "i": "28", "clr": "d5d6dd", "tt": "Blue-Gray, Accent 4, Lighter 60%" },
				{ "i": "29", "clr": "f1bca7", "tt": "Orange, Accent 5, Lighter 60%" },
				{ "i": "30", "clr": "e1e0d3", "tt": "Tan, Accent 6, Lighter 60%" },

				{ "i": "31", "clr": "bfbfbf", "tt": "White, Background 1, Darker 25%" },
				{ "i": "32", "clr": "3f3f3f", "tt": "Black, Text 1, Lighter 25%" },
				{ "i": "33", "clr": "deded0", "tt": "Tan, Background 2, Lighter 40%" },
				{ "i": "34", "clr": "e57b7f", "tt": "Red, Text 2, Lighter 40%" },
				{ "i": "35", "clr": "afafaf", "tt": "Gray-50%, Accent 1, Lighter 40%" },
				{ "i": "36", "clr": "fedd61", "tt": "Gold, Accent 2, Lighter 40%" },
				{ "i": "37", "clr": "97a7cf", "tt": "Blue-Gray, Accent 3, Lighter 40%" },
				{ "i": "38", "clr": "c1c2cd", "tt": "Blue-Gray, Accent 4, Lighter 40%" },
				{ "i": "39", "clr": "ea9b7b", "tt": "Orange, Accent 5, Lighter 40%" },
				{ "i": "40", "clr": "d2d1bd", "tt": "Tan, Accent 6, Lighter 40%" },

				{ "i": "41", "clr": "a5a5a5", "tt": "White, Background 1, Darker 35%" },
				{ "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
				{ "i": "43", "clr": "a1a179", "tt": "Tan, Background 2, Darker 25%" },
				{ "i": "44", "clr": "9c1d22", "tt": "Red, Text 2, Darker 25%" },
				{ "i": "45", "clr": "5b5b5b", "tt": "Gray-50%, Accent 1, Darker 25%" },
				{ "i": "46", "clr": "b79100", "tt": "Gold, Accent 2, Darker 25%" },
				{ "i": "47", "clr": "3c5184", "tt": "Blue-Gray, Accent 3, Darker 25%" },
				{ "i": "48", "clr": "6c6f86", "tt": "Blue-Gray, Accent 4, Darker 25%" },
				{ "i": "49", "clr": "a5421a", "tt": "Orange, Accent 5, Darker 25%" },
				{ "i": "50", "clr": "908f63", "tt": "Tan, Accent 6, Darker 25%" },

				{ "i": "51", "clr": "7f7f7f", "tt": "White, Background 1, Darker 50%" },
				{ "i": "52", "clr": "0c0c0c", "tt": "Black, Text 1, Lighter 5%" },
				{ "i": "53", "clr": "6e6e4d", "tt": "Tan, Background 2, Darker 50%" },
				{ "i": "54", "clr": "681317", "tt": "Red, Text 2, Darker 50%" },
				{ "i": "55", "clr": "3d3d3d", "tt": "Gray-50%, Accent 1, Darker 50%" },
				{ "i": "56", "clr": "7a6100", "tt": "Gold, Accent 2, Darker 50%" },
				{ "i": "57", "clr": "283658", "tt": "Blue-Gray, Accent 3, Darker 50%" },
				{ "i": "58", "clr": "484a59", "tt": "Blue-Gray, Accent 4, Darker 50%" },
				{ "i": "59", "clr": "6e2c11", "tt": "Orange, Accent 5, Darker 50%" },
				{ "i": "60", "clr": "605f42", "tt": "Tan, Accent 6, Darker 50%" },

				{ "i": "61", "clr": "c00000", "tt": "Dark Red" },
				{ "i": "62", "clr": "ff0000", "tt": "Red" },
				{ "i": "63", "clr": "ffc000", "tt": "Orange" },
				{ "i": "64", "clr": "ffff00", "tt": "Yellow" },
				{ "i": "65", "clr": "92d050", "tt": "Light Green" },
				{ "i": "66", "clr": "00b050", "tt": "Green" },
				{ "i": "67", "clr": "00b0f0", "tt": "Light Blue" },
				{ "i": "68", "clr": "0070c0", "tt": "Blue" },
				{ "i": "69", "clr": "002060", "tt": "Dark Blue" },
				{ "i": "70", "clr": "7030a0", "tt": "Purple" },
				{ "i": "71", "clr": "NoFill", "tt": "NoFill" }
        ]
    },
    {
        "type": "ColorGrid",
        "colorGridType": "patternColor",
        "theme": "Violet3",
        "colors": [
            { "i": "0", "clr": "Automatic", "tt": "No Color" },
            { "i": "1", "clr": "000000", "tt": "Black, Background 1" },
            { "i": "2", "clr": "FFFFFF", "tt": "White, Text 1" },
            { "i": "3", "clr": "373545", "tt": "Indigo, Background 2" },
            { "i": "4", "clr": "DCD8DC", "tt": "Gray-25%, Text 2" },
            { "i": "5", "clr": "AD84C6", "tt": "Lavender, Accent 1" },
            { "i": "6", "clr": "8784C7", "tt": "Lavender, Accent 2" },
            { "i": "7", "clr": "44709D", "tt": "Blue-Gray, Accent 3" },
            { "i": "8", "clr": "6997AF", "tt": "Aqua, Accent 4" },
            { "i": "9", "clr": "84ACB6", "tt": "Blue-Gray, Accent 5" },
   			{ "i": "10", "clr": "6F8183", "tt": "Teal, Accent 6" },

            { "i": "11", "clr": "7F7F7F", "tt": "Black, Background 1, Lighter 50%" },
            { "i": "12", "clr": "F2F2F2", "tt": "White, Text 1, Darker 5%" },
            { "i": "13", "clr": "D4D3DD", "tt": "Indigo, Background 2, Lighter 80%" },
            { "i": "14", "clr": "C7C1C7", "tt": "Gray-25%, Text 2, Darker 10%" },
            { "i": "15", "clr": "EEE6F3", "tt": "Lavender, Accent 1, Lighter 80%" },
            { "i": "16", "clr": "E7E6F3", "tt": "Lavender, Accent 2, Lighter 80%" },
            { "i": "17", "clr": "D7E2ED", "tt": "Blue-Gray, Accent 3, Lighter 80%" },
            { "i": "18", "clr": "E0EAEF", "tt": "Aqua, Accent 4, Lighter 80%" },
            { "i": "19", "clr": "E6EEF0", "tt": "Blue-Gray, Accent 5, Lighter 80%" },
   			{ "i": "20", "clr": "E1E5E6", "tt": "Teal, Accent 6, Lighter 80%" },

            { "i": "21", "clr": "595959", "tt": "Black, Background 1, Lighter 35%" },
            { "i": "22", "clr": "D8D8D8", "tt": "White, Text 1, Darker 15%" },
            { "i": "23", "clr": "A9A7BB", "tt": "Indigo, Background 2, Lighter 60%" },
            { "i": "24", "clr": "A89EA8", "tt": "Gray-25%, Text 2, Lighter 60%" },
            { "i": "25", "clr": "DECDE8", "tt": "Lavender, Accent 1, Lighter 65%" },
            { "i": "26", "clr": "CFCDE8", "tt": "Lavender, Accent 2, Lighter 60%" },
            { "i": "27", "clr": "AFC5DC", "tt": "Blue-Gray, Accent 3, Lighter 60%" },
            { "i": "28", "clr": "C3D5DF", "tt": "Aqua, Accent 4, Lighter 60%" },
            { "i": "29", "clr": "CDDDE1", "tt": "Blue-Gray, Accent 5, Lighter 60%" },
		    { "i": "30", "clr": "C4CCCD", "tt": "Teal, Accent 6, Lighter 60%" },

            { "i": "31", "clr": "3F3F3F", "tt": "Black, Background 1, Lighter 25%" },
            { "i": "32", "clr": "BFBFBF", "tt": "White, Text 1, Darker 25%" },
            { "i": "33", "clr": "7F7B99", "tt": "Indigo, Background 2, Lighter 40%" },
            { "i": "34", "clr": "726772", "tt": "Gray-25%, Text 2, Darker 50%" },
            { "i": "35", "clr": "CDB5DC", "tt": "Lavender, Accent 1, Lighter 40%" },
            { "i": "36", "clr": "B7B5DD", "tt": "Lavender, Accent 2, Lighter 40%" },
            { "i": "37", "clr": "87A9CB", "tt": "Blue-Gray, Accent 3, Lighter 40%" },
            { "i": "38", "clr": "A5C0CE", "tt": "Aqua, Accent 4, Lighter 40%" },
            { "i": "39", "clr": "B5CDD3", "tt": "Blue-Gray, Accent 5, Lighter 40%" },
     	    { "i": "40", "clr": "A7B3B5", "tt": "Teal, Accent 6, Lighter 40%" },

            { "i": "41", "clr": "262626", "tt": "Black, Background 1, Lighter 15%" },
            { "i": "42", "clr": "A5A5A5", "tt": "White, Text 1, Darker 35%" },
            { "i": "43", "clr": "292733", "tt": "Indigo, Background 2, Darker 25%" },
            { "i": "44", "clr": "393339", "tt": "Gray-25%, Text 2, Darker 75%" },
            { "i": "45", "clr": "864EA9", "tt": "Lavender, Accent 1, Darker 25%" },
            { "i": "46", "clr": "514DAA", "tt": "Lavender, Accent 2, Darker 25%" },
            { "i": "47", "clr": "335375", "tt": "Blue-Gray, Accent 3, Darker 25%" },
            { "i": "48", "clr": "497388", "tt": "Aqua, Accent 4, Darker 25%" },
            { "i": "49", "clr": "578793", "tt": "Blue-Gray, Accent 5, Darker 25%" },
   		    { "i": "50", "clr": "536062", "tt": "Teal, Accent 6, Darker 25%" },

            { "i": "51", "clr": "0C0C0C", "tt": "Black, Background 1, Lighter 5%" },
            { "i": "52", "clr": "7F7F7F", "tt": "White, Text 1, Darker 50%" },
            { "i": "53", "clr": "1B1A22", "tt": "Indigo, Background 2, Darker 50%" },
            { "i": "54", "clr": "161416", "tt": "Gray-25%, Text 2, Darker 90%" },
            { "i": "55", "clr": "593470", "tt": "Lavender, Accent 1, Darker 50%" },
            { "i": "56", "clr": "363371", "tt": "Lavender, Accent 2, Darker 50%" },
            { "i": "57", "clr": "22374E", "tt": "Blue-Gray, Accent 3, Darker 50%" },
            { "i": "58", "clr": "304C5B", "tt": "Aqua, Accent 4, Darker 50%" },
            { "i": "59", "clr": "3A5A62", "tt": "Blue-Gray, Accent 5, Darker 50%" },
    		{ "i": "60", "clr": "374041", "tt": "Teal, Accent 6, Darker 50%" },

            { "i": "61", "clr": "C00000", "tt": "Dark Red" },
            { "i": "62", "clr": "FF0000", "tt": "Red" },
            { "i": "63", "clr": "FFC000", "tt": "Orange" },
            { "i": "64", "clr": "FFFF00", "tt": "Yellow" },
            { "i": "65", "clr": "92D050", "tt": "Light Green" },
            { "i": "66", "clr": "00B050", "tt": "Green" },
            { "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
            { "i": "68", "clr": "0070C0", "tt": "Blue" },
            { "i": "69", "clr": "002060", "tt": "Dark Blue" },
            { "i": "70", "clr": "7030A0", "tt": "Purple" },
            { "i": "71", "clr": "NoFill", "tt": "NoFill" }
    	]
    },
        {
      "type": "ColorGrid",
      "colorGridType": "patternColor",
      "theme": "SpringSeason",
      "colors": [
            { "i": "0", "clr": "Automatic", "tt": "No Color" },
            
            { "i": "1", "clr": "FFFFFF", "tt": "White, Background 1" },
            { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
            { "i": "3", "clr": "B0BCBC", "tt": "Aqua, Background 2" },
            { "i": "4", "clr": "6B7F7F", "tt": "Teal, Text 2" },
            { "i": "5", "clr": "7DB41B", "tt": "Green, Accent 1" },
            { "i": "6", "clr": "ED8A05", "tt": "Orange, Accent 2" },
            { "i": "7", "clr": "288DFC", "tt": "Blue, Accent 3" },
            { "i": "8", "clr": "36D2B8", "tt": "Bright Green, Accent 4" },
            { "i": "9", "clr": "F5B605", "tt": "Gold, Accent 5" },
            { "i": "10", "clr": "E75524", "tt": "Red, Accent 6" },
         
            { "i": "11", "clr": "F2F2F2", "tt": "White, Background 1, Darker 5%" },
            { "i": "12", "clr": "7F7F7F", "tt": "Black, Text 1, Lighter 50%" },
            { "i": "13", "clr": "EFF1F1", "tt": "Aqua, Background 2, Lighter 80%" },
            { "i": "14", "clr": "E1E5E5", "tt": "Teal, Text 2, Lighter 80%" },
            { "i": "15", "clr": "E6F7CA", "tt": "Green, Accent 1, Lighter 80%" },
            { "i": "16", "clr": "FDE7CA", "tt": "Orange, Accent 2, Lighter 80%" },
            { "i": "17", "clr": "D4E8FE", "tt": "Blue, Accent 3, Lighter 80%" },
            { "i": "18", "clr": "D6F6F0", "tt": "Bright Green, Accent 4, Lighter 80%" },
            { "i": "19", "clr": "FDF0CC", "tt": "Gold, Accent 5, Lighter 80%" },
             { "i": "20", "clr": "FADDD3", "tt": "Red, Accent 6, Lighter 80%" },
          
           
            { "i": "21", "clr": "D8D8D8", "tt": "White, Background 1, Darker 15%" },
            { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
            { "i": "23", "clr": "DFE4E4", "tt": "Aqua, Background 2, Lighter 60%" },
            { "i": "24", "clr": "C3CCCC", "tt": "Teal, Text 2, Lighter 60%" },
            { "i": "25", "clr": "CEEF95", "tt": "Green, Accent 1, Lighter 60%" },
            { "i": "26", "clr": "FCD096", "tt": "Orange, Accent 2, Lighter 60%" },
            { "i": "27", "clr": "A9D1FD", "tt": "Blue, Accent 3, Lighter 60%" },
            { "i": "28", "clr": "AEEDE2", "tt": "Bright Green, Accent 4, Lighter 60%" },
            { "i": "29", "clr": "FCE299", "tt": "Gold, Accent 5, Lighter 60%" },
            { "i": "30", "clr": "F5BBA7", "tt": "Red, Accent 6, Lighter 60%" },
           
            { "i": "31", "clr": "BFBFBF", "tt": "White, Background 1, Darker 25%" },
            { "i": "32", "clr": "3F3F3F", "tt": "Black, Text 1, Lighter 25%" },
            { "i": "33", "clr": "CFD6D6", "tt": "Aqua, Background 2, Lighter 40%" },
            { "i": "34", "clr": "A5B3B3", "tt": "Teal, Text 2, Lighter 40%" },
            { "i": "35", "clr": "B6E760", "tt": "Green, Accent 1, Lighter 40%" },
            { "i": "36", "clr": "FBB961", "tt": "Orange, Accent 2, Lighter 40%" },
            { "i": "37", "clr": "7EBAFD", "tt": "Blue, Accent 3, Lighter 40%" },
            { "i": "38", "clr": "86E4D4", "tt": "Bright Green, Accent 4, Lighter 40%" },
            { "i": "39", "clr": "FBD466", "tt": "Gold, Accent 5, Lighter 40%" },
            { "i": "40", "clr": "F0997B", "tt": "Red, Accent 6, Lighter 40%" },
            
           
            { "i": "41", "clr": "A5A5A5", "tt": "White, Background 1, Darker 35%" },
            { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
            { "i": "43", "clr": "7E9292", "tt": "Aqua, Background 2, Darker 25%" },
            { "i": "44", "clr": "505F5F", "tt": "Teal, Text 2, Darker 25%" },
            { "i": "45", "clr": "5D8714", "tt": "Green, Accent 1, Darker 25%" },
            { "i": "46", "clr": "B16703", "tt": "Orange, Accent 2, Darker 25%" },
            { "i": "47", "clr": "0368D7", "tt": "Blue, Accent 3, Darker 25%" },
            { "i": "48", "clr": "24A18C", "tt": "Bright Green, Accent 4, Darker 25%" } ,
            { "i": "49", "clr": "B78803", "tt": "Gold, Accent 5, Darker 25%" },
            { "i": "50", "clr": "B43C13", "tt": "Red, Accent 6, Darker 25%" },
           
            
            { "i": "51", "clr": "7F7F7F", "tt": "White, Background 1, Darker 50%" },
            { "i": "52", "clr": "0C0C0C", "tt": "Black, Text 1, Lighter 5%" },
            { "i": "53", "clr": "536262", "tt": "Aqua, Background 2, Lighter 10%" },
           	{ "i": "54", "clr": "353F3F", "tt": "Teal, Text 2, Darker 90%" },
            { "i": "55", "clr": "3E5A0D", "tt": "Green, Accent 1, Darker 50%" },
            { "i": "56", "clr": "764502", "tt": "Orange, Accent 2, Darker 50%" },
            { "i": "57", "clr": "02458F", "tt": "Blue, Accent 3, Darker 50%" },
            { "i": "58", "clr": "186B5D", "tt": "Bright Green, Accent 4, Darker 50%" },
            { "i": "59", "clr": "7A5B02", "tt": "Gold, Accent 5, Darker 50%" },
            { "i": "60", "clr": "78280D", "tt": "Red, Accent 6, Darker 50%" },

            { "i": "61", "clr": "C00000", "tt": "Dark Red" },
            { "i": "62", "clr": "FF0000", "tt": "Red" },
            { "i": "63", "clr": "FFC000", "tt": "Orange" },
            { "i": "64", "clr": "FFFF00", "tt": "Yellow" },
            { "i": "65", "clr": "92D050", "tt": "Light Green" },
            { "i": "66", "clr": "00B050", "tt": "Green" },
            { "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
            { "i": "68", "clr": "0070C0", "tt": "Blue" },
            { "i": "69", "clr": "002060", "tt": "Dark Blue" },
            { "i": "70", "clr": "7030A0", "tt": "Purple" },
            { "i": "71", "clr": "NoFill", "tt": "NoFill" }
        ]
  	},
    {
		"type": "ColorGrid",
		"colorGridType": "patternColor",
		"theme": "Golden",
		"colors": [
			{ "i": "0", "clr": "Automatic", "tt": "No Color" },
			{ "i": "1", "clr": "FFFFFF", "tt": "White, Text 1" },
			{ "i": "2", "clr": "000000", "tt": "Black, Background 1" },
			{ "i": "3", "clr": "E6E6E6", "tt": "Gray-25%, Text 2" },
			{ "i": "4", "clr": "40546F", "tt": "Blue-Gray, Text 2" },
			{ "i": "5", "clr": "003400", "tt": "Dark Green, Accent 1" },
			{ "i": "6", "clr": "EA7E35", "tt": "Orange, Accent 2" },
			{ "i": "7", "clr": "A5A5A7", "tt": "Gray-50%, Accent 3" },
			{ "i": "8", "clr": "FFC200", "tt": "Gold, Accent 4" },
			{ "i": "9", "clr": "4073CC", "tt": "Blue, Accent 5" },
			{ "i": "10", "clr": "CD3300", "tt": "Red, Accent 6" },

			{ "i": "11", "clr": "F1F1F1", "tt": "White, Background 1, Darker 5%" },
			{ "i": "12", "clr": "808080", "tt": "Black, Text 1, Lighter 50%" },
			{ "i": "13", "clr": "D1CDCE", "tt": "Gray-25%, Background 2, Darker 10%" },
			{ "i": "14", "clr": "D3DBE6", "tt": "Blue-Gray, Text 2, Lighter 80%" },
			{ "i": "15", "clr": "D6FECC", "tt": "Dark Green, Accent 1, Lighter 90%" },
			{ "i": "16", "clr": "FCE5D5", "tt": "Orange, Accent 2, Lighter 80%" },
			{ "i": "17", "clr": "EEEDEB", "tt": "Gray-50%, Accent 3, Lighter 80%" },
			{ "i": "18", "clr": "FFF2D1", "tt": "Gold, Accent 4, Lighter 80%" },
			{ "i": "19", "clr": "DBE2F5", "tt": "Blue, Accent 5, Lighter 80%" },
			{ "i": "20", "clr": "FFD1C4", "tt": "Red, Accent 6, Lighter 80%" },

			{ "i": "21", "clr": "D7D7D7", "tt": "White, Background 1, Lighter 15%" },
			{ "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
			{ "i": "23", "clr": "AFABAA", "tt": "Gray-25%, Background 2, Darker 25%" },
			{ "i": "24", "clr": "ACB9CA", "tt": "Blue-Gray, Text 2, Lighter 60%" },
			{ "i": "25", "clr": "90FE8D", "tt": "Dark Green, Accent 1, Lighter 75%" },
			{ "i": "26", "clr": "F9CAAE", "tt": "Orange, Accent 2, Lighter 60%" },
			{ "i": "27", "clr": "DCDADD", "tt": "Gray-50%, Accent 3, Lighter 60%" },
			{ "i": "28", "clr": "FDE69A", "tt": "Gold, Accent 4, Lighter 60%" },
			{ "i": "29", "clr": "B0C7E9", "tt": "Blue, Accent 5, Lighter 60%" },
			{ "i": "30", "clr": "FFA387", "tt": "Red, Accent 6, Lighter 60%" },

			{ "i": "31", "clr": "BFBFBF", "tt": "White, Background 1, Darker 25%" },
			{ "i": "32", "clr": "3E3E3E", "tt": "Black, Text 1, Lighter 25%" },
			{ "i": "33", "clr": "767070", "tt": "Gray-25%, Background 2, Darker 50%" },
			{ "i": "34", "clr": "8297B6", "tt": "Blue-Gray, Text 2, Lighter 40%" },
			{ "i": "35", "clr": "1AFD18", "tt": "Dark Green, Accent 1, Lighter 50%" },
			{ "i": "36", "clr": "F5B182", "tt": "Orange, Accent 2, Lighter 40%" },
			{ "i": "37", "clr": "CACACA", "tt": "Gray-50%, Accent 3, Lighter 40%" },
			{ "i": "38", "clr": "FFD766", "tt": "Gold, Accent 4, Lighter 40%" },
			{ "i": "39", "clr": "8FABDD", "tt": "Blue, Accent 5, Lighter 40%" },
			{ "i": "40", "clr": "FF7446", "tt": "Red, Accent 6, Lighter 40%" },

			{ "i": "41", "clr": "A5A5A5", "tt": "White, Background 1, Darker 35%" },
			{ "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
			{ "i": "43", "clr": "3A3937", "tt": "Gray-25%, Background 2, Darker 75%" },
			{ "i": "44", "clr": "323F50", "tt": "Blue-Gray, Text 2, Darker 25%" },
			{ "i": "45", "clr": "00A700", "tt": "Dark Green, Accent 1, Lighter 25%" },
			{ "i": "46", "clr": "C85A0D", "tt": "Orange, Accent 2, Darker 25%" },
			{ "i": "47", "clr": "7A7B7D", "tt": "Gray-50%, Accent 3, Darker 25%" },
			{ "i": "48", "clr": "C28F00", "tt": "Gold, Accent 4, Darker 25%" },
			{ "i": "49", "clr": "2D5391", "tt": "Blue, Accent 5, Darker 25%" },
			{ "i": "50", "clr": "9A2400", "tt": "Red, Accent 6, Darker 25%" },

			{ "i": "51", "clr": "818181", "tt": "White, Background 1, Darker 50%" },
			{ "i": "52", "clr": "0C0C0C", "tt": "Black, Text 1, Lighter 5%" },
			{ "i": "53", "clr": "191516", "tt": "Gray-25%, Background 2, Darker 90%" },
			{ "i": "54", "clr": "202A34", "tt": "Blue-Gray, Text 2, Darker 50%" },
			{ "i": "55", "clr": "035D03", "tt": "Dark Green, Accent 1, Darker 10%" },
			{ "i": "56", "clr": "843B0E", "tt": "Orange, Accent 2, Darker 50%" },
			{ "i": "57", "clr": "55514E", "tt": "Gray-50%, Accent 3, Darker 50%" },
			{ "i": "58", "clr": "805F02", "tt": "Gold, Accent 4, Darker 50%" },
			{ "i": "59", "clr": "1F3861", "tt": "Blue, Accent 5, Darker 50%" },
			{ "i": "60", "clr": "681600", "tt": "Red, Accent 6, Darker 50%" },

			{ "i": "61", "clr": "C00000", "tt": "Dark Red" },
			{ "i": "62", "clr": "FF0000", "tt": "Red" },
			{ "i": "63", "clr": "FFC000", "tt": "Orange" },
			{ "i": "64", "clr": "FFFF00", "tt": "Yellow" },
			{ "i": "65", "clr": "92D050", "tt": "Light Green" },
			{ "i": "66", "clr": "00B050", "tt": "Green" },
			{ "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
			{ "i": "68", "clr": "0070C0", "tt": "Blue" },
			{ "i": "69", "clr": "002060", "tt": "Dark Blue" },
			{ "i": "70", "clr": "7030A0", "tt": "Purple" },
			{ "i": "71", "clr": "NoFill", "tt": "NoFill" }
		]
  	},
  	{
		"type": "ColorGrid",
		"colorGridType": "patternColor",
		"theme": "WD_Organic",
		"colors": [
			{ "i": "0", "clr": "Automatic", "tt": "No Color" },
			{ "i": "1", "clr": "000000", "tt": "Black, Background 1" },
			{ "i": "2", "clr": "ffffff", "tt": "White, Text 1" },
			{ "i": "3", "clr": "212121", "tt": "Gray-80%, Background 2" },
			{ "i": "4", "clr": "dadada", "tt": "Gray-25%, Text 2" },
			{ "i": "5", "clr": "83992a", "tt": "Green, Accent 1" },
			{ "i": "6", "clr": "3c9770", "tt": "Teal, Accent 2" },
			{ "i": "7", "clr": "44709d", "tt": "Blue-Gray, Accent 3" },
			{ "i": "8", "clr": "a23c33", "tt": "Red, Accent 4" },
			{ "i": "9", "clr": "d97828", "tt": "Orange, Accent 5" },
			{ "i": "10", "clr": "deb340", "tt": "Gold, Accent 6" },

			{ "i": "11", "clr": "7f7f7f", "tt": "Black, Background 1, Lighter 50%" },
			{ "i": "12", "clr": "f2f2f2", "tt": "White, Text 1, Darker 5%" },
			{ "i": "13", "clr": "e8e8e8", "tt": "Gray-80%, Background 2, Lighter 90%" },
			{ "i": "14", "clr": "c4c4c4", "tt": "Gray-25%, Text 2, Darker 10%" },
			{ "i": "15", "clr": "eaf1cd", "tt": "Green, Accent 1, Lighter 80%" },
			{ "i": "16", "clr": "d4ede2", "tt": "Teal, Accent 2, Lighter 80%" },
			{ "i": "17", "clr": "d7e2ed", "tt": "Blue-Gray, Accent 3, Lighter 80%" },
			{ "i": "18", "clr": "f0d4d1", "tt": "Red, Accent 4, Lighter 80%" },
			{ "i": "19", "clr": "f7e4d4", "tt": "Orange, Accent 5, Lighter 80%" },
			{ "i": "20", "clr": "f8efd8", "tt": "Gold, Accent 6, Lighter 80%" },

			{ "i": "21", "clr": "595959", "tt": "Black, Background 1, Lighter 35%" },
			{ "i": "22", "clr": "d8d8d8", "tt": "White, Text 1, Darker 15%" },
			{ "i": "23", "clr": "c7c7c7", "tt": "Gray-80%, Background 2, Lighter 75%" },
			{ "i": "24", "clr": "a3a3a3", "tt": "Gray-25%, Text 2, Darker 25%" },
			{ "i": "25", "clr": "d5e39c", "tt": "Green, Accent 1, Lighter 75%" },
			{ "i": "26", "clr": "a9dcc6", "tt": "Teal, Accent 2, Lighter 60%" },
			{ "i": "27", "clr": "afc5dc", "tt": "Blue-Gray, Accent 3, Lighter 60%" },
			{ "i": "28", "clr": "e2a9a4", "tt": "Red, Accent 4, Lighter 60%" },
			{ "i": "29", "clr": "efc9a9", "tt": "Orange, Accent 5, Lighter 60%" },
			{ "i": "30", "clr": "f1e0b2", "tt": "Gold, Accent 6, Lighter 60%" },

			{ "i": "31", "clr": "3f3f3f", "tt": "Black, Background 1, Lighter 25%" },
			{ "i": "32", "clr": "bfbfbf", "tt": "White, Text 1, Darker 25%" },
			{ "i": "33", "clr": "909090", "tt": "Gray-80%, Background 2, Lighter 50%" },
			{ "i": "34", "clr": "6d6d6d", "tt": "Gray-25%, Text 2, Darker 50%" },
			{ "i": "35", "clr": "c0d66a", "tt": "Green, Accent 1, Lighter 40%" },
			{ "i": "36", "clr": "7ecbaa", "tt": "Teal, Accent 2, Lighter 40%" },
			{ "i": "37", "clr": "87a9cb", "tt": "Blue-Gray, Accent 3, Lighter 40%" },
			{ "i": "38", "clr": "d47e77", "tt": "Red, Accent 4, Lighter 40%" },
			{ "i": "39", "clr": "e8ae7d", "tt": "Orange, Accent 5, Lighter 40%" },
			{ "i": "40", "clr": "ebd18c", "tt": "Gold, Accent 6, Lighter 40%" },

			{ "i": "41", "clr": "262626", "tt": "Black, Background 1, Lighter 15%" },
			{ "i": "42", "clr": "a5a5a5", "tt": "White, Text 1, Darker 35%" },
			{ "i": "43", "clr": "585858", "tt": "Gray-80%, Background 2, Lighter 25%" },
			{ "i": "44", "clr": "363636", "tt": "Gray-25%, Text 2, Darker 75%" },
			{ "i": "45", "clr": "62721f", "tt": "Green, Accent 1, Darker 25%" },
			{ "i": "46", "clr": "2c7153", "tt": "Teal, Accent 2, Darker 25%" },
			{ "i": "47", "clr": "335375", "tt": "Blue-Gray, Accent 3, Darker 25%" },
			{ "i": "48", "clr": "792c26", "tt": "Red, Accent 4, Darker 25%" },
			{ "i": "49", "clr": "a3591c", "tt": "Orange, Accent 5, Darker 25%" },
			{ "i": "50", "clr": "b68d1f", "tt": "Gold, Accent 6, Darker 25%" },

			{ "i": "51", "clr": "0c0c0c", "tt": "Black, Background 1, Lighter 5%" },
			{ "i": "52", "clr": "7f7f7f", "tt": "White, Text 1, Darker 50%" },
			{ "i": "53", "clr": "373737", "tt": "Gray-25%, Background 2, Lighter 10%" },
			{ "i": "54", "clr": "151515", "tt": "Gray-25%, Text 2, Darker 90%" },
			{ "i": "55", "clr": "414c14", "tt": "Green, Accent 1, Darker 50%" },
			{ "i": "56", "clr": "1d4b38", "tt": "Teal, Accent 2, Darker 50%" },
			{ "i": "57", "clr": "22374e", "tt": "Blue-Gray, Accent 3, Darker 50%" },
			{ "i": "58", "clr": "511d19", "tt": "Red, Accent 4, Darker 50%" },
			{ "i": "59", "clr": "6d3b13", "tt": "Orange, Accent 5, Darker 50%" },
			{ "i": "60", "clr": "795e15", "tt": "Gold, Accent 6, Darker 50%" },

			{ "i": "61", "clr": "c00000", "tt": "Dark Red" },
			{ "i": "62", "clr": "ff0000", "tt": "Red" },
			{ "i": "63", "clr": "ffc000", "tt": "Orange" },
			{ "i": "64", "clr": "ffff00", "tt": "Yellow" },
			{ "i": "65", "clr": "92d050", "tt": "Light Green" },
			{ "i": "66", "clr": "00b050", "tt": "Green" },
			{ "i": "67", "clr": "00b0f0", "tt": "Light Blue" },
			{ "i": "68", "clr": "0070c0", "tt": "Blue" },
			{ "i": "69", "clr": "002060", "tt": "Dark Blue" },
			{ "i": "70", "clr": "7030a0", "tt": "Purple" }
		]
  	},
  	
  	{
		"type": "ColorGrid",
		"colorGridType": "patternColor",
		"theme": "Metropolitan",
		"colors": [
			{ "i": "0", "clr": "Automatic", "tt": "No Color" },
			{ "i": "1", "clr": "000000", "tt": "Black, Background 1" },
			{ "i": "2", "clr": "ffffff", "tt": "White, Text 1" },
			{ "i": "3", "clr": "162f33", "tt": "Dark Teal, Background 2" },
			{ "i": "4", "clr": "eaf0e0", "tt": "Light Green, Text 2" },
			{ "i": "5", "clr": "50b4c8", "tt": "Aqua, Accent 1" },
			{ "i": "6", "clr": "a8b97f", "tt": "Olive Green, Accent 2" },
			{ "i": "7", "clr": "9b9256", "tt": "Brown, Accent 3" },
			{ "i": "8", "clr": "657689", "tt": "Blue-Gray, Accent 4" },
			{ "i": "9", "clr": "7a855d", "tt": "Olive Green, Accent 5" },
			{ "i": "10", "clr": "84ac9d", "tt": "Green, Accent 6" },

			{ "i": "11", "clr": "7f7f7f", "tt": "Black, Background 1, Lighter 50%" },
			{ "i": "12", "clr": "f2f2f2", "tt": "White, Text 1, Darker 5%" },
			{ "i": "13", "clr": "e0eff1", "tt": "Dark Teal, Background 2, Lighter 90%" },
			{ "i": "14", "clr": "d4e0c0", "tt": "Light Green, Text 2, Darker 10%" },
			{ "i": "15", "clr": "dcf0f4", "tt": "Aqua, Accent 1, Lighter 80%" },
			{ "i": "16", "clr": "edf1e5", "tt": "Olive Green, Accent 2, Lighter 80%" },
			{ "i": "17", "clr": "ebe9dc", "tt": "Brown, Accent 3, Lighter 80%" },
			{ "i": "18", "clr": "dfe3e7", "tt": "Blue-Gray, Accent 4, Lighter 80%" },
			{ "i": "19", "clr": "e4e7dd", "tt": "Olive Green, Accent 5, Lighter 80%" },
			{ "i": "20", "clr": "e6eeeb", "tt": "Green, Accent 6, Lighter 80%" },

			{ "i": "21", "clr": "595959", "tt": "Black, Background 1, Lighter 35%" },
			{ "i": "22", "clr": "d8d8d8", "tt": "White, Text 1, Darker 15%" },
			{ "i": "23", "clr": "b2d8de", "tt": "Dark Teal, Background 2, Lighter 75%" },
			{ "i": "24", "clr": "b5ca91", "tt": "Light Green, Text 2, Darker 25%" },
			{ "i": "25", "clr": "b9e1e8", "tt": "Aqua, Accent 1, Lighter 75%" },
			{ "i": "26", "clr": "dce3cb", "tt": "Olive Green, Accent 2, Lighter 60%" },
			{ "i": "27", "clr": "d8d4b9", "tt": "Brown, Accent 3, Lighter 60%" },
			{ "i": "28", "clr": "c0c8d0", "tt": "Blue-Gray, Accent 4, Lighter 60%" },
			{ "i": "29", "clr": "cad0bc", "tt": "Olive Green, Accent 5, Lighter 60%" },
			{ "i": "30", "clr": "cdddd7", "tt": "Green, Accent 6, Lighter 60%" },

			{ "i": "31", "clr": "3f3f3f", "tt": "Black, Background 1, Lighter 25%" },
			{ "i": "32", "clr": "bfbfbf", "tt": "White, Text 1, Darker 25%" },
			{ "i": "33", "clr": "66b1bd", "tt": "Dark Teal, Background 2, Lighter 50%" },
			{ "i": "34", "clr": "7e9c4b", "tt": "Light Green, Text 2, Darker 50%" },
			{ "i": "35", "clr": "96d2de", "tt": "Aqua, Accent 1, Lighter 40%" },
			{ "i": "36", "clr": "cad5b2", "tt": "Olive Green, Accent 2, Lighter 40%" },
			{ "i": "37", "clr": "c5bf97", "tt": "Brown, Accent 3, Lighter 40%" },
			{ "i": "38", "clr": "a1acb9", "tt": "Blue-Gray, Accent 4, Lighter 40%" },
			{ "i": "39", "clr": "b0b89a", "tt": "Olive Green, Accent 5, Lighter 40%" },
			{ "i": "40", "clr": "b5cdc4", "tt": "Green, Accent 6, Lighter 40%" },

			{ "i": "41", "clr": "262626", "tt": "Black, Background 1, Lighter 15%" },
			{ "i": "42", "clr": "a5a5a5", "tt": "White, Text 1, Darker 35%" },
			{ "i": "43", "clr": "36757f", "tt": "Dark Teal, Background 2, Lighter 25%" },
			{ "i": "44", "clr": "3f4e25", "tt": "Light Green, Text 2, Darker 75%" },
			{ "i": "45", "clr": "328d9f", "tt": "Aqua, Accent 1, Darker 25%" },
			{ "i": "46", "clr": "839752", "tt": "Olive Green, Accent 2, Darker 25%" },
			{ "i": "47", "clr": "746d40", "tt": "Brown, Accent 3, Darker 25%" },
			{ "i": "48", "clr": "4b5866", "tt": "Blue-Gray, Accent 4, Darker 25%" },
			{ "i": "49", "clr": "5b6345", "tt": "Olive Green, Accent 5, Darker 25%" },
			{ "i": "50", "clr": "5b8877", "tt": "Green, Accent 6, Darker 25%" },

			{ "i": "51", "clr": "0c0c0c", "tt": "Black, Background 1, Lighter 5%" },
			{ "i": "52", "clr": "7f7f7f", "tt": "White, Text 1, Darker 50%" },
			{ "i": "53", "clr": "234b51", "tt": "Dark Teal, Background 2, Lighter 10%" },
			{ "i": "54", "clr": "191f0f", "tt": "Light Green, Text 2, Darker 90%" },
			{ "i": "55", "clr": "215e6a", "tt": "Aqua, Accent 1, Darker 50%" },
			{ "i": "56", "clr": "576437", "tt": "Olive Green, Accent 2, Darker 50%" },
			{ "i": "57", "clr": "4d492a", "tt": "Brown, Accent 3, Darker 50%" },
			{ "i": "58", "clr": "323b44", "tt": "Blue-Gray, Accent 4, Darker 50%" },
			{ "i": "59", "clr": "3d422e", "tt": "Olive Green, Accent 5, Darker 50%" },
			{ "i": "60", "clr": "3d5a4f", "tt": "Green, Accent 6, Darker 50%" },

			{ "i": "61", "clr": "c00000", "tt": "Dark Red" },
			{ "i": "62", "clr": "ff0000", "tt": "Red" },
			{ "i": "63", "clr": "ffc000", "tt": "Orange" },
			{ "i": "64", "clr": "ffff00", "tt": "Yellow" },
			{ "i": "65", "clr": "92d050", "tt": "Light Green" },
			{ "i": "66", "clr": "00b050", "tt": "Green" },
			{ "i": "67", "clr": "00b0f0", "tt": "Light Blue" },
			{ "i": "68", "clr": "0070c0", "tt": "Blue" },
			{ "i": "69", "clr": "002060", "tt": "Dark Blue" },
			{ "i": "70", "clr": "7030a0", "tt": "Purple" }
		]
  	},
  	{
	    "type": "ColorGrid",
	    "colorGridType": "patternColor",
	    "theme": "w06tournament",
	    "colors": [
	        { "i": "0", "clr": "Automatic", "tt": "No Color" },
	        { "i": "1", "clr": "000000", "tt": "Black, Background 1" },
	        { "i": "2", "clr": "FFFFFF", "tt": "White, Text 1" },
	        { "i": "3", "clr": "736F52", "tt": "Brown, Background 2" },
	        { "i": "4", "clr": "E6E8CE", "tt": "Light Green, Text 2" },
	        { "i": "5", "clr": "A4300A", "tt": "Dark Red, Accent 1" },
	        { "i": "6", "clr": "DD7A17", "tt": "Orange, Accent 2" },
	        { "i": "7", "clr": "9A8452", "tt": "Brown, Accent 3" },
	        { "i": "8", "clr": "6C8444", "tt": "Olive Green, Accent 4" },
	        { "i": "9", "clr": "92AA44", "tt": "Olive Green, Accent 5" },
	        { "i": "10", "clr": "6BA990", "tt": "Green, Accent 6" },

	        { "i": "11", "clr": "7E7E7E", "tt": "Black, Background 1, Lighter 50%" },
	        { "i": "12", "clr": "F2F2F2", "tt": "White, Text 1, Darker 5%" },
	        { "i": "13", "clr": "E6E3DC", "tt": "Brown, Background 2, Lighter 80%" },
	        { "i": "14", "clr": "D1DCB1", "tt": "Light Green, Text 2, Darker 10%" },
	        { "i": "15", "clr": "F8CEC2", "tt": "Dark Red, Accent 1, Lighter 80%" },
	        { "i": "16", "clr": "FDE4CE", "tt": "Orange, Accent 2, Lighter 80%" },
	        { "i": "17", "clr": "EAE8DC", "tt": "Brown, Accent 3, Lighter 80%" },
	        { "i": "18", "clr": "E3E7D6", "tt": "Olive Green, Accent 4, Lighter 80%" },
	        { "i": "19", "clr": "E9EED8", "tt": "Olive Green, Accent 5, Lighter 80%" },
	        { "i": "20", "clr": "E2EEEA", "tt": "Green, Accent 6, Lighter 80%" },

	        { "i": "21", "clr": "595959", "tt": "Black, Background 1, Lighter 35%" },
	        { "i": "22", "clr": "D8D8D8", "tt": "White, Text 1, Darker 15%" },
	        { "i": "23", "clr": "CBC7B7", "tt": "Brown, Background 2, Lighter 60%" },
	        { "i": "24", "clr": "B6C882", "tt": "Light Green, Text 2, Darker 25%" },
	        { "i": "25", "clr": "F39E87", "tt": "Dark Red, Accent 1, Lighter 60%" },
	        { "i": "26", "clr": "F4CB9F", "tt": "Orange, Accent 2, Lighter 60%" },
	        { "i": "27", "clr": "DACDB7", "tt": "Brown, Accent 3, Lighter 60%" },
	        { "i": "28", "clr": "C7D2B6", "tt": "Olive Green, Accent 4, Lighter 60%" },
	        { "i": "29", "clr": "D4DEB6", "tt": "Olive Green, Accent 5, Lighter 60%" },
	        { "i": "30", "clr": "C3DDD3", "tt": "Green, Accent 6, Lighter 80%" },

	        { "i": "31", "clr": "3F3F3F", "tt": "Black, Background 1, Lighter 25%" },
	        { "i": "32", "clr": "BFBFBF", "tt": "White, Text 1, Darker 25%" },
	        { "i": "33", "clr": "B2AB93", "tt": "Brown, Background 2, Lighter 40%" },
	        { "i": "34", "clr": "839943", "tt": "Light Green, Text 2, Darker 50%" },
	        { "i": "35", "clr": "ED6D4B", "tt": "Dark Red, Accent 1, Lighter 40%" },
	        { "i": "36", "clr": "EFB170", "tt": "Orange, Accent 2, Lighter 40%" },
	        { "i": "37", "clr": "C8B593", "tt": "Brown, Accent 3, Lighter 40%" },
	        { "i": "38", "clr": "ABBB92", "tt": "Olive Green, Accent 4, Lighter 40%" },
	        { "i": "39", "clr": "BECE91", "tt": "Olive Green, Accent 5, Lighter 60%" },
	        { "i": "40", "clr": "A5CDBD", "tt": "Green, Accent 6, Lighter 40%" },

	        { "i": "41", "clr": "262626", "tt": "Black, Background 1, Lighter 15%" },
	        { "i": "42", "clr": "A5A5A5", "tt": "White, Text 1, Darker 35%" },
	        { "i": "43", "clr": "58533E", "tt": "Brown, Background 2, Darker 25%" },
	        { "i": "44", "clr": "414C21", "tt": "Light Green, Text 2, Darker 75%" },
	        { "i": "45", "clr": "7B230B", "tt": "Dark Red, Accent 1, Darker 25%" },
	        { "i": "46", "clr": "A65E11", "tt": "Orange, Accent 2, Darker 25%" },
	        { "i": "47", "clr": "77623C", "tt": "Brown, Accent 3, Darker 25%" },
	        { "i": "48", "clr": "55643E", "tt": "Olive Green, Accent 4, Darker 25%" },
	        { "i": "49", "clr": "6D7F39", "tt": "Olive Green, Accent 5, Darker 25%" },
	        { "i": "50", "clr": "4A856D", "tt": "Green, Accent 6, Darker 25%" },

	        { "i": "51", "clr": "0B0B0B", "tt": "Black, Background 1, Lighter 5%" },
	        { "i": "52", "clr": "7F7F7F", "tt": "White, Text 1, Darker 50%" },
	        { "i": "53", "clr": "3B372B", "tt": "Brown, Background 2, Darker 50%" },
	        { "i": "54", "clr": "1A1E0D", "tt": "Light Green, Text 2, Darker 90%" },
	        { "i": "55", "clr": "521707", "tt": "Dark Red, Accent 1, Darker 50%" },
	        { "i": "56", "clr": "6D3E06", "tt": "Orange, Accent 2, Darker 50%" },
	        { "i": "57", "clr": "50412A", "tt": "Brown, Accent 3, Darker 50%" },
	        { "i": "58", "clr": "364329", "tt": "Olive Green, Accent 4, Darker 50%" },
	        { "i": "59", "clr": "495621", "tt": "Olive Green, Accent 5, Darker 50%" },
	        { "i": "60", "clr": "305949", "tt": "Green, Accent 6, Darker 50%" },

	        { "i": "61", "clr": "C00000", "tt": "Dark Red" },
	        { "i": "62", "clr": "FF0000", "tt": "Red" },
	        { "i": "63", "clr": "FFC000", "tt": "Orange" },
	        { "i": "64", "clr": "FFFF00", "tt": "Yellow" },
	        { "i": "65", "clr": "92D050", "tt": "Light Green" },
	        { "i": "66", "clr": "00B050", "tt": "Green" },
	        { "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
	        { "i": "68", "clr": "0070C0", "tt": "Blue" },
	        { "i": "69", "clr": "002060", "tt": "Dark Blue" },
	        { "i": "70", "clr": "7030A0", "tt": "Purple" },
	        { "i": "71", "clr": "NoFill", "tt": "NoFill" }
	    ]
	},
	{
		"type": "ColorGrid",
		"colorGridType": "patternColor",
		"theme": "Laurales",
		"colors": [
			{ "i": "0", "clr": "Automatic", "tt": "No Color" },
			{ "i": "1", "clr": "000000", "tt": "Black, Background 1" },
			{ "i": "2", "clr": "ffffff", "tt": "White, Text 1" },
			{ "i": "3", "clr": "44546a", "tt": "Blue-Gray, Background 2" },
			{ "i": "4", "clr": "e7e6e6", "tt": "Gray-25%, Text 2" },
			{ "i": "5", "clr": "5b9bd5", "tt": "Blue, Accent 1" },
			{ "i": "6", "clr": "ed7d31", "tt": "Orange, Accent 2" },
			{ "i": "7", "clr": "a5a5a5", "tt": "Gray-50%, Accent 3" },
			{ "i": "8", "clr": "ffc000", "tt": "Gold, Accent 4" },
			{ "i": "9", "clr": "4472c4", "tt": "Blue, Accent 5" },
			{ "i": "10", "clr": "70ad47", "tt": "Green, Accent 6" },

			{ "i": "11", "clr": "7f7f7f", "tt": "Black, Background 1, Lighter 50%" },
			{ "i": "12", "clr": "f2f2f2", "tt": "White, Text 1, Darker 5%" },
			{ "i": "13", "clr": "d6dce4", "tt": "Blue-Gray, Background 2, Lighter 80%" },
			{ "i": "14", "clr": "d0cece", "tt": "Gray-25%, Text 2, Darker 10%" },
			{ "i": "15", "clr": "deebf6", "tt": "Blue, Accent 1, Lighter 80%" },
			{ "i": "16", "clr": "fbe5d5", "tt": "Orange, Accent 2, Lighter 80%" },
			{ "i": "17", "clr": "ededed", "tt": "Gray-50%, Accent 3, Lighter 80%" },
			{ "i": "18", "clr": "fff2cc", "tt": "Gold, Accent 4, Lighter 80%" },
			{ "i": "19", "clr": "d9e2f3", "tt": "Blue, Accent 5, Lighter 80%" },
			{ "i": "20", "clr": "e2efd9", "tt": "Green, Accent 6, Lighter 80%" },

			{ "i": "21", "clr": "595959", "tt": "Black, Background 1, Lighter 35%" },
			{ "i": "22", "clr": "d8d8d8", "tt": "White, Text 1, Darker 15%" },
			{ "i": "23", "clr": "adb9ca", "tt": "Blue-Gray, Background 2, Lighter 60%" },
			{ "i": "24", "clr": "aeabab", "tt": "Gray-25%, Text 2, Darker 25%" },
			{ "i": "25", "clr": "bdd7ee", "tt": "Blue, Accent 1, Lighter 60%" },
			{ "i": "26", "clr": "f7cbac", "tt": "Orange, Accent 2, Lighter 60%" },
			{ "i": "27", "clr": "dbdbdb", "tt": "Gray-50%, Accent 3, Lighter 60%" },
			{ "i": "28", "clr": "fee599", "tt": "Gold, Accent 4, Lighter 60%" },
			{ "i": "29", "clr": "b4c6e7", "tt": "Blue, Accent 5, Lighter 60%" },
			{ "i": "30", "clr": "c5e0b3", "tt": "Green, Accent 6, Lighter 60%" },

			{ "i": "31", "clr": "3f3f3f", "tt": "Black, Background 1, Lighter 25%" },
			{ "i": "32", "clr": "bfbfbf", "tt": "White, Text 1, Darker 25%" },
			{ "i": "33", "clr": "8496b0", "tt": "Blue-Gray, Background 2, Lighter 40%" },
			{ "i": "34", "clr": "757070", "tt": "Gray-25%, Text 2, Darker 50%" },
			{ "i": "35", "clr": "9cc3e5", "tt": "Blue, Accent 1, Lighter 40%" },
			{ "i": "36", "clr": "f4b183", "tt": "Orange, Accent 2, Lighter 40%" },
			{ "i": "37", "clr": "c9c9c9", "tt": "Gray-50%, Accent 3, Lighter 40%" },
			{ "i": "38", "clr": "ffd965", "tt": "Gold, Accent 4, Lighter 40%" },
			{ "i": "39", "clr": "8eaadb", "tt": "Blue, Accent 5, Lighter 40%" },
			{ "i": "40", "clr": "a8d08d", "tt": "Green, Accent 6, Lighter 40%" },

			{ "i": "41", "clr": "262626", "tt": "Black, Background 1, Lighter 15%" },
			{ "i": "42", "clr": "a5a5a5", "tt": "White, Text 1, Darker 35%" },
			{ "i": "43", "clr": "323f4f", "tt": "Blue-Gray, Background 2, Darker 25%" },
			{ "i": "44", "clr": "3a3838", "tt": "Gray-25%, Text 2, Darker 75%" },
			{ "i": "45", "clr": "2e75b5", "tt": "Blue, Accent 1, Darker 25%" },
			{ "i": "46", "clr": "c55a11", "tt": "Orange, Accent 2, Darker 25%" },
			{ "i": "47", "clr": "7b7b7b", "tt": "Gray-50%, Accent 3, Darker 25%" },
			{ "i": "48", "clr": "bf9000", "tt": "Gold, Accent 4, Darker 25%" },
			{ "i": "49", "clr": "2f5496", "tt": "Blue, Accent 5, Darker 25%" },
			{ "i": "50", "clr": "538135", "tt": "Green, Accent 6, Darker 25%" },

			{ "i": "51", "clr": "0c0c0c", "tt": "Black, Background 1, Lighter 5%" },
			{ "i": "52", "clr": "7f7f7f", "tt": "White, Text 1, Darker 50%" },
			{ "i": "53", "clr": "222a35", "tt": "Blue-Gray, Background 2, Darker 50%" },
			{ "i": "54", "clr": "171616", "tt": "Gray-25%, Text 2, Darker 90%" },
			{ "i": "55", "clr": "1e4e79", "tt": "Blue, Accent 1, Darker 50%" },
			{ "i": "56", "clr": "833c0b", "tt": "Orange, Accent 2, Darker 50%" },
			{ "i": "57", "clr": "525252", "tt": "Gray-50%, Accent 3, Darker 50%" },
			{ "i": "58", "clr": "7f6000", "tt": "Gold, Accent 4, Darker 50%" },
			{ "i": "59", "clr": "1f3864", "tt": "Blue, Accent 5, Darker 50%" },
			{ "i": "60", "clr": "375623", "tt": "Green, Accent 6, Darker 50%" },

			{ "i": "61", "clr": "c00000", "tt": "Dark Red" },
			{ "i": "62", "clr": "ff0000", "tt": "Red" },
			{ "i": "63", "clr": "ffc000", "tt": "Orange" },
			{ "i": "64", "clr": "ffff00", "tt": "Yellow" },
			{ "i": "65", "clr": "92d050", "tt": "Light Green" },
			{ "i": "66", "clr": "00b050", "tt": "Green" },
			{ "i": "67", "clr": "00b0f0", "tt": "Light Blue" },
			{ "i": "68", "clr": "0070c0", "tt": "Blue" },
			{ "i": "69", "clr": "002060", "tt": "Dark Blue" },
			{ "i": "70", "clr": "7030a0", "tt": "Purple" }
		]
  	},
  	{
		"type": "ColorGrid",
		"colorGridType": "patternColor",
		"theme": "SMPColors",
		"colors": [
			{ "i": "0", "clr": "Automatic", "tt": "No Color" },
			{ "i": "1", "clr": "000000", "tt": "Black, Background 1" },
			{ "i": "2", "clr": "ffffff", "tt": "White, Text 1" },
			{ "i": "3", "clr": "323232", "tt": "Gray-80%, Background 2" },
			{ "i": "4", "clr": "e3ded1", "tt": "Tan, Text 2" },
			{ "i": "5", "clr": "f07f09", "tt": "Orange, Accent 1" },
			{ "i": "6", "clr": "9f2936", "tt": "Red, Accent 2" },
			{ "i": "7", "clr": "1b587c", "tt": "Dark Blue, Accent 3" },
			{ "i": "8", "clr": "4e8542", "tt": "Dark Green, Accent 4" },
			{ "i": "9", "clr": "604878", "tt": "Dark Purple, Accent 5" },
			{ "i": "10", "clr": "c19859", "tt": "Tan, Accent 6" },

			{ "i": "11", "clr": "7f7f7f", "tt": "Black, Background 1, Lighter 50%" },
			{ "i": "12", "clr": "f2f2f2", "tt": "White, Text 1, Darker 25%" },
			{ "i": "13", "clr": "eaeaea", "tt": "Gray-80%, Background 2, Lighter 90%" },
			{ "i": "14", "clr": "d2cab5", "tt": "Tan, Text 2, Darker 10%" },
			{ "i": "15", "clr": "fde5cc", "tt": "Orange, Accent 1, Lighter 80%" },
			{ "i": "16", "clr": "f2cdd1", "tt": "Red, Accent 2, Lighter 80%" },
			{ "i": "17", "clr": "c4e1f2", "tt": "Dark Blue, Accent 3, Lighter 80%" },
			{ "i": "18", "clr": "d9ead5", "tt": "Dark Green, Accent 4, Lighter 80%" },
			{ "i": "19", "clr": "dfd7e7", "tt": "Dark Purple, Accent 5, Lighter 80%" },
			{ "i": "20", "clr": "f2eadd", "tt": "Tan, Accent 6, Lighter 80%" },

			{ "i": "21", "clr": "595959", "tt": "Black, Background 1, Lighter 35%" },
			{ "i": "22", "clr": "d8d8d8", "tt": "White, Text 1, Darker 15%" },
			{ "i": "23", "clr": "cbcbcb", "tt": "Gray-80%, Background 2, Lighter 75%" },
			{ "i": "24", "clr": "b9ad8d", "tt": "Tan, Text 2, Darker 25%" },
			{ "i": "25", "clr": "fbcb9a", "tt": "Orange, Accent 1, Lighter 60%" },
			{ "i": "26", "clr": "e59ca4", "tt": "Red, Accent 2, Lighter 60%" },
			{ "i": "27", "clr": "89c3e5", "tt": "Dark Blue, Accent 3, Lighter 60%" },
			{ "i": "28", "clr": "b3d5ab", "tt": "Dark Green, Accent 4, Lighter 60%" },
			{ "i": "29", "clr": "bfafcf", "tt": "Dark Purple, Accent 5, Lighter 60%" },
			{ "i": "30", "clr": "e6d5bc", "tt": "Tan, Accent 6, Lighter 60%" },

			{ "i": "31", "clr": "3f3f3f", "tt": "Black, Background 1, Lighter 25%" },
			{ "i": "32", "clr": "bfbfbf", "tt": "White, Text 1, Darker 25%" },
			{ "i": "33", "clr": "989898", "tt": "Gray-80%, Background 2, Lighter 50%" },
			{ "i": "34", "clr": "877852", "tt": "Tan, Text 2, Darker 50%" },
			{ "i": "35", "clr": "f9b268", "tt": "Orange, Accent 1, Lighter 40%" },
			{ "i": "36", "clr": "d86b77", "tt": "Red, Accent 2, Lighter 40%" },
			{ "i": "37", "clr": "4ea5d8", "tt": "Dark Blue, Accent 3, Lighter 40%" },
			{ "i": "38", "clr": "8dc182", "tt": "Dark Green, Accent 4, Lighter 40%" },
			{ "i": "39", "clr": "9f87b7", "tt": "Dark Purple, Accent 5, Lighter 40%" },
			{ "i": "40", "clr": "d9c19b", "tt": "Tan, Accent 6, Lighter 40%" },

			{ "i": "41", "clr": "262626", "tt": "Black, Background 1, Lighter 15%" },
			{ "i": "42", "clr": "a5a5a5", "tt": "White, Text 1, Darker 35%" },
			{ "i": "43", "clr": "656565", "tt": "Gray-80%, Background 2, Lighter 25%" },
			{ "i": "44", "clr": "433c29", "tt": "Tan, Text 2, Darker 75%" },
			{ "i": "45", "clr": "b45f06", "tt": "Orange, Accent 1, Darker 25%" },
			{ "i": "46", "clr": "771e28", "tt": "Red, Accent 2, Darker 25%" },
			{ "i": "47", "clr": "14425d", "tt": "Dark Blue, Accent 3, Darker 25%" },
			{ "i": "48", "clr": "3a6331", "tt": "Dark Green, Accent 4, Darker 25%" },
			{ "i": "49", "clr": "48365a", "tt": "Dark Purple, Accent 5, Darker 25%" },
			{ "i": "50", "clr": "997339", "tt": "Tan, Accent 6, Darker 25%" },

			{ "i": "51", "clr": "0c0c0c", "tt": "Black, Background 1, Lighter 5%" },
			{ "i": "52", "clr": "7f7f7f", "tt": "White, Text 1, Darker 50%" },
			{ "i": "53", "clr": "464646", "tt": "Gray-80%, Background 2, Lighter 10%" },
			{ "i": "54", "clr": "1b1810", "tt": "Tan, Text 2, Darker 90%" },
			{ "i": "55", "clr": "773f04", "tt": "Orange, Accent 1, Darker 50%" },
			{ "i": "56", "clr": "4f141b", "tt": "Red, Accent 2, Darker 50%" },
			{ "i": "57", "clr": "0d2c3e", "tt": "Dark Blue, Accent 3, Darker 50%" },
			{ "i": "58", "clr": "274220", "tt": "Dark Green, Accent 4, Darker 50%" },
			{ "i": "59", "clr": "30243c", "tt": "Dark Purple, Accent 5, Darker 50%" },
			{ "i": "60", "clr": "664d26", "tt": "Tan, Accent 6, Darker 50%" },

			{ "i": "61", "clr": "c00000", "tt": "Dark Red" },
			{ "i": "62", "clr": "ff0000", "tt": "Red" },
			{ "i": "63", "clr": "ffc000", "tt": "Orange" },
			{ "i": "64", "clr": "ffff00", "tt": "Yellow" },
			{ "i": "65", "clr": "92d050", "tt": "Light Green" },
			{ "i": "66", "clr": "00b050", "tt": "Green" },
			{ "i": "67", "clr": "00b0f0", "tt": "Light Blue" },
			{ "i": "68", "clr": "0070c0", "tt": "Blue" },
			{ "i": "69", "clr": "002060", "tt": "Dark Blue" },
			{ "i": "70", "clr": "7030a0", "tt": "Purple" }
		]
  	}
];
/***********************To Do***************************
This is a place holder for Office 2016 control js file.
The class of office 2016 control should be extended from its respective Office 2013 control class.
All the functionality related to Office 2016 should be overridden/implemented here.
*******************************************************/

var ColorGridInputList2016 = [{
    "type": "ColorGrid",
    "colorGridType": "patternColor",
    "theme": "RetrospectThemeStandardAndMoreColors_V2",
    "colors": [
        { "i": "0", "clr": "Automatic", "tt": "No Color" },
        { "i": "1", "clr": "FFFFFF", "tt": "White, Background 1" },
        { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
        { "i": "3", "clr": "CCDDEA", "tt": "Ice Blue, Background 2" },
        { "i": "4", "clr": "637052", "tt": "Olive Green, Text 2" },
        { "i": "5", "clr": "E48312", "tt": "Orange, Accent 1" },
        { "i": "6", "clr": "BD582C", "tt": "Orange, Accent 2" },
        { "i": "7", "clr": "865640", "tt": "Brown, Accent 3" },
        { "i": "8", "clr": "9B8357", "tt": "Brown, Accent 4" },
        { "i": "9", "clr": "C2BC80", "tt": "Tan, Accent 5" },
        { "i": "10", "clr": "94A088", "tt": "Green, Accent 6" },
        { "i": "11", "clr": "F2F2F2", "tt": "White, Background 1, Darker 5%" },
        { "i": "12", "clr": "7F7F7F", "tt": "Black, Text 1, Lighter 50%" },
        { "i": "13", "clr": "ACC8DD", "tt": "Ice Blue, Background 2, Darker 10%" },
        { "i": "14", "clr": "EDE4DA", "tt": "Olive Green, Text 2, Lighter 80%" },
        { "i": "15", "clr": "FBE6CE", "tt": "Orange, Accent 1, Lighter 80%" },
        { "i": "16", "clr": "F4DCD2", "tt": "Orange, Accent 2, Lighter 80%" },
        { "i": "17", "clr": "EADBD4", "tt": "Brown, Accent 3, Lighter 80%" },
        { "i": "18", "clr": "EBE6DC", "tt": "Brown, Accent 4, Lighter 80%" },
        { "i": "19", "clr": "F2F1E5", "tt": "Tan, Accent 5, Lighter 80%" },
        { "i": "20", "clr": "E9EBE7", "tt": "Green, Accent 6, Lighter 80%" },
        { "i": "21", "clr": "D8D8dD", "tt": "White, Background 1, Darker 15%" },
        { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
        { "i": "23", "clr": "7EA9CA", "tt": "Ice Blue, Background 2, Darker 25%" },
        { "i": "24", "clr": "C1C9B6", "tt": "Olive Green, Text 2, Lighter 60%" },
        { "i": "25", "clr": "F7CD9D", "tt": "Orange, Accent 1, Lighter 60%" },
        { "i": "26", "clr": "EABAA5", "tt": "Orange, Accent 2, Lighter 60%" },
        { "i": "27", "clr": "D6B8AA", "tt": "Brown, Accent 3, Lighter 60%" },
        { "i": "28", "clr": "D8CDBA", "tt": "Brown, Accent 4, Lighter 60%" },
        { "i": "29", "clr": "E6E4CC", "tt": "Tan, Accent 5, Lighter 60%" },
        { "i": "30", "clr": "D4D9CF", "tt": "Green, Accent 6, Lighter 60%" },
        { "i": "31", "clr": "BFBFBF", "tt": "White, Background 1, Darker 25%" },
        { "i": "32", "clr": "3F3F3F", "tt": "Black, Text 1, Lighter 25%" },
        { "i": "33", "clr": "3F7393", "tt": "Ice Blue, Background 2, Darker 50%" },
        { "i": "34", "clr": "A2AE91", "tt": "Olive Green, Text 2, Lighter 40%" },
        { "i": "35", "clr": "F3B46C", "tt": "Orange, Accent 1, Lighter 40%" },
        { "i": "36", "clr": "DF9778", "tt": "Orange, Accent 2, Lighter 40%" },
        { "i": "37", "clr": "C29580", "tt": "Brown, Accent 3, Lighter 40%" },
        { "i": "38", "clr": "D8CDBA", "tt": "Brown, Accent 4, Lighter 40%" },
        { "i": "39", "clr": "E6E4CC", "tt": "Tan, Accent 5, Lighter 40%" },
        { "i": "40", "clr": "D4D9CF", "tt": "Green, Accent 6, Lighter 40%" },
        { "i": "41", "clr": "A5A5A5", "tt": "White, Background 1, Darker 35%" },
        { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
        { "i": "43", "clr": "1F394D", "tt": "Ice Blue, Background 2, Darker 75%" },
        { "i": "44", "clr": "4A533D", "tt": "Olive Green, Text 2, Darker 25%" },
        { "i": "45", "clr": "AB620D", "tt": "Orange, Accent 1, Darker 25%" },
        { "i": "46", "clr": "8D4220", "tt": "Orange, Accent 2, Darker 25%" },
        { "i": "47", "clr": "644030", "tt": "Brown, Accent 3, Darker 25%" },
        { "i": "48", "clr": "746241", "tt": "Brown, Accent 4, Darker 25%" },
        { "i": "49", "clr": "A39B4E", "tt": "Tan, Accent 5, Darker 25%" },
        { "i": "50", "clr": "6F7B62", "tt": "Green, Accent 6, Darker 25%" },
        { "i": "51", "clr": "7F7F7F", "tt": "White, Background 1, Darker 50%" },
        { "i": "52", "clr": "0C0C0C", "tt": "Black, Text 1, Lighter 5%" },
        { "i": "53", "clr": "0C171F", "tt": "Ice Blue, Background 2, Darker 90%" },
        { "i": "54", "clr": "313829", "tt": "Olive Green, Text 2, Darker 50%" },
        { "i": "55", "clr": "724108", "tt": "Orange, Accent 1, Darker 50%" },
        { "i": "56", "clr": "5E2C16", "tt": "Orange, Accent 2, Darker 50%" },
        { "i": "57", "clr": "432B20", "tt": "Brown, Accent 3, Darker 50%" },
        { "i": "58", "clr": "404128", "tt": "Brown, Accent 4, Darker 50%" },
        { "i": "59", "clr": "6C6734", "tt": "Tan, Accent 5, Darker 50%" },
        { "i": "60", "clr": "4A5241", "tt": "Green, Accent 6, Darker 50%" },
        { "i": "61", "clr": "C00000", "tt": "Dark Red" },
        { "i": "62", "clr": "FF0000", "tt": "Red" },
        { "i": "63", "clr": "FFC000", "tt": "Orange" },
        { "i": "64", "clr": "FFFF00", "tt": "Yellow" },
        { "i": "65", "clr": "92D050", "tt": "Light Green" },
        { "i": "66", "clr": "00B050", "tt": "Green" },
        { "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
        { "i": "68", "clr": "0070C0", "tt": "Blue" },
        { "i": "69", "clr": "002060", "tt": "Dark Blue" },
        { "i": "70", "clr": "7030A0", "tt": "Purple" }

    ]
}, {
    "colorGridType": "backgroundColor",
    "theme": "RetrospectThemeStandardAndMoreColors_V2",
    "colors": [
        { "i": "0", "clr": "NoColor" },
        { "i": "1", "clr": "FFFFFF" },
        { "i": "2", "clr": "000000" },
        { "i": "3", "clr": "CEDDEB" },
        { "i": "4", "clr": "647051" },
        { "i": "5", "clr": "DD8200" },
        { "i": "6", "clr": "B65725" },
        { "i": "7", "clr": "82563E" },
        { "i": "8", "clr": "998354" },
        { "i": "9", "clr": "C1BC7D" },
        { "i": "10", "clr": "95A087" },
        { "i": "11", "clr": "F2F2F2" },
        { "i": "12", "clr": "808080" },
        { "i": "13", "clr": "AFC8DE" },
        { "i": "14", "clr": "E0E4DA" },
        { "i": "15", "clr": "F9E7CD" },
        { "i": "16", "clr": "F2DDD1" },
        { "i": "17", "clr": "E9DBD2" },
        { "i": "18", "clr": "EAE6DC" },
        { "i": "19", "clr": "F2F1E6" },
        { "i": "20", "clr": "E9EBE7" },
        { "i": "21", "clr": "D9D9D9" },
        { "i": "22", "clr": "595959" },
        { "i": "23", "clr": "83A9CB" },
        { "i": "24", "clr": "C1C9B5" },
        { "i": "25", "clr": "F4CE99" },
        { "i": "26", "clr": "E6BAA5" },
        { "i": "27", "clr": "D4B9A9" },
        { "i": "28", "clr": "D7CDB9" },
        { "i": "29", "clr": "E6E3CA" },
        { "i": "30", "clr": "D3D9CE" },
        { "i": "31", "clr": "BFBFBF" },
        { "i": "32", "clr": "404040" },
        { "i": "33", "clr": "48749D" },
        { "i": "34", "clr": "AEAE90" },
        { "i": "35", "clr": "EEB565" },
        { "i": "36", "clr": "D99776" },
        { "i": "37", "clr": "BE957C" },
        { "i": "38", "clr": "C3B596" },
        { "i": "39", "clr": "DAD7B1" },
        { "i": "40", "clr": "BFC6B6" },
        { "i": "41", "clr": "A6A6A6" },
        { "i": "42", "clr": "262626" },
        { "i": "43", "clr": "24394E" },
        { "i": "44", "clr": "4B533D" },
        { "i": "45", "clr": "A66300" },
        { "i": "46", "clr": "88411C" },
        { "i": "47", "clr": "60412F" },
        { "i": "48", "clr": "72623F" },
        { "i": "49", "clr": "A39B4A" },
        { "i": "50", "clr": "707B61" },
        { "i": "51", "clr": "808080" },
        { "i": "52", "clr": "0D0D0D" },
        { "i": "53", "clr": "0E161E" },
        { "i": "54", "clr": "313727" },
        { "i": "55", "clr": "6F4300" },
        { "i": "56", "clr": "5B2C13" },
        { "i": "57", "clr": "402B1F" },
        { "i": "58", "clr": "4D422B" },
        { "i": "59", "clr": "6C6830" },
        { "i": "60", "clr": "4A5240" },
        { "i": "61", "clr": "C00000" },
        { "i": "62", "clr": "FF0000" },
        { "i": "63", "clr": "FFC000" },
        { "i": "64", "clr": "FFFF00" },
        { "i": "65", "clr": "92D050" },
        { "i": "66", "clr": "00B050" },
        { "i": "67", "clr": "00B0F0" },
        { "i": "68", "clr": "0070C0" },
        { "i": "69", "clr": "002060" },
        { "i": "70", "clr": "7030A0" }
    ]
},
{
    "type": "ColorGrid",
    "colorGridType": "patternColor",
    "theme": "Celestial", 
    "colors": [
          { "i": "0", "clr": "Automatic", "tt": "No Color" },
            { "i": "1", "clr": "FFFFFF", "tt": "White, Background 1" },
            { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
            { "i": "3", "clr": "EEECE1", "tt": "Tan, Background 2" },
            { "i": "4", "clr": "505046", "tt": "Gray -80%, Text 2" },
            { "i": "5", "clr": "E84C22", "tt": "Red, Accent 1" },
            { "i": "6", "clr": "FFBD47", "tt": "Gold, Accent 2" },
            { "i": "7", "clr": "B64926", "tt": "Red, Accent 3" },
            { "i": "8", "clr": "FF8427", "tt": "Orange, Accent 4" },
            { "i": "9", "clr": "CC9900", "tt": "Gold, Accent 5" },
            { "i": "10", "clr": "B22600", "tt": "Dark Red, Accent 6" },
            { "i": "11", "clr": "F3F3F3", "tt": "White, Background 1, Darker 5%" },
            { "i": "12", "clr": "7E7E7E", "tt": "Black, Text 1, Lighter 50%" },
            { "i": "13", "clr": "DED9C5", "tt": "Tan, Background 2, Darker 10%" },
            { "i": "14", "clr": "DDDCD8", "tt": "Gray -80%, Text 2, Lighter 80%" },
            { "i": "15", "clr": "FCDAD0", "tt": "Red, Accent 1, Lighter 80%" },
            { "i": "16", "clr": "F9F3D8", "tt": "Gold, Accent 2, Lighter 80%" },
            { "i": "17", "clr": "F1D9D0", "tt": "Red, Accent 3, Lighter 80%" },
            { "i": "18", "clr": "FCE5D0", "tt": "Orange, Accent 4, Lighter 80%" },
            { "i": "19", "clr": "FFEEC6", "tt": "Gold, Accent 5, Lighter 80%" },
            { "i": "20", "clr": "FFC8BD", "tt": "Dark Red, Accent 6, Lighter 80%" },
            { "i": "21", "clr": "D8D8D8", "tt": "White, Background 1, Darker 15%" },
            { "i": "22", "clr": "585858", "tt": "Black, Text 1, Lighter 35%" },
            { "i": "23", "clr": "DED9C5", "tt": "Tan, Background 2, Darker 25%" },
            { "i": "24", "clr": "BBBBB3", "tt": "Gray -80%, Text 2, Lighter 60%" },
            { "i": "25", "clr": "F1B9A6", "tt": "Red, Accent 1, Lighter 60%" },
            { "i": "26", "clr": "FFE5B5", "tt": "Gold, Accent 2, Lighter 60%" },
            { "i": "27", "clr": "ECB19C", "tt": "Red, Accent 3, Lighter 60%" },
            { "i": "28", "clr": "FDCCAA", "tt": "Orange, Accent 4, Lighter 60%" },
            { "i": "29", "clr": "FEE086", "tt": "Gold, Accent 5, Lighter 60%" },
            { "i": "30", "clr": "FE977A", "tt": "Dark Red, Accent 6, Lighter 60%" },
            { "i": "31", "clr": "BFBFBF", "tt": "White, Background 1, Darker 25%" },
            { "i": "32", "clr": "3E3E3E", "tt": "Black, Text 1, Lighter 25%" },
            { "i": "33", "clr": "948A53", "tt": "Tan, Background 2, Darker 50%" },
            { "i": "34", "clr": "99998B", "tt": "Gray -80%, Text 2, Lighter 40%" },
            { "i": "35", "clr": "F4907B", "tt": "Red, Accent 1, Lighter 40%" },
            { "i": "36", "clr": "FED791", "tt": "Gold, Accent 2, Lighter 40%" },
            { "i": "37", "clr": "E38C71", "tt": "Red, Accent 3, Lighter 40%" },
            { "i": "38", "clr": "FFB57F", "tt": "Orange, Accent 4, Lighter 40%" },
            { "i": "39", "clr": "FFCF46", "tt": "Gold, Accent 5, Lighter 40%" },
            { "i": "40", "clr": "FF6438", "tt": "Dark Red, Accent 6, Lighter 40%" },
            { "i": "41", "clr": "A5A5A5", "tt": "White, Background 1, Darker 35%" },
            { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
            { "i": "43", "clr": "49432E", "tt": "Tan, Background 2, Darker 75%" },
            { "i": "44", "clr": "3B3A35", "tt": "Gray -80%, Text 2, Darker 25%" },
            { "i": "45", "clr": "B63412", "tt": "Red, Accent 1, Darker 25%" },
            { "i": "46", "clr": "F69B05", "tt": "Gold, Accent 2, Darker 25%" },
            { "i": "47", "clr": "883719", "tt": "Red, Accent 3, Darker 25%" },
            { "i": "48", "clr": "DC5E00", "tt": "Orange, Accent 4, Darker 25%" },
            { "i": "49", "clr": "9C7005", "tt": "Gold, Accent 5, Darker 25%" },
            { "i": "50", "clr": "861A05", "tt": "Dark Red, Accent 6, Darker 25%" },
            { "i": "51", "clr": "808080", "tt": "White, Background 1, Darker 50%" },
            { "i": "52", "clr": "090909", "tt": "Black, Text 1, Lighter 5%" },
            { "i": "53", "clr": "1D1B0F", "tt": "Tan, Background 2, Darker 90%" },
            { "i": "54", "clr": "292824", "tt": "Gray -80%, Text 2, Darker 50%" },
            { "i": "55", "clr": "792409", "tt": "Red, Accent 1, Darker 50%" },
            { "i": "56", "clr": "A66800", "tt": "Gold, Accent 2, Darker 50%" },
            { "i": "57", "clr": "5C230F", "tt": "Red, Accent 3, Darker 50%" },
            { "i": "58", "clr": "973F00", "tt": "Orange, Accent 4, Darker 50%" },
            { "i": "59", "clr": "664C03", "tt": "Gold, Accent 5, Darker 50%" },
            { "i": "60", "clr": "5A1101", "tt": "Dark Red, Accent 6, Darker 50%" },
            { "i": "61", "clr": "C10007", "tt": "Dark Red" },
            { "i": "62", "clr": "FD0000", "tt": "Red" },
            { "i": "63", "clr": "FFBE00", "tt": "Orange" },
            { "i": "64", "clr": "FFF723", "tt": "Yellow" },
            { "i": "65", "clr": "90D24C", "tt": "Light Green" },
            { "i": "66", "clr": "04AD4F", "tt": "Green"},
            { "i": "67", "clr": "00B1F5", "tt": "Light Blue" },
            { "i": "68", "clr": "016FC0", "tt": "Blue" },
            { "i": "69", "clr": "032061", "tt": "Dark Blue" },
            { "i": "70", "clr": "7030A3", "tt": "Purple" },
            { "i": "71", "clr": "NoFill", "tt": "NoFill" }
      ]
    },
    {
        "type": "ColorGrid",
        "colorGridType": "patternColor",
        "theme": "OfficeAccess5",
        "colors": [
        { "i": "0", "clr": "Automatic", "tt": "No Color" },
        { "i": "1", "clr": "FFFFFF", "tt": "White, Background 1" },
        { "i": "2", "clr": "000000", "tt": "Black, Text 1" },
        { "i": "3", "clr": "E7E6E6", "tt": "Gray-25%, Background 2" },
        { "i": "4", "clr": "44546A", "tt": "Blue-Gray, Text 2" },
        { "i": "5", "clr": "5B9BD5", "tt": "Blue, Accent 1" },
        { "i": "6", "clr": "ED7D31", "tt": "Orange, Accent 2" },
        { "i": "7", "clr": "A5A5A5", "tt": "Gray-50%, Accent 3" },
        { "i": "8", "clr": "FFC000", "tt": "Gold, Accent 4" },
        { "i": "9", "clr": "4472C4", "tt": "Blue, Accent 5" },
        { "i": "10", "clr": "70AD47", "tt": "Green, Accent 6" },
        { "i": "11", "clr": "F2F2F2", "tt": "White, Background 1, Darker 5%" },
        { "i": "12", "clr": "7F7F7F", "tt": "Black, Text 1, Lighter 50%" },
        { "i": "13", "clr": "D0CECE", "tt": "Gray-25%, Background 2, Darker 10%" },
        { "i": "14", "clr": "D6DCE4", "tt": "Blue-Gray, Text 2, Lighter 80%" },
        { "i": "15", "clr": "DEEBF6", "tt": "Blue, Accent 1, Lighter 80%" },
        { "i": "16", "clr": "FBE5D5", "tt": "Orange, Accent 2, Lighter 80%" },
        { "i": "17", "clr": "EDEDED", "tt": "Gray-50%, Accent 3, Lighter 80%" },
        { "i": "18", "clr": "FFF2CC", "tt": "Gold, Accent 4, Lighter 80%" },
        { "i": "19", "clr": "D9E2F3", "tt": "Blue, Accent 5, Lighter 80%" },
        { "i": "20", "clr": "E2EFD9", "tt": "Green, Accent 6, Lighter 80%" },
        { "i": "21", "clr": "D8D8D8", "tt": "White, Background 1, Darker 15%" },
        { "i": "22", "clr": "595959", "tt": "Black, Text 1, Lighter 35%" },
        { "i": "23", "clr": "AEABAB", "tt": "Gray-25%, Background 2, Darker 25%" },
        { "i": "24", "clr": "ADB9CA", "tt": "Blue-Gray, Text 2, Lighter 60%" },
        { "i": "25", "clr": "BDD7EE", "tt": "Blue, Accent 1, Lighter 60%" },
        { "i": "26", "clr": "F7CBAC", "tt": "Orange, Accent 2, Lighter 60%" },
        { "i": "27", "clr": "DBDBDB", "tt": "Gray-50%, Accent 3, Lighter 60%" },
        { "i": "28", "clr": "FEE599", "tt": "Gold, Accent 4, Lighter 60%" },
        { "i": "29", "clr": "B4C6E7", "tt": "Blue, Accent 5, Lighter 60%" },
        { "i": "30", "clr": "C5E0B3", "tt": "Green, Accent 6, Lighter 60%" },
        { "i": "31", "clr": "BFBFBF", "tt": "White, Background 1, Darker 25%" },
        { "i": "32", "clr": "3F3F3F", "tt": "Black, Text 1, Lighter 25%" },
        { "i": "33", "clr": "757070", "tt": "Gray-25%, Background 2, Darker 50%" },
        { "i": "34", "clr": "8496B0", "tt": "Blue-Gray, Text 2, Lighter 40%" },
        { "i": "35", "clr": "9CC3E5", "tt": "Blue, Accent 1, Lighter 40%" },
        { "i": "36", "clr": "F4B183", "tt": "Orange, Accent 2, Lighter 40%" },
        { "i": "37", "clr": "C9C9C9", "tt": "Gray-50%, Accent 3, Lighter 40%" },
        { "i": "38", "clr": "FFD965", "tt": "Gold, Accent 4, Lighter 40%" },
        { "i": "39", "clr": "8EAADB", "tt": "Blue, Accent 5, Lighter 40%" },
        { "i": "40", "clr": "A8D08D", "tt": "Green, Accent 6, Lighter 40%" },
        { "i": "41", "clr": "A5A5A5", "tt": "White, Background 1, Darker 35%" },
        { "i": "42", "clr": "262626", "tt": "Black, Text 1, Lighter 15%" },
        { "i": "43", "clr": "3A3838", "tt": "Gray-25%, Background 2, Darker 75%" },
        { "i": "44", "clr": "323F4F", "tt": "Blue-Gray, Text 2, Darker 25%" },
        { "i": "45", "clr": "2E75B5", "tt": "Blue, Accent 1, Darker 25%" },
        { "i": "46", "clr": "C55A11", "tt": "Orange, Accent 2, Darker 25%" },
        { "i": "47", "clr": "7B7B7B", "tt": "Gray-50%, Accent 3, Darker 25%" },
        { "i": "48", "clr": "BF9000", "tt": "Gold, Accent 4, Darker 25%" },
        { "i": "49", "clr": "2F5496", "tt": "Blue, Accent 5, Darker 25%" },
        { "i": "50", "clr": "538135", "tt": "Green, Accent 6, Darker 25%" },
        { "i": "51", "clr": "7F7F7F", "tt": "White, Background 1, Darker 50%" },
        { "i": "52", "clr": "0C0C0C", "tt": "Black, Text 1, Lighter 5%" },
        { "i": "53", "clr": "171616", "tt": "Gray-25%, Background 2, Darker 90%" },
        { "i": "54", "clr": "222A35", "tt": "Blue-Gray, Text 2, Darker 50%" },
        { "i": "55", "clr": "1E4E79", "tt": "Blue, Accent 1, Darker 50%" },
        { "i": "56", "clr": "833C0B", "tt": "Orange, Accent 2, Darker 50%" },
        { "i": "57", "clr": "525252", "tt": "Gray-50%, Accent 3, Darker 50%" },
        { "i": "58", "clr": "7F6000", "tt": "Gold, Accent 4, Darker 50%" },
        { "i": "59", "clr": "1F3864", "tt": "Blue, Accent 5, Darker 50%" },
        { "i": "60", "clr": "375623", "tt": "Green, Accent 6, Darker 50%" },
        { "i": "61", "clr": "C00000", "tt": "Dark Red" },
        { "i": "62", "clr": "FF0000", "tt": "Red" },
        { "i": "63", "clr": "FFC000", "tt": "Orange" },
        { "i": "64", "clr": "FFFF00", "tt": "Yellow" },
        { "i": "65", "clr": "92D050", "tt": "Light Green" },
        { "i": "66", "clr": "00B050", "tt": "Green" },
        { "i": "67", "clr": "00B0F0", "tt": "Light Blue" },
        { "i": "68", "clr": "0070C0", "tt": "Blue" },
        { "i": "69", "clr": "002060", "tt": "Dark Blue" },
        { "i": "70", "clr": "7030A0", "tt": "Purple" },
        { "i": "71", "clr": "NoFill", "tt": "NoFill" },
    { "i": "72", "clr": "929292", "tt": "Dark Gray 1" },
    { "i": "73", "clr": "CCC8C2", "tt": "Medium Gray 1" },
    { "i": "74", "clr": "DFE5ED", "tt": "Dark Blue 1" },
    { "i": "75", "clr": "EFF2F7", "tt": "Light Blue 1" },
    { "i": "76", "clr": "F9EDED", "tt": "Maroon 1" },
    { "i": "77", "clr": "F7F9F1", "tt": "Green 1" },
    { "i": "78", "clr": "F3F0F6", "tt": "Purple 1" },
    { "i": "79", "clr": "EEF8FA", "tt": "Aqua Blue 1" },
    { "i": "80", "clr": "FEFBF8", "tt": "Brown 1" },
    { "i": "81", "clr": "D8D8D8", "tt": "Light Gray 2" },
    { "i": "82", "clr": "7F7F7F", "tt": "Dark Gray 2" },
    { "i": "83", "clr": "BBB6AE", "tt": "Medium Gray 2" },
    { "i": "84", "clr": "C6D1DE", "tt": "Dark Blue 2" },
    { "i": "85", "clr": "D6DFEC", "tt": "Light Blue 2" },
    { "i": "86", "clr": "EFD3D2", "tt": "Maroon 2" },
    { "i": "87", "clr": "E6EDD7", "tt": "Green 2" },
    { "i": "88", "clr": "DFDBE7", "tt": "Purple 2" },
    { "i": "89", "clr": "D0EAF0", "tt": "Aqua Blue 2" },
    { "i": "90", "clr": "FCE6D4", "tt": "Brown 2" },
    { "i": "91", "clr": "BFBFBF", "tt": "Light Gray 3" },
    { "i": "92", "clr": "727272", "tt": "Dark Gray 3" },
    { "i": "93", "clr": "A29096", "tt": "Medium Gray 3" },
    { "i": "94", "clr": "8EA3BD", "tt": "Dark Blue 3" },
    { "i": "95", "clr": "ADC0D9", "tt": "Light Blue 3" },
    { "i": "96", "clr": "DFA7A5", "tt": "Maroon 3" },
    { "i": "97", "clr": "CDDCAF", "tt": "Green 3" },
    { "i": "98", "clr": "BFB2CF", "tt": "Purple 3" },
    { "i": "99", "clr": "A4D5E2", "tt": "Aqua Blue 3" },
    { "i": "100", "clr": "F9CDAA", "tt": "Brown 3" },
    { "i": "101", "clr": "A5A5A5", "tt": "Light Gray 4" },
    { "i": "102", "clr": "595959", "tt": "Dark Gray 4" },
    { "i": "103", "clr": "7D7974", "tt": "Medium Gray 4" },
    { "i": "104", "clr": "56769D", "tt": "Dark Blue 4" },
    { "i": "105", "clr": "84A1C6", "tt": "Light Blue 4" },
    { "i": "106", "clr": "CF7B79", "tt": "Maroon 4" },
    { "i": "107", "clr": "B5CB88", "tt": "Green 4" },
    { "i": "108", "clr": "9F8CB7", "tt": "Purple 4" },
    { "i": "109", "clr": "77C0D4", "tt": "Aqua Blue 4" },
    { "i": "110", "clr": "F7B580", "tt": "Brown 4" },
    { "i": "111", "clr": "8C8C8C", "tt": "Light Gray 5" },
    { "i": "112", "clr": "3F3F3F", "tt": "Dark Gray 5" },
    { "i": "113", "clr": "575551", "tt": "Medium Gray 5" },
    { "i": "114", "clr": "17365D", "tt": "Dark Blue 5" },
    { "i": "115", "clr": "456287", "tt": "Light Blue 5" },
    { "i": "116", "clr": "903C39", "tt": "Maroon 5" },
    { "i": "117", "clr": "758C48", "tt": "Green 5" },
    { "i": "118", "clr": "604C78", "tt": "Purple 5" },
    { "i": "119", "clr": "3B8194", "tt": "Aqua Blue 5" },
    { "i": "120", "clr": "7A4e28", "tt": "Brown 5" },
    { "i": "121", "clr": "C00000", "tt": "Dark Red" },
    { "i": "122", "clr": "FF0000", "tt": "Red" },
    { "i": "123", "clr": "FFC000", "tt": "Orange" },
    { "i": "124", "clr": "FFFF00", "tt": "Yellow" },
    { "i": "125", "clr": "92D050", "tt": "Light Green" },
    { "i": "126", "clr": "00B050", "tt": "Green" },
    { "i": "127", "clr": "00B0F0", "tt": "Light Blue" },
    { "i": "128", "clr": "0070C0", "tt": "Blue" },
    { "i": "129", "clr": "002060", "tt": "Dark Blue" },
    { "i": "130", "clr": "7030A0", "tt": "Purple" }

    ]
    }];

// Concatinating the two arrays 
ColorGridInputList = ColorGridInputList.concat(ColorGridInputList2016);

'use strict';
namespace('SIMS');

//Structure to hold Translators for Attribute Name and Value. These Translators are applied to convert attribute name and value to a user friendly string which is displayed in Click stream
SIMS.Translators = {

    Name: {
        DEFAULT : function (attrName){
            return SIMS.Translators.Name.BASIC(attrName);
        },

        BASIC : function (attrName) {
            attrName = attrName.split("_").map(function (currentValue, index) {
                return currentValue.toLowerCase().replace(/^([\w{1}])/g, function (match) {
                    return match.toUpperCase();
                });
            });

            return attrName.reduce(function (total, currentValue) {
                return  total? (total + " " + currentValue) : currentValue;
            });
        },

        NONE: function (attrName){
            return "";
        }
    },

    Value: {
        DEFAULT : function (attrValue){
            return SIMS.Translators.Value.NONE(attrValue);
        },

        BASIC: function (attrValue){
            var translatedValue = "";
            switch(typeof attrValue)
            {
                case "string":
                    translatedValue = SIMS.Translators.Value.STRING(attrValue);
                    break;

                case "object":
                    translatedValue = SIMS.Translators.Value.JSON(attrValue);
                    break;

                case "number":
                    translatedValue = SIMS.Translators.Value.NUMBER(attrValue);
                    break;

                case "boolean":
                    translatedValue = SIMS.Translators.Value.BOOL(attrValue);
                    break;

                default:
                    translatedValue = "";
                    break;
            }

            if(translatedValue.length>10)
            {
                translatedValue = translatedValue.slice(0,7) + "...";
            }

            return translatedValue;
        },

        NONE: function (attrValue){
            return "";
        },

        BOOL: function (attrValue){
            return attrValue.toString();
        },

        NUMBER: function (attrValue){
            return attrValue.toString();
        },

        INT: function (attrValue){
            return parseInt(attrValue).toString();
            },

        FLOAT: function (attrValue){
            return SIMS.Translators.Value.NUMBER(attrValue);
        },

        STRING: function (attrValue){
            return attrValue;
        },

        TEXT: function(attrValue){
            return SIMS.Translators.Value.STRING(attrValue);
        },

        JSON: function (attrValue) {
            return JSON.stringify(attrValue);
        }
    }
};
'use strict';
namespace("SIMS.Models");

SIMS.Models.Event = function () {
    this.EventID;
    this.EventName; //Friendly name
    this.EventDesc;
    this.ValidateMe;
    this.CloseMe;
    this.NextComp;
};

SIMS.Models.Attribute = function () {
    this.Name;
    this.Value;
    this.Type;
    this.ArgumentType;
    this.ValidateIt;
    var self = this;

    //Description - function to set both the name and value translators in tanslatorInfo obj.
    //Parameters -
    //nameTranslator - Either a function to translate the name of the attribute OR a string which will be returned everytime the translated name is asked.
    //valueTranslator - Either a function to translate the passed value of the attribute OR a string which will be returned everytime the translated value is asked.
    //Returns - None
    this.SetTranslators = function(nameTranslator, valueTranslator){
        this.TranslatorInfo.SetTranslators(nameTranslator, valueTranslator);
    };

    //Object which saves the information of the translators in a closure to prevent direct access to this data.
    //This is an internal class used by the attribute class to save the translation logic.
    this.TranslatorInfo = function () {
        var nameTranslator = SIMS.Translators.Name.DEFAULT,
            valueTranslator = SIMS.Translators.Value.DEFAULT;
        return {

            //Description - function to set the value of the internal variables kept for saving the translators.
            //Parameters -
            //nameTranslatorFn - translator for the name of the attribute.
            //valueTranslatorFn - translator for the value of the attribute.
            SetTranslators: function (nameTranslatorFn, valueTranslatorFn) {
                if (nameTranslatorFn && valueTranslatorFn) {
                    nameTranslator = nameTranslatorFn;
                    valueTranslator = valueTranslatorFn;
                }
                else {
                    GlobalLog("!!FAILURE!! SetTranslators method call thrown an exception - Name or Value translator not provided for " + self.Name + " attribute.");
                }
            },

            //Description - function to get the translated name of the attribute.
            //Parameters - None.
            //Returns - string
            GetNameTranslation: function(){
                return this.GetTranslation(self.Name, nameTranslator);
            },

            //Description - function to get the translated version of the attribute value passed in the function based on the translator saved in the attribute object.
            //Parameters - attrValue - the value of the attribute which is to be translated.
            //Returns - string
            GetValueTranslation: function(attrValue){
                var translatedValue = "";

                if(attrValue!=null)
                {
                    translatedValue = this.GetTranslation(attrValue, valueTranslator);
                }

                return translatedValue;
            },

            //Description - function to perform the translation operation.
            //Parameters - 
            //param - the value which is to be translated.
            //translator - logic to translate the value. Could be a function or a string.
            GetTranslation: function(param, translator){
                var translatedValue = "";

                if(typeof translator === "string")
                {
                    translatedValue = translator;
                }
                else if(typeof translator === "function")
                {
                    translatedValue = translator(param);//Make sure that the string value is returned in all cases
                    if(typeof translatedValue !== "string")
                    {
                        translatedValue = JSON.stringify(translatedValue);
                    }
                }

                return translatedValue;
            }
        };
    }();
    // Self invoking function to form a closure of values - nameTranslator, valueTranslator
};

SIMS.Models.ComponentRegistration = function () {
    //Array of Attributes
    this.Attributes = new jsDictionary();

    //Array of Events
    this.Events = new jsDictionary();

    //Array of EventDetails
    this.EventDetails = new jsDictionary();

    //Register Attribute Method
    this.RegisterAttribute = function (Name, DefaultValue, ArgumentType, validateIt) {
        var tmpAttr = new SIMS.Models.Attribute();
        tmpAttr.Name = Name;
        tmpAttr.Value = DefaultValue;
        tmpAttr.ArgumentType = ArgumentType;
        tmpAttr.ValidateIt = validateIt;
        //Add it to the Attributes Array
        this.Attributes.AddItem(tmpAttr.Name, tmpAttr);
        return tmpAttr; //Returning Attribute Object to Allow Chaining in BaseComponents' RegisterAttribute Function
    };

    //Edit Registered Attributes
    //Name - Key, Identifier of the registered component
    //newDefault - New Default Value. Pass this as null in case this value is not be changed
    //validateIt - New value of validateIt. Pass this as null in case this value is not be changed
    this.EditRegisterdAttribute = function (Name, newDefault, validateIt, dataType) {
        var existingAttr = null;
        var retVal = false;
        if (this.Attributes.ContainsKey(Name)) {
            existingAttr = this.Attributes.GetItem(Name);
            if (newDefault != null) {
                existingAttr.Value = newDefault;
                retVal = true;
            }
            if (validateIt != null) {
                existingAttr.ValidateIt = validateIt;
                retVal = true;
            }
            if(dataType != null){
                existingAttr.ArgumentType = dataType;
            }
        }
        return retVal;
    };

    //Register Event Method
    this.RegisterEvent = function (ID, Event, Desc) {
        var tempEvent = new Events();
        tempEvent.EventID = ID;
        tempEvent.EventName = Event;
        tempEvent.EventDesc = Desc;
        this.Events.AddItem(tempEvent.EventID, tempEvent);
    };

    //Register Event Method
    this.RegisterEventDetails = function (ID, eventName, eventDesc, validateMe, closeMe, nextComp) {
        var tempEventDetails = new SIMS.Models.Event();
        tempEventDetails.EventID = ID;
        tempEventDetails.EventName = eventName;
        tempEventDetails.EventDesc = eventDesc;
        tempEventDetails.ValidateMe = validateMe;
        tempEventDetails.CloseMe = closeMe;
        tempEventDetails.NextComp = nextComp;
        this.EventDetails.AddItem(ID, tempEventDetails);
    };

    this.Dispose = function () {
        this.Attributes.Dispose();
        this.Attributes = null;

        this.Events.Dispose();
        this.Events = null;

        this.EventDetails.Dispose();
        this.EventDetails = null;
    };
}

function Events() {
    this.EventID;
    this.EventName; //Friendly name
    this.EventDesc;
}

'use strict';
namespace("SIMS.Components");

//Enum for Tab stops in a dialog
SIMS.Components.TabGroup = {
    DIALOG_TABS: "DIALOG_TABS",
    DIALOG_BUTTONS: "DIALOG_BUTTONS",
    EMPTY_GROUP: "EMPTY_GROUP"
},

SIMS.Components.BaseComponent = Base.extend({// instance interface

    RegisteredComponent: null,
    $compWrapper: null,
    $thisCompElement: null,
    $thisBackgroundCurtain: null,
    keyControlMap: null,
    _compinfo: null,
    _compID: null,
    _controlGroups: null,
    _activeControlGroupId: null,
    _focusedControlGroupId: -1, //Contains Group ID of the Control which has focus. This is required to navigate TAB within this group
    _prevFocusedControlGroupID: -1,
    _controlWithFocus: null, //required for tracking control with focus
    CurrentCompInfo: null,
    AttributeSetName: "default",
    positionDim: {},
    contextMenuJson: null,
    bHasMultiAccessKey: false,
    bSupComponentHosted: false,

    metaKeyTranslationRequired: true,
    metaKeyExceptionList: null,


    dialogContainerCMTheme: undefined,
    currentTheme: SIMS.SharedData.ComponentThemes.OFFICE2013,
    frameIconPath: "",
    frameTitle: "",
    treatArrowKeysAsTabKey: true,
    failedAttrName: null,
    failedAttrValue: null,

    Initialize: function (CompInfo) {
        this.msgHandler = new MESSAGE_HANDLER();
        this.currentTheme = SIMS.SharedData.ComponentThemes.OFFICE2013;
        this.keyControlMap = new jsDictionary();
        this._controlGroups = new jsDictionary();
        this._activeControlGroupId = "1";
        this._focusedControlGroupId = this._prevFocusedControlGroupID = -1; //Default Focus to Tab Control 
        this._compinfo = CompInfo;
        this._compID = CompInfo["@id"];
        this.AttachComponentEvents(CompInfo, $("#" + (CompInfo["@id"])));
        this.RegisteredComponent = new SIMS.Models.ComponentRegistration();
        this.RegisterMe();
        this.sortControlGroupTabOrder();
        this.bindContextMenu();
        this.InitializeMetaKeyConfig();
    },

    //Function to provide exception list for META key translation
    InitializeMetaKeyConfig: function () {
        this.metaKeyTranslationRequired = true;
        this.metaKeyExceptionList = null;
    },

    //Test function to aid QA find dialogs with multi access keys
    testMultiAccessKey: function () {
        if (this.bHasMultiAccessKey) {
            alert("This component has multiple controls registered with a same Access Key. Please regression test 'Access key' handling for this component.");
        }
    },

    GenerateHTML: function () {
    },

    resetJSComponent: function () {
        this._compinfo = null;
        this._compID = null;
        this.CurrentCompInfo = null;
        this.AttributeSetName = "default";
        this._activeControlGroupId = "1";
        this._focusedControlGroupId = this._prevFocusedControlGroupID = -1; //Default Focus to Tab Control 
    },

    getControlGroup: function (groupId) {
        groupId = groupId == null || groupId.isEmpty() ? "1" : groupId;
        if (!this._controlGroups.ContainsKey(groupId)) {
            this._controlGroups.AddItem(groupId, new SIMS.Controls.ControlGroup(groupId, this));
        }
        return this._controlGroups.GetItem(groupId);
    },

    ResetToDefaultAttributes: function (compid) {

        if (this._compinfo.compType === "modaldialog" || this._compinfo.compType === "dialog" || this._compinfo.compType === "modalwindow") {
            var attrDictionary = this.RegisteredComponent.Attributes;
            var attributesList = attrDictionary.GetKeys();

            var nCount = attributesList.length;
            var attrVal = "";
            var attrName = "";


            for (var j = 0; j < nCount; j++) {
                attrName = attributesList[j];
                attrVal = attrDictionary.GetItem(attrName);
                 {
                    this.SetAttribute(compid, attrName, attrVal.Value);
                }                
            }
        }
    },

    getActiveControlGroup: function () {
        if (this._controlGroups.ContainsKey(this._activeControlGroupId)) {
            return this._controlGroups.GetItem(this._activeControlGroupId);
        }
    },

    setActiveControlGroup: function (groupId) {
        if (groupId != null && !groupId.isEmpty()) {
            this._activeControlGroupId = groupId;

            if (groupId === SIMS.Components.TabGroup.EMPTY_GROUP) {
                if (this._controlGroups.ContainsKey(SIMS.Components.TabGroup.DIALOG_TABS)) {
                    this.setFocusControlGroupID(SIMS.Components.TabGroup.DIALOG_TABS);
                }
                else if (this._controlGroups.ContainsKey(SIMS.Components.TabGroup.DIALOG_BUTTONS)) {
                    this.setFocusControlGroupID(SIMS.Components.TabGroup.DIALOG_BUTTONS);
                }
                else {
                    var keys = this._controlGroups.GetKeys();
                    this.setFocusControlGroupID(keys[0]);
                }
            }
            else {
                //this.setFocusControlGroupID(groupId);
            }
        }
    },

    //Function to get next control group 
    getNextFocusControlGroup: function () {
        //0 for Tab Index
        //10 for Dialog Ok Cancel Buttons
        if (this._focusedControlGroupId === SIMS.Components.TabGroup.DIALOG_TABS) {
            if (this._activeControlGroupId === SIMS.Components.TabGroup.EMPTY_GROUP) {
                if (this._controlGroups.ContainsKey(SIMS.Components.TabGroup.DIALOG_BUTTONS) && this._controlGroups.GetItem(SIMS.Components.TabGroup.DIALOG_BUTTONS).GetTabControlsCount() > 0) {
                    this.setFocusControlGroupID(SIMS.Components.TabGroup.DIALOG_BUTTONS);
                }
            }
            else {
                this.setFocusControlGroupID(this._activeControlGroupId);
            }
        }
        else if (this._focusedControlGroupId === this._activeControlGroupId) {
            if (this._controlGroups.ContainsKey(SIMS.Components.TabGroup.DIALOG_BUTTONS) && this._controlGroups.GetItem(SIMS.Components.TabGroup.DIALOG_BUTTONS).GetTabControlsCount() > 0) {
                this.setFocusControlGroupID(SIMS.Components.TabGroup.DIALOG_BUTTONS);
            }
            else if (this._controlGroups.ContainsKey(SIMS.Components.TabGroup.DIALOG_TABS)) {
                this.setFocusControlGroupID(SIMS.Components.TabGroup.DIALOG_TABS);
            }
        }
        else if (this._focusedControlGroupId === SIMS.Components.TabGroup.DIALOG_BUTTONS) {
            if (this._controlGroups.ContainsKey(SIMS.Components.TabGroup.DIALOG_TABS)) {
                this.setFocusControlGroupID(SIMS.Components.TabGroup.DIALOG_TABS);
            }
            else {
                if (this._activeControlGroupId != SIMS.Components.TabGroup.EMPTY_GROUP) {
                    this.setFocusControlGroupID(this._activeControlGroupId);
                }
            }
        }
    },

    //Function to get previous control group
    getPrevFocusControlGroup: function () {
        //0 for Tab Index
        //10 for Dialog Ok Cancel Buttons
        if (this._focusedControlGroupId === SIMS.Components.TabGroup.DIALOG_BUTTONS) {
            if (this._activeControlGroupId === SIMS.Components.TabGroup.EMPTY_GROUP) {
                if (this._controlGroups.ContainsKey(SIMS.Components.TabGroup.DIALOG_TABS)) {
                    this.setFocusControlGroupID(SIMS.Components.TabGroup.DIALOG_TABS);
                }
            }
            else {
                this.setFocusControlGroupID(this._activeControlGroupId);
            }
        }
        else if (this._focusedControlGroupId === this._activeControlGroupId) {
            if (this._controlGroups.ContainsKey(SIMS.Components.TabGroup.DIALOG_TABS)) {
                this.setFocusControlGroupID(SIMS.Components.TabGroup.DIALOG_TABS);
            }
            else if (this._controlGroups.ContainsKey(SIMS.Components.TabGroup.DIALOG_BUTTONS)) {
                this.setFocusControlGroupID(SIMS.Components.TabGroup.DIALOG_BUTTONS);
            }
        }
        else if (this._focusedControlGroupId === SIMS.Components.TabGroup.DIALOG_TABS) {
            if (this._controlGroups.ContainsKey(SIMS.Components.TabGroup.DIALOG_BUTTONS)) {
                this.setFocusControlGroupID(SIMS.Components.TabGroup.DIALOG_BUTTONS);
            }
            else {
                if (this._activeControlGroupId != SIMS.Components.TabGroup.EMPTY_GROUP) {
                    this.setFocusControlGroupID(this._activeControlGroupId);
                }
            }
        }
    },

    sortControlGroupTabOrder: function () {
        var keys = this._controlGroups.GetKeys();
        for (var count = 0; count < this._controlGroups.GetLength(); count++) {
            this._controlGroups.GetItem(keys[count]).SortTabOrder();
        }
    },

    setFocusControlGroupID: function (groupID) {
        if (this._controlGroups.ContainsKey(groupID)) {
            this._prevFocusedControlGroupID = this._focusedControlGroupId;
            this._focusedControlGroupId = groupID;
        }
    },

    DetachKeycodesFromControl: function (groupId, keyCodes, control) {
        if (keyCodes != null) {
            keyCodes = getArray(keyCodes);
        }

        var group = this.getControlGroup(groupId);

        if (keyCodes != null) {
            for (var i = 0; i < keyCodes.length; i++) {
                var key = keyCodes[i].toUpperCase();
                group.RemoveShortCut(key, getArray(control));
            }
        }
    },

    AttachKeycodesToControl: function (groupId, keyCodes, control, tabindex) {
        if (keyCodes != null) {
            keyCodes = getArray(keyCodes);
        }
        var group = this.getControlGroup(groupId);

        if (groupId === SIMS.Components.TabGroup.DIALOG_TABS) {
            this.setFocusControlGroupID(SIMS.Components.TabGroup.DIALOG_TABS);
        }
        else if (this._focusedControlGroupId === -1) {
            this.setFocusControlGroupID(groupId);
        }

        if (keyCodes != null) {
            for (var i = 0; i < keyCodes.length; i++) {
                var key = keyCodes[i].toUpperCase();
                group.AddShortCut(key, getArray(control));
            }
        }

        //Record Tab orders
        if (tabindex != -1) {
            group.AddTabOrder(control, tabindex);
        }

    },

    GetMetaKeyTranslation: function (shortcutName) {
        if (this.metaKeyTranslationRequired == true && shortcutName != null) {
            if (this.metaKeyExceptionList != null && this.metaKeyExceptionList[shortcutName] != null) {
                return this.metaKeyExceptionList[shortcutName];
            }
            else {
                return shortcutName.replace(/META/g, "CTRL");
            }
        }
        else {
            return shortcutName;
        }
    },

    HandleAccelaraterKey: function (e, desc) {
        console.log(this._compinfo.compName + ": " + desc.keyCombination + " pressed.  Component Type:" + this._compinfo.compType);
        var key = desc.keyCombination;

        var activeGroup = this.getActiveControlGroup();

        var bHandled = false;
        if (key.contains("ALT") || this.HandleAcceleratorKeysCondition() === true) {
            if (activeGroup != null) {
                bHandled = activeGroup.HandleShortCut(key);
            }

            //In case Active Group Does not handle this send to Dialog Buttons and then to Dialog Tabs        
            if (!bHandled && this._controlGroups.ContainsKey(SIMS.Components.TabGroup.DIALOG_BUTTONS)) {
                var groupDialogButton = this._controlGroups.GetItem(SIMS.Components.TabGroup.DIALOG_BUTTONS);
                bHandled = groupDialogButton.HandleShortCut(key);
            }
            if (!bHandled && this._controlGroups.ContainsKey(SIMS.Components.TabGroup.DIALOG_TABS)) {
                var groupTabButton = this._controlGroups.GetItem(SIMS.Components.TabGroup.DIALOG_TABS);
                bHandled = groupTabButton.HandleShortCut(key);
            }
        }

        if (bHandled == false) {

            if (this._compinfo.compType === "modaldialog" || this._compinfo.compType === "dialog" || this._compinfo.compType === "modalwindow") {

                if (this.HandleAcceleratorKeysCondition() === true) {
                    bHandled = true;
                }

                if (e.altKey && e.which === 115) {//ALT+F4  
                    bHandled = true;
                    this.CloseBtnEventLogger(9998, "ALT+F4 Pressed to Cancel Dialog", "ALT+F4");
                }
            }
        }

        return bHandled;
    },

    HandleAcceleratorKeysCondition: function () {
        return true;
    },

    HandleStandardKey: function (e, desc) {
        console.log(this._compinfo.compName + ": " + desc.keyCombination + " pressed.  Component Type:" + this._compinfo.compType);
        var key = desc.keyCombination;

        var bHandled = false;

        if (this._compinfo.compType === "modaldialog" || this._compinfo.compType === "dialog" || this._compinfo.compType === "modalwindow") {
            bHandled = true;
            if (e.which == 13) {
                if (this.frameTitle && this.frameTitle !== "") {
                    this.LogComponentEvent(9997, this.frameTitle + " Dialog : Enter Key Pressed to Confirm Dialog");
                }
                else {
                    this.LogComponentEvent(9997, "Enter Key Pressed to Confirm Dialog");
                }

            }
            else if (e.which == 27) {
                this.CloseBtnEventLogger(9998, "Escape Key Pressed to Cancel Dialog", "ESCAPE");
            }
            else if (e.altKey && e.which === 115) {//ALT+F4            
                this.CloseBtnEventLogger(9998, "ALT+F4 Pressed to Cancel Dialog", "ALT+F4");
            }
            else if (e.which == 32) { //SPACE
                if (desc.keyCombination === "ALT+SPACE" && (this._compinfo.compType === "modaldialog" || this._compinfo.compType === "dialog")) {
                    bHandled = true;
                    this.$compWrapper.find('div.DragHandle').showContextMenu(this._compID + "_menu");
                }
                else {
                    bHandled = false;
                }
            }

        }

        return bHandled;
    },

    /*
    *	Base handling of Tab key using Control Group Data Structure maintained by this class 
    */
    HandleTabKey: function (e, desc) {
        //Log Key Information to Console
        console.log(this._compinfo.compName + ": " + desc.keyCombination + " pressed.  Component Type:" + this._compinfo.compType);
        var key = desc.keyCombination;

        //Do nothing in case focusgroupID is not set.
        if (this._focusedControlGroupId === -1) {
            return false;
        }

        var groupWithFocus = this._controlGroups.GetItem(this._focusedControlGroupId);
        var groupChanged = false;

        if (key === "TAB" || (this.treatArrowKeysAsTabKey == true && (key === "DOWN" || key === "RIGHT"))) {
            if (groupWithFocus.isLastControlInFocus()) {
                groupChanged = true;
                this.getNextFocusControlGroup();
            }
            groupWithFocus = this._controlGroups.GetItem(this._focusedControlGroupId);
            //De-focalize old control
            if (this._controlWithFocus != null) {
                this._controlWithFocus.focalize(false);
            }
            //Focalize Current Control
            if (groupChanged === true) //Added for SIMS-112517 - For the case When Previous Group is Tab Controls Then also fetch the next control. Prior to this fix a fix was done which was not complete and caused regression SIMS-117642. 
            {
                groupWithFocus = this.GetUpdatedFocusControlGroup(groupWithFocus, true);
                this._controlWithFocus = groupWithFocus.setFirstControlAsFocused();
            }
            else {
                this._controlWithFocus = groupWithFocus.getNextTabControl();
            }
            this._controlWithFocus.focalize(true);
        }
        else if (key === "SHIFT+TAB" || (this.treatArrowKeysAsTabKey == true && (key === "LEFT" || key === "UP"))) {
            if (groupWithFocus.isFirstControlInFocus()) {
                groupChanged = true;
                this.getPrevFocusControlGroup();
            }
            groupWithFocus = this._controlGroups.GetItem(this._focusedControlGroupId);
            //De-focalize old control
            if (this._controlWithFocus != null) {
                this._controlWithFocus.focalize(false);
            }

            //Focalize Current Control
            if (groupChanged === true) //Added for SIMS-112517 - For the case When Previous Group is Tab Controls Then also fetch the next control. Prior to this fix a fix was done which was not complete and caused regression SIMS-117642. 
            {
                groupWithFocus = this.GetUpdatedFocusControlGroup(groupWithFocus, false);
                this._controlWithFocus = groupWithFocus.setLastControlAsFocused();
            }
            else {
                this._controlWithFocus = groupWithFocus.getPrevTabControl();
            }
            this._controlWithFocus.focalize(true);
        }
        return true;
    },

    GetUpdatedFocusControlGroup: function (currentGroupWithFocus, bNext) {
        return currentGroupWithFocus;
    },

    GetAttributeValueFromASet: function (attrName, attrSet, defaultSet, customSets) {
        var retValue = null;
        var attrArray = null;

        if (attrSet === "default" || SIMS.Objects.Utils.IsObjectDefined(attrSet) == false) {
            if (SIMS.Objects.Utils.IsObjectDefined(defaultSet) && SIMS.Objects.Utils.IsObjectDefined(defaultSet.attr)) {
                attrArray = getArray(defaultSet.attr);
                retValue = this.GetArrtibuteValueFronAttributeArray(attrArray, attrName);
            }
        }
        else {

            if (SIMS.Objects.Utils.IsObjectDefined(customSets) && SIMS.Objects.Utils.IsObjectDefined(customSets.attributeset)) {

                var attributesetArray = getArray(customSets.attributeset);

                var attributeset = attributesetArray.findSingle("@name", attrSet);

                if (SIMS.Objects.Utils.IsObjectDefined(attributeset) && SIMS.Objects.Utils.IsObjectDefined(attributeset.attr)) {
                    attrArray = getArray(attributeset.attr);
                    retValue = this.GetArrtibuteValueFronAttributeArray(attrArray, attrName);

                    if (retValue == null) {
                        if (attributeset["@inherits-default"] == "true") {
                            retValue = this.GetAttributeValueFromASet(attrName, "default", defaultSet, customSets);
                        }
                    }
                }
                else if (attrSet === "reset") {
                    retValue = this.GetAttributeValueFromASet(attrName, "default", defaultSet, customSets);
                }
            }
            else if (attrSet === "reset") {
                retValue = this.GetAttributeValueFromASet(attrName, "default", defaultSet, customSets);
            }
        }

        return retValue;
    },

    GetArrtibuteValueFronAttributeArray: function (attrArray, attrName) {
        var retValue = null;
        if (attrArray != null) {
            var attrNode = attrArray.findSingle("@name", attrName);
            if (attrNode != null) {
                retValue = attrNode["@value"];
            }
        }
        return retValue;
    },

    GetFinalAttributeValue: function (attrName, attrSet) {
        var checkValue = null;

        var Compinfo = this._compinfo;

        checkValue = this.GetAttributeValueFromASet(attrName, attrSet, Compinfo.finalattrs, Compinfo.finalattributesets);

        if (checkValue == null) {
            checkValue = this.GetAttributeValueFromASet(attrName, this.AttributeSetName, Compinfo.initialattrs, Compinfo.initialattributesets);
        }


        if (checkValue == null) {
            var currentAttribute = this.RegisteredComponent.Attributes.GetItem(attrName);
            checkValue = currentAttribute.Value;
        }

        return checkValue;
    },

    ValidateAttributes: function (attributes, attrSet) {
        //Resetting the member variables before starting the validation to clear the information saved in the previously performed validations.
        this.SaveFailedAttribute(null, null);

        for (var i = 0; i < attributes.length; i++) {
            var attrName = attributes[i];
            var currentAttribute = this.RegisteredComponent.Attributes.GetItem(attrName);

            if (currentAttribute.ValidateIt === true) {
                var checkValue = this.GetFinalAttributeValue(attrName, attrSet).toString();
                console.log("Pre GetAttribute('" + attrName + "')");
                //var finalValue = currentAttribute.Handler.GetAttribute(this._compID, attrName).toString();
                var finalValue = this.GetAttribute(this._compID, attrName).toString();
                console.log("GetAttribute('" + attrName + "') returned " + finalValue);
                console.log("Validating " + attrName + " " + checkValue + "==" + finalValue);
                if (!this.EqualsValidator(checkValue, finalValue, currentAttribute.ArgumentType)) {

                    //Filling the information of the failed attribute in the member variables.
                    //Code only comes in this block when the validation of a attribute fails.
                    this.SaveFailedAttribute(attrName, finalValue);
                    return false;
                }
            }
        }
        return true;
    },

    //Description -
    //Below function is called by the simplayer to get the incomplete action clickstream from the component.
    //It then delegates the work to fetch different parts of the information to it's internal functions.
    //After getting the output of all the internal functions, it combines the information into one single
    //string in a specific format and return it to the SIMPlayer.
    //Parameters -
    //attrName - Name of the attribute whose incomplete action string is needed to be generated.
    //attrValue - Value of the attribute at the time of validation.
    //Return Value -
    //Final string to be reported in the Clickstream.
    GetIncompleteActionSuffix: function (attrName, attrValue) {
        var retStr = "";

        if (attrName == null) {
            attrName = this.failedAttrName;
        }

        if (attrName) {
            if (attrValue == null) {
                attrValue = this.failedAttrValue;
            }

            var attrObj = this.GetAttributeObject(attrName);

            var translatedName = this.GetNameTranslation(attrObj);
            var translatedValue = this.GetValueTranslation(attrValue, attrObj);

            if (translatedName || translatedValue) {
                retStr = " - ";
                if (translatedName) {
                    retStr += translatedName;
                }

                if (translatedValue) {
                    retStr += translatedName ? ": " + translatedValue : translatedValue;
                }
            }
        }

        return retStr;
    },

    //Description - function to get the translated version of the attribute name passed.
    //Parameters -
    //attrObj - the reference of the attribute object.
    //Returns - Translated String for Attribute name
    GetNameTranslation: function (attrObj) {
        var tranalatedName = "";
        if (attrObj) {
            tranalatedName = attrObj.TranslatorInfo.GetNameTranslation();
        }
        return tranalatedName;
    },

    //Description - function to get the translated version of the attribute value passed.
    //Parameters -
    //attrValue - value of the attribute which is to be translated.
    //attrObj - reference of the attribute object.
    //Returns - Translated String for Attribute Value
    GetValueTranslation: function (attrValue, attrObj) {
        var translatedValue = "";
        if (attrObj) {
            translatedValue = attrObj.TranslatorInfo.GetValueTranslation(attrValue);
        }
        return translatedValue;
    },

    //Description - Allows adding Click Stream Information to an Attribute
    //Parameters -
    //attrName - Name of the attribute
    //nameTranslator - Either a predefined function in SIMS.Translators.Name OR definition of function OR a string
    //valueTranslator - Either a predefined function in SIMS.Translators.Value OR definition of function OR a string
    //Returns - None
    SetAttrTranslators: function (attrName, nameTranslator, valueTranslator) {
        var attrObj = this.GetAttributeObject(attrName);
        if (attrObj) {
            attrObj.SetTranslators(nameTranslator, valueTranslator);
        }
    },

    //Description - Wrapper function to keep the code of getting the reference of the attribute object at one place.
    //Parameters - attrName - name of the attribute whose reference is needed from the attribute object.
    GetAttributeObject: function (attrName) {
        var attrObj = null;
        if (attrName) {
            attrObj = this.RegisteredComponent.Attributes.GetItem(attrName);
        }
        return attrObj;
    },

    SaveFailedAttribute: function(attrName, attrValue){
        this.failedAttrName = attrName;
        this.failedAttrValue = attrValue;
    },

    ValidateAttributesFromAnySet: function (attributes) {
        var bReturnValue = false;

        if (this.ValidateAttributes(attributes, "default")) {
            bReturnValue = true;
        }
        else {
            var bContinueLoop = true;

            if (SIMS.Objects.Utils.IsObjectDefined(this._compinfo.finalattributesets) && SIMS.Objects.Utils.IsObjectDefined(this._compinfo.finalattributesets.attributeset)) {

                var attributesetArray = getArray(this._compinfo.finalattributesets.attributeset);

                var attributesetCount = attributesetArray.length;

                for (var i = 0; i < attributesetCount; i++) {

                    if (bContinueLoop && SIMS.Objects.Utils.IsObjectDefined(attributesetArray[i].attr)) {

                        var attrSet = attributesetArray[i]["@name"];

                        if (this.ValidateAttributes(attributes, attrSet)) {
                            bContinueLoop = false;
                            bReturnValue = true;
                            i = attributesetCount;
                            break;
                        }
                    }
                }
            }
        }
        return bReturnValue;
    },

    ValidateOnlyFinalAttributes: function (attrSet) {
        var attributesToBeValidated = this.getFinalAttributeArray(attrSet);
        return this.ValidateAttributes(attributesToBeValidated, attrSet);
    },

    getFinalAttributeArray: function (attrSet) {
        var finalAttrArray = [];
        if (attrSet == "default" || SIMS.Objects.Utils.IsObjectDefined(attrSet) == false) {
            var finalAttrs = this._compinfo.finalattrs != null ? getArray(this._compinfo.finalattrs.attr) : [];

            for (var i = 0; i < finalAttrs.length; i++) {
                finalAttrArray.push(finalAttrs[i]["@name"]);
            }
        }
        else if (SIMS.Objects.Utils.IsObjectDefined(this._compinfo.finalattributesets) && SIMS.Objects.Utils.IsObjectDefined(this._compinfo.finalattributesets.attributeset)) {

            var attributesetArray = getArray(this._compinfo.finalattributesets.attributeset);

            var attributeset = attributesetArray.findSingle("@name", attrSet);

            if (SIMS.Objects.Utils.IsObjectDefined(attributeset.attr)) {
                var finalAttrs = getArray(attributeset.attr);

                for (var i = 0; i < finalAttrs.length; i++) {
                    finalAttrArray.push(finalAttrs[i]["@name"]);
                }
            }
        }
        return finalAttrArray;
    },

    Validate: function (validationMode, attrSet) {
        var attributesToBeValidated = this.RegisteredComponent.Attributes;
        if (this.AttrSetInheritsDefault(attrSet)) {
            return this.ValidateAttributes(attributesToBeValidated.itemArray, attrSet);
        }
        else {
            return this.ValidateOnlyFinalAttributes(attrSet);
        }
    },

    AttrSetInheritsDefault: function (attrSet) {
        var bRetValue = true;

        if (SIMS.Objects.Utils.IsObjectDefined(this._compinfo.finalattributesets) && SIMS.Objects.Utils.IsObjectDefined(this._compinfo.finalattributesets.attributeset)) {

            var attributesetArray = getArray(this._compinfo.finalattributesets.attributeset);

            var attributeset = attributesetArray.findSingle("@name", attrSet);

            if (SIMS.Objects.Utils.IsObjectDefined(attributeset) && attributeset["@inherits-default"] == "false") {
                bRetValue = false;
            }
        }

        return bRetValue;
    },

    EqualsValidator: function (leftVal, rightVal, dataType) {
        var retValue = false;
        if (leftVal != null && rightVal != null) {

            if (dataType === undefined || dataType === null) {
                dataType = "text";
            }

            dataType = dataType.toLowerCase();
            leftVal = leftVal.toString();
            rightVal = rightVal.toString();

            //Adding checks for integer and float if value is empty string..

            switch (dataType) {
                case "bool":
                case "ignorecase":
                    leftVal = leftVal.toLowerCase();
                    rightVal = rightVal.toLowerCase();
                    break;
                case "int":
                    leftVal = leftVal === "" ? leftVal : parseInt(leftVal);
                    rightVal = rightVal === "" ? rightVal : parseInt(rightVal);
                    break;
                case "number":
                case "float":
                    leftVal = leftVal === "" ? leftVal : parseFloat(leftVal);
                    rightVal = rightVal === "" ? rightVal : parseFloat(rightVal);
                    break;

                case "stringinarray-ignorecase":
                    leftVal = leftVal.toLowerCase();
                    rightVal = rightVal.toLowerCase();
                case "stringinarray":
                    var allowedVals;
                    try {
                        allowedVals = JSON.parse(leftVal);
                    }
                    catch (ex) {    //JSON parse failed, so do string comparison
                        break;
                    }

                    if (Array.isArray(allowedVals)) {   //if not an Array, then do string comparison
                        if (allowedVals.indexOf(rightVal) !== -1) {
                            retValue = true;
                        }
                        return retValue;
                    }
                    break;

                case "text":
                case "string":
                case "file":
                case "json":
                default:
                    break;
            }

            if (leftVal === rightVal) {
                retValue = true;
            }
        }

        return retValue;
    },

    LoadCompAssets: function (compid) {
        var url = "ServerCode/SIM5Service.ashx?Method=GetComponentAssets&compId=" + compid;
        var strRet = SIMS.Objects.DataLayer.AjaxCall(url, "GET");
        var assetJSON = JSON.parse(strRet);
        var assetAr = getArray(assetJSON.assets.asset);
        $.each(assetAr, function (i, v) {
            loadjscssfile(v["@path"], v["@type"]);
        });
    },

    RegisterAttribute: function (Name, DefaultValue, ArgumentType, ValidateIt) {
        if (ValidateIt == null) {
            ValidateIt = true;
        }

        return this.RegisteredComponent.RegisterAttribute(Name, DefaultValue, ArgumentType, ValidateIt);
    },

    RegisterEvent: function (ID, Event, Desc, validateMe, closeMe, nextComp) {
        this.RegisteredComponent.RegisterEvent(ID, Event, Desc);
        this.RegisteredComponent.RegisterEventDetails(ID, Event, Desc, validateMe, closeMe, nextComp);
    },

    HandleKeyCombinations: function (event) {
        return true;
    },

    LogComponentEventWithDelay: function (eventId, desc, bSafe) {
        var self = this;

        setTimeout(function () {
            self.LogComponentEvent(eventId, desc, bSafe);
        }, 100);
    },

    LogClickStreamInfo: function (desc) {
        if (desc != null && desc.trim() != "") {
            console.log("LogClickStreamInfo - " + this._compinfo.compName + ": " + desc);
            SEND_MESSAGE("COMP_ACTION", new SIMEventArgs(this._compID, 0, "Clickstream", desc, null, this._compinfo.compName), this.msgHandler);
        }
    },

    AddComponentUI: function (CompInfo, sHtml) {
        var $componentdiv = this.$thisCompElement = $(sHtml);
        $componentdiv.attr('id', CompInfo["@id"]);
        var $ComponentFrame = this.GetComponentFrame(CompInfo, $componentdiv);
        this.CreateModalDialogCurtain(CompInfo);
        this.$compWrapper = $ComponentFrame;
        SIMS.Objects.DOMElements.SIMArea.append($ComponentFrame);
    },

    Dispose: function () {
        if (this.RegisteredComponent != null) {
            this.RegisteredComponent.Dispose();
            this.RegisteredComponent = null;
        }

        if (this._controlGroups != null) {
            this._controlGroups.Dispose();
            this._controlGroups = null;
        }

        if (this.keyControlMap != null) {
            this.keyControlMap.Dispose();
            this.keyControlMap = null;
        }

        /*
        if (this.$compWrapper != null) {
        this.$compWrapper.remove();
        this.$compWrapper = null;
        }
        */

        this.$compWrapper = null;
        this.$thisCompElement = null;
        this.$thisBackgroundCurtain = null;

        this._compinfo = null;
        this._compID = null;
        this._activeControlGroupId = null;
        this._focusedControlGroupId = -1;
        this._prevFocusedControlGroupID = -1;
        this._controlWithFocus = null;
        this.CurrentCompInfo = null;
        this.AttributeSetName = "default";
        this.positionDim = {};
        this.contextMenuJson = null;

        this.bSupComponentHosted = false;
    },

    DisposeTask: function () {
        //this.RegisteredComponent.Dispose();
        //delete this.RegisteredComponent;
    },

    CreateModalDialogCurtain: function (CompInfo) {
        if (CompInfo.compType == "modaldialog" || CompInfo.compType == "modalwindow") {
            var curSimframeheight = gSimsAreaHeight;
            this.$thisBackgroundCurtain = $("<div id='BackroundCurtain_" + CompInfo["@id"] + "' class='BackroundCurtain' style='height:" + gSimsAreaHeight + "px;width:" + gSimsAreaWidth + "px;'></div>");
            SIMS.Objects.DOMElements.SIMArea.append(this.$thisBackgroundCurtain);
        }
        else {
            this.$thisBackgroundCurtain = null;
        }
    },

    GetComponentFrame: function (CompInfo, $componentdiv) {
        var $Frame = null;

        switch (CompInfo.compType) {
            case "dialog":
                $Frame = $("<div class='ComponentFrame DialogFrame' style='display:none;'><div class='InnerDlgFrame'><div class='DragHandle'><div class='HeaderTop'><img alt='' class='frameIcon' src=''/><div class='DlgButtonGroup'><div class='HelpImage' title='Help'/><div class='CloseImage' title='Close'/></div><div class='CompNameContainer'><span class='CompName'>Component Name</span></div></div></div><div class='ContainerDiv'></div></div></div>");
                break;
            case "modaldialog":
                $Frame = $("<div class='ComponentFrame DialogFrame' style='display:none;'><div class='InnerDlgFrame'><div class='DragHandle'><div class='HeaderTop'><img alt='' class='frameIcon' src=''/><div class='DlgButtonGroup'><div class='HelpImage' title='Help'/><div class='CloseImage' title='Close'/></div><div class='CompNameContainer'><span class='CompName'>Component Name</span></div></div></div><div class='ContainerDiv'></div></div></div>");
                break;
            case "simple":
                $Frame = $("<div class='ComponentFrame SimpleFrame' style='display:none;'><div class='ContainerDiv'></div></div>");
                break;
            default:
                $Frame = $("<div class='ComponentFrame SimpleFrame' style='display:none;'><div class='ContainerDiv'></div></div>");
                break;
        }

        // attach events to frame
        this.AttachFrameEvents(CompInfo, $Frame);

        // Set frame icon
        this.frameIconPath = this.GetIconPath();
        if (this.frameIconPath != "" && this.frameIconPath != null) {
            $Frame.find(".frameIcon").attr("src", this.frameIconPath);
            $Frame.find(".frameIcon").show();
        }
        else {
            this.frameIconPath = "";
            $Frame.find(".frameIcon").hide();
        }

        // Set help icon visibility
        if (this.GetHelpButtonVisibility() == true) {
            $Frame.find(".HelpImage").show();
        }
        else {
            $Frame.find(".HelpImage").hide();
        }

        // Set help icon visibility
        if (this.GetCloseButtonVisibility() == true) {
            $Frame.find(".CloseImage").show();
        }
        else {
            $Frame.find(".CloseImage").hide();
        }

        $Frame.find(".ContainerDiv").append($componentdiv);

        return $Frame;
    },

    // Override this function to return the path of the icon
    GetIconPath: function () {
        return null;
    },

    // Override this function to hide the help button
    GetHelpButtonVisibility: function () {
        return true;
    },

    GetCloseButtonVisibility: function () {
        return true;
    },
    // Override this function to set focus
    SetFocus: function (compinfo) {
        var $thisComp = $("#" + compinfo["@id"]);
        $thisComp.focus();

        //Default Handling
        if (this._controlGroups.ContainsKey(SIMS.Components.TabGroup.DIALOG_TABS)) {
            this.setFocusControlGroupID(SIMS.Components.TabGroup.DIALOG_TABS)
        }
        else {
            var keys = this._controlGroups.GetKeys();
            this.setFocusControlGroupID(keys[0]);
        }
    },

    LoseFocus: function () {
        this._focusedControlGroupId = -1;
        this._controlWithFocus = null;
    },

    GetCompMetadata: function (compName) {
        var url = "ServerCode/SIM5Service.ashx?Method=GetComponentMetadata&compName=" + compName;
        var strRet = SIMS.Objects.DataLayer.AjaxCall(url, "GET");
        return strRet;
    },


    AttachFrameEvents: function (CompInfo, $Frame) {
        var self = this;

        switch (CompInfo.compType) {
            case "dialog":

                $Frame.draggable({ containment: ".SIMArea", handle: "div.DragHandle" });

                $Frame.find(".HelpImage").mousedown(function () {
                    $(this).addClass("HelpImageClicked");
                });
                $Frame.find(".HelpImage").mouseup(function () {
                    $(this).removeClass("HelpImageClicked");
                });

                $Frame.find(".CloseImage").mousedown(function () {
                    $(this).addClass("CloseImageClicked");
                });
                $Frame.find(".CloseImage").mouseup(function () {
                    $(this).removeClass("CloseImageClicked");
                });

                $Frame.find(".HeaderTop").mouseup(function () {
                    $(this).css("cursor", "auto");
                });
                $Frame.find(".CloseImage").click(function () {
                    // send canceled message - it will be a safe event
                    // JW 2013-12-16 Cancel is not a safe event, it is being treated as unsafe if it is fired from any place except close button. It should be unsafe for close button as well.
                    //var currentCompInfo = $(this).parents(".ComponentFrame").find(".compDiv").data("compinfo");
                    self.CloseBtnEventLogger(9998, "Close button clicked on the dialog title bar to Cancel Dialog");
                    //SEND_MESSAGE("COMP_ACTION", new SIMEventArgs(currentCompInfo["@id"], 9998, "cancel", currentCompInfo.compName + " closed.", null, currentCompInfo.compName));
                });
                break;
            case "modaldialog":

                $Frame.draggable({ containment: ".SIMArea", handle: "div.DragHandle" });

                $Frame.find(".HelpImage").mousedown(function () {
                    $(this).addClass("HelpImageClicked");
                });
                $Frame.find(".HelpImage").mouseup(function () {
                    $(this).removeClass("HelpImageClicked");
                });

                $Frame.find(".CloseImage").mousedown(function () {
                    $(this).addClass("CloseImageClicked");
                });
                $Frame.find(".CloseImage").mouseup(function () {
                    $(this).removeClass("CloseImageClicked");
                });

                $Frame.find(".HeaderTop").mouseup(function () {
                    $(this).css("cursor", "auto");
                });
                $Frame.find(".CloseImage").click(function () {
                    // send canceled message - it will be a safe event
                    // JW 2013-12-16 Cancel is not a safe event, it is being treated as unsafe if it is fired from any place except close button. It should be unsafe for close button as well.
                    //var currentCompInfo = $(this).parents(".ComponentFrame").find(".compDiv").data("compinfo");
                    self.CloseBtnEventLogger(9998, "Close button clicked on the dialog title bar to Cancel Dialog");
                    //SEND_MESSAGE("COMP_ACTION", new SIMEventArgs(currentCompInfo["@id"], 9998, "cancel", currentCompInfo.compTitle + " dialog closed.", null, currentCompInfo.compName));
                });
                break;
            default:
                break;
        }

        var $compIcon = $Frame.find(".frameIcon");
        if ($compIcon.length > 0) {
            $compIcon.on('dblclick', function (e) {
                self.CloseBtnEventLogger(9998, "Dialog Icon double clicked to Cancel Dialog");
                fireContextMenuHide();
                e.stopPropagation();
            });

            var compID = CompInfo["@id"];
            $compIcon.attr('id', compID + '_frameicon');
            this.setContextMenuJson();
            var json = self.setIconJson();

            $compIcon.addContextMenu(compID + "_iconmenu", json, self.iconContextMenuHandler, self, self.dialogContainerCMTheme);

            $compIcon.on('click', function (evt) {
                var $compIcon = $(this);
                self.positionDim.targetXPos = $compIcon.offset().left;
                self.positionDim.targetYPos = $compIcon.offset().top;
                self.positionDim.targetHeight = $compIcon.height() + 9;
                self.positionDim.targetWidth = -3;
                $compIcon.showContextMenu(compID + "_iconmenu");
            });
        }
        return $Frame;
    },

    bindContextMenu: function () {
        this.setContextMenuJson();
        if (this.contextMenuJson != null) {
            if (this._compinfo.compType === "modaldialog" || this._compinfo.compType === "dialog") {
                var $frame = this.$compWrapper.find('div.DragHandle');
                $frame.attr('id', this._compID + '_cm');

                $frame.addContextMenu(this._compID + "_menu", this.contextMenuJson, this.contextMenuHandler, this, this.dialogContainerCMTheme);

                $frame.find('.DlgButtonGroup').contextmenu(function (e) {
                    e.stopPropagation();
                    e.preventDefault();
                });
            }
        }
    },

    setIconJson: function () {

        var iconMenuJson = {

            "move": { "name": "Move",
                "icon": {},
                "eventId": "",
                "accesskey": "",
                "desc": "Move Clicked",
                "tooltip": "",
                "disabled": false,
                "listWidth": "140"
            },
            "close": { "name": "<b>Close&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alt+F4</b>",
                "icon": { "img": "assets/ComponentFrame/img/close.png", "bgPos": "3px 6px" },
                "eventId": "9998",
                "accesskey": "C",
                "desc": "Close Clicked",
                "tooltip": "",
                "disabled": false
            }
        };
        return iconMenuJson;
    },

    setContextMenuJson: function () {
        this.contextMenuJson = this.setIconJson();
    },

    iconContextMenuHandler: function (args) {
        var responseEvent = args[1];
        switch (responseEvent.type) {
            case callBackType.CALLBACK_ON_SELECTION:
                this.FireEventOnMenuItemClick(responseEvent);
                break;
            case callBackType.CUSTOMIZATION_REQUEST:
                //                console.log("in CUSTOMIZATION_REQUEST");
                var originalMenuId = responseEvent.menuId;
                var customizationResponse = {
                    posDim: {// Position and Dimensions of target element (new target element, eg. a single cell in case of excel)
                        x: this.positionDim.targetXPos,
                        y: this.positionDim.targetYPos,
                        targetH: this.positionDim.targetHeight,
                        targetW: this.positionDim.targetWidth
                    }
                };

                return customizationResponse;
               // break;

            default: break;
        }
    },

    contextMenuHandler: function (args) {
        var currentTargetElement = args[0];
        var responseEvent = args[1];
        switch (responseEvent.type) {
            case callBackType.CALLBACK_ON_SELECTION:
                this.FireEventOnMenuItemClick(responseEvent);
                break;

            case callBackType.CUSTOMIZATION_REQUEST:
                var originalMenuId = responseEvent.menuId;
                //This positioning of the dialog header context is done to support the custom position of
                //context menu on pressing ALT+SPACE.
                var customizationResponse = {
                    posDim: {
                        x: currentTargetElement.offset().left - currentTargetElement.width() + 7,
                        y: currentTargetElement.offset().top,
                        targetW: currentTargetElement.width(),
                        targetH: currentTargetElement.height()
                    }
                };

                return customizationResponse;
               // break;

            default: break;
        }
    },

    FireEventOnMenuItemClick: function (responseEvent) {
        var eventId = responseEvent.id;
        var eventDesc = responseEvent.desc;
        if (eventId != null && eventId != "")
            this.LogComponentEvent(eventId, eventDesc);
    },

    SetAttribute: function (compid, attrName, attrValue) {
    },

    GetAttribute: function (compid, attrName) {
        return "";
    },

    SetCompInfo: function (compinfo) {
        this._compinfo = compinfo;
    },

    SetCompState: function (compinfo) {
        var self = this;
        var $thisComp = $("#" + compinfo["@id"]);
        $thisComp.data("compinfo", compinfo);

        var $CompFrame = this.$compWrapper; // $thisComp.parents(".ComponentFrame");

        var SimsAreaHeight = SIMS.Objects.DOMElements.SIMArea.height();
        var SimsAreaWidth = SIMS.Objects.DOMElements.SIMArea.width();

        this.frameTitle = compinfo.compTitle;
        // set component name
        $CompFrame.find(".CompName").html(compinfo.compTitle);
        if (compinfo.sizeandpos != undefined) {
            if (compinfo.sizeandpos.attr != null) {
                var attrAr = getArray(compinfo.sizeandpos.attr);
                var attrArLen = attrAr.length;
                for (var i = 0; i < attrArLen; i++) {
                    //$.each(attrAr, function (i, v) {
                    //var attr = v;
                    var attr = attrAr[i];
                    var name = attr["@name"];
                    switch (name) {
                        case "height":
                            switch (compinfo.compType) {
                                case "dialog":
                                case "modaldialog":
                                    var ht = self.GetAttribute(compinfo["@id"], "COMP_HEIGHT");
                                    if (ht != "") {
                                        $thisComp.css("height", ht + "px");
                                    }
                                    else {
                                        $thisComp.css("height", attr["@value"] == "*" ? "100%" : attr["@value"] + "px");
                                    }

                                    $CompFrame.css("top", ((SimsAreaHeight - $thisComp.height() - 44) / 2).toString() + "px");
                                    break;

                                default:
                                    var height = attr["@value"];
                                    // Code for supporting calc - e.g. 30%+150px
                                    if (height.indexOf('+') > -1 || height.indexOf('-') > -1) { //set the height if value is to be calculated calc().
                                        if (height.indexOf('+') > -1) {
                                            var calcHeight;
                                            calcHeight = attr["@value"].split('+');
                                            $CompFrame.css('height', calcHeight[0].trim()).css('height', "+=" + calcHeight[1].trim());
                                        } else {
                                            var calcHeight;
                                            calcHeight = attr["@value"].split('-');
                                            $CompFrame.css('height', calcHeight[0].trim()).css('height', "-=" + calcHeight[1].trim());
                                        }
                                    }
                                    // Code ends
                                    else if (height.indexOf('%') > -1) { //set the height if value is provided in percentage (say 50%).
                                        $CompFrame.css("height", attr["@value"]);
                                    }
                                    else
                                        $CompFrame.css("height", attr["@value"] == "*" ? "100%" : attr["@value"] + "px");
                                    break;
                            }
                            break;

                        case "width":
                            switch (compinfo.compType) {
                                case "dialog":
                                case "modaldialog":
                                    var wid = self.GetAttribute(compinfo["@id"], "COMP_WIDTH");
                                    if (wid != "") {
                                        $thisComp.css("width", wid + "px");
                                    }
                                    else {
                                        $thisComp.css("width", attr["@value"] == "*" ? "100%" : attr["@value"] + "px");
                                    }
                                    $CompFrame.css("left", ((SimsAreaWidth - $thisComp.width()) / 2).toString() + "px");
                                    break;

                                default:
                                    {
                                        var wid = attr["@value"];
                                        if (wid.indexOf('%') > -1) { //set the width if value is provided in percentage (say 50%).
                                            $CompFrame.css("width", attr["@value"]);
                                        }
                                        else
                                            $CompFrame.css("width", attr["@value"] == "*" ? "100%" : attr["@value"] + "px");
                                    }
                                    break;
                            }
                            break;

                        case "top":
                            switch (compinfo.compType) {
                                case "dialog":
                                case "modaldialog":
                                    var ht = $thisComp.height();
                                    if (ht == 0 && attrAr.findSingle("@name", "COMP_WIDTH") == null) {//If Width is not mentioned in the xml
                                        ht = self.GetAttribute(compinfo["@id"], "COMP_HEIGHT");
                                    }
                                    //$CompFrame.css("top", attr["@value"] == "center" ? ((SimsAreaHeight - $thisComp.height() - 44) / 2 ).toString()+"px" : attr["@value"] + "px");
                                    $CompFrame.css("top", ((SimsAreaHeight - ht - 44) / 2).toString() + "px");
                                    break;

                                default:
                                    var top = attr["@value"];
                                    // Code for supporting calc - e.g. 30%+150px
                                    if (top.indexOf('+') > -1 || top.indexOf('-') > -1) { //set the height if value is to be calculated calc().
                                        if (top.indexOf('+') > -1) {
                                            var calcTop;
                                            calcTop = attr["@value"].split('+');
                                            var mtop = calcTop[0].trim().substring(0, calcTop[0].trim().indexOf('%'));

                                            $CompFrame.css('top', SimsAreaHeight * mtop / 100).css('top', "+=" + calcTop[1].trim());
                                        } else {
                                            var calcTop;
                                            calcTop = attr["@value"].split('-');
                                            var mtop = calcTop[0].trim().substring(0, calcTop[0].trim().indexOf('%'));
                                            $CompFrame.css('top', SimsAreaHeight * mtop / 100).css('top', "-=" + calcTop[1].trim());
                                        }

                                    }
                                    // Code ends
                                    else if (top.indexOf('%') > -1) { //set the top pos if value is provided in percentage from top (say 50% from top).
                                        top = top.substring(0, top.indexOf('%'));
                                        $CompFrame.css("top", SimsAreaHeight * top / 100);
                                    }
                                    else
                                        $CompFrame.css("top", attr["@value"] == "center" ? (SimsAreaHeight - $CompFrame.height()) / 2 : attr["@value"] + "px");

                                    break;
                            }
                            break;

                        case "bottom": $CompFrame.css("bottom", attr["@value"] + "px");
                            break;

                        case "right": $CompFrame.css("right", attr["@value"] + "px");
                            break;

                        case "left":
                            switch (compinfo.compType) {
                                case "dialog":
                                case "modaldialog":
                                    var wid = $thisComp.width();
                                    if (wid == 0 && attrAr.findSingle("@name", "COMP_WIDTH") == null) {//If Width is not mentioned in the xml
                                        wid = self.GetAttribute(compinfo["@id"], "COMP_WIDTH");
                                    }

                                    //$CompFrame.css("left", attr["@value"] == "center" ? (SimsAreaWidth - $thisComp.width()) / 2 : attr["@value"] + "px");
                                    $CompFrame.css("left", ((SimsAreaWidth - wid) / 2).toString() + "px");
                                    break;

                                default:
                                    var left = attr["@value"];
                                    if (left.indexOf('%') > -1) { //set the left pos if value is provided in percentage from left (say 50% from left).
                                        left = left.substring(0, left.indexOf('%'));
                                        $CompFrame.css("left", SimsAreaWidth * left / 100);
                                    }
                                    else
                                        $CompFrame.css("left", attr["@value"] == "center" ? (SimsAreaWidth - $CompFrame.width()) / 2 : attr["@value"] + "px");
                                    break;
                            }
                            break;
                    }
                    //});
                }
            }
        }
    },

    HideComponent: function (compid) {
        // In case of subcomponents there are multiple parents with class ".ComponentFrame"
        //$("#" + compid).parents(".ComponentFrame").remove();
        //alert($("#" + compid).parents(".ComponentFrame").length);
        if (this.$compWrapper != undefined) {

            if (this.hostComponent != null) {
                this.hostComponent.RemoveSubComponent(compid);
            }

            this.$compWrapper.remove();
        }

        //SIMS.Objects.DOMElements.SIMArea.find("#BackroundCurtain_" + compid).remove();
        if (this.$thisBackgroundCurtain != null) {
            this.$thisBackgroundCurtain.remove();
        }
    },


    ShowComponent: function (compid, bShow, compInfo) {
        if (!bShow) {
            //$("#" + compid).parents(".ComponentFrame").hide();
            this.$compWrapper.hide();
            if (this.$thisBackgroundCurtain != null) {
                this.$thisBackgroundCurtain.hide();
            }
        }
        else {
            //$("#" + compid).parents(".ComponentFrame").show();
            if (this.$thisBackgroundCurtain != null) {
                this.$thisBackgroundCurtain.show();
            }
            this.$compWrapper.show();
        }

    },
    getCompMode: function () {
        return this._compinfo["@mode"];
    },

    UpdateComponentState: function (compInfo, attrSet) {
        var self = this;
        this.CurrentCompInfo = compInfo;
        //this.AttributeSetName = attrSet;
        //alert(attrSet);
        if (attrSet === "default" || SIMS.Objects.Utils.IsObjectDefined(attrSet) == false) {
            //Set Initial State
            if (SIMS.Objects.Utils.IsObjectDefined(compInfo.initialattrs)) {
                if (compInfo.initialattrs.attr != null) {
                    var attrAr = getArray(compInfo.initialattrs.attr);
                    var attrArLen = attrAr.length;
                    for (var i = 0; i < attrArLen; i++) {
                        //$.each(getArray(compInfo.initialattrs.attr), function (i, attr) {
                        var attr = attrAr[i];
                        var compattr = self.RegisteredComponent.Attributes;
                        if (compattr.ContainsKey(attr["@name"])) {
                             {
                                self.SetAttribute(compInfo["@id"], attr["@name"], attr["@value"]);
                            }
                        }
                        //});
                    }
                }
            }
        }
        else {

            if (SIMS.Objects.Utils.IsObjectDefined(compInfo.initialattributesets) && SIMS.Objects.Utils.IsObjectDefined(compInfo.initialattributesets.attributeset)) {

                var attributesetArray = getArray(compInfo.initialattributesets.attributeset);

                var attributeset = attributesetArray.findSingle("@name", attrSet);

                if (attributeset != null) {
                    if (attributeset["@inherits-default"] == "true") {
                        this.UpdateComponentState(compInfo, "default");
                    }

                    if (attributeset.attr != null) {
                        var attrAr = getArray(attributeset.attr);
                        var attrArLen = attrAr.length;
                        for (var i = 0; i < attrArLen; i++) {
                            //$.each(getArray(attributeset.attr), function (i, attr) {
                            var attr = attrAr[i];
                            var compattr = self.RegisteredComponent.Attributes;
                            if (compattr.ContainsKey(attr["@name"])) {
                                try {
                                    self.SetAttribute(compInfo["@id"], attr["@name"], attr["@value"]);
                                }
                                catch (ex) {
                                    GlobalLog("!!FAILURE!! In Set Attribute... CompId: " + compInfo["@id"] + " Attr:" + attr["@name"] + " Val:" + attr["@value"] + " - Error description: " + ex.message);
                                    console.log(ex.toString());
                                }
                            }
                            //});
                        }
                    }
                }
                else {
                    console.log(attributeset + "is not defined in initialattributesets for component : " + this._compinfo.compName);
                    this.UpdateComponentState(compInfo, "default");
                }

            }
            else {
                console.log("initialattributesets is not defined for component : " + this._compinfo.compName);
                this.UpdateComponentState(compInfo, "default");
            }

        }
        this.AttributeSetName = attrSet;
    },

    ReceiveComponentMessage: function (compMessageArgs) {
        console.log(this._compinfo.compName + ": Message Id:" + compMessageArgs.MessageId + "  MessageName:" + compMessageArgs.MessageName);
    },

    SendMessageToComponents: function (messageid, messageName, messageDetails) {
        SEND_MESSAGE("COMP_MESSAGE", new CompMessageArgs(this._compID, messageid, messageName, messageDetails), this.msgHandler);
    },


    /*
    * Function:  ShowRibbonTab
    * Purpose :  Send message to RibbonComponent to Show any contextual Tabs
    * Returns :  void
    * Inputs  :  Array ,comma separated values, single value of ContextualTab Id
    * Path    :  Path of these IDs- app/core/models/SharedData.js -> SIMS.SharedData.WordRibbonContextualTabIDs(for Word)
    */
    ShowRibbonTab: function (tabNames, tabToBeSelected) {
        if (!Array.isArray(tabNames)) {
            tabNames = tabNames.split(",");
        }
        var msgArgs = { hide: false, tab: tabNames, selectTab: tabToBeSelected };
        this.SendMessageToComponents(SIMS.SharedData.UniqueMessages.SHOW_HIDE_RIBBON_TAB, 'SHOW_HIDE_RIBBON_TAB', msgArgs);
    },

    /*
    * Function:  HideRibbonTab
    * Purpose :  Send message to RibbonComponent to Hide any contextual Tabs
    * Returns :  void
    * Inputs  :  Array ,comma separated values, single value of ContextualTab Id
    * Path    :  Path of these IDs- app/core/models/SharedData.js -> SIMS.SharedData.WordRibbonContextualTabIDs(for Word)
    */
    HideRibbonTab: function (tabNames, selectedTabIdsArray) {
        if (!Array.isArray(tabNames)) {
            tabNames = tabNames.split(",");
        }
        var msgArgs = { hide: true, tab: tabNames, selectedTabsArray: selectedTabIdsArray };
        this.SendMessageToComponents(SIMS.SharedData.UniqueMessages.SHOW_HIDE_RIBBON_TAB, 'SHOW_HIDE_RIBBON_TAB', msgArgs);
    },

    /*
    * Function:  RemoveAllContextualTab
    * Purpose :  Hide all the Ribbon Contexctual Tabs from specific application
    * Returns :  void
    * Inputs  :  Shared RibbonContextualTabIds eg-SIMS.SharedData.WordRibbonContextualTabIDs
    * Path    :  Path of these IDs- app/core/models/SharedData.js
    */
    RemoveAllContextualTab: function (RibbonContextualTabIDs, selectedTabIdsArray) {

        //iterate though all the keys in object obtainded form shared data Ribbon's Ids
        for (var tabs in RibbonContextualTabIDs) {
            if (RibbonContextualTabIDs.hasOwnProperty(tabs)) {
                this.HideRibbonTab(RibbonContextualTabIDs[tabs], selectedTabIdsArray);
            }
        }
    },




    // bMakeModal == true, as modal dialog, else modless
    SwitchComponentMode: function (bMakeModal) {
        SEND_MESSAGE("COMP_SWITCH_MODE", new CompMessageArgs(this._compID, 1, "COMP_SWITCH_MODE", { MakeModal: bMakeModal }), this.msgHandler);
    },
    UpdateComponentFrameSize: function (wid, ht) {
        this.$thisCompElement.css("width", wid + "px");
        this.$thisCompElement.css("height", ht + "px");
    },

    ShowLoadingCurtain: function (bShow) {
        SEND_MESSAGE("SHOW_CURTAIN", bShow, this.msgHandler);
    },

    UpdateDialogTitle: function (titleText) {
        this.$compWrapper.find('.CompName').text(titleText);
        this.frameTitle = titleText;
    },

    UpdateTitleLeftPadding: function (leftPadding) {
        this.$compWrapper.find('.CompName').css("margin-left", leftPadding);
    },

    UpdateCompPosition: function (left, top) {
        if (left) {
            this.$compWrapper.css("left", left + "px");
        }
        if (top) {
            this.$compWrapper.css("top", top + "px");
        }
    },

    UpdateCompIcon: function (iconPath) {
        if (iconPath != null && iconPath != "") {
            this.$compWrapper.find(".frameIcon").attr("src", iconPath).show();
        }
        else {
            this.$compWrapper.find(".frameIcon").hide();
        }
        this.frameIconPath = iconPath;
    },

    // Host Component Interface

    subComponentStack: null,

    HostSubComponent: function (subComponent, hostParams) {

        this.bSupComponentHosted = true;
        if (this.subComponentStack === null) {
            this.subComponentStack = {};
        }

        this.subComponentStack[subComponent._compID] = subComponent;

        subComponent.$compWrapper.addClass("SubCompFrame");

        subComponent.SetHostComponent(this);

        this.HandleSubComponent(subComponent._compID, hostParams, subComponent.$compWrapper);

    },

    HandleSubComponent: function (compID, hostParams, $childCompWrapper) {
    },

    RemoveSubComponent: function (compID) {
    },

    AttachKeyCodesWithHost: function (hostcomp, keyCodeGroup) {
    },

    clearSubComponentStack: function () {

        delete this.subComponentStack;
        this.subComponentStack = {};

    },

    // Sub Component Interface

    hostComponent: null,

    SetHostComponent: function (hostcomp) {

        this.hostComponent = hostcomp;
    },

    RegisterF6Panes: function () {
        console.log("BaseComponent: RegisterF6Panes - " + this._compinfo.compName);
        return null;
    },

    HandleF6Focus: function (bSetFocus, paneObject) {
        if (paneObject != null) {
            console.log("BaseComponent: HandleF6Focus - " + this._compinfo.compName + "   SetFocus:" + bSetFocus + " paneObject.Name:" + paneObject.Name);
        }
        else {
            console.log("BaseComponent: HandleF6Focus - " + this._compinfo.compName + "   SetFocus:" + bSetFocus + " paneObject is NULL");
        }
    },

    ResetToDefaultSelection: function () {

    },

    OnAppGroupChange: function (args) {
        SEND_MESSAGE("CHANGE_APP_GROUP", new CompMessageArgs(this._compID, "CHANGE_APP_GROUP", "CHANGE_APP_GROUP", args), this.msgHandler);
    },

    SetHelpButtonVisibility: function (isVisible) {
        var $hlpBtn = this.$compWrapper.find(".HelpImage");

        if (isVisible) {
            $hlpBtn.show();
        }
        else {
            $hlpBtn.hide();
        }
    },

    CloseBtnEventLogger: function (eventId, desc, keyCombination) {
        this.LogComponentEventWithDelay(eventId, desc);
    },

    ChangeMaximizeBtnState: function () {
    },

    ActivateWindow: function (bActivate, nZIndex) {

    },

    IsActiveWindowFrame: function () {
        return false;
    },

    ShownAtTaskBar: function () {
        return false;
    },

    SetDisplayMode: function (compInfo) {
        if (compInfo["@displaymode"] == "hide") {
            SIMS.Objects.DOMElements.SIMArea.find("#" + compInfo["@id"]).css("display", "none");
        }
        else {
            SIMS.Objects.DOMElements.SIMArea.find("#" + compInfo["@id"]).css("display", "block");
        }
    }
    //    ,

    //    AddClassTagsToChildren: function () {
    //        console.log("BaseComponent: AddClassTagsToChildren - " + this._compinfo.compName);
    //        //this.$compWrapper.find('*').addClass("SIM5-" + this._compID);
    //        //this.$compWrapper.addClass("SIM5-" + this._compID);
    //    },

    //    HasF6Focus: function () {
    //        console.log("BaseComponent: HasF6Focus - " + this._compinfo.compName);
    //        if (SIMS.SharedData.KeyboardData.OWNER == "") {
    //            return $(document.activeElement).hasClass("SIM5-" + this._compID);
    //            /*if ($(document.activeElement).closest(".SIM5-" + this._compID) > 0) {
    //                return true;
    //            }
    //            else {
    //                return false;
    //            }*/
    //        }
    //        else {
    //            return false;
    //        }
    //    },

    //    GetF6FocusedPane: function () {
    //        console.log("BaseComponent: GetF6FocusedPane - " + this._compinfo.compName);
    //        return null;
    //        //return { GroupID: SIMS.Components.F6PaneGroups.CENTER_PANES, PaneObject: { CompID: this._compID, Name: "GRID"} };
    //    }
});
namespace("SIMS.Components.Common.AccessKeyComponent");

SIMS.Components.Common.RibbonState = Base.extend({
    constructor: function (ribbonComp) {
        this._ribbonComp = ribbonComp;
    },
    HandleKey: function (key, keycomb) {
    },
    SET: function () {
    },
    UNSET: function () {
    },
    _keyStack: null,
    _ribbonComp: null

});

SIMS.Components.Common.NormalState = SIMS.Components.Common.RibbonState.extend({
    _f6: false,
    _controlStack: [],
    constructor: function () {
        this.base.apply(this, arguments);
        var self = this;
    },

    HandleKey: function (key, keycomb) {

        if (this._ribbonComp.focusCompIdForAccessKeys !== null && $(document.activeElement).closest(".compDiv#" + this._ribbonComp.focusCompIdForAccessKeys).length==0) {
            return false;
        }

        if (this._ribbonComp.handleKeyCondition(key)) {
            if (key === "ALT" || key === "F10") {

                // If CTRL is pressed then do not handle ALT or F10
                if (keycomb.indexOf("CTRL") > -1) {
                    return false;
                }

                this._ribbonComp.goIntoAccessibilityState();
                return true;
            }
            else if (key === "F6") {
            /*
                if (this._f6) {
                    this._ribbonComp.goIntoAccessibilityState();

                }
                else {
                    this._f6 = true;
                    return false;
                }
                */
                return false;
            }
            else if (["UP", "DOWN", "TAB", "SHIFT+TAB"].indexOf(key) !== -1) {
                var stackCandidates = ".dropdown-next-level-wrapper, .office-control";
                var $controls = null;

                if (this._ribbonComp.$thisCompElement.find(".dropdown-item:visible").parents(stackCandidates).length > 1) {
                    $controls = this._ribbonComp.$thisCompElement.find(".dropdown-item:visible").parents(stackCandidates).filter(function () {
                        return $(this).children(".gallery-inner-div").length == 0;
                    });
                }
                else {
                    $controls = this._ribbonComp.$thisCompElement.find(".dropdown-item:visible").last().parents(stackCandidates);
                }

                var stack = [];
                $controls.each(function () {
                    stack.unshift($(this));          //converting array to stack
                });

                this._ribbonComp.goIntoNavigationKeyState(stack);
                }
            }
    },
    SET: function () {
        this._f6 = false;
    },
    UNSET: function () {
        this.SET();
    }
});

SIMS.Components.Common.NavigationKeyState = SIMS.Components.Common.RibbonState.extend({
    _currentItem: null,
    _manipulator: null,
    _controlStack: [],

    AddHoverToParentDropdownItem : function() {
    },

    constructor: function (ribbonComp) {
        this.base.apply(this, arguments);
        this._manipulator = new SIMS.Manipulators.RibbonControlManipulatorFactory();

        this._keyHandlers = {
            ENTER: function () {
                var $currentItem = this._currentItem;
                var bLeaf = this._manipulator.handleAccessKey(this._currentItem);
                if (!bLeaf) {
                    //Abstract this/////////////////////////////////////////////////////////////////
                    var $dropDownItems = $currentItem.find(".dropdown-item:visible:not(.disabled)");
                    ////////////////////////////////////////////////////////////////////////////////
                    this._controlStack.push(this._currentItem);
                    if ($dropDownItems.length > 0) {
                        this.setCurrentItem($dropDownItems.first());
                        this.AddHoverToParentDropdownItem();
                    }
                }
            },
            ALT: function () {
                this._ribbonComp.goIntoNormalState();
            },
            ESCAPE: function () {
                if (this._controlStack.length > 0) {
                    var item = this._controlStack.pop();
                    this._manipulator.handleAccessKey(item, "ESCAPE");
                    this.setCurrentItem(item);
                }
                else {
                    //Abstract this/////////////////////////////////////////////////////////////////
                    this._ribbonComp.goIntoNormalState();
                    ////////////////////////////////////////////////////////////////////////////////
                }
            },
            TAB: function () {
                var $tabItem = this._manipulator.getNextTabItem(this._currentItem);

                if ($tabItem)
                    this.setCurrentItem($tabItem);
            },
            NAVKEY: function (key) {
                var itemInfo = this._manipulator.getItemForStandardKey(this._currentItem, key);
               // SIMS-106124 Safe check added to check itemInfo is null or defined
				 if(itemInfo) {
                    var $requiredItem = itemInfo.item;
                    if ($requiredItem && $requiredItem.length > 0) {
                        this.setCurrentItem($requiredItem);
                        var handled = this._manipulator.handleStandardKey($requiredItem, key);
                        //alert("Yo Nigga! Control Found!!!");

                        return itemInfo.bounced && handled;
                    }
                }
            },
            RIGHT: function () {
                if (this._keyHandlers.NAVKEY.apply(this, arguments)) {
                    this._keyHandlers.ENTER.apply(this, arguments);
                }
            },
            LEFT: function () {
                if (this._keyHandlers.NAVKEY.apply(this, arguments)) {
                    this._manipulator.handleAccessKey(this._controlStack.pop(), "ESCAPE");
                }
            }
        };
        this._keyHandlers.SPACE = this._keyHandlers.ENTER;
        this._keyHandlers.DOWN = this._keyHandlers.NAVKEY;
        this._keyHandlers.UP = this._keyHandlers.NAVKEY;
    },
    HandleKey: function (key, keycomb) {

        console.log("keycomb navigation :  "+ keycomb);


        if(keycomb == "SHIFT+F10")
        {
            var retVal = this._manipulator.ShowContextMenu(this._currentItem);

            if(retVal)
            {
                var $item = this._currentItem;
                this._controlStack.push($item);
                return true;
            }
        }

        var handler = this._keyHandlers[key];
        if (handler) {
            handler.apply(this, arguments);
            return true;
        }
        else {
            //Accesskey handling
        }
    },
    SET: function (controlStack) {
        this.clearMemberVariables();

        if (controlStack != undefined && controlStack.length > 0) {
            this._controlStack = controlStack;
            
            var $currentItem = this._controlStack[this._controlStack.length - 1];
			
			if (controlStack[0].is(".tab-header")) {
                this._controlStack = controlStack.slice(1, controlStack.length);
            }


            var $subItems = $currentItem.find(".dropdown-item:visible:not(.disabled)");


            if ($subItems != undefined && $subItems.length > 0) {
                $currentItem = $subItems.first();
            }

            var $nextItem = this._ribbonComp.getExceptionalNextNavigationItem($currentItem);
            if ($nextItem != undefined && $nextItem != null) {
                $currentItem = $nextItem;
            }

            this.setCurrentItem($currentItem);
        }
        else {
            var $seedingNavigationControl = this._ribbonComp.getSeedingNavigationControl();

            var $prevItem = this._ribbonComp.getPrevStateSelNavigationItem();

            if ($prevItem != null && $prevItem.length > 0) {
                this.setCurrentItem($prevItem);
                this._ribbonComp.removePrevStateSelNavigationItem();

            }
            else
                this.setCurrentItem($seedingNavigationControl);
            //this.setCurrentItem(this._ribbonComp.$thisCompElement.find(".tab-header-selected:first"));
        }
        //this._ribbonComp.$thisCompElement.find(".ribbon:first").addClass("navigation-key-state");
        this._ribbonComp.$thisCompElement.filter(".ribbon").add(this._ribbonComp.$thisCompElement.find(".ribbon:first")).addClass("navigation-key-state");
    },
    UNSET: function () {
        this.setCurrentItem(null);
        this.clearMemberVariables();
        //this._ribbonComp.$thisCompElement.find(".ribbon:first").removeClass("navigation-key-state");
        this._ribbonComp.$thisCompElement.filter(".ribbon").add(this._ribbonComp.$thisCompElement.find(".ribbon:first")).removeClass("navigation-key-state");
    },

    clearMemberVariables: function () {
        this._controlStack.length = 0;
        this._currentItem = null;
    },

    setCurrentItem: function ($item) {
        if (this._currentItem && this._currentItem.length > 0) {
            this._manipulator.removeNavigationHover(this._currentItem);
        }

        this._currentItem = $item;
        if ($item) {
            this._manipulator.addNavigationHover($item);
        }
    }
});


SIMS.Components.Common.AccessibilityState = SIMS.Components.Common.RibbonState.extend({
    _currentAccessibleElements: null, //
    _controlStack: [],
    _accessiblePath: [],
    _manipulator: null,
    _keyStack: [],
    _itemToBePushed : null,

    constructor: function (ribbonComp) {
        this.base.apply(this, arguments);
        this._manipulator = new SIMS.Manipulators.RibbonControlManipulatorFactory();
    },

    AddHoverToParentDropdownItem: function() {
    },

    HandleKey: function (key, keycomb) {

        if (key === "ALT" || key === "F10" || key === "F6") {
            this._ribbonComp.goIntoNormalState();
        }
        else if (key === "ESCAPE") {
            if (this._keyStack.length > 0) {
                this._keyStack.pop();
            }
            if (this._accessiblePath.length > 0) {

                if (this._controlStack.length != 0) {
                    var bLeaf = this._manipulator.handleAccessKey(this._controlStack.pop(), key);
                }

                var prevElements = this._currentAccessibleElements;
                prevElements.removeClass("accessibility-active");
                this._currentAccessibleElements = this._accessiblePath.pop();
                this._currentAccessibleElements.addClass("accessibility-active");
            }
            else {
                this._ribbonComp.doCustomKeyHandling(key);
                this._ribbonComp.goIntoNormalState();
            }
        }
        else if (["UP", "DOWN", "LEFT", "RIGHT", "TAB", "SHIF+TAB","ENTER", "SPACE","SHIFT+F10"].indexOf(key) !== -1) {

            // And If there is combination with ALT + key then go into normal state
            if (keycomb === "ALT+" + key || keycomb === "ALT+CTRL+" + key || keycomb === "ALT+SHIFT+" + key || keycomb === "ALT+SHIFT+CTRL+" + key) {

                this._ribbonComp.goIntoNormalState();
                return false;
            }
            else { //else go to navigation state

                if (this._controlStack && (this._controlStack.length > 0) && (this._controlStack[this._controlStack.length - 1].is(".office-control") || this._controlStack[this._controlStack.length - 1].is(".dropdown-item")) && (this._ribbonComp.$thisCompElement.find(".ribbon-tabs-wrapper:first").length > 0)) //only in case ribbon
                {
                    if(this._itemToBePushed != null)
                    {
                        this._controlStack.push(this._itemToBePushed);
                        this._itemToBePushed = null;
                    }
                    this._ribbonComp.goIntoNavigationAndAccessibiltyState(this._controlStack.slice(0),this._accessiblePath.slice(0),this._currentAccessibleElements.slice(0));
                }
                else
                {
                    this._ribbonComp.goIntoNavigationKeyState(this._controlStack.slice(0));
                }
                return this._ribbonComp.triggerCurrentStateHandleKey(key,keycomb);
                //return this._ribbonComp._currentState.HandleKey(key);

            }


        }

        else if (this._currentAccessibleElements != null && this._currentAccessibleElements.length > 0) {
            var searchKey = this.getSearchKeyForAccessibilityState(key);
            
            var self = this;
            var searchResults = this._currentAccessibleElements.filter(function () {
              /**** Start -- Support for Hidden ShortCut Keys ***/
				  return $(this).data('accessShortcut').startsWith(searchKey) || self.HasHiddenShortCutWithSearchKey($(this),searchKey,false);
			 /**** End -- Support for Hidden ShortCut Keys ***/
            });

            if (searchResults.length > 0) {

                //Handling for same shortcut added multiple times
                var exactSearch = searchResults.filter(function () {
                 /**** Start -- Support for Hidden ShortCut Keys ***/
                    return $(this).data('accessShortcut') === searchKey || self.HasHiddenShortCutWithSearchKey($(this),searchKey,true);
			 	/**** End -- Support for Hidden ShortCut Keys ***/
                });

                if (exactSearch.length === searchResults.length) {

                    // Specific case for drop down items  where single letter key occurrance is multiple
                    if((exactSearch.length > 1) && this._controlStack && (this._controlStack.length > 0) && exactSearch.first().is(".dropdown-item") && exactSearch.first().is(".office-hover-default"))
                    {
                        this._itemToBePushed = this.handleRepeatedAccessKey(exactSearch);
                        return true;
                    }
                    else
                    {
                        searchResults = searchResults.first();
                        this.removeSelectionIfAny(searchResults);
                    }
                }

                var $accessibleElements = null;


                this._currentAccessibleElements.removeClass('accessibility-active');
                this.populateAccessiblePath(searchKey);

                if (searchResults.length == 1 && exactSearch.length == 1) {
                    this._keyStack.length = 0;
                    var bLeaf = this._manipulator.handleAccessKey(searchResults, key);

                    if (bLeaf === true) {
                        while (this._controlStack.length != 0) {
                            this._manipulator.handleAccessKey(this._controlStack.pop(), "ESCAPE");
                        }
                        this._ribbonComp.goIntoNormalState();
                    }
                    else {
                        this._controlStack.push(searchResults);

                        //File Menu
                        //if (this._ribbonComp.constructor !== SIMS.Components.Common.Ribbon) {
                        if (this._ribbonComp.$thisCompElement.hasClass("backstage")) {

                            $accessibleElements = this._ribbonComp.$thisCompElement.find(".accessible:visible");

                            //Removing previous elements
                            $accessibleElements = $accessibleElements.not(this._accessiblePath[0]);

                            if (this._accessiblePath.length > 0) {

                                $accessibleElements = $accessibleElements.filter(function () {

                                    return ($(this).parents(".accessible:visible").length === 0);
                                });
                            }

                            var $children = searchResults.find(".accessible:visible");

                            if ($children.length > 0) {
                                for (var i = 1; i < this._accessiblePath.length; i++) {
                                    $accessibleElements = $accessibleElements.not(this._accessiblePath[i]);
                                }
                                $accessibleElements = $accessibleElements.add($children);
                            }
                        }

                        //Ribbon
                        else {

                            //added to show first sub item selected..
                            var $dropDownItems = searchResults.find(".dropdown-item:visible:not(.disabled)");

                            if($dropDownItems.length>0)
                            {
                                this._manipulator.removeNavigationHover(searchResults);
                                this.AddHoverToParentDropdownItem();
                                this._manipulator.addNavigationHover($dropDownItems.first());
                            }

                            $accessibleElements = this._ribbonComp.$thisCompElement.find(".accessible:visible:not(.gallery-items-contracted .dropdown-item)");

                            //Removing previous elements
                            for (var i = 0; i < this._accessiblePath.length; i++) {
                                $accessibleElements = $accessibleElements.not(this._accessiblePath[i]);
                            }

                            //If selected control is in titlebar filter out the visible tab controls as well
                            if(exactSearch.hasClass("titlebar-control") || exactSearch.parents(".office-control:first").hasClass("titlebar-control"))
                            {
                               //filter out the controls of visible tab
                               $accessibleElements = $accessibleElements.filter(function()
                               {
                                 return ($(this).hasClass("titlebar-control") ||$(this).parents(".office-control:first").hasClass("titlebar-control")) ;
                               });

                            }
                        }

                    }
                }
                else {
                    $accessibleElements = searchResults;
                    this._keyStack.push(key);
                }
                if ($accessibleElements != null) {
                    $accessibleElements.addClass("accessibility-active");
                }

                this._currentAccessibleElements = $accessibleElements;
            }
            else { // Searching didn't find any key

                // And If there is combination with ALT + key then go into normal state
                if (keycomb === "ALT+" + key || keycomb === "ALT+CTRL+" + key || keycomb === "ALT+SHIFT+" + key || keycomb === "ALT+SHIFT+CTRL+" + key) {

                    this._ribbonComp.goIntoNormalState();
                    return false;
                }
                else { //else do nothing

                }

            }


        }

        else {
            this._ribbonComp.getSeedAccessibles().addClass("accessibility-active");
        }
        return true;
    },

    getSearchKeyForAccessibilityState: function(key){
        var searchKey = key;
        if (this._keyStack.length > 0) {
            while (this._keyStack.length != 0) {
                searchKey = this._keyStack.pop() + searchKey;
            }
        }
        return searchKey;
    },

    /*** Code refractor (SO-108685). _accessiblePath array is being populated inside a function, to be overridden in 2016 counterpart ***/
    populateAccessiblePath: function(searchKey) {
        this._accessiblePath.push(this._currentAccessibleElements);
    },

    /**** Start -- Support for Hidden ShortCut Keys ***/

        /** Params :-
         * $accessibleElement - element for which hidden shortcuts need  to be searched
         * searchKey - key to be searched in hidden shortcuts
         * exactMatch - true :- search access key with exact match to search key
         *              false :- search access key starting with  search key
         ***/
    HasHiddenShortCutWithSearchKey : function($accessibleElement ,searchKey, exactMatch)
    {
        var hiddenShortCutData = $accessibleElement.data('accessHiddenShortcuts');
        var isHiddenShortCut = false;
        if(hiddenShortCutData)
        {
            var hiddenSearchResults = hiddenShortCutData.filter(function(value) {
                return exactMatch ? value === searchKey : value.startsWith(searchKey) ;
            });
            isHiddenShortCut = hiddenSearchResults.length>0 ? true : false;
        }
        return isHiddenShortCut
    },

    SET: function () {
        this.resetMembers();
        var $ribbonComp = this._ribbonComp.$thisCompElement;
        $ribbonComp.filter(".ribbon").add($ribbonComp.find(".ribbon")).addClass("accesible-state");
        this._currentAccessibleElements = this._ribbonComp.getSeedAccessibles();
        this._currentAccessibleElements.addClass("accessibility-active");
    },
    UNSET: function () {
        this.resetMembers();
        var $ribbonComp = this._ribbonComp.$thisCompElement;
        $ribbonComp.filter(".ribbon").add($ribbonComp.find(".ribbon")).removeClass("accesible-state");
        this._ribbonComp.$thisCompElement.find(".accessible").removeClass('accessibility-active');
    },

    resetMembers: function () {
        this._controlStack.length = 0;
        this._accessiblePath.length = 0;
        this._keyStack.length = 0;
        this._itemToBePushed = null;
        if (this._currentAccessibleElements != null) {
            this._currentAccessibleElements.removeClass("accessibility-active");
        }
    },


    handleRepeatedAccessKey : function (searchResults)
    {
        var array_Length = searchResults.length;
        var parent = searchResults.first().parent();
        var i;

        var itemToBePushed = null;

        for (i = 0; i < array_Length; i++) {
            if ($(searchResults[i]).hasClass('hovered')) {
                $(searchResults[i]).removeClass('hovered')

                if (i + 1 < array_Length) {
                    $(parent).find('div.hovered, span.hovered').removeClass('hovered');

                    //$(searchResults[i + 1]).addClass('hovered');
                    this._manipulator.addNavigationHover($(searchResults[i + 1]));            //This change was done for SIMS-66327

                    itemToBePushed = $(searchResults[i + 1]);
                    //this._controlStack.push($(searchResults[i + 1]));
                    //this.removeDuplicateElementFromControlStack();
                    return itemToBePushed;
                }
            }

        }

        if (i == array_Length) {
            $(parent).find('div.hovered, span.hovered').removeClass('hovered');

            //$(searchResults[0]).addClass('hovered');
            this._manipulator.addNavigationHover($(searchResults[0]));           //This change was done for SIMS-66327

            itemToBePushed = $(searchResults[0]);
            return itemToBePushed
            //this._controlStack.push($(searchResults[0]));
            //this.removeDuplicateElementFromControlStack();
        }
    },



    removeDuplicateElementFromControlStack : function()
    {
        var currentLevelEle = this._currentAccessibleElements.slice(0);
        var lastPushedItem = this._controlStack[this._controlStack.length -1];

        /*var tempControlStack = this._controlStack.filter(function(){
           return $.inArray($(this),$(currentLevelEle)) == -1;
        })*/

        var tempControlStack = [];

        for(var i = 0; i< this._controlStack.length; i++)
        {
            if(jQuery.inArray(this._controlStack[i].get(0),currentLevelEle)== -1)
            {
              tempControlStack.push(this._controlStack[i]);
            }
        }

        //lastPushedItem.attr("stopSearch","true");
        tempControlStack.push(lastPushedItem);

        this._controlStack.length = 0;
        this._controlStack = tempControlStack.slice(0);



    },

    removeSelectionIfAny : function(currentSel)
    {
        var parent = currentSel.parent();
        $(parent).find('div.hovered, span.hovered').removeClass('hovered');
    }


});


SIMS.Components.Common.NavigationAndAccessibleState = SIMS.Components.Common.RibbonState.extend({
    _currentItem: null,
    _manipulator: null,
    _controlStack: [],
    _accessiblePath: [],
    _currentAccessibleElements : null,
    _keyStack: [],
    _itemToBePushed : null,

    constructor: function (ribbonComp) {
        this.base.apply(this, arguments);
        this._manipulator = new SIMS.Manipulators.RibbonControlManipulatorFactory();

        this._keyHandlers = {
            ENTER: function () {

                if(this._currentItem.find(".dropdown-next-level-wrapper").length > 0)
                {



                    if(this._itemToBePushed != null)
                    {
                        this._controlStack.push(this._itemToBePushed);
                        this.setCurrentItem(this._itemToBePushed);
                        this._itemToBePushed = null;
                    }
                    else
                    {
                        this._controlStack.push(this._currentItem);
                    }

                    this.removeDuplicateElementFromControlStack();

                    var shortcutKey = this._currentItem.data('accessShortcut')? this._currentItem.data('accessShortcut'):null;

                    var shortcutItem =  this._currentItem;

                    this.showNextLevel(shortcutKey);
                    //this._ribbonComp.triggerCurrentStateHandleKey(shortcutKey);

                    var itemInfo = this._manipulator.getItemForStandardKey(shortcutItem, "RIGHT");
                    var $requiredItem = itemInfo.item;
                    if ($requiredItem && $requiredItem.length > 0) {
                        this.setCurrentItem($requiredItem);
                        this.AddHoverToParentDropdownItem();
                    }

                    var $dropDownItems = this._currentItem.find(".dropdown-item:visible:not(.disabled)");
                    if ($dropDownItems.length > 0) {
                        this.setCurrentItem($dropDownItems.first());
                        this.AddHoverToParentDropdownItem();
                    }

                }
                else
                {

                    var $currentItem = this._currentItem;
                    var bLeaf = this._manipulator.handleAccessKey(this._currentItem);
                    if (!bLeaf) {
                        //Abstract this/////////////////////////////////////////////////////////////////
                        var $dropDownItems = $currentItem.find(".dropdown-item:visible:not(.disabled)");
                        ////////////////////////////////////////////////////////////////////////////////
                        this._controlStack.push(this._currentItem);
                        if ($dropDownItems.length > 0) {
                            this.setCurrentItem($dropDownItems.first());
                        }
                    }

                }


            },
            ALT: function () {
                this._ribbonComp.goIntoNormalState();
            },

            TAB: function () {
                var $tabItem = this._manipulator.getNextTabItem(this._currentItem);

                if ($tabItem)
                    this.setCurrentItem($tabItem);
            },
            NAVKEY: function (key) {
                var itemInfo = this._manipulator.getItemForStandardKey(this._currentItem, key);
                var $requiredItem = itemInfo.item;
                if ($requiredItem && $requiredItem.length > 0) {
                    this.setCurrentItem($requiredItem);
                    var handled = this._manipulator.handleStandardKey($requiredItem, key);
                    //alert("Yo Nigga! Control Found!!!");

                    return itemInfo.bounced && handled;
                }
            },
            RIGHT: function () {

                if(this._currentItem.is(".office-control"))
                {
                    //this._controlStack.pop();
                    this._controlStack.push(this._currentItem);
                    this._ribbonComp.goIntoNavigationKeyState(this._controlStack.slice(0));
                    return this._ribbonComp.triggerCurrentStateHandleKey('RIGHT');
                }



                else if(this._currentItem.find(".dropdown-next-level-wrapper").length > 0)
                {

                    if(this._itemToBePushed != null)
                    {
                        this._controlStack.push(this._itemToBePushed);
                        this.setCurrentItem(this._itemToBePushed);
                        this._itemToBePushed = null;
                    }
                    else
                    {
                        this._controlStack.push(this._currentItem);
                    }
                    this.removeDuplicateElementFromControlStack();

                    var shortcutKey = this._currentItem.data('accessShortcut');

                    var shortcutItem =  this._currentItem;

                    this.showNextLevel(shortcutKey);
                    //this._ribbonComp.triggerCurrentStateHandleKey(shortcutKey);

                    var itemInfo = this._manipulator.getItemForStandardKey(shortcutItem, "RIGHT");
                    var $requiredItem = itemInfo.item;
                    if ($requiredItem && $requiredItem.length > 0) {
                        this.setCurrentItem($requiredItem);
                        this.AddHoverToParentDropdownItem();
                    }


                    var $dropDownItems = this._currentItem.find(".dropdown-item:visible:not(.disabled)");
                    if ($dropDownItems.length > 0) {
                        this.setCurrentItem($dropDownItems.first());
                        this.AddHoverToParentDropdownItem();
                    }

                   // return this._ribbonComp.triggerCurrentStateHandleKey(shortcutKey);
                }
                else if (this._keyHandlers.NAVKEY.apply(this, arguments)) {
                    this._keyHandlers.ENTER.apply(this, arguments);
                }
            },
            LEFT: function () {

                if(this._currentItem.is(".office-control"))
                {

                    this._controlStack.push(this._currentItem);
                     this._ribbonComp.goIntoNavigationKeyState(this._controlStack.slice(0)) ;
                     return this._ribbonComp.triggerCurrentStateHandleKey('LEFT');
                }

                else if (this._keyHandlers.NAVKEY.apply(this, arguments)) {
                    this._manipulator.handleAccessKey(this._controlStack.pop(), "ESCAPE");
                }
            }
        };
        this._keyHandlers.SPACE = this._keyHandlers.ENTER;
        this._keyHandlers.DOWN = this._keyHandlers.NAVKEY;
        this._keyHandlers.UP = this._keyHandlers.NAVKEY;
    },

    AddHoverToParentDropdownItem: function() {
    },

    HandleKey: function (key,keycomb) {

        console.log("keycomb :  "+ keycomb);

         //spl handling for context menu keyboard shortcut
        if(keycomb == "SHIFT+F10")
        {
            var retVal = this._manipulator.ShowContextMenu(this._currentItem);

            if(retVal)
            {
                var $item = this._currentItem;
                this._controlStack.push($item);
                this._ribbonComp.goIntoNavigationKeyState(this._controlStack.slice(0));
                return true;
            }
        }



        var handler = this._keyHandlers[key];
        // console.log("key pressed :" + key);
        if (handler) {
            handler.apply(this, arguments);
            return true;
        }
        else {
            //Accesskey handling

            if (key === "ESCAPE") {

                console.log("here in escape!!!");





                if (this._keyStack.length > 0) {
                    this._keyStack.pop();
                }

                //if after esc we need to go to tab headers then go to else part
                if (this._accessiblePath.length > 1) {

                    if (this._controlStack.length != 0) {
                        var item = this._controlStack.pop();
                        this._manipulator.handleAccessKey(item, key);
                        this.setCurrentItem(item);
                    }

                    var prevElements = this._currentAccessibleElements;
                    prevElements.removeClass("accessibility-active");
                    this._currentAccessibleElements = this._accessiblePath.pop();
                    this._currentAccessibleElements.addClass("accessibility-active");
                    //this._ribbonComp.goIntoAccessibilityState();
                }
                else {
                    this._ribbonComp.doCustomKeyHandling(key);
                    this._ribbonComp.goIntoAccessibilityState();
                }




            }

            else if (this._currentAccessibleElements != null && this._currentAccessibleElements.length > 0) {


                var searchKey = key;
                if (this._keyStack.length > 0) {
                    while (this._keyStack.length != 0) {
                        searchKey = this._keyStack.pop() + searchKey;
                    }
                }
                var searchResults = this._currentAccessibleElements.filter(function () {
                    return $(this).data('accessShortcut').startsWith(searchKey);
                });

                if (searchResults.length > 0) {

                    //Handling for same shortcut added multiple times
                    var exactSearch = searchResults.filter(function () {
                        return $(this).data('accessShortcut') === searchKey;
                    });

                    if (exactSearch.length === searchResults.length) {


                        if((exactSearch.length > 1) && this._controlStack && (this._controlStack.length > 0) && exactSearch.first().is(".dropdown-item") && exactSearch.first().is(".office-hover-default"))
                        {

                            this._itemToBePushed = this.handleRepeatedAccessKey(exactSearch);
                            return true;
                            //console.log(" item got " + searchResults.first().attr("class"));
                        }
                        else
                        {
                            searchResults = searchResults.first();
                            this.removeSelectionIfAny(searchResults);
                        }


                    }

                    var $accessibleElements = null;

                    this._currentAccessibleElements.removeClass('accessibility-active');
                    this._accessiblePath.push(this._currentAccessibleElements);

                    if (searchResults.length == 1 && exactSearch.length == 1) {
                        this._keyStack.length = 0;
                        // This is not functioning correct. Need some more handling
                        this.setCurrentItem(searchResults);
                        var bLeaf = this._manipulator.handleAccessKey(searchResults, key);


                        if (bLeaf === true) {
                            while (this._controlStack.length != 0) {
                                this._manipulator.handleAccessKey(this._controlStack.pop(), "ESCAPE");
                            }
                            this._ribbonComp.goIntoNormalState();
                        }
                        else {
                            this._controlStack.push(searchResults);

                            //Ribbon

                            $accessibleElements = this._ribbonComp.$thisCompElement.find(".accessible:visible");

                            //Removing previous elements
                            for (var i = 0; i < this._accessiblePath.length; i++) {
                                $accessibleElements = $accessibleElements.not(this._accessiblePath[i]);
                            }


                        }
                    }
                    else {
                        $accessibleElements = searchResults;
                        this._keyStack.push(key);
                    }
                    if ($accessibleElements != null) {
                        $accessibleElements.addClass("accessibility-active");
                    }

                    this._currentAccessibleElements = $accessibleElements;
                }

                else { // Searching didn't find any key

                    // And If there is combination with ALT + key then go into normal state
                    if (keycomb === "ALT+" + key || keycomb === "ALT+CTRL+" + key || keycomb === "ALT+SHIFT+" + key || keycomb === "ALT+SHIFT+CTRL+" + key) {

                        this._ribbonComp.goIntoNormalState();
                        return false;
                    }
                    else { //else do nothing

                    }

                }

            }



         return true;

        }
    },
    SET: function (controlStack,accessiblePath,currentAccessibilePath) {
        this.clearMemberVariables();

        this._accessiblePath = accessiblePath;
        this._currentAccessibleElements = currentAccessibilePath;

        //to show dropdown items with visible Access Keys
        this._currentAccessibleElements.addClass('accessibility-active');


        if (controlStack != undefined && controlStack.length > 0) {
            this._controlStack = controlStack;
           /* if (controlStack[0].is(".tab-header")) {
                this._controlStack = controlStack.slice(1, controlStack.length);
            }*/

            var $currentItem = this._controlStack[this._controlStack.length - 1];

            var $subItems = $currentItem.find(".dropdown-item:visible:not(.disabled)");

            $currentItem = this.SetDefaultItemForNavAccessState($currentItem , $subItems);

            var $nextItem = this._ribbonComp.getExceptionalNextNavigationItem($currentItem);
            if ($nextItem != undefined && $nextItem != null) {
                $currentItem = $nextItem;
            }

            this.setCurrentItem($currentItem);
        }
        else {
            var $seedingNavigationControl = this._ribbonComp.getSeedingNavigationControl();

            var $prevItem = this._ribbonComp.getPrevStateSelNavigationItem();

            if ($prevItem != null && $prevItem.length > 0) {
                this.setCurrentItem($prevItem);
                this._ribbonComp.removePrevStateSelNavigationItem();

            }
            else
                this.setCurrentItem($seedingNavigationControl);
            //this.setCurrentItem(this._ribbonComp.$thisCompElement.find(".tab-header-selected:first"));
        }
        //this._ribbonComp.$thisCompElement.find(".ribbon:first").addClass("navigation-key-state");
        this._ribbonComp.$thisCompElement.filter(".ribbon").add(this._ribbonComp.$thisCompElement.find(".ribbon:first")).addClass("navigation-key-state");
    },
    UNSET: function () {
        this.setCurrentItem(null);
        this.clearMemberVariables();
        this.resetMembers();
        //this._ribbonComp.$thisCompElement.find(".ribbon:first").removeClass("navigation-key-state");
        this._ribbonComp.$thisCompElement.filter(".ribbon").add(this._ribbonComp.$thisCompElement.find(".ribbon:first")).removeClass("navigation-key-state");
        var $ribbonComp = this._ribbonComp.$thisCompElement;
        $ribbonComp.filter(".ribbon").add($ribbonComp.find(".ribbon")).removeClass("accesible-state");
        this._ribbonComp.$thisCompElement.find(".accessible").removeClass('accessibility-active');
    },

    resetMembers: function () {
        this._controlStack.length = 0;
        this._accessiblePath.length = 0;
        this._keyStack.length = 0;
        if (this._currentAccessibleElements != null) {
            this._currentAccessibleElements.removeClass("accessibility-active");
        }

    },

    SetDefaultItemForNavAccessState: function($currentItem , $subItems) {
        var $returnItem = $currentItem;
        if ($subItems != undefined && $subItems.length > 0) {
            $returnItem = $subItems.first();
        }
        return $returnItem;
    },

    clearMemberVariables: function () {
        this._controlStack.length = 0;
        this._currentItem = null;
        this._itemToBePushed = null;
    },

    setCurrentItem: function ($item) {
        if (this._currentItem && this._currentItem.length > 0) {
            this._manipulator.removeNavigationHover(this._currentItem);
        }

        this._currentItem = $item;
        if ($item) {
            this._manipulator.addNavigationHover($item);
        }
    },




    handleRepeatedAccessKey : function (searchResults)
    {
        var array_Length = searchResults.length;
        var parent = searchResults.first().parent();
        var i;
        var itemTobePushed = null;

        for (i = 0; i < array_Length; i++) {
            if ($(searchResults[i]).hasClass('hovered')) {
                $(searchResults[i]).removeClass('hovered');

                if (i + 1 < array_Length) {
                    $(parent).find('div.hovered, span.hovered').removeClass('hovered');

                    //$(searchResults[i + 1]).addClass('hovered');
                    this._manipulator.addNavigationHover($(searchResults[i + 1]));             //This change was done for SIMS-66327

                    itemTobePushed  = $(searchResults[i + 1]);
                    //this._controlStack.push($(searchResults[i + 1]));
                    //this.removeDuplicateElementFromControlStack();
                    return itemTobePushed;
                }
            }

        }

        if (i == array_Length) {
            $(parent).find('div.hovered, span.hovered').removeClass('hovered');

            //$(searchResults[0]).addClass('hovered');
            this._manipulator.addNavigationHover($(searchResults[0]));              //This change was done for SIMS-66327

            itemTobePushed =  $(searchResults[0]);
            return itemTobePushed;
            //this._controlStack.push($(searchResults[0]));
            //this.removeDuplicateElementFromControlStack();
        }



    },



    removeDuplicateElementFromControlStack : function()
    {
        var currentLevelEle = this._currentAccessibleElements.slice(0);
        var lastPushedItem = this._controlStack[this._controlStack.length -1];

        /*var tempControlStack = this._controlStack.filter(function(){
         return $.inArray($(this),$(currentLevelEle)) == -1;
         })*/

        var tempControlStack = [];

        for(var i = 0; i< this._controlStack.length; i++)
        {
            if(jQuery.inArray(this._controlStack[i].get(0),currentLevelEle)== -1)
            {
                tempControlStack.push(this._controlStack[i]);
            }
        }

        tempControlStack.push(lastPushedItem);

        this._controlStack.length = 0;
        this._controlStack = tempControlStack.slice(0);



    },

    showNextLevel : function(key){

        var $accessibleElements = null;

        this._currentAccessibleElements.removeClass('accessibility-active');
        this._accessiblePath.push(this._currentAccessibleElements);




        //this.setCurrentItem(this._controlStack[this._controlStack.length -1]);
        var bLeaf = this._manipulator.handleAccessKey(this._currentItem, key);


        if (bLeaf === true) {
            while (this._controlStack.length != 0) {
                this._manipulator.handleAccessKey(this._controlStack.pop(), "ESCAPE");
            }
            this._ribbonComp.goIntoNormalState();
        }
        else {


            $accessibleElements = this._ribbonComp.$thisCompElement.find(".accessible:visible:not(.gallery-items-contracted .dropdown-item)");

            //Removing previous elements
            for (var i = 0; i < this._accessiblePath.length; i++) {
                $accessibleElements = $accessibleElements.not(this._accessiblePath[i]);
            }


        }


        if ($accessibleElements != null) {
            $accessibleElements.addClass("accessibility-active");
        }

        this._currentAccessibleElements = $accessibleElements;

    },

    removeSelectionIfAny : function(currentSel)
    {
        var parent = currentSel.parent();
        $(parent).find('div.hovered, span.hovered').removeClass('hovered');
    }



});


SIMS.Components.Common.AccessKeyComponent = SIMS.Components.BaseComponent.extend({
    _currentState: null,
    _accessibilityState: null,
    _normalState: null,
    _navigationKeyState: null,
    //PUBLIC
    //Compinfo: null,
    ribbonShortcutsMap: null,
    myName: "",

    constructor: function () {
        this.ribbonShortcutsMap = new jsDictionary();

        this._accessibilityState = new SIMS.Components.Common.AccessibilityState(this);
        this._normalState = new SIMS.Components.Common.NormalState(this);
        this._navigationKeyState = new SIMS.Components.Common.NavigationKeyState(this);
        this._navigationAndAccessibilityState = new SIMS.Components.Common.NavigationAndAccessibleState(this);
        this._currentState = this._normalState;

        this.ribbonShortcutsMap.AddItem('SHIFT+CTRL+8', { actionId: 146, desc: "SHIFT+CTRL+8 Pressed" });
    },

    handleKeyCondition: function () {
        return true;
    },

    isAccessible: function () {
        return this._currentState === this._accessibilityState;
    },

    HandleAccelaraterKey: function (e, desc) {
       
                                                                                                                                    // to stop key propagation on Ribbon when context menu is opened of tab headers
        if ((SIMS.SharedData.KeyboardData.OWNER === this.getUniqueComponentIdentity() || SIMS.SharedData.KeyboardData.OWNER === "") && (SIMS.SharedData.KeyboardData.CONTEXT_MENU_VISIBLE!=true)) {
            if (this.ribbonShortcutsMap.ContainsKey(desc.keyName)) {
                var item = this.ribbonShortcutsMap.GetItem(desc.keyName);
                this.LogComponentEvent(item.actionId, item.desc);
                return true;
            }

            // Capture ALT + F4 
            if (desc.keyCombination === "ALT+F4") {
                if (this.triggerCloseEvent())
                    return true;
            }
            else if (desc.keyCombination === "TIDLE") {
                if (SIMS.SharedData.RibbonOptimization.enableRibbonLazyLoad == true) {
                    SIMS.SharedData.RibbonOptimization.enableRibbonLazyLoad = false;
                }
                else {
                    SIMS.SharedData.RibbonOptimization.enableRibbonLazyLoad = true;
                }
                return true;
            }

            return this._currentState.HandleKey(desc.keyName, desc.keyCombination);
        }
        else {
            return false;
        }
    },

    HandleStandardKey: function (e, desc) {
        return this.HandleAccelaraterKey(e, desc);
    },

    HandleTabKey: function (e, desc) {                                                                                              // to stop key propagation on Ribbon when context menu is opened of tab headers
        if ((SIMS.SharedData.KeyboardData.OWNER === this.getUniqueComponentIdentity() || SIMS.SharedData.KeyboardData.OWNER === "")&& (SIMS.SharedData.KeyboardData.CONTEXT_MENU_VISIBLE!=true)) {
            //            if (this._currentState !== this._navigationKeyState) {
            //                this.goIntoNavigationKeyState( this._currentState._controlStack.slice(0));
            //            }

            return this._currentState.HandleKey(desc.keyName, desc.keyCombination);
        }
    },

    //BUGGY
    switchStates: function () {
        if (this._currentState === this._normalState) {
            this.goIntoAccessibilityState();
        }
        else {
            this.goIntoNormalState();
        }
    },

    goIntoAccessibilityState: function (bIsF6Pressed) {

        this._currentState.UNSET();
        this._currentState = this._accessibilityState;
        //this.$thisCompElement.filter(".ribbon").add(this.$thisCompElement.find(".ribbon")).addClass("accesible-state");
        this._currentState.SET();
        //console.log("goIntoAccessibilityState - SIMS.SharedData.KeyboardData.OWNER: " + SIMS.SharedData.KeyboardData.OWNER);
        SIMS.SharedData.KeyboardData.OWNER = this.getUniqueComponentIdentity();
        if (SIMS.SharedData.KeyboardData.SHORTCUT_KEY_VISIBLE == false) {
            SIMS.SharedData.KeyboardData.SHORTCUT_KEY_VISIBLE = true;
            this.SendMessageToComponents(SIMS.SharedData.UniqueMessages.RIBBON_ACCESSIBLE, "RIBBON_ACCESSIBLE", { Focused: true, F6Pressed: bIsF6Pressed, appGroup: this._compinfo["appGroup"] });
            console.log(this._compinfo.compName + " goIntoAccessibilityState - SIMS.SharedData.KeyboardData.OWNER: " + SIMS.SharedData.KeyboardData.OWNER);
        }
    },
    goIntoNormalState: function (bIsF6Pressed) {
        this._currentState.UNSET();
        this._currentState = this._normalState;
        //this.$thisCompElement.filter(".ribbon").add(this.$thisCompElement.find(".ribbon")).removeClass("accesible-state");
        this._currentState.SET();
        //console.log("goIntoNormalState - SIMS.SharedData.KeyboardData.OWNER: " + SIMS.SharedData.KeyboardData.OWNER);
        if (SIMS.SharedData.KeyboardData.OWNER != "FILEMENU" && this.getUniqueComponentIdentity() == SIMS.SharedData.KeyboardData.OWNER) {
            SIMS.SharedData.KeyboardData.OWNER = "";
        }
        if (SIMS.SharedData.KeyboardData.SHORTCUT_KEY_VISIBLE == true) {
            this.SendMessageToComponents(SIMS.SharedData.UniqueMessages.RIBBON_ACCESSIBLE, "RIBBON_ACCESSIBLE", { Focused: false, F6Pressed: bIsF6Pressed, appGroup: this._compinfo["appGroup"] });
            SIMS.SharedData.KeyboardData.SHORTCUT_KEY_VISIBLE = false;
        }
        console.log(this._compinfo.compName + " goIntoNormalState - SIMS.SharedData.KeyboardData.OWNER: " + SIMS.SharedData.KeyboardData.OWNER);
    },

    goIntoNavigationKeyState: function (controlStack) {
        this._currentState.UNSET();
        this._currentState = this._navigationKeyState;
        //this.$thisCompElement.filter(".ribbon").add(this.$thisCompElement.find(".ribbon")).addClass("accesible-state");
        this._currentState.SET(controlStack);
        //console.log("goIntoAccessibilityState - SIMS.SharedData.KeyboardData.OWNER: " + SIMS.SharedData.KeyboardData.OWNER);
        SIMS.SharedData.KeyboardData.OWNER = this.getUniqueComponentIdentity();
        SIMS.SharedData.KeyboardData.SHORTCUT_KEY_VISIBLE = true;
        console.log(this._compinfo.compName + " goIntoNavigationKeyState - SIMS.SharedData.KeyboardData.OWNER: " + SIMS.SharedData.KeyboardData.OWNER);
    },

    goIntoNavigationAndAccessibiltyState: function (controlStack, accessiblepath, currentaccessiblepath) {
        this._currentState.UNSET();
        this._currentState = this._navigationAndAccessibilityState;
        //this.$thisCompElement.filter(".ribbon").add(this.$thisCompElement.find(".ribbon")).addClass("accesible-state");
        this._currentState.SET(controlStack, accessiblepath, currentaccessiblepath);
        //console.log("goIntoAccessibilityState - SIMS.SharedData.KeyboardData.OWNER: " + SIMS.SharedData.KeyboardData.OWNER);
        SIMS.SharedData.KeyboardData.OWNER = this.getUniqueComponentIdentity();
        SIMS.SharedData.KeyboardData.SHORTCUT_KEY_VISIBLE = true;
        console.log(this._compinfo.compName + " goIntoNavigationAndAccessibilityKeyState - SIMS.SharedData.KeyboardData.OWNER: " + SIMS.SharedData.KeyboardData.OWNER);
    },

    getSeedAccessibles: function () {

    },

    getUniqueComponentIdentity: function () {
    },

    triggerCurrentStateHandleKey: function (key,keycomb) {

        //if (key === "ENTER" || key === "SPACE" || key === "UP" || key === "DOWN" || key === "RIGHT" || key === "LEFT") {

        return this._currentState.HandleKey(key,keycomb);

        //}

        return true;

    },

    doCustomKeyHandling: function (key) {

    },

    getPrevStateSelNavigationItem: function () {

        return null;

    },

    getExceptionalNextNavigationItem: function () {

        return null;

    },

    removePrevStateSelNavigationItem: function () {

    },

    triggerCloseEvent: function () {
        return false;
    }

});

'use strict';
namespace("SIMS.Components.Common");

SIMS.Components.Common.AccessibilityState.prototype.getSearchKeyForAccessibilityState =  function(key) {
    var searchKey = "";
    for (var i = 0; i < this._keyStack.length; i++) {
        searchKey = searchKey + this._keyStack[i];
    }
    searchKey = searchKey + key;
    return searchKey;
};

SIMS.Components.Common.DropdownState = SIMS.Components.Common.RibbonState.extend({
    _controlStack: null,
    _dropdownstack: null,
    _currentdropdown: null,
    _currentItem: null,
    _manipulator: null,

    constructor: function (ribbonComp) {
        this.base.apply(this, arguments);
        this._manipulator = new SIMS.Manipulators.RibbonControlManipulatorFactory();
        this._controlStack = [];
        this._dropdownstack = [];
    },

    HandleKey: function (keyInfo, keycomb) {
        // if keyinfo is object or not,        
        var key = null;
        var isKeyHandled = false;
        var isAccessKey = false;
        if(typeof(keyInfo) === "object"){
            key = keyInfo.keyName;
            isAccessKey = keyInfo.isAcessKey;
        }
        else if(typeof(keyInfo) === "string"){
            key = keyInfo;
            isAccessKey = SIMS.Objects.Utils.IsAlphaNumericKey(keyInfo);
        }

        if (this._ribbonComp.handleKeyCondition(key)) {
            if (key === "ALT") {
                if(this._currentdropdown && this._currentdropdown.length > 0){
            		var $ClosetControl = this._currentdropdown.closest(".office-control");
	                if($ClosetControl.length > 0){
	                    this._manipulator.handleAccessKey($ClosetControl, "ESCAPE");
	                    this._ribbonComp.goIntoNormalState();
                        isKeyHandled = true;
	                }
            	}
            }
            else if(key === "F10"){
                if(this._currentdropdown && this._currentdropdown.length > 0){
                    var $ClosetControl = this._currentdropdown.closest(".office-control");
                    if($ClosetControl.length > 0){
                        this._manipulator.handleAccessKey($ClosetControl, "ESCAPE");
                        this._ribbonComp.goIntoNormalState();
                        this._ribbonComp.goIntoAccessibilityState();
                        isKeyHandled = true;
                    }
                }   
            }
            else if (key === "ESCAPE"){
                if (this._controlStack.length > 0) {
                    var item = this._controlStack.pop();
                    this._manipulator.handleAccessKey(item, "ESCAPE");
                    this.setCurrentItem(item);
                    this._currentdropdown = this._dropdownstack.pop();
                    isKeyHandled = true;
                }
                else {
                    if(this._currentdropdown && this._currentdropdown.length > 0){
                        var $ClosetControl = this._currentdropdown.closest(".office-control");
                        if($ClosetControl.length > 0){
                            this._manipulator.handleAccessKey($ClosetControl, "ESCAPE");
                            this._ribbonComp.goIntoNormalState();
                            isKeyHandled = true;
                        }
                    }
                }
            }
            else if(key === "ENTER" || key === "SPACE"){
                if(this._currentItem){
                    var $currentItem = this._currentItem;
                    var bLeaf = this._manipulator.handleAccessKey(this._currentItem);
                    if (!bLeaf) {
                        //Abstract this/////////////////////////////////////////////////////////////////
                        var $dropDownItems = $currentItem.find(".dropdown-item:visible:not(.disabled)");
                        ////////////////////////////////////////////////////////////////////////////////
                        if ($dropDownItems.length > 0) {
                        	this._controlStack.push(this._currentItem);
                        	this._dropdownstack.push(this._currentdropdown);
                        	this._currentdropdown = $currentItem.find(".dropdown-next-level-wrapper").first();
                            this.setCurrentItem($dropDownItems.first());
                            this._manipulator.addNavigationHoverOnParentItemOnly(this._controlStack[this._controlStack.length - 1]);
                        }
                    }
                    isKeyHandled = true;
                }
            }
            else if(key === "TAB"){
                if(keycomb === "TAB"){
                    if(this._currentItem){
                        var $tabItem = this._manipulator.getNextTabItem(this._currentItem);
                        if ($tabItem){
                            this.setCurrentItem($tabItem);
                            isKeyHandled = true;
                        }
                    }
                    else if(!this._currentItem && this._controlStack.length === 0){
                        var $tabItem = this._currentdropdown.find(".dropdown-item:visible:not(.disabled)").first();

                        if ($tabItem){
                            this.setCurrentItem($tabItem);
                            isKeyHandled = true;
                        }
                    }
                }
                else if(keycomb === "SHIFT+TAB"){
                    if(this._currentItem){
                        var $tabItem = this._manipulator.getPreviousTabItem(this._currentItem);

                        if ($tabItem){
                            this.setCurrentItem($tabItem);
                            isKeyHandled = true;
                        }
                    }
                    else if(!this._currentItem && this._controlStack.length === 0){
                        var $tabItem = this._currentdropdown.find(".dropdown-item:visible:not(.disabled)").last();

                        if ($tabItem){
                            this.setCurrentItem($tabItem);
                            isKeyHandled = true;
                        }
                    }
                }
            }
            else if(key === "UP" || key === "DOWN"){
                if(this._currentItem){
                    var itemInfo = this._manipulator.getItemForStandardKey(this._currentItem, key);
                    // SIMS-106124 Safe check added to check itemInfo is null or defined
                     if(itemInfo) {
                        var $requiredItem = itemInfo.item;
                        if ($requiredItem && $requiredItem.length > 0) {
                            this.setCurrentItem($requiredItem);
                            isKeyHandled = true;
                        }
                    }
                }
                else if(!this._currentItem && this._controlStack.length === 0){
                    if(key === "DOWN"){
                        var $downitem = this._currentdropdown.find(".dropdown-item:visible:not(.disabled)").first();
                        if ($downitem){
                            this.setCurrentItem($downitem);
                            isKeyHandled = true;
                        }
                    }
                    else if (key === "UP") {
                        var $upitem = this._currentdropdown.find(".dropdown-item:visible:not(.disabled)").last();
                        if ($upitem){
                            this.setCurrentItem($upitem);
                            isKeyHandled = true;
                        }
                    }
                }
            }
            else if(key === "RIGHT"){
                if(this._currentItem){
                var itemInfo = this._manipulator.getItemForStandardKey(this._currentItem, key);
                // SIMS-106124 Safe check added to check itemInfo is null or defined
                    if(itemInfo) {
                        var $currentItem = this._currentItem;
                        var $requiredItem = itemInfo.item;
                        if ($requiredItem && $requiredItem.length > 0) {
                            this.setCurrentItem($requiredItem);
                            var handled = this._manipulator.handleStandardKey(this._currentItem, key);
                            if(itemInfo.bounced && handled){
                                var $dropDownItems = $currentItem.find(".dropdown-item:visible:not(.disabled)");
                                if ($dropDownItems.length > 0) {
                                    this._dropdownstack.push(this._currentdropdown);
                                    this._currentdropdown = $currentItem.find(".dropdown-next-level-wrapper").first();
                                    this._controlStack.push(this._currentItem);
                                    this.setCurrentItem($dropDownItems.first());
                                    this._manipulator.addNavigationHoverOnParentItemOnly(this._controlStack[this._controlStack.length - 1]);
                                }
                            }
                            isKeyHandled = true;
                        }
                    }
                }
            }
            else if(key === "LEFT") {
                if(this._currentItem) {
                var itemInfo = this._manipulator.getItemForStandardKey(this._currentItem, key);
                // SIMS-106124 Safe check added to check itemInfo is null or defined
                    if(itemInfo) {
                        var $currentItem = this._currentItem;
                        var $requiredItem = itemInfo.item;
                        if ($requiredItem && $requiredItem.length > 0) {
                            this.setCurrentItem($requiredItem);
                            if(itemInfo.bounced && this._controlStack.length > 0){
                                this._currentdropdown = this._dropdownstack.pop();
                                this.setCurrentItem(this._controlStack.pop());
                                this._manipulator.handleAccessKey(this._currentItem, "ESCAPE");        
                            }
                            isKeyHandled = true;
                        }
                    }
                }
            }
            else if(isAccessKey)
            {
                var $Dropdown = this._currentdropdown; // Fix for SO-85432
                if($Dropdown.find(".dropdown-next-level-wrapper:visible").length > 0){
                    $Dropdown = $Dropdown.find(".dropdown-next-level-wrapper:visible").last();
                }
                var $items = $Dropdown.find(".dropdown-item:visible:not(.disabled)");
                var searchResults = $items.filter(function () {
                /**** Start -- Support for Hidden ShortCut Keys ***/
                    return $(this).data('accessShortcut') === key
                /**** End -- Support for Hidden ShortCut Keys ***/
                });
                if(searchResults.length > 1){
                    searchResults = searchResults.toArray();
                    var itemtobeselected = null;
                    var currentitemindex = -1;
                    if(this._currentItem){
                        var currentitemindex = searchResults.indexOf(this._currentItem[0]);
                    }

                    if(currentitemindex > -1 && currentitemindex < searchResults.length -1){
                        itemtobeselected = searchResults[currentitemindex + 1];    
                    }
                    else{
                        itemtobeselected = searchResults[0];
                    }
                    this.setCurrentItem($(itemtobeselected));
                    isKeyHandled = true;
                }
                else if(searchResults.length === 1){
                    this._manipulator.handleAccessKey(searchResults, key);
                    var $SubdropDownItems = searchResults.find(".dropdown-item:visible:not(.disabled)");
                    if($SubdropDownItems.length > 0) {
                        this._controlStack.push(searchResults);
                        this._dropdownstack.push(this._currentdropdown);
                        this._currentdropdown = searchResults.find(".dropdown-next-level-wrapper").first();
                        this.setCurrentItem($SubdropDownItems.first());
                        this._manipulator.addNavigationHoverOnParentItemOnly(this._controlStack[this._controlStack.length - 1]);
                    }
                    isKeyHandled = true;
                }
            }
        }

        return isKeyHandled;  
    },

    setCurrentItem: function($item) {
        if (this._currentItem && this._currentItem.length > 0) {
            this._manipulator.removeNavigationHover(this._currentItem);
        }

        this._currentItem = $item;
        if ($item) {
            this._manipulator.addNavigationHover($item);
        }
    },

    SET: function ($dropdown) {
        if($dropdown){
            this._currentdropdown = $dropdown;
            //this._dropdownstack.push($dropdown);
        }
    },

    UNSET: function() {
        this._currentdropdown = null;
        this._currentItem = null;
        this._controlStack = [];
    }
});

namespace("SIMS.Components2016.Common");
SIMS.Components2016.Common.AccessKeyComponent = SIMS.Components.Common.AccessKeyComponent.extendOverwrite({
    constructor: function () {
        this.base();
        this._dropdownState = new SIMS.Components.Common.DropdownState(this);
    },

    goIntoDropdownState: function ($dropdown) {
        this._currentState.UNSET();
        this._currentState = this._dropdownState;
        this._currentState.SET($dropdown);
    }
});


namespace("SIMS.Components2016.Common");

SIMS.Components2016.Common.AccessKeyComponent = SIMS.Components.Common.AccessKeyComponent.extendOverwrite({
    HandleAccelaraterKey: function (e, desc) {
        // to stop key propagation on Ribbon when context menu is opened of tab headers
        if ((SIMS.SharedData.KeyboardData.OWNER === this.getUniqueComponentIdentity() || SIMS.SharedData.KeyboardData.OWNER === "") && (SIMS.SharedData.KeyboardData.CONTEXT_MENU_VISIBLE != true)) {
            if (this.ribbonShortcutsMap.ContainsKey(desc.keyName)) {
                var item = this.ribbonShortcutsMap.GetItem(desc.keyName);
                this.LogComponentEvent(item.actionId, item.desc);
                return true;
            }

            // Capture ALT + F4 
            if (desc.keyCombination === "ALT+F4") {
                if (this.triggerCloseEvent())
                    return true;
            }
            else if (desc.keyCombination === "ALT+SPACE") {
                if (this.HandleApplicationContextMenu()) {
                    return true;
                }
            }
            else if (desc.keyCombination === "TIDLE") {
                if (SIMS.SharedData.RibbonOptimization.enableRibbonLazyLoad == true) {
                    SIMS.SharedData.RibbonOptimization.enableRibbonLazyLoad = false;
                }
                else {
                    SIMS.SharedData.RibbonOptimization.enableRibbonLazyLoad = true;
                }
                return true;
            }

            return this._currentState.HandleKey(desc.keyName, desc.keyCombination);
        }
        else {
            return false;
        }
    },

    HandleApplicationContextMenu: function (e, desc) {
        return false;
    }
});
'use strict';
namespace("SIMS.Components.Common.Ribbon");

SIMS.Components.Common.RibbonCMData = Base.extend({
    idArr: null,
    menusAlreadyAdded: null,

    constructor: function () {
        this.idArr = [];
        this.menusAlreadyAdded = [];
    },

    Add: function (id) {
        if (this.idArr.indexOf(id) == -1) {
            this.idArr.push(id);
        }
    },

    AddRange: function (idArr) {
        for (var i = 0; i < idArr.length; i++) {
            this.Add(idArr[i]);
        }
    },

    Clear: function () {
        this.idArr = [];
    }

});


SIMS.Components.Common.RibbonContextMenu = Base.extend({

    $ribbon: null,
    appName: "excel",   //default value
    menuJsonData: null,
    CMdata: null,

    //define menu json file path application wise here
   //Leonardo Start
    JSONFilePath: {
        excel: "Ribbon/json/contextmenu/excel-menu.json"
    },
    //Leonardo End


    constructor: function (RibbonWrapper, appName) {

        //fill default menu ids here which are always required
        this.CMdata = new SIMS.Components.Common.RibbonCMData();
        this.CMdata.AddRange(["control", "ribbon", "titlebar"]);
        this.$ribbon = RibbonWrapper;
        this.appName = appName;

    },

    TargetTypes: {
        Item: "Item",
        Control: "Control",
        TitleBar: "TitleBar",
        Default: "Default"  //includes title bar and empty area
    },

    //return type - { $target: $target, type: type }
    GetTargetAndType: function ($attachedTarget, $originalTarget) {
        var type = this.TargetTypes.Default,
            $target;

        //note - $originalTarget is not defined in case of SHIFT+F10
        if ($originalTarget) { // for right click case

            //Item
            var $dropDownItem = $originalTarget.parentsUntil(".ribbon").andSelf().filter(".dropdown-item").last();
            if ($dropDownItem.length > 0) {
                type = this.TargetTypes.Item;
                $target = $dropDownItem;
            }

            //items - in case SHIFT+F10 case sends defined $originalTarget; currently not happenning
            if (!$target) {
                var $items = $originalTarget.parentsUntil(".ribbon").andSelf().filter(".dropdown-items-wrapper");
                if ($items.length > 0) {
                    var $hovItem = $items.find(".dropdown-item.hovered:first");
                    if ($hovItem.length > 0) {
                        type = this.TargetTypes.Item;
                        $target = $hovItem;
                    }
                }
            }

            //Control
            if (!$target) {
                var $control = $originalTarget.parentsUntil(".ribbon").andSelf().filter(".office-control");
                if ($control.length > 0) {
                    type = this.TargetTypes.Control;
                    $target = $control;
                }
            }

            //Title bar control
            if (!$target) {
                var $titleBar = $originalTarget.parentsUntil(".ribbon").andSelf().filter(".title-bar");
                if ($titleBar.length > 0) {
                    type = this.TargetTypes.TitleBar;
                    $target = $titleBar;
                }
            }
        }
        else { //SHIFT+F10 case            

            //item wrapper
            if ($attachedTarget.hasClass("dropdown-items-wrapper")) {  // handling in case of shift-f10 if items node has menu id                
                var $hovItem = $attachedTarget.find(".dropdown-item.hovered:first");
                if ($hovItem.length > 0) {
                    type = this.TargetTypes.Item;
                    $target = $hovItem;
                }
            }
            else if ($attachedTarget.hasClass("dropdown-item")) {   //item
                type = this.TargetTypes.Item;
                $target = $attachedTarget;
            }
            else if ($attachedTarget.hasClass("office-control")) {   //control
                type = this.TargetTypes.Control;
                $target = $attachedTarget;
            }
        }

        if (!$target) {
            $target = $originalTarget || $attachedTarget;
        }

        return {
            $target: $target,
            type: type
        };
    },

    //return type - { eventId: eventId, selectedindex: selectedindex} //selectedindex can be undefined
    GetEventIdAndSelectedIndex: {
        Item: function ($target, responseEvent) {
            var eventId = 9999,
                selectedindex;

            if ($target.data('cmEventId')) {    // This handling is for the case where items have CMevent
                selectedindex = responseEvent.id;
                eventId = $target.data('cmEventId');
            }
            else if (responseEvent.menuId == "ribbon" || responseEvent.menuId == "control") {   // This handling is for the items in tilebar that fire the same events as that of fired from control CMs.
                if (responseEvent.id) {
                    eventId = responseEvent.id;
                }
            }

            return {
                eventId: eventId,
                selectedindex: selectedindex
            };
        },

        Control: function ($target, responseEvent) {
            var eventId = responseEvent.id; //9999

            if ($target.data('cmEventId')) {    // This handling is for the CMs on controls that have event id in menu JSON as "fireCMevent" ( this means that in this case the CMevent on control will be fired).
                eventId = $target.data('cmEventId');
            }

            return { eventId: eventId };
        },

        TitleBar: function ($target, responseEvent) {
            return { eventId: responseEvent.id };
        },

        Default: function ($target, responseEvent) {
            return { eventId: responseEvent.id };
        }
    },

    //return { menuId: menuId, ignoreCMCall: false}
    GetMenuIdAndIgnoreFlag: {
        Item: function ($target) {
            var menuId, ignoreCMCall = false;
            var defaultCMDisplacement = 10;

            if ($target.data('contextMenuId')) {
                menuId = $target.data('contextMenuId');
            }

            if (!menuId) {
                var $items = $target.closest(".dropdown-items-wrapper");

                if ($items.length > 0 && $items.data('contextMenuId')) {
                    menuId = $items.data('contextMenuId');
                }
            }

            if (!menuId) {
                ignoreCMCall = true;
            }

            return { menuId: menuId, ignoreCMCall: ignoreCMCall, defaultCMDisplacement: defaultCMDisplacement };
        },

        Control: function ($target) {
            var menuId = "control";

            if ($target.data('contextMenuId')) {
                menuId = $target.data('contextMenuId');
            }

            return { menuId: menuId };
        },

        TitleBar: function ($target) {
            return { menuId: "titlebar" };
        },

        Default: function ($target) {
            return { menuId: "ribbon" };
        }
    },

    GetMenuPosDim: {
        Item: function ($targetEle, defaultCMDisplacement) {
            return {
                x: $targetEle.offset().left, 
                y: $targetEle.offset().top,
                targetW: ($targetEle.width() != 0 ? $targetEle.width() : defaultCMDisplacement), 
                targetH: ($targetEle.height() != 0 ? $targetEle.height() : defaultCMDisplacement)
            };
            
        },

        Control: function ($targetEle, defaultCMDisplacement) {
            return {
                x: $targetEle.offset().left, 
                y: $targetEle.offset().top, 
                targetW: $targetEle.outerWidth(), 
                targetH: $targetEle.outerHeight()
            };
        },

        TitleBar: function ($targetEle, defaultCMDisplacement) {
            return {
                x: $targetEle.offset().left, 
                y: $targetEle.offset().top, 
                targetW: $targetEle.outerWidth(), 
                targetH: $targetEle.outerHeight()
            };
        },

        Default: function ($targetEle, defaultCMDisplacement) {
            return {
                x: $targetEle.offset().left, 
                y: $targetEle.offset().top, 
                targetW: $targetEle.outerWidth(), 
                targetH: $targetEle.outerHeight()
            };
        }
    },

    ContextMenuCallback: function (args) {

        var $attachedTarget = args[0];
        var responseEvent = args[1];
        var $originaltarget = args[2] ? $(args[2]) : null;

        switch (responseEvent.type) {

            case callBackType.CALLBACK_ON_SELECTION:

                var eventtobefired = 9999, selectedindex = null, contextmenudesc = responseEvent.desc;

                var targetInfo = this.GetTargetAndType($attachedTarget, $originaltarget);
                var eventInfo = this.GetEventIdAndSelectedIndex[targetInfo.type](targetInfo.$target, responseEvent)

                if (!isNaN(eventInfo.eventId)) {
                    eventtobefired = eventInfo.eventId;
                }

                if (!isNaN(eventInfo.selectedindex)) {
                    selectedindex = eventInfo.selectedindex;
                }

                this.fireContextMenuEvent(eventtobefired, contextmenudesc, targetInfo.$target, selectedindex);

                break;

            case callBackType.CUSTOMIZATION_REQUEST:

                var menuIdtobeDisplayed = "ribbon";
                var ignoreContextMenuCall = false;

                var targetInfo = this.GetTargetAndType($attachedTarget, $originaltarget);
                var menuInfo = this.GetMenuIdAndIgnoreFlag[targetInfo.type](targetInfo.$target);

                menuIdtobeDisplayed = menuInfo.menuId || "ribbon";
                ignoreContextMenuCall = menuInfo.ignoreCMCall === true ? true : false;
                var defaultCMDisplacement = menuInfo.defaultCMDisplacement || 0;

                var customizationResponse = {
                    posDim: this.GetMenuPosDim[targetInfo.type](targetInfo.$target, defaultCMDisplacement),
                    menuId: menuIdtobeDisplayed,
                    ignoreCall: ignoreContextMenuCall
                };

                return customizationResponse;
               

            default:
                break;
        }
    },


    UpdateMenuBindings: function () {
        if (!this.menuJsonData) {
            this.loadJsonFile(this.postLoadJSON);
        }
        else {
            this.postLoadJSON();
        }
    },

    postLoadJSON: function () {
        var MenusTobeAdded = this.CMdata.idArr;
        var arrLength = MenusTobeAdded.length;
        var theme = contextMenuTheme[this.appName.toString().toUpperCase()] || contextMenuTheme["EXCEL"];
        var curMenuId;

        for (var i = 0; i < arrLength; i++) {
            curMenuId = MenusTobeAdded[i];

            if (this.CMdata.menusAlreadyAdded.indexOf(curMenuId) === -1) {
                var currentMenuJson = this.menuJsonData[curMenuId];

                if (currentMenuJson) {
                    this.$ribbon.addContextMenu(curMenuId, currentMenuJson[0], this.ContextMenuCallback, this,
                        theme, menuTypes.genericContextMenu, contextMenuLocation.LEFT_BOTTOM);

                    this.CMdata.menusAlreadyAdded.push(curMenuId);
                }
            }
        }

        this.CMdata.Clear();
    },


    loadJsonFile: function (postSuccessFn) {
        var self = this,
            jsonPath = this.JSONFilePath[this.appName];

        $.ajax({
            url: jsonPath,
            async: true,
            dataType: 'json',
            success: function (data) {
                self.menuJsonData = data;
                postSuccessFn.apply(self);
            }
        });
    },


    fireContextMenuEvent: function (cmEventId, desc, $target, index) {
        var $gallery = $target.parents(".ctrl-gallery:first");
        if ($gallery.length > 0) {
            $gallery.trigger("itemSelected");
        }
        else {
            ControlGenerators.ComboBox.prototype.DropdownCloser.call();
        }

        //to close sub item dropdown items
        //$(".dropdown-next-level-wrapper, .combobox-dropdown").hide();
        this.$ribbon.find(".dropdown-next-level-wrapper, .combobox-dropdown").hide();

        if (index) {// index is present for the CM on items except the items on titlebar and is not present for the controls and empty areas in that case differnet events are fired from different context menu items.
            this.$ribbon.trigger('selectedIndexChanged', ["Context menu item " + desc + " clicked", cmEventId, null, { "cmIndex": index}]);
        }
        else {
            this.$ribbon.trigger('selectedIndexChanged', ["Context menu item " + desc + " clicked", cmEventId]);
        }

    }
});

/*
* TRIE implementation in Javascript
*/

/*
* A trie, or prefix tree, is a multi-way tree structure useful for storing strings over an alphabet.
* It has been used to store large dictionaries of English (say) words in spell-checking programs
* and in natural-language "understanding" programs.
* @see http://en.wikipedia.org/wiki/Trie
* @see http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Tree/Trie/
/*

* @class Trie
* @constructor
*/
Trie = function() {
    this.words = 0;
    this.prefixes = 0;
    this.children = [];
};

Trie.prototype = {
    
    /*
* Insert a word into the dictionary.
* Recursively traverse through the trie nodes, and create new node if does not already exist.
*
* @method insert
* @param {String} str Word to insert in the dictionary
* @param {Integer} pos Current index of the string to be inserted
* @return {Void}
*/
    insert: function(str, pos) {
        if(str.length == 0) { //blank string cannot be inserted
            return;
        }
        
        var T = this,
            k,
            child;
            
        if(pos === undefined) {
            pos = 0;
        }
        if(pos === str.length) {
            T.words ++;
            return;
        }
        T.prefixes ++;
        k = str[pos];
        if(T.children[k] === undefined) { //if node for this char doesn't exist, create one
            T.children[k] = new Trie();
        }
        child = T.children[k];
        child.insert(str, pos + 1);
    },
    
    /*
* Remove a word from the dictionary.
*
* @method remove
* @param {String} str Word to be removed
* @param {Integer} pos Current index of the string to be removed
* @return {Void}
*/
    remove: function(str, pos) {
        if(str.length == 0) {
            return;
        }
        
        var T = this,
            k,
            child;
        
        if(pos === undefined) {
            pos = 0;
        }
        if(T === undefined) {
            return;
        }
        if(pos === str.length) {
            T.words --;
            return;
        }
        T.prefixes --;
        k = str[pos];
        child = T.children[k];
        child.remove(str, pos + 1);
    },
    
    /*
* Update an existing word in the dictionary.
* This method removes the old word from the dictionary and inserts the new word.
*
* @method update
* @param {String} strOld The old word to be replaced
* @param {String} strNew The new word to be inserted
* @return {Void}
*/
    update: function(strOld, strNew) {
        if(strOld.length == 0 || strNew.length == 0) {
            return;
        }
        this.remove(strOld);
        this.insert(strNew);
    },
    
    /*
* Count the number of times a given word has been inserted into the dictionary
*
* @method countWord
* @param {String} str Word to get count of
* @param {Integer} pos Current index of the given word
* @return {Integer} The number of times a given word exists in the dictionary
*/
    countWord: function(str, pos) {
        if(str.length == 0) {
            return 0;
        }
        
        var T = this,
            k,
            child,
            ret = 0;
        
        if(pos === undefined) {
            pos = 0;
        }
        if(pos === str.length) {
            return T.words;
        }
        k = str[pos];
        child = T.children[k];
        if(child !== undefined) { //node exists
            ret = child.countWord(str, pos + 1);
        }
        return ret;
    },
    
    /*
* Count the number of times a given prefix exists in the dictionary
*
* @method countPrefix
* @param {String} str Prefix to get count of
* @param {Integer} pos Current index of the given prefix
* @return {Integer} The number of times a given prefix exists in the dictionary
*/
    countPrefix: function(str, pos) {
        if(str.length == 0) {
            return 0;
        }
        
        var T = this,
            k,
            child,
            ret = 0;

        if(pos === undefined) {
            pos = 0;
        }
        if(pos === str.length) {
            return T.prefixes;
        }
        var k = str[pos];
        child = T.children[k];
        if(child !== undefined) { //node exists
            ret = child.countPrefix(str, pos + 1);
        }
        return ret;
    },
    
    /*
* Find a word in the dictionary
*
* @method find
* @param {String} str The word to find in the dictionary
* @return {Boolean} True if the word exists in the dictionary, else false
*/
    find: function(str) {
        if(str.length == 0) {
            return false;
        }
        
        if(this.countWord(str) > 0) {
            return true;
        } else {
            return false;
        }
    },
    
    /*
* Get all words in the dictionary
*
* @method getAllWords
* @param {String} str Prefix of current word
* @return {Array} Array of words in the dictionary
*/
    getAllWords: function(str) {
        var T = this,
            k,
            child,
            ret = [];
        if(str === undefined) {
            str = "";
        }
        if(T === undefined) {
            return [];
        }
        if(T.words > 0) {
            ret.push(str);
        }
        for (k in T.children) {
            if (k != null) {
                child = T.children[k];
                if (child != null && child.getAllWords != null) {
                    ret = ret.concat(child.getAllWords(str + k));
                }
               
            }           
        }
        return ret;
    },
    
    /*
* Autocomplete a given prefix
*
* @method autoComplete
* @param {String} str Prefix to be completed based on dictionary entries
* @param {Integer} pos Current index of the prefix
* @return {Array} Array of possible suggestions
*/
    autoComplete: function(str, pos) {
        if(str.length == 0) {
            return [];
        }
        
        var T = this,
            k,
            child;
        
        if(pos === undefined) {
            pos = 0;
        }
        k = str[pos];
        child = T.children[k];
        if(child === undefined) { //node doesn't exist
            return [];
        }
        if(pos === str.length - 1) {
            return child.getAllWords(str);
        }
        return child.autoComplete(str, pos + 1);
    }
};
$.fn.getAttribute = function (attrName, valueIfNull) {
    var attrVal = $(this).attr(attrName);
    if (attrVal == null || attrVal == undefined || attrVal == "") {
        if (valueIfNull != null && valueIfNull.length > 0) {
            return valueIfNull;
        }
        else {
            return null;
        }
    }
    return attrVal;
};
$.fn.getTrueOrFalse = function (attrName, defaultValue) {
    var bool = defaultValue != null ? defaultValue : false;
    if ($(this).length > 0) {
        var val = $(this).getAttribute(attrName, null);

        if (val != null) {
            if (val.toLowerCase() == 'true' || val.toLowerCase() == '1') {
                bool = true;
            }
            else if (val.toLowerCase() == 'false' || val.toLowerCase() == '0') {
                bool = false;
            }
        }
    }
    return bool;
};

$.fn.convertToJSON = function () {
    var xml = (new XMLSerializer()).serializeToString($(this)[0]);
    var json = $.xml2json(xml);
    return json;
};

$.fn.tagName = function () {
    return $(this).prop('tagName');
};

function htmlEncode (value) {
    if (value) {
        return $('<div/>').html(value).html();
    } else {
        return '';
    }
}
function getSplitButtonPart() {
    var $part = getHoveredSpan();
    $part.addClass("split-button-part");
    return $part;
};

function getHoveredSpan() {
    return UIUtils.getUnselectableSpan("", "office-hover-default");
};

function getDropdownButton(bHoverEffect) {
    var $arrowButton = UIUtils.getUnselectableSpan('', 'dropdown-button');
    $arrowButton.append(getDownArrow());
    if (bHoverEffect)
    { $arrowButton.addClass('office-hover-default'); }
    return $arrowButton;
};

$.fn.addShortCut = function (key) {
    var $shortCutDiv = $('<div class="ribbon-SK">' + key + '</div>');
    $(this).append($shortCutDiv);

    //    var top = $(this).offset().top + 13;
    //    var left = $(this).offset().left;

    //    $shortCutDiv.css({ 'top': top, 'left': left });


    $(this).data('accessShortcut', key);
    $(this).addClass('accessible');
};

/**** Start -- Support for Hidden ShortCut Keys ***/
$.fn.addHiddenShortCuts = function (keys) {

    $(this).data('accessHiddenShortcuts', keys);

};
/**** End -- Support for Hidden ShortCut Keys ***/
/*
 ### jQuery XML to JSON Plugin v1.1 - 2008-07-01 ###
 * http://www.fyneworks.com/ - diego@fyneworks.com
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 ###
 Website: http://www.fyneworks.com/jquery/xml-to-json/
*//*
 # INSPIRED BY: http://www.terracoder.com/
           AND: http://www.thomasfrank.se/xml_to_json.html
											AND: http://www.kawa.net/works/js/xml/objtree-e.html
*//*
 This simple script converts XML (document of code) into a JSON object. It is the combination of 2
 'xml to json' great parsers (see below) which allows for both 'simple' and 'extended' parsing modes.
*/
// Avoid collisions
;if(window.jQuery) (function($){
 
 // Add function to jQuery namespace
 $.extend({
  
  // converts xml documents and xml text to json object
  xml2json: function(xml, extended) {
   if(!xml) return {}; // quick fail
   
   //### PARSER LIBRARY
   // Core function
   function parseXML(node, simple){
    if(!node) return null;
    var txt = '', obj = null, att = null;
    var nt = node.nodeType, nn = jsVar(node.localName || node.nodeName);
    var nv = node.text || node.nodeValue || '';
    /*DBG*/ //if(window.console) console.log(['x2j',nn,nt,nv.length+' bytes']);
    if(node.childNodes){
     if(node.childNodes.length>0){
      /*DBG*/ //if(window.console) console.log(['x2j',nn,'CHILDREN',node.childNodes]);
      $.each(node.childNodes, function(n,cn){
       var cnt = cn.nodeType, cnn = jsVar(cn.localName || cn.nodeName);
       var cnv = cn.text || cn.nodeValue || '';
       /*DBG*/ //if(window.console) console.log(['x2j',nn,'node>a',cnn,cnt,cnv]);
       if(cnt == 8){
        /*DBG*/ //if(window.console) console.log(['x2j',nn,'node>b',cnn,'COMMENT (ignore)']);
        return; // ignore comment node
       }
       else if(cnt == 3 || cnt == 4 || !cnn){
        // ignore white-space in between tags
        if(cnv.match(/^\s+$/)){
         /*DBG*/ //if(window.console) console.log(['x2j',nn,'node>c',cnn,'WHITE-SPACE (ignore)']);
         return;
        };
        /*DBG*/ //if(window.console) console.log(['x2j',nn,'node>d',cnn,'TEXT']);
        txt += cnv.replace(/^\s+/,'').replace(/\s+$/,'');
								// make sure we ditch trailing spaces from markup
       }
       else{
        /*DBG*/ //if(window.console) console.log(['x2j',nn,'node>e',cnn,'OBJECT']);
        obj = obj || {};
        if(obj[cnn]){
         /*DBG*/ //if(window.console) console.log(['x2j',nn,'node>f',cnn,'ARRAY']);
         
									// http://forum.jquery.com/topic/jquery-jquery-xml2json-problems-when-siblings-of-the-same-tagname-only-have-a-textnode-as-a-child
									if(!obj[cnn].length) obj[cnn] = myArr(obj[cnn]);
									obj[cnn] = myArr(obj[cnn]);
         
									obj[cnn][ obj[cnn].length ] = parseXML(cn, true/* simple */);
         obj[cnn].length = obj[cnn].length;
        }
        else{
         /*DBG*/ //if(window.console) console.log(['x2j',nn,'node>g',cnn,'dig deeper...']);
         obj[cnn] = parseXML(cn);
        };
       };
      });
     };//node.childNodes.length>0
    };//node.childNodes
    if(node.attributes){
     if(node.attributes.length>0){
      /*DBG*/ //if(window.console) console.log(['x2j',nn,'ATTRIBUTES',node.attributes])
      att = {}; obj = obj || {};
      $.each(node.attributes, function(a,at){
       var atn = jsVar(at.name), atv = at.value;
       att[atn] = atv;
       if(obj[atn]){
        /*DBG*/ //if(window.console) console.log(['x2j',nn,'attr>',atn,'ARRAY']);
        
								// http://forum.jquery.com/topic/jquery-jquery-xml2json-problems-when-siblings-of-the-same-tagname-only-have-a-textnode-as-a-child
								//if(!obj[atn].length) obj[atn] = myArr(obj[atn]);//[ obj[ atn ] ];
        obj[cnn] = myArr(obj[cnn]);
								
								obj[atn][ obj[atn].length ] = atv;
        obj[atn].length = obj[atn].length;
       }
       else{
        /*DBG*/ //if(window.console) console.log(['x2j',nn,'attr>',atn,'TEXT']);
        obj[atn] = atv;
       };
      });
      //obj['attributes'] = att;
     };//node.attributes.length>0
    };//node.attributes
    if(obj){
     obj = $.extend( (txt!='' ? new String(txt) : {}),/* {text:txt},*/ obj || {}/*, att || {}*/);
     txt = (obj.text) ? (typeof(obj.text)=='object' ? obj.text : [obj.text || '']).concat([txt]) : txt;
     if(txt) obj.text = txt;
     txt = '';
    };
    var out = obj || txt;
    //console.log([extended, simple, out]);
    if(extended){
     if(txt) out = {};//new String(out);
     txt = out.text || txt || '';
     if(txt) out.text = txt;
     if(!simple) out = myArr(out);
    };
    return out;
   };// parseXML
   // Core Function End
   // Utility functions
   var jsVar = function(s){ return String(s || '').replace(/-/g,"_"); };
   
			// NEW isNum function: 01/09/2010
			// Thanks to Emile Grau, GigaTecnologies S.L., www.gigatransfer.com, www.mygigamail.com
			function isNum(s){
				// based on utility function isNum from xml2json plugin (http://www.fyneworks.com/ - diego@fyneworks.com)
				// few bugs corrected from original function :
				// - syntax error : regexp.test(string) instead of string.test(reg)
				// - regexp modified to accept  comma as decimal mark (latin syntax : 25,24 )
				// - regexp modified to reject if no number before decimal mark  : ".7" is not accepted
				// - string is "trimmed", allowing to accept space at the beginning and end of string
				var regexp=/^((-)?([0-9]+)(([\.\,]{0,1})([0-9]+))?$)/
				return (typeof s == "number") || regexp.test(String((s && typeof s == "string") ? jQuery.trim(s) : ''));
			};
			// OLD isNum function: (for reference only)
			//var isNum = function(s){ return (typeof s == "number") || String((s && typeof s == "string") ? s : '').test(/^((-)?([0-9]*)((\.{0,1})([0-9]+))?$)/); };
																
   var myArr = function(o){
    
				// http://forum.jquery.com/topic/jquery-jquery-xml2json-problems-when-siblings-of-the-same-tagname-only-have-a-textnode-as-a-child
				//if(!o.length) o = [ o ]; o.length=o.length;
    if(!$.isArray(o)) o = [ o ]; o.length=o.length;
				
				// here is where you can attach additional functionality, such as searching and sorting...
    return o;
   };
   // Utility functions End
   //### PARSER LIBRARY END
   
   // Convert plain text to xml
   if(typeof xml=='string') xml = $.text2xml(xml);
   
   // Quick fail if not xml (or if this is a node)
   if(!xml.nodeType) return;
   if(xml.nodeType == 3 || xml.nodeType == 4) return xml.nodeValue;
   
   // Find xml root node
   var root = (xml.nodeType == 9) ? xml.documentElement : xml;
   
   // Convert xml to json
   var out = parseXML(root, true /* simple */);
   
   // Clean-up memory
   xml = null; root = null;
   
   // Send output
   return out;
  },
  
  // Convert text to XML DOM
  text2xml: function(str) {
   // NOTE: I'd like to use jQuery for this, but jQuery makes all tags uppercase
   //return $(xml)[0];
   var out;
   try{
    var xml = ($.browser.msie)?new ActiveXObject("Microsoft.XMLDOM"):new DOMParser();
    xml.async = false;
   }catch(e){ throw new Error("XML Parser could not be instantiated") };
   try{
    if($.browser.msie) out = (xml.loadXML(str))?xml:false;
    else out = xml.parseFromString(str, "text/xml");
   }catch(e){ throw new Error("Error parsing XML string") };
   return out;
  }
		
 }); // extend $

})(jQuery);

/*
 * jQuery Templates Plugin 1.0.0pre
 * http://github.com/jquery/jquery-tmpl
 * Requires jQuery 1.4.2
 *
 * Copyright 2011, Software Freedom Conservancy, Inc.
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 */
(function(a){var r=a.fn.domManip,d="_tmplitem",q=/^[^<]*(<[\w\W]+>)[^>]*$|\{\{\! /,b={},f={},e,p={key:0,data:{}},i=0,c=0,l=[];function g(g,d,h,e){var c={data:e||(e===0||e===false)?e:d?d.data:{},_wrap:d?d._wrap:null,tmpl:null,parent:d||null,nodes:[],calls:u,nest:w,wrap:x,html:v,update:t};g&&a.extend(c,g,{nodes:[],parent:d});if(h){c.tmpl=h;c._ctnt=c._ctnt||c.tmpl(a,c);c.key=++i;(l.length?f:b)[i]=c}return c}a.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(f,d){a.fn[f]=function(n){var g=[],i=a(n),k,h,m,l,j=this.length===1&&this[0].parentNode;e=b||{};if(j&&j.nodeType===11&&j.childNodes.length===1&&i.length===1){i[d](this[0]);g=this}else{for(h=0,m=i.length;h<m;h++){c=h;k=(h>0?this.clone(true):this).get();a(i[h])[d](k);g=g.concat(k)}c=0;g=this.pushStack(g,f,i.selector)}l=e;e=null;a.tmpl.complete(l);return g}});a.fn.extend({tmpl:function(d,c,b){return a.tmpl(this[0],d,c,b)},tmplItem:function(){return a.tmplItem(this[0])},template:function(b){return a.template(b,this[0])},domManip:function(d,m,k){if(d[0]&&a.isArray(d[0])){var g=a.makeArray(arguments),h=d[0],j=h.length,i=0,f;while(i<j&&!(f=a.data(h[i++],"tmplItem")));if(f&&c)g[2]=function(b){a.tmpl.afterManip(this,b,k)};r.apply(this,g)}else r.apply(this,arguments);c=0;!e&&a.tmpl.complete(b);return this}});a.extend({tmpl:function(d,h,e,c){var i,k=!c;if(k){c=p;d=a.template[d]||a.template(null,d);f={}}else if(!d){d=c.tmpl;b[c.key]=c;c.nodes=[];c.wrapped&&n(c,c.wrapped);return a(j(c,null,c.tmpl(a,c)))}if(!d)return[];if(typeof h==="function")h=h.call(c||{});e&&e.wrapped&&n(e,e.wrapped);i=a.isArray(h)?a.map(h,function(a){return a?g(e,c,d,a):null}):[g(e,c,d,h)];return k?a(j(c,null,i)):i},tmplItem:function(b){var c;if(b instanceof a)b=b[0];while(b&&b.nodeType===1&&!(c=a.data(b,"tmplItem"))&&(b=b.parentNode));return c||p},template:function(c,b){if(b){if(typeof b==="string")b=o(b);else if(b instanceof a)b=b[0]||{};if(b.nodeType)b=a.data(b,"tmpl")||a.data(b,"tmpl",o(b.innerHTML));return typeof c==="string"?(a.template[c]=b):b}return c?typeof c!=="string"?a.template(null,c):a.template[c]||a.template(null,q.test(c)?c:a(c)):null},encode:function(a){return(""+a).split("<").join("&lt;").split(">").join("&gt;").split('"').join("&#34;").split("'").join("&#39;")}});a.extend(a.tmpl,{tag:{tmpl:{_default:{$2:"null"},open:"if($notnull_1){__=__.concat($item.nest($1,$2));}"},wrap:{_default:{$2:"null"},open:"$item.calls(__,$1,$2);__=[];",close:"call=$item.calls();__=call._.concat($item.wrap(call,__));"},each:{_default:{$2:"$index, $value"},open:"if($notnull_1){$.each($1a,function($2){with(this){",close:"}});}"},"if":{open:"if(($notnull_1) && $1a){",close:"}"},"else":{_default:{$1:"true"},open:"}else if(($notnull_1) && $1a){"},html:{open:"if($notnull_1){__.push($1a);}"},"=":{_default:{$1:"$data"},open:"if($notnull_1){__.push($.encode($1a));}"},"!":{open:""}},complete:function(){b={}},afterManip:function(f,b,d){var e=b.nodeType===11?a.makeArray(b.childNodes):b.nodeType===1?[b]:[];d.call(f,b);m(e);c++}});function j(e,g,f){var b,c=f?a.map(f,function(a){return typeof a==="string"?e.key?a.replace(/(<\w+)(?=[\s>])(?![^>]*_tmplitem)([^>]*)/g,"$1 "+d+'="'+e.key+'" $2'):a:j(a,e,a._ctnt)}):e;if(g)return c;c=c.join("");c.replace(/^\s*([^<\s][^<]*)?(<[\w\W]+>)([^>]*[^>\s])?\s*$/,function(f,c,e,d){b=a(e).get();m(b);if(c)b=k(c).concat(b);if(d)b=b.concat(k(d))});return b?b:k(c)}function k(c){var b=document.createElement("div");b.innerHTML=c;return a.makeArray(b.childNodes)}function o(b){return new Function("jQuery","$item","var $=jQuery,call,__=[],$data=$item.data;with($data){__.push('"+a.trim(b).replace(/([\\'])/g,"\\$1").replace(/[\r\t\n]/g," ").replace(/\$\{([^\}]*)\}/g,"{{= $1}}").replace(/\{\{(\/?)(\w+|.)(?:\(((?:[^\}]|\}(?!\}))*?)?\))?(?:\s+(.*?)?)?(\(((?:[^\}]|\}(?!\}))*?)\))?\s*\}\}/g,function(m,l,k,g,b,c,d){var j=a.tmpl.tag[k],i,e,f;if(!j)throw"Unknown template tag: "+k;i=j._default||[];if(c&&!/\w$/.test(b)){b+=c;c=""}if(b){b=h(b);d=d?","+h(d)+")":c?")":"";e=c?b.indexOf(".")>-1?b+h(c):"("+b+").call($item"+d:b;f=c?e:"(typeof("+b+")==='function'?("+b+").call($item):("+b+"))"}else f=e=i.$1||"null";g=h(g);return"');"+j[l?"close":"open"].split("$notnull_1").join(b?"typeof("+b+")!=='undefined' && ("+b+")!=null":"true").split("$1a").join(f).split("$1").join(e).split("$2").join(g||i.$2||"")+"__.push('"})+"');}return __;")}function n(c,b){c._wrap=j(c,true,a.isArray(b)?b:[q.test(b)?b:a(b).html()]).join("")}function h(a){return a?a.replace(/\\'/g,"'").replace(/\\\\/g,"\\"):null}function s(b){var a=document.createElement("div");a.appendChild(b.cloneNode(true));return a.innerHTML}function m(o){var n="_"+c,k,j,l={},e,p,h;for(e=0,p=o.length;e<p;e++){if((k=o[e]).nodeType!==1)continue;j=k.getElementsByTagName("*");for(h=j.length-1;h>=0;h--)m(j[h]);m(k)}function m(j){var p,h=j,k,e,m;if(m=j.getAttribute(d)){while(h.parentNode&&(h=h.parentNode).nodeType===1&&!(p=h.getAttribute(d)));if(p!==m){h=h.parentNode?h.nodeType===11?0:h.getAttribute(d)||0:0;if(!(e=b[m])){e=f[m];e=g(e,b[h]||f[h]);e.key=++i;b[i]=e}c&&o(m)}j.removeAttribute(d)}else if(c&&(e=a.data(j,"tmplItem"))){o(e.key);b[e.key]=e;h=a.data(j.parentNode,"tmplItem");h=h?h.key:0}if(e){k=e;while(k&&k.key!=h){k.nodes.push(j);k=k.parent}delete e._ctnt;delete e._wrap;a.data(j,"tmplItem",e)}function o(a){a=a+n;e=l[a]=l[a]||g(e,b[e.parent.key+n]||e.parent)}}}function u(a,d,c,b){if(!a)return l.pop();l.push({_:a,tmpl:d,item:this,data:c,options:b})}function w(d,c,b){return a.tmpl(a.template(d),c,b,this)}function x(b,d){var c=b.options||{};c.wrapped=d;return a.tmpl(a.template(b.tmpl),b.data,c,b.item)}function v(d,c){var b=this._wrap;return a.map(a(a.isArray(b)?b.join(""):b).filter(d||"*"),function(a){return c?a.innerText||a.textContent:a.outerHTML||s(a)})}function t(){var b=this.nodes;a.tmpl(null,null,null,this).insertBefore(b[0]);a(b).remove()}})(jQuery);
namespace("ItemGenerators");

ItemGenerators.ItemBase = Base.extend({
    $itemXml: null,
    type: null,
    $item: null,
    PartGetters: null,

    addNavigationHover: function ($item) {
        this.getHoverItems($item).addClass("hovered");
    },

    addNavigationHoverOnParentItemOnly: function($item){
        this.getHoverItemsForParentItemOnly($item).addClass("hovered");
    },
    removeNavigationHover: function ($item) {
        this.getHoverItems($item).removeClass("hovered");
    },

    getHoverItems: function ($control) {
        var $itemsToBeHovered = $();
        if ($control.is(".office-hover-default")) {
            $itemsToBeHovered = $itemsToBeHovered.add($control);
        }
        $itemsToBeHovered = $itemsToBeHovered.add($control.find(".office-hover-default:visible"));

        return $itemsToBeHovered;
    },

    getHoverItemsForParentItemOnly: function($control){
        var $itemsToBeHovered = $();
        if ($control.is(".office-hover-default")) {
            $itemsToBeHovered = $itemsToBeHovered.add($control);
        }
        return $itemsToBeHovered;
    },

    getItemForStandardKey: function ($item, key) {

        var $itemWrappers = $item.parents(".dropdown-items-wrapper").filter(function () {
            return $(this).parent().is(".dropdown-next-level-wrapper") || $(this).parent().is(".combobox-dropdown") || $(this).is(".gallery-items");
        });

        var $dropdown = $itemWrappers.first();
        var $itemsToLoopfrom = $dropdown.find(".dropdown-item:visible:not(.disabled)").not(".exclude_from_loop");
        var itemInfo = ControlGetters.GetControlFunctionMap[key]($item, $itemsToLoopfrom, true);
        if (itemInfo.item.length === 0) {
            itemInfo.item = ControlGetters.GetControlFunctionMap[key]($item, $itemsToLoopfrom, true, true);
            itemInfo.bounced = true;
        }

        var $newItem = itemInfo.item;
        var scrollableDiv = $newItem.parents(".items-scrollable");
        var itemHeight = $newItem.height();
        if (itemHeight == 0) {
            itemHeight = $newItem.find(".icon-binder").height();
        }


        if (scrollableDiv.length > 0 && ($item.offset().top != $newItem.offset().top)) {

            var itemTopPos = $newItem.offset().top;
            var divTopPos = scrollableDiv.offset().top;

            var newScrollTopVal = itemTopPos - divTopPos;

            if (itemTopPos > divTopPos + scrollableDiv.outerHeight() - (2 * itemHeight + 20)) {

                newScrollTopVal = itemTopPos - (divTopPos + scrollableDiv.height()) + 2 * itemHeight + scrollableDiv.scrollTop() + 20;
                scrollableDiv.scrollTop(newScrollTopVal);
            }
            else if (itemTopPos < divTopPos + (2 * itemHeight + 20)) {

                newScrollTopVal = divTopPos - itemTopPos - scrollableDiv.scrollTop() - (2 * itemHeight + 20);

                scrollableDiv.scrollTop(newScrollTopVal);
            }
        }

        var scrollableDiv = $newItem.parents(".items-font");
        if (scrollableDiv.length > 0 && ($item.offset().top != $newItem.offset().top)) {

            var itemTopPos = $newItem.offset().top;
            var divTopPos = scrollableDiv.offset().top;

            var newScrollTopVal = itemTopPos - divTopPos;

            if (itemTopPos > divTopPos + scrollableDiv.outerHeight() - $newItem.height()) {

                newScrollTopVal = itemTopPos - (divTopPos + scrollableDiv.height()) + $newItem.height() + scrollableDiv.scrollTop() + 20;
                scrollableDiv.scrollTop(newScrollTopVal);
            }
            else if (itemTopPos < divTopPos + $newItem.height()) {

                newScrollTopVal = divTopPos - itemTopPos - scrollableDiv.scrollTop() + 20;
                newScrollTopVal = Math.abs(newScrollTopVal);
                scrollableDiv.scrollTop(newScrollTopVal);
            }
        }

        return itemInfo;
    },

    ShowContextMenu: function ($item) {
        var $parentWrapper = $item.parents(".dropdown-items-wrapper:first");

        if ($item.data("contextMenuId") != undefined && $item.data("contextMenuId") != null) {
            $item.data("sendPos", true);
            $item.showContextMenu($item.data("contextMenuId"));            
            return true;
        }
        else if ($parentWrapper.data("contextMenuId") != null || $parentWrapper.data("contextMenuId") != undefined) {
            if ($item.data("cmEventId") != undefined)
                $parentWrapper.data("cmEventId", $item.data("cmEventId"));
            else
                $parentWrapper.data("cmEventId", null);
            $parentWrapper.data("sendPos", true);
            $parentWrapper.showContextMenu($parentWrapper.data("contextMenuId"));
            return true;
        }
        else {
            $parentWrapper.data("cmEventId", null);
            return false;
        }
    },


    getNextTabItem: function ($item) {
        var $currentDropdown = $item.closest(".dropdown-next-level-wrapper,.combobox-dropdown, .gallery-items-expanded");
        var exclude = ".item-type-separator";
        var include = ".dropdown-item:not(.disabled)";

        var $itemsToLoopfrom = $currentDropdown.find(include).not(exclude);

        var currentIndex = ((($itemsToLoopfrom.index($item)) + 1) % $itemsToLoopfrom.length);
        var startIndex = currentIndex;
        var $tabItem = $($itemsToLoopfrom[currentIndex]);

        while ($tabItem.is(":hidden")) {
            currentIndex = (currentIndex + 1) % $itemsToLoopfrom.length;
            if(currentIndex == startIndex)
                    return null;
            $tabItem = $($itemsToLoopfrom[currentIndex]);

        }

        var scrollableDiv = $tabItem.parents(".items-scrollable");

        if (scrollableDiv.length > 0) {

            var itemTopPos = $tabItem.offset().top;
            var divTopPos = scrollableDiv.offset().top;

            var newScrollTopVal = itemTopPos - divTopPos;

            if (itemTopPos > divTopPos + scrollableDiv.outerHeight()) {

                newScrollTopVal = itemTopPos - (divTopPos + scrollableDiv.height()) + $tabItem.outerHeight() + scrollableDiv.scrollTop() + 20;
                scrollableDiv.scrollTop(newScrollTopVal);
            }
            else if (itemTopPos < divTopPos) {

                newScrollTopVal = divTopPos - itemTopPos - scrollableDiv.scrollTop();

                scrollableDiv.scrollTop(newScrollTopVal);
            }
        }

        var scrollableDiv = $tabItem.parents(".items-font");

        if (scrollableDiv.length > 0) {

            var itemTopPos = $tabItem.offset().top;
            var divTopPos = scrollableDiv.offset().top;

            var newScrollTopVal = itemTopPos - divTopPos;

            if (itemTopPos > divTopPos + scrollableDiv.outerHeight()) {

                newScrollTopVal = itemTopPos - (divTopPos + scrollableDiv.height()) + $tabItem.outerHeight() + scrollableDiv.scrollTop() + 20;
                scrollableDiv.scrollTop(newScrollTopVal);
            }
            else if (itemTopPos < divTopPos) {

                newScrollTopVal = divTopPos - itemTopPos - scrollableDiv.scrollTop();
                newScrollTopVal = Math.abs(newScrollTopVal);
                scrollableDiv.scrollTop(newScrollTopVal);
            }
        }

        return $tabItem;


    },

    //Fix for KL032
    getPreviousTabItem: function ($item) {
        var $currentDropdown = $item.closest(".dropdown-next-level-wrapper,.combobox-dropdown, .gallery-items-expanded");
        var exclude = ".item-type-separator";
        var include = ".dropdown-item:not(.disabled)";

        var $itemsToLoopfrom = $currentDropdown.find(include).not(exclude);

        var currentIndex = $itemsToLoopfrom.index($item);
        var startIndex = currentIndex;
        currentIndex = currentIndex - 1;
        if (currentIndex < 0) {
            currentIndex = $itemsToLoopfrom.length - 1;
        }
        var $tabItem = $($itemsToLoopfrom[currentIndex]);

        while ($tabItem.is(":hidden")) {
            currentIndex = currentIndex - 1;

            if (currentIndex == startIndex) {
                return null;
            }

            if (currentIndex < 0) {
                currentIndex = $itemsToLoopfrom.length - 1;
            }
            var $tabItem = $($itemsToLoopfrom[currentIndex]);

        }

        var scrollableDiv = $tabItem.parents(".items-scrollable");

        if (scrollableDiv.length > 0) {
            if ($tabItem.hasClass("item-type-imageitem")) {
                var $imgdiv = $tabItem.find(".icon-wrapper").length > 0 ? $tabItem.find(".icon-wrapper") : $tabItem.find(".icon-binder").parent();
                var itemTopPos = $imgdiv.offset().top;
                var divTopPos = scrollableDiv.offset().top;

                var newScrollTopVal = itemTopPos - divTopPos;

                if (itemTopPos > divTopPos + scrollableDiv.outerHeight()) {

                    newScrollTopVal = itemTopPos - (divTopPos + scrollableDiv.height()) + $imgdiv.outerHeight() + scrollableDiv.scrollTop();
                    scrollableDiv.scrollTop(newScrollTopVal);
                }
                else if (itemTopPos < divTopPos) {
                    newScrollTopVal = scrollableDiv.scrollTop() - $imgdiv.outerHeight();
                    scrollableDiv.scrollTop(newScrollTopVal);
                }
            }
            else {
                var itemTopPos = $tabItem.offset().top;
                var divTopPos = scrollableDiv.offset().top;

                var newScrollTopVal = itemTopPos - divTopPos;

                if (itemTopPos > divTopPos + scrollableDiv.outerHeight()) {

                    newScrollTopVal = itemTopPos - (divTopPos + scrollableDiv.height()) + $tabItem.outerHeight() + scrollableDiv.scrollTop();
                    scrollableDiv.scrollTop(newScrollTopVal);
                }
                else if (itemTopPos < divTopPos) {
                    newScrollTopVal = scrollableDiv.scrollTop() - divTopPos + itemTopPos;
                    scrollableDiv.scrollTop(newScrollTopVal);
                }
            }
        }

        return $tabItem;


    },

    handleStandardKey: function ($item, key) {
        if (key === "ENTER" || key === "RIGHT" && $item.find('.dropdown-next-level-wrapper:first').length > 0) {
            this.handleAccessKey($item, key);
            return true;
        }
        return false;
    },
    handleAccessKey: function ($item, key) {
        var $subItems = $item.find('.dropdown-next-level-wrapper:first');
        if (key === "ESCAPE") {
            $subItems.hide();
        }

        else if ($subItems.length > 0) {
            ControlGenerators.ItemsGenerator.prototype.showSubItems($item, $subItems);
            //$subItems.first().fadeIn(200);
        }
        else {
            this.fireEventOnParentControl.apply($item, [{ data: {self: this}}]);
            return true;
        }
    },
    Init: function ($itemXml) {
        //Disabled handling
        var className = 'dropdown-item office-hover-default Sim5-ContextMenuItem';
        if ($itemXml.getTrueOrFalse('disabled')) {
            className = 'dropdown-item disabled';
        }

        var $item = UIUtils.getUnselectableDiv('', className);

        this.AddCustomClassName($item, $itemXml);

        this.AddTooltip($item, $itemXml);

        this.PartGetters = ['getItemTextPart'];

        return $item;
    },

    AddTooltip: function ($item, $itemXml) {
        var tooltipText = $itemXml.attr("tooltip");

        if ($itemXml.children('tooltips').length > 0) {
            var xToolTip = null;
            xToolTip = $itemXml.find('tooltips tooltip');
            $item.addTooltip(xToolTip);
        }
        else if (tooltipText) {
            $item.attr("title", tooltipText);
        }
    },

    AddCustomClassName: function ($item, $itemXml) {
        var className = $itemXml.attr("classname");
        if (className) {
            $item.addClass(className);
        }
    },

    AttachKeyboardShortcutHolders: function ($item, $itemXml) {
        var shortCut = $itemXml.attr("ak");
        if (shortCut != null && shortCut.length > 0) {
            $item.addShortCut(shortCut);
        }
    },
    MakeItem: function ($item, $itemXml, contextMenuType) {
        for (var i = 0; i < this.PartGetters.length; i++) {
            if (this[this.PartGetters[i]] != null) {
                $item.append(this[this.PartGetters[i]]($itemXml));
            }
        }

        this.AddSeprator($item, $itemXml);

        this.AddSubItemArrow($item);

        this.AttachData($item, $itemXml, 'eventId');

        this.AttachData($item, $itemXml, 'ICMessageId');

        this.AttachData($item, $itemXml, 'itemValue');

        this.AttachData($item, $itemXml, 'cmEventId');

        this.AttachData($item, $itemXml, 'ImageItemText');

        this.AttachItemType($item);

        this.AddFunctionality($item);

        this.AttachKeyboardShortcutHolders($item, $itemXml);

        this.BlockRightClick($item);

        if (contextMenuType !== "JSON") {  // this check was added so that old context menu does not gets attached if menuType attribute is given in ribbon.xml.
            this.AddContextMenu($item, $itemXml);
        }

        this.AddClickstreamInfo($item, $itemXml);
    },

    AddSeprator: function($item, $itemXml){
        //default Separator
        if ($itemXml.attr('separator') == 'true') {
            $item.addClass('dropdown-item-text-separator');
        }

        //dashed seperator
        else if ($itemXml.attr('separator') == 'dashed') {
            $item.addClass('dropdown-item-text-separator-dashed');
        }
    },
    AddContextMenu: function ($item, $itemXml) {
        var xContextMenu = $itemXml.children("contextmenu").children("items").first();

        if (xContextMenu.length > 0) {
            var $contextMenu = ControlGenerators.ItemsGenerator.prototype.GetItems(xContextMenu);

            $contextMenu.addClass("contextMenu combobox-dropdown");
            //$contextMenu.attr('id', "ribbon-cm-" + this.$controlXml.attr('text').removeSpaces());

            $item.append($contextMenu);

            this.bindContextMenu($contextMenu, $item);
        }



        /*if( $item.data('eventId')!=null && $item!=null && args)
        {
        if($itemXml.attr("cmData"))
        {
        var contextMenuData = $.parseJSON($itemXml.attr("cmData"));
        $item.data("contextMenuId", $item.data('eventId')+this.$item.index());
        $item.addContextMenu($item.data("contextMenuId"), contextMenuData, this.ContextMenuCallback, this, contextMenuTheme.EXCEL, menuTypes.genericContextMenu, contextMenuLocation.LEFT_BOTTOM);
        }
        else if(args[0] != undefined)
        {
        var contextMenuData = $.parseJSON(args[0]);
        $item.data("contextMenuId", args[1]);
        $item.addContextMenu($item.data("contextMenuId"), contextMenuData, this.ContextMenuCallback, this, contextMenuTheme.EXCEL, menuTypes.genericContextMenu, contextMenuLocation.LEFT_BOTTOM);
        }

        } */

    },

    bindContextMenu: function ($contextMenu, $item) {
        $item.contextMenu({
            $menu: $contextMenu,
            //captureClickFor: captureClick,
            //doNotHideOnClickOf: '.shyToolBarInside',
            //shyToolBar: '.shyToolBarInside',
            inSpeed: 25,
            outSpeed: 50
        });
    },

    /*ContextMenuCallback: function (args) {
    var currentTargetElement = args[0];
    var responseEvent = args[1];

    switch (responseEvent.type) {
    case callBackType.CALLBACK_ON_SELECTION:
    this.fireContextMenuEvent(currentTargetElement.data("cmEventId"),responseEvent.desc);
    break;

    case callBackType.CALLBACK_ON_FOCUS:

    break;

    case callBackType.CALLBACK_ON_HIDE:

    break;

    case callBackType.CUSTOMIZATION_REQUEST:
    if(currentTargetElement.data("sendPos")== true)
    {
    currentTargetElement.data("sendPos",false);

    var customizationResponse = {

    posDim: {
    x : currentTargetElement.offset().left,
    y : currentTargetElement.offset().top,
    targetH : 10,
    targetW : 10
    }

    };
    return customizationResponse;
    }
    break;

    default:
    break;
    }
    },*/

    BlockRightClick: function ($item) {
        $item.bind("contextmenu", function (e) {
            //e.stopPropagation();
            e.preventDefault();

        });
    },

    AddSubItemArrow: function ($item) {
        var icondiv = UIUtils.getUnselectableDiv('', 'dropdown-item-nextlevel-arrow');
        var icon = getRightArrow();
        $(icondiv).append(icon);
        $item.append(icondiv);
    },

    AttachItemType: function ($item) {
        $item.data("itemType", this.type);
    },
    AttachData: function ($item, $itemXml, dataId) {
        var eventId = $itemXml.attr(dataId);
        if (eventId != null && !Polyfills.string.isEmpty(eventId)) {
            $item.data(dataId, eventId);
        }
    },
    AddFunctionality: function ($item) {
        var self = this;
        $item.click({self: self},this.fireEventOnParentControl);
        $item.mousedown(function (e) { e.preventDefault(); });
    },
    fireEventOnParentControl: function (e) {
        var $this = $(this);

        var self = e.data.self;
        var evt = e; //Backup of the e object
        var clickstreamInfo = "";

        if (!(e instanceof $.Event)) {
            e = null; //To bypass if (e) conditions in case e is not a jQuery event object
        }
        var dropdownItemWrapper = $this.find(".dropdown-next-level-wrapper:first .dropdown-items-wrapper");
        
        //added on 25.9.2013 so as to prevent triggering "selectedIndexChanged" event (hence INCORRECT ACTION) when item with sub items is clicked....
        if ($this.is(".dropdown-item") && $this.find(".dropdown-next-level-wrapper:first .dropdown-items-wrapper").children(".dropdown-item").length != 0) {
            if (e) {
                e.preventDefault();
                e.stopPropagation();
            }
        }
        //added on 22 jan 2016 as a fix for following issue SO-27063. Gallery shape Item does not have dropdown item as it immediate children. Therefore checking if item is gallery shape and has dropdown item anywhere inside it. 
        else if ($this.is(".dropdown-item") && dropdownItemWrapper.children(".GalleryShape").length != 0 && dropdownItemWrapper.find(".dropdown-item").length != 0) {
            if (e) {
                e.preventDefault();
                e.stopPropagation();
            }
        }
        else {
            var $gallery = $this.parents(".ctrl-gallery");
            if ($gallery.length > 0) {
                $gallery.trigger("itemSelected");
            }

            ControlGenerators.ComboBox.prototype.DropdownCloser.call();
            $(".dropdown-next-level-wrapper, .combobox-dropdown").hide();

            if (e) {
                e.stopPropagation();
            }
            var $this = $(this);
            var itemText = "";

            var $comboBox = $this.closest(".office-control");

            if ($comboBox.length == 0) {
                $comboBox = $this.closest(".combobox-dropdown");
            }

            if ($comboBox.length == 0) {
                $comboBox = $this.closest(".ribbon");
            }

            if ($this.is(".dropdown-item")) {
                itemText = $this.text();
                clickstreamInfo += self.GetClickstreamInfo($this, evt);
            }
            else if ($this.is(".dropdown-image-item")) {
                itemText = $this.data('imageName');
            }
            var eventId = $this.data('eventId');
            var ICMessageId = $this.data('ICMessageId');
            var itemValue = $this.data('itemValue');

            //get click stream of parent drop down items if any 
            var $parentDropdownItems = $this.parentsUntil(".office-control").filter(".dropdown-item");
            if($parentDropdownItems.length > 0) {
                clickstreamInfo = $parentDropdownItems.eq(0).data('clickstreamInfo') + " : " + clickstreamInfo;
            }

            var controlClickstreamInfo = $comboBox.data('clickstreamInfo');
            controlClickstreamInfo =controlClickstreamInfo ? controlClickstreamInfo + " : " : "";
            clickstreamInfo = controlClickstreamInfo + clickstreamInfo;
            $comboBox.trigger('selectedIndexChanged', [itemText, eventId, ICMessageId, itemValue, clickstreamInfo]);
        }

    },

    /*fireContextMenuEvent: function (cmEventId, desc) {

    var $this = $(this);
    var $gallery = $this.parents(".ctrl-gallery");

    if ($gallery.length > 0) {
    $gallery.trigger("itemSelected");
    }

    ControlGenerators.ComboBox.prototype.DropdownCloser.call();
    $(".dropdown-next-level-wrapper, .combobox-dropdown").hide();


    var $this = this.$item;

    var $comboBox = $this.closest(".office-control");

    if ($comboBox.length == 0) {
    $comboBox = $this.closest(".combobox-dropdown");
    }

    if ($comboBox.length == 0) {
    $comboBox = $this.closest(".ribbon");
    }
    $comboBox.trigger('selectedIndexChanged', ["Context menu item clicked", cmEventId,null , desc]);


    },*/


    getItemTextPart: function ($itemXml) {
        var itemText = $itemXml.attr('text');
        var $text = UIUtils.getUnselectableDiv('', 'dropdown-item-text');

        //Done for fixing SO-11199
        //default Separator
        // if ($itemXml.attr('separator') == 'true') {
        //     $text.addClass(' dropdown-item-text-separator');
        // }

        // //dashed seperator
        // else if ($itemXml.attr('separator') == 'dashed') {
        //     $text.addClass(' dropdown-item-text-separator-dashed');
        // }

        $text.text(itemText);
        return $text;
    },
    getItem: function (xItem, type, contextMenuType) {
        var $itemXml = $(xItem);
        this.type = type;
        var $item = this.Init($itemXml);
        this.MakeItem($item, $itemXml, contextMenuType);

        this.$item = $item;
        //add ids - required for practice mode
        if ($itemXml.attr('id') && $item.attr("id") == null)        //avoid overriding already assigned ids
        {
            $item.attr("id", $itemXml.attr('id'));
        }

        return $item;
    },

    //To add clickstream info for items in the data of the item
    AddClickstreamInfo: function ($item, $itemXml) {
       $item.data('clickstreamInfo', ($itemXml.attr('text') || ""));
    },

    //To extract clickstream info
    GetClickstreamInfo: function ($item, e) {
        return ($item.data('clickstreamInfo') || "");
    }
});
namespace("ItemGenerators2016");

ItemGenerators2016.ItemBase = ItemGenerators.ItemBase.extendOverwrite({

    getItem: function (xItem, type, contextMenuType, IsRibbonItem) { 
        // IsRibbonItem argument is added to check if the item created is for ribbon or some other component
        this.IsRibbonItem = IsRibbonItem;
        return this.base(xItem, type, contextMenuType);
    },

    getItemTextPart: function ($itemXml) {    
        var itemText = $itemXml.attr('text');
        var $text = UIUtils.getUnselectableDiv('', 'dropdown-item-text');
        if(this.IsRibbonItem){
            var innerHtml = this.getItemTextInnerHtml($itemXml);
            $text.html(innerHtml);
        }
        else{
            $text.text(itemText);
        }
        return $text;
    },

    getItemTextInnerHtml: function ($itemXml) {
        
        // Changes done for SO-74398
        // $itemXml.attr('textForAccKey') property was added to store text with ~ sign in order to underline the access char evertime after reset
        // $itemXml.attr('text') was set to text without '~' as this is used as many other places also like showing clickstream, text in dropdown item.

        var newHTML, itemText;
        newHTML = itemText = $itemXml.attr('textForAccKey') || $itemXml.attr('text');
        
        if (itemText) {

            var tildeSplitArray = itemText.split("~");

            if (tildeSplitArray.length === 1) {
                var accesskey = $itemXml.attr('ak');
                if (accesskey) {
                    var aksplittedarray = itemText.toLowerCase().split(accesskey.toLowerCase());
                    if (aksplittedarray.length > 1) { //if access key is present
                        newHTML = itemText.substring(0, aksplittedarray[0].length) + '<span class="dropdown-item-accesskeyChar">' + itemText.charAt(aksplittedarray[0].length) + '</span>' + itemText.substring(aksplittedarray[0].length + 1);
                    }
                }
            }
            else if (tildeSplitArray.length === 2) {
                newHTML = tildeSplitArray[0] + '<span class="dropdown-item-accesskeyChar">' + tildeSplitArray[1].charAt(0) + '</span>' + tildeSplitArray[1].substring(1);
                $itemXml.attr('text', tildeSplitArray.join(""));
                $itemXml.attr('textForAccKey', itemText);
            }
        }

        return newHTML;
    },

    handleAccessKey: function ($item, key) {
        var $subItems = $item.find('.dropdown-next-level-wrapper:first');
        if (key === "ESCAPE") {
            $subItems.hide();
            $item.trigger("hideSubItems");
        }
        else{
            return this.base($item, key);
        }
    }

});
namespace("ItemGenerators");

ItemGenerators.IconAndText = ItemGenerators.ItemBase.extend({
    Init: function ($itemXml) {
        var $item = this.base($itemXml);
        this.PartGetters = ['getIconPart', 'getItemTextPart'];

        return $item;
    },


    getIconPart: function ($itemXml) {
        var $icon = UIUtils.getUnselectableDiv('', 'dropdown-item-icon');
        var iconSrc = $itemXml.getAttribute('icon', null);
        if (iconSrc != null) {
            $icon.attr('style', 'background-image:url(' + iconSrc + ');');
        }
        else if ($itemXml.children('icon').length > 0) {
            $icon.append(getIcon($itemXml.find('icon')));
        }
        else if($itemXml.attr('showIcon') == "false" || $itemXml.attr('showIcon')==false)
        {
            $icon.addClass("no-icon");
        }
        return $icon;
    }
});
namespace("ItemGenerators");
ItemGenerators.ImageItem = ItemGenerators.ItemBase.extend({
    Init: function ($itemXml) {
        var $item = this.base($itemXml)
        this.PartGetters = ['getImage'];
        return $item;
    },

    AddSubItemArrow: function () {
    },

    getImage: function ($itemXml) {
        //var itemDiv = UIUtils.getUnselectableSpan('', 'dropdown-image-item');
        var $iconPart = getIcon($itemXml.find('icon'));

        $iconPart.addClass('office-hover-default');
        if ($itemXml.attr("disabled") == "true") {
            $iconPart.removeClass('office-hover-default');
        }

        //        itemDiv.append($iconPart);
        //        itemDiv.data('imageName', this.$itemXml.attr('text'));

        return $iconPart;
    },

    AddClickstreamInfo: function ($item, $itemXml) {
        var itemText = "Item clicked";
        var $tooltipHeader = $itemXml.find("tooltip>header");

        if ($tooltipHeader.length > 0) { //If there is a rich tooltip
            itemText = $tooltipHeader.eq(0).text(); //eq(0) -- to guard against the condition when more than
            //one tooltip is there for a single image item (no such case found at the time of writing code)
        }

        else { //Try finding simple tooltip
            var simpleTooltip = $itemXml.attr("tooltip");
            if (simpleTooltip) {
                itemText = simpleTooltip;
            }
        }

        $item.data('clickstreamInfo', itemText);

    }
});
namespace("ItemGenerators");

//////////////////////////FONT ITEMS/////////////////////////////
ItemGenerators.Font = ItemGenerators.IconAndText.extend({
    getIconPart: function ($itemXml) {
        var $icon = $("<div class='font-dropdown-item-icon dropdown-item-icon'/>");
        
        if($itemXml.attr('showIcon') == "false" || $itemXml.attr('showIcon')==false)
        {
            $icon.addClass("no-icon");
        } 
        
        return $icon;
    },

    getItemTextPart: function ($itemXml) {
        var itemText = $itemXml.attr("text");
        var $itemText = $('<div class="dropdown-item-text" unselectable="on" style="font-size:12pt;font-family: ' + itemText + ';">' + itemText + '</div>');
        return $itemText;
    }  
});

namespace("ItemGenerators");
ItemGenerators.ItemHeader = ItemGenerators.ItemBase.extend({
    getItemTextPart: function ($itemXml) {
        var $headerWrapper = UIUtils.getUnselectableDiv('', 'items-header-wrapper');
        var itemDiv = UIUtils.getUnselectableDiv('', 'items-ItemHeader');
        $(itemDiv).text($itemXml.attr('text'));

        itemDiv.appendTo($headerWrapper);

        return $headerWrapper;
    },
    AddSubItemArrow:function () {
    },
    fireEventOnParentControl: function () {
    }
});
namespace("ItemGenerators");

ItemGenerators.IconTextDesc = ItemGenerators.IconAndText.extend({
    getItemTextPart: function ($itemXml) {
        var $textPart = $('<div class="dropdown-item-text" unselectable="on" />');
        var $text = this.getValue($itemXml);
        var $desc = this.getDesc($itemXml);

        $textPart.append($text, $desc);
        return $textPart;
    },
    getIconPart: function ($itemXml) {
        var $icon = ItemGenerators.IconAndText.prototype.getIconPart($itemXml);
        $icon.addClass("dropdown-big-icon");
        return $icon;
    },
    getValue: function ($itemXml) {
        var text = $itemXml.attr('text');
        text = text != null && !Polyfills.string.isEmpty(text) ? text : "";
        return $('<div class="dropdown-item-value" unselectable="on"><b>' + text + '</b></div>');
    },
    getDesc: function ($itemXml) {
        var desc = $itemXml.attr('desc');
        desc = desc != null && !Polyfills.string.isEmpty(desc) ? desc : "";
        return $('<div class="dropdown-item-desc" unselectable="on">' + desc + '</div>');
    }
});
                  
  
namespace("ItemGenerators2016");

ItemGenerators2016.IconTextDesc = ItemGenerators.IconTextDesc.extend({
    getValue: function ($itemXml) {
	    var text;
	    if(this.IsRibbonItem){
	    	text = this.getItemTextInnerHtml($itemXml);
		}
		else{
			text = $itemXml.attr('text');
		}
        text = text != null && !Polyfills.string.isEmpty(text) ? text : "";
        return $('<div class="dropdown-item-value" unselectable="on"><b>' + text + '</b></div>');
    }
});
                  
  
namespace("ItemGenerators");

ItemGenerators.Separator = ItemGenerators.ItemBase.extend({
    getItem: function (xItem, type) {
        var $itemXml = $(xItem);
        var separatormode = $itemXml.attr('mode');
        var cssclass;
        if (separatormode == 'solid') {
            cssclass = ' dropdown-item-text-separator';
        }
        else if (separatormode == 'dashed') {
            cssclass = ' dropdown-item-text-separator-dashed';
        }
        var itemDiv = UIUtils.getUnselectableDiv('', cssclass);
        return itemDiv;
        //SIMS.Controls.Factory
        //$iconPart.addClass('office-hover-default');
        //return $iconPart;
    }
});
namespace("ItemGenerators");
ItemGenerators.Text = ItemGenerators.ItemBase.extend();
namespace("ItemGenerators");
ItemGenerators.Default = ItemGenerators.IconAndText.extend();
namespace("ItemGenerators");

ItemGenerators.ColorPicker = ItemGenerators.ItemBase.extend({
    Init: function ($itemXml) {
        var $item = this.base($itemXml);
        this.PartGetters = ['getControl'];

        return $item;
    },

    AddSubItemArrow: function () {
    },


    getNextTabItem: function ($item) {
        return this.getItemForStandardKey($item, "TAB");
    },



    getItemForStandardKey: function ($item, key) {
        //Local variable required for your controls will be declared here

        if ($($item).data("goToNext") == true) {
            $($item).data("goToNext", false);

            if (key == "TAB" || key == "SHIFT+TAB") {
                return this.tabToNext($item);
            }
            else {
                return this.navigateToNext($item, key);
            }
        }

        var $control = $($item).find(".sims-ColorGrid").first();
        var colorGridType = $control.data('colorGridType');
        var currIndex = 1;
        var nextIndex = 2;
        var colorPickerManipulator = this.manipulatorFactory.getManipulator($control);


        if (colorGridType === "backgroundColor") {

            if (!(currIndex >= 0 && currIndex <= 70)) {
                currIndex = 0;
            }

            switch (key) {

                case "TAB": //Tab
                    $control.find(".i-" + currIndex).removeClass('clr-focus');
                    break;

                case "LEFT": //Left Key
                    if (currIndex > 0) {
                        nextIndex = currIndex - 1;
                    }
                    colorPickerManipulator.focusChange($control, currIndex, nextIndex);

                    break;

                case "RIGHT": //Right Key
                    if (currIndex < 70) {
                        nextIndex = currIndex + 1;
                    }

                    colorPickerManipulator.focusChange($control, currIndex, nextIndex);

                    break;

                case "UP": //Up Key
                    if ((currIndex > 0 && currIndex <= 10) || (currIndex > 60 && currIndex <= 70)) {
                        nextIndex = currIndex - 1;
                    }
                    colorPickerManipulator.focusChange($control, currIndex, nextIndex);

                    break;
                case "DOWN":  //Down Key
                    if ((currIndex >= 0 && currIndex < 10) || (currIndex > 60 && currIndex < 70)) {
                        nextIndex = currIndex + 1;
                    }

                    colorPickerManipulator.focusChange($control, currIndex, nextIndex);

                    break;

                default:
                    break;
            }

        }

        else if (colorGridType === "patternColor") {

            switch (key) {

                case "TAB": //Tab

                    if (currIndex >= 1 && currIndex <= 69) {
                        nextIndex = currIndex + 1;
                    }

                    colorPickerManipulator.focusChange($control, currIndex, nextIndex);

                    break;

                case "LEFT": //Left Key
                    if (currIndex % 10 === 1) {
                        nextIndex = currIndex + 9;
                    }

                    colorPickerManipulator.focusChange($control, currIndex, nextIndex);

                    break;

                case "RIGHT": //Right Key
                    if (currIndex % 10 !== 0) {
                        nextIndex = currIndex + 1;
                    }
                    colorPickerManipulator.focusChange($control, currIndex, nextIndex);

                    break;

                case "UP": //Up Key
                    if ((currIndex >= 1 && currIndex <= 10) || currIndex === 0 || currIndex === 71 || currIndex === 100) {
                        nextIndex = colorPickerManipulator.findNextIndex($control, currIndex, 'UP');
                        if (nextIndex == null) {
                            return this.navigateToNext($item, key);
                        }
                    }
                    colorPickerManipulator.focusChange($control, currIndex, nextIndex);
                    break;

                case "DOWN":  //Down Key
                    if (currIndex >= 1 && currIndex <= 60) {
                        nextIndex = currIndex + 10;
                    }

                    colorPickerManipulator.focusChange($control, currIndex, nextIndex);

                    break;

                default:
                    break;
            }



        }

        return $item;

    },


    navigateToNext: function ($item, key) {
        var $itemWrappers = $item.parents(".dropdown-items-wrapper").filter(function () {
            return $(this).parent().is(".dropdown-next-level-wrapper") || $(this).parent().is(".combobox-dropdown") || $(this).is(".gallery-items");
        });

        var $dropdown = $itemWrappers.first();
        var $itemsToLoopfrom = $dropdown.find(".dropdown-item:visible:not(.disabled)").not(".exclude_from_loop");
        var itemInfo = ControlGetters.GetControlFunctionMap[key]($item, $itemsToLoopfrom, true);
        if (itemInfo.item.length === 0) {
            itemInfo.item = ControlGetters.GetControlFunctionMap[key]($item, $itemsToLoopfrom, true, true);
            itemInfo.bounced = true;
        }

        var $newItem = itemInfo.item;
        var scrollableDiv = $newItem.parents(".items-scrollable");
        var itemHeight = $newItem.height();
        if (itemHeight == 0) {
            itemHeight = $newItem.find(".icon-binder").height();
        }


        if (scrollableDiv.length > 0) {

            var itemTopPos = $newItem.offset().top;
            var divTopPos = scrollableDiv.offset().top;

            var newScrollTopVal = itemTopPos - divTopPos;

            if (itemTopPos > divTopPos + scrollableDiv.outerHeight() - (2 * itemHeight + 20)) {

                newScrollTopVal = itemTopPos - (divTopPos + scrollableDiv.height()) + 2 * itemHeight + scrollableDiv.scrollTop() + 20;
                scrollableDiv.scrollTop(newScrollTopVal);
            }
            else if (itemTopPos < divTopPos + (2 * itemHeight + 20)) {

                newScrollTopVal = divTopPos - itemTopPos - scrollableDiv.scrollTop() - (2 * itemHeight + 20);

                scrollableDiv.scrollTop(newScrollTopVal);
            }
        }

        var scrollableDiv = $newItem.parents(".items-font");
        if (scrollableDiv.length > 0) {

            var itemTopPos = $newItem.offset().top;
            var divTopPos = scrollableDiv.offset().top;

            var newScrollTopVal = itemTopPos - divTopPos;

            if (itemTopPos > divTopPos + scrollableDiv.outerHeight() - $newItem.height()) {

                newScrollTopVal = itemTopPos - (divTopPos + scrollableDiv.height()) + $newItem.height() + scrollableDiv.scrollTop() + 20;
                scrollableDiv.scrollTop(newScrollTopVal);
            }
            else if (itemTopPos < divTopPos + $newItem.height()) {

                newScrollTopVal = divTopPos - itemTopPos - scrollableDiv.scrollTop() + 20;
                newScrollTopVal = Math.abs(newScrollTopVal);
                scrollableDiv.scrollTop(newScrollTopVal);
            }
        }

        return itemInfo;
    },

    tabToNext: function ($item) {

        //normal tab handling..

        var $currentDropdown = $item.closest(".dropdown-next-level-wrapper,.combobox-dropdown, .gallery-items-expanded");
        var exclude = ".item-type-separator";
        var include = ".dropdown-item:not(.disabled)";

        var $itemsToLoopfrom = $currentDropdown.find(include).not(exclude);

        var currentIndex = ((($itemsToLoopfrom.index($item)) + 1) % $itemsToLoopfrom.length);

        var $tabItem = $($itemsToLoopfrom[currentIndex]);

        while ($tabItem.is(":hidden")) {
            currentIndex = (currentIndex + 1) % $itemsToLoopfrom.length;

            $tabItem = $($itemsToLoopfrom[currentIndex]);

        }

        var scrollableDiv = $tabItem.parents(".items-scrollable");

        if (scrollableDiv.length > 0) {

            var itemTopPos = $tabItem.offset().top;
            var divTopPos = scrollableDiv.offset().top;

            var newScrollTopVal = itemTopPos - divTopPos;

            if (itemTopPos > divTopPos + scrollableDiv.outerHeight()) {

                newScrollTopVal = itemTopPos - (divTopPos + scrollableDiv.height()) + $tabItem.outerHeight() + scrollableDiv.scrollTop() + 20;
                scrollableDiv.scrollTop(newScrollTopVal);
            }
            else if (itemTopPos < divTopPos) {

                newScrollTopVal = divTopPos - itemTopPos - scrollableDiv.scrollTop();

                scrollableDiv.scrollTop(newScrollTopVal);
            }
        }

        var scrollableDiv = $tabItem.parents(".items-font");

        if (scrollableDiv.length > 0) {

            var itemTopPos = $tabItem.offset().top;
            var divTopPos = scrollableDiv.offset().top;

            var newScrollTopVal = itemTopPos - divTopPos;

            if (itemTopPos > divTopPos + scrollableDiv.outerHeight()) {

                newScrollTopVal = itemTopPos - (divTopPos + scrollableDiv.height()) + $tabItem.outerHeight() + scrollableDiv.scrollTop() + 20;
                scrollableDiv.scrollTop(newScrollTopVal);
            }
            else if (itemTopPos < divTopPos) {

                newScrollTopVal = divTopPos - itemTopPos - scrollableDiv.scrollTop();
                newScrollTopVal = Math.abs(newScrollTopVal);
                scrollableDiv.scrollTop(newScrollTopVal);
            }
        }

        return $tabItem;
    },


    getControl: function ($itemXml) {

        this.manipulatorFactory = new SIMS.Manipulators.RibbonControlManipulatorFactory();

        var $ribbon = SIMS.Objects.DOMElements.Ribbon;

        var theme = (($ribbon!=null) && ($ribbon.length!=0)) ? ($ribbon.attr("theme") ? $ribbon.attr("theme") : 'Office') : 'Office';
        var recentColors = null;

        //Added this check to avoid crash in the Access Ribbon as Lazy Loading has not yet been implemented in the same.
        if ($ribbon !== undefined && $ribbon!=null) {
            if ($ribbon.attr("recentColors") !== undefined) {
                recentColors = $ribbon ? (JSON.parse($ribbon.attr("recentColors")) ? JSON.parse($ribbon.attr("recentColors")) : null) : null;
            }
        }

        var controlParams =
        {
            "type": "ColorGrid",
            "colorGridType": "patternColor",
            "patternType": "simplePattern",
            "theme": theme,
            "recentColors": recentColors,
            "selectedColor": "FFFFFF"
        };

        var sMode = $itemXml.attr('mode');
        if (sMode) {
            controlParams.patternType = sMode;
        }

        var self = this;

        var colorPickedCallBack = function (controlName, $control, myCallbackData) {
            console.log(myCallbackData.index + "th color picked");
            if (this.$item != null && myCallbackData.eventID == 3) {       //only for enter or spacebar
                this.$item.trigger("colorPicked", [myCallbackData]);
                $control = $($control).filter(function () { return $(this).is(":visible"); });
                self.fireEventOnParentControl.apply($($control).parent(".dropdown-item"),[{ data: { self: this, color: myCallbackData.text || myCallbackData.message} }]); // additional parameter was passed in order to correct the text on the report page
            }

            if (myCallbackData.eventID === 1 || myCallbackData.eventID === 3) {
                $control.trigger("colorchanged", [$control, myCallbackData]);
            }
        };

        var $control = SIMS.Controls.Factory.getControl("", controlParams, this, colorPickedCallBack);
        return $control;
    },

    //Overriding GetClickstreamInfo for ColorPicker, because the clickstream info can only be generated
    //after the event is triggered
    GetClickstreamInfo: function ($item, e) {
        var itemText = "Color Picked ";

        if (e) {
            if (e instanceof $.Event) {
                var colorName = "";
                var $evtTarget = $(e.target); 
                var $closestColor = $evtTarget.closest(".color");
                colorName = $closestColor.length > 0 ? $closestColor.attr('title') : "";
                              
                if(colorName)  {
                    itemText += ": " + colorName;
                }

                else  {
                    var text = $evtTarget.contents().filter(function(){ 
                        return this.nodeType == 3; 
                    }).text();
                    if(text) {
                        itemText += ": " + text; 
                    }
                    // itemText = itemText + $evtTarget.text();   
                }
            }
            else { //for keyboard handling
                itemText += ": " + e.data.color;
            }
        }

        return itemText;
    }

    

});
namespace("ItemGenerators2016");

ItemGenerators2016.ColorPicker = ItemGenerators.ColorPicker.extend({
    getControl: function ($itemXml) {
        this.manipulatorFactory = new SIMS.Manipulators.RibbonControlManipulatorFactory();
        var $ribbon = SIMS.Objects.DOMElements.Ribbon;

        var theme = (($ribbon!=null) && ($ribbon.length!=0)) ? ($ribbon.attr("theme") ? $ribbon.attr("theme") : 'Office') : 'Office';
        var recentColors = null;

        //Added this check to avoid crash in the Access Ribbon as Lazy Loading has not yet been implemented in the same.
        if ($ribbon !== undefined && $ribbon!=null) {
            if ($ribbon.attr("recentColors") !== undefined) {
                recentColors = $ribbon ? (JSON.parse($ribbon.attr("recentColors")) ? JSON.parse($ribbon.attr("recentColors")) : null) : null;
            }
        }

        var controlParams =
        {
            "type": "ColorGrid",
            "colorGridType": "patternColor",
            "patternType": "simplePattern",
            "theme": theme,
            "recentColors": recentColors,
            "selectedColor": "FFFFFF"
        };

        var sMode = $itemXml.attr('mode');
        if (sMode) {
            controlParams.patternType = sMode;
        }
        var preventCircularTabAndDown = $itemXml.attr('preventCircularTabAndDown');
        if (preventCircularTabAndDown) {
            controlParams.preventCircularTabAndDown = preventCircularTabAndDown;
        }

        var self = this;

        var colorPickedCallBack = function (controlName, $control, myCallbackData) {
            console.log(myCallbackData.index + "th color picked");
            if (this.$item != null && myCallbackData.eventID == 3) {       //only for enter or spacebar
                this.$item.trigger("colorPicked", [myCallbackData]);
                $control = $($control).filter(function () { return $(this).is(":visible"); });
                self.fireEventOnParentControl.apply($($control).parent(".dropdown-item"),[{ data: { self: this, color: myCallbackData.text || myCallbackData.message} }]); // additional parameter was passed in order to correct the text on the report page
            }

            if (myCallbackData.eventID === 1 || myCallbackData.eventID === 3) {
                $control.trigger("colorchanged", [$control, myCallbackData]);
            }
        };

        var $control = SIMS.Controls.Factory.getControl("", controlParams, this, colorPickedCallBack);
        return $control;
    }
});
                  
  
namespace("ControlGenerators");

ControlGenerators.ItemsGenerator = function () {};
ControlGenerators.ItemsGenerator.prototype.Default = function () { };
ControlGenerators.ItemsGenerator.prototype.GetItems = function (xItems, parentType) {
    var children = $(xItems).children();

    //Get type
    var currentType = this.GetItemType(xItems, parentType);

    //$(xItems).attr('type') == null ? parentType : $(xItems).attr('type');
    //currentType = currentType == null ? 'Default' : currentType;
    var itemHt;
    //Wrapper
    var $items = UIUtils.getUnselectableDiv('', 'dropdown-items-wrapper items-' + currentType.toLowerCase());
    if ($(xItems).attr('wd') != null) {
        $items.css('width', $(xItems).attr('wd'));
    }

    if ($(xItems).attr('ht') != null) {
        itemHt = $(xItems).attr('ht');
    }

    //added on 15th May 2013. This can be used where items wrapper should be scrollable. Takes value from ribbon xml
    if ($(xItems).attr('max-height') != null) {
        var itemMaxHt = $(xItems).attr('max-height');
        $items.css('max-height', itemMaxHt);
    }
    
//    else {
//        itemHt = '24px';
//    }
    var $itemsText = $(xItems).attr('text');

    if ($itemsText != null) {
        $items.append($itemsText);
    }

    var contextMenuId = $(xItems).attr('menuId');
    var id = $(xItems).attr('id');

    this.InitializeFlags(xItems);

    for (var i = 0; i < children.length; i++) {
        var currentChild = children[i];
        var tagName = $(currentChild).tagName().toLowerCase();
        var type = this.GetItemType(currentChild, currentType);
        if (tagName == 'items') {
            $items.append(this.GetItems(currentChild, type));
        }
        else if (tagName == 'item') {
            var itemdiv = this.GetItem(currentChild, type);
            itemdiv.css('height', itemHt);
            $items.append(itemdiv);
        }
    }

    if($(xItems).attr('resizeHandles')){
        var $resizehandle = UIUtils.getUnselectableDiv('', 'dropdown-items-resize-handle');
        var $resizehanlerItem = UIUtils.getUnselectableDiv('', 'dropdown-items-resize-handleItem ' + $(xItems).attr('resizeHandles'));
        $resizehanlerItem.append($resizehandle);
        $items.append($resizehanlerItem);
    }

    if (this.ContextMenuType == "JSON") {
        if (contextMenuId) {
            $items.data("contextMenuId", contextMenuId);
            if (id) {
                $items.attr("id", id);
            }
            $(xItems).trigger("AddJSONCM", { MenuId: contextMenuId });
        }

        $items.on("mousedown", ".dropdown-item", function (e) {

            //added this flag to stop dropdown sub items from hiding when right clicked
            //because of the hover event binded on line 254 which hides the sub menu when mouseout happens.
            //The bug was that the mouseout was getting called when right clicked on any sub menu item. Mainly done to save from regression from unbinding and repeat binding of events.
            if (e.button == 2) // Right click
            {
                $items.parents(".dropdown-next-level-wrapper:first").data("noHide", true);   //Don't hide sub menu items when context menu is shown
            }
            else {
                $items.parents(".dropdown-next-level-wrapper:first").data("noHide", false);
            }


        });
    }
    else {
    if(contextMenuId && id)     //check if there is context menu and id for the wrapper
    {
      var jsonPath = "app/comps/Common/Ribbon/json/contextmenu/menu.json";

      if($(xItems).attr('jsonPath'))
      jsonPath = $(xItems).attr('jsonPath');

       var jsonData;

        $.ajax({
            url: jsonPath,
            async: false,
            dataType: 'json',
            success: function (data) {
                jsonData = data;
            }
        });

        //contextMenuData = $.parseJSON(contextMenuData);
        $items.data("contextMenuId",contextMenuId);
        $items.attr("id",id);
        $items.addContextMenu(contextMenuId,jsonData[contextMenuId][0], this.ContextMenuCallback, this, contextMenuTheme[gRibbonCMTheme.toString().toUpperCase()], menuTypes.genericContextMenu, contextMenuLocation.LEFT_BOTTOM);

        $items.on("mousedown",".dropdown-item",function(e)
        {
            if($(this).data("cmEventId")!=undefined)
                $items.data("cmEventId",$(this).data("cmEventId"));
            else
                $items.data("cmEventId",null);

            //added this flag to stop dropdown sub items from hiding when right clicked
            //because of the hover event binded on line 254 which hides the sub menu when mouseout happens.
            //The bug was that the mouseout was getting called when right clicked on any sub menu item. Mainly done to save from regression from unbinding and repeat binding of events.
            if(e.button == 2) // Right click
            {
                $items.parents(".dropdown-next-level-wrapper:first").data("noHide",true);   //Don't hide sub menu items when context menu is shown
            }
            else
            {
                $items.parents(".dropdown-next-level-wrapper:first").data("noHide",false);
            }


        });



    }

    //added to stop showing context menu on items which are not required
    $items.bind("contextmenu", function (e) {
        e.stopPropagation();

    });

    }
    return $items;

};

ControlGenerators.ItemsGenerator.prototype.InitializeFlags = function(xItems)
{
    // Fix for SIMS-121413
    //note that this.ContextMenuType is static, so it must be updated everytime here to avoid conflict if two ribbons esp. from different applications are open side by side.
    this.ContextMenuType = $(xItems).closest('ribbon').attr('menutype') || null;
};


ControlGenerators.ItemsGenerator.prototype.ContextMenuCallback = function (args) {
    var currentTargetElement = args[0];
    var responseEvent = args[1];

    switch (responseEvent.type) {
        case callBackType.CALLBACK_ON_SELECTION:
            this.fireContextMenuEvent(currentTargetElement.data("cmEventId"), responseEvent.id, responseEvent.desc, currentTargetElement);
            break;

        case callBackType.CALLBACK_ON_FOCUS:

            break;

        case callBackType.CALLBACK_ON_HIDE:

            break;

        case callBackType.CUSTOMIZATION_REQUEST:
            if (currentTargetElement.data("sendPos") == true) {
                currentTargetElement.data("sendPos", false);

                var selectedElement = currentTargetElement.find(".dropdown-item.hovered:first");
                var selectedItem = currentTargetElement.hasClass("dropdown-item")==true ? currentTargetElement : selectedElement;

                var customizationResponse = {

                    posDim: {
                        x: selectedItem.length > 0 ? selectedItem.offset().left : currentTargetElement.offset().left,
                        y: selectedItem.length > 0 ? selectedItem.offset().top : currentTargetElement.offset().top,
                        targetH: selectedItem.height() != 0 ? selectedItem.height() : 10,
                        targetW: selectedItem.width() != 0 ? selectedItem.width() : 10
                    }

                };
                return customizationResponse;
            }
            break;

        default:
            break;
    }
};


ControlGenerators.ItemsGenerator.prototype.fireContextMenuEvent = function (cmEventId, index, desc, currentTargetElement) {


    var $this = currentTargetElement;

    var $gallery = $this.parents(".ctrl-gallery:first");

    if ($gallery.length > 0) {
        $gallery.trigger("itemSelected");
    }
    else{
        ControlGenerators.ComboBox.prototype.DropdownCloser.call();
    }

    //to close sub item dropdown items
    $(".dropdown-next-level-wrapper, .combobox-dropdown").hide();
    var $comboBox = $this.closest(".office-control");

    if ($comboBox.length == 0) {
        $comboBox = $this.closest(".combobox-dropdown");
    }

    if ($comboBox.length == 0) {
        $comboBox = $this.closest(".ribbon");
    }

    $comboBox.trigger('selectedIndexChanged', ["Context menu item " + desc + " clicked", cmEventId, null , {"cmIndex":index}]);


};


ControlGenerators.ItemsGenerator.prototype.ShowContextMenu = function($items)
{
    $items.data("sendPos",true);
    $items.showContextMenu($items.data("contextMenuId"));
};


ControlGenerators.ItemsGenerator.prototype.GetItemType = function (xItemNode, parentType) {

    var currentType = $(xItemNode).attr('type');
    if (currentType == null) {
        if (parentType != null) {
            currentType = parentType;
        }
        else {
            currentType = "Default";
        }
    }
    return currentType;
};

ControlGenerators.ItemsGenerator.prototype.GetItemTypeGeneratorIstance = function(type){
    var generator = ItemGenerators[type];
    return generator;
};

ControlGenerators.ItemsGenerator.prototype.GenerateItem = function(generator, xItem, type){
    // this.ContextMenuType is passed to identify if the item is using new JSON CM approach or not ( this was needed in makeItem function in itembase.js )
    var $itemDiv = generator.prototype.getItem(xItem, type, this.ContextMenuType);
    return $itemDiv;
};
ControlGenerators.ItemsGenerator.prototype.GetItem = function (xItem, type, ht) {
    var $xItem = $(xItem);
    var generator = this.GetItemTypeGeneratorIstance(type);
    var $itemDiv = this.GenerateItem(generator, xItem, type);  
    $itemDiv.addClass('item-type-' + type.toLowerCase());

    if ($xItem.attr('hassubitems') != null && $xItem.attr('hassubitems') == 'true') {
        //first make the arrow visible
        $itemDiv.find('.dropdown-item-nextlevel-arrow').css('visibility', 'visible');

        var xItemsNode = $xItem.children('items');
        var $nextLevelDivWrapper = UIUtils.getUnselectableDiv('', 'dropdown-next-level-wrapper');
        $itemDiv.append($nextLevelDivWrapper);


        var $nextLevelDiv = this.GetItems(xItemsNode, this.GetItemType(xItemsNode));
        $nextLevelDivWrapper.append($nextLevelDiv);
        if ($itemDiv.width() != 0) {
            $nextLevelDivWrapper.css('left', $itemDiv.width());
        }
        else {
            //to be set according to width of parent div later.
            //$nextLevelDivWrapper.css('left', '140px');
        }


        $nextLevelDivWrapper.css('position', 'absolute').hide();
        //this.PlaceNextLevelDiv($itemDiv, $nextLevelDivWrapper);

        this.attachHoverFunctionality($itemDiv, $nextLevelDivWrapper);


    }

    var contextMenuId = $(xItem).attr('menuId');
    var id = $(xItem).attr('id');
    var cmevent = $(xItem).attr('cmEventId');


    if (this.ContextMenuType == "JSON")    //checking f if new context menu is to be used or not
    {
        if (contextMenuId) {
            $itemDiv.data("contextMenuId", contextMenuId);
            $(xItem).trigger("AddJSONCM", { MenuId: contextMenuId });
        }

        if (cmevent != null)   //avoid overriding already assigned ids
        {
            $itemDiv.data("cmevent", cmevent);
        }

        $itemDiv.on("mousedown", function (e) {

            //added this flag to stop dropdown sub items from hiding when right clicked
            //because of the hover event binded on line 254 which hides the sub menu when mouseout happens.
            //The bug was that the mouseout was getting called when right clicked on any sub menu item. Mainly done to save from regression from unbinding and repeat binding of events.
            if (e.button == 2) // Right click
            {
                $itemDiv.parents(".dropdown-next-level-wrapper:first").data("noHide", true);   //Don't hide sub menu items when context menu is shown
            }
            else {
                $itemDiv.parents(".dropdown-next-level-wrapper:first").data("noHide", false);
            }


        });
    }
    else {
        if (contextMenuId && id)     //check if there is context menu and id for the wrapper
        {
        var jsonPath = "app/comps/Common/Ribbon/json/contextmenu/menu.json";

        if ($(xItem).attr('jsonPath'))
            jsonPath = $(xItem).attr('jsonPath');

        var jsonData;

        $.ajax({
            url: jsonPath,
            async: false,
            dataType: 'json',
            success: function (data) {
                jsonData = data;
            }
        });

        //contextMenuData = $.parseJSON(contextMenuData);

        $itemDiv.data("contextMenuId", contextMenuId);
        $itemDiv.data("cmEventId", cmevent);
        $itemDiv.attr("id", id);
        $itemDiv.addContextMenu(contextMenuId, jsonData[contextMenuId][0], this.ContextMenuCallback, this, contextMenuTheme[gRibbonCMTheme.toString().toUpperCase()], menuTypes.genericContextMenu, contextMenuLocation.LEFT_BOTTOM);

        $itemDiv.on("mousedown", function (e) {
            if ($(this).data("cmEventId") == undefined)
                $itemDiv.data("cmEventId", null);

            //added this flag to stop dropdown sub items from hiding when right clicked
            //because of the hover event binded on line 254 which hides the sub menu when mouseout happens.
            //The bug was that the mouseout was getting called when right clicked on any sub menu item. Mainly done to save from regression from unbinding and repeat binding of events.
            if (e.button == 2) // Right click
            {
                $itemDiv.parents(".dropdown-next-level-wrapper:first").data("noHide", true);   //Don't hide sub menu items when context menu is shown
            }
            else {
                $itemDiv.parents(".dropdown-next-level-wrapper:first").data("noHide", false);
            }


        });

        }

    }

    return $itemDiv;
};

ControlGenerators.ItemsGenerator.prototype.attachHoverFunctionality = function ($itemDiv, $nextLevelDivWrapper) {
    var self = this;
    $itemDiv.hover(function () {
        self.showSubItems($itemDiv, $nextLevelDivWrapper);
        $nextLevelDivWrapper.data("noHide",false);
    },
         function () {
             if (!$nextLevelDivWrapper.data("noHide")) {

                 //Fix for SIMS-107122: adding delay otherwise sub menu hides before user reaches it in lower resolution
                 //$nextLevelDivWrapper.hide();
                 setTimeout(function () {
                     if (!$itemDiv.is(":hover") && !$nextLevelDivWrapper.is(":hover")) {
                         $nextLevelDivWrapper.hide();
                     }
                 }, 200);
                 self.FireSubDropdownVisibilityEvent($itemDiv,"hide");
             }
         });
};

ControlGenerators.ItemsGenerator.prototype.showSubItems = function ($itemDiv, $nextLevelDivWrapper) {
    //var top = $itemDiv.position().top;
    //$nextLevelDivWrapper.css('top', top);

    //$itemDiv.siblings().children(".dropdown-next-level-wrapper").hide();
    this.FireSubDropdownVisibilityEvent($itemDiv,"show");

    $nextLevelDivWrapper.fadeIn(200)
        .css('top', "0px");    //fixing SIMS-107122: issue - position calculation has a bug that once overflow is applied, next time when same sub menu is displayed its position is not recalculated.

    //handling Vertical Overflow
    var overflow = UIUtils.getVerticalOverflow($nextLevelDivWrapper, SIMS.Objects.DOMElements.SIMArea)

    if (overflow > 0) {
        $nextLevelDivWrapper.css('top', "-=" + overflow);
    }

    //check for gallery
    var isGallerySubItem = $itemDiv.parents(".office-control:first").hasClass("ctrl-gallery");
    if(isGallerySubItem)
    {
        //adjust left
        $nextLevelDivWrapper.css("left",$itemDiv.outerWidth());
    }

    //Handling horizontal overflow
    overflow = UIUtils.getHorizontalOverflow($nextLevelDivWrapper, SIMS.Objects.DOMElements.SIMArea);
    if (overflow > 0) {
        if(!isGallerySubItem)
        {
            $nextLevelDivWrapper.css('right', "100%");
        }
        else
        {
            var shiftLeft = parseInt($nextLevelDivWrapper.css("left")) - ($itemDiv.outerWidth() + $nextLevelDivWrapper.outerWidth());
            $nextLevelDivWrapper.css("left",shiftLeft + "px");
        }
    }

};

ControlGenerators.ItemsGenerator.prototype.PlaceNextLevelDiv = function ($itemDiv, $nextLevelDiv) {
    var currItemDivLeftPosition = $itemDiv.position().left;
    var currItemDivTopPosition = $itemDiv.position().top;

    var nextLevelDivtop = currItemDivTopPosition;
    var nextLevelDivLeft = currItemDivLeftPosition + 135 + "px";

    $nextLevelDiv.css('top', nextLevelDivtop);
    $nextLevelDiv.css('left', nextLevelDivLeft);
};


ControlGenerators.ItemsGenerator.prototype.FireSubDropdownVisibilityEvent = function ($itemDiv, eventType) {
};

namespace("ControlGenerators");

ControlGenerators.ItemsGenerator.prototype.GetItemTypeGeneratorIstance = function(type){
    var generator = ItemGenerators2016[type] || ItemGenerators[type];
    return generator;
};

ControlGenerators.ItemsGenerator.prototype.GenerateItem = function(generator, xItem, type){
    
    // this.ContextMenuType is passed to identify if the item is using new JSON CM approach or not ( this was needed in makeItem function in itembase.js )
    // IsAccessUnderlineRequired argument is added to check if the item created is for ribbon or some other component
    var $itemDiv = generator.prototype.getItem(xItem, type, this.ContextMenuType, this.IsAccessUnderlineRequired);
    return $itemDiv;
};

ControlGenerators.ItemsGenerator.prototype.InitializeFlags = function(xItems)
{
    var $xmlRibbonObj = $(xItems).closest('ribbon,[mt-kb-util="true"]'); // added mt-kb-util attr selector for enabling access keys in mini toolbar
    if($(xItems).length > 0){     
        this.IsAccessUnderlineRequired = false;
        if($xmlRibbonObj.length > 0){
            this.IsAccessUnderlineRequired = true;
        }
    }   

    // Fix for SIMS-121413
    //note that this.ContextMenuType is static, so it must be updated everytime here to avoid conflict if two ribbons esp. from different applications are open side by side.
    this.ContextMenuType = $xmlRibbonObj.attr('menutype') || null;
    
};

ControlGenerators.ItemsGenerator.prototype.FireSubDropdownVisibilityEvent = function ($itemDiv, eventType) {
    if(eventType == "hide"){
        $itemDiv.trigger("hideSubItems");
    }
    else if(eventType == "show"){
        $itemDiv.trigger("showSubItems");
    }
};
namespace("ItemGenerators");

ItemGenerators.Factory = Base.extend({
    _singletonInstance: null,
    getItem: null,
    getItemGenerator: null,
    getGeneratorInstance: null,

    //Making it singleton
    constructor: function () {
        if (this._singletonInstance != null) {
            return this._singletonInstance;
        }
        else {
            this.getItem = function (itemXml) {
                return this.getControlGenerator($(itemXml)).getItem();
            };

            this.itemGenerators = {};

            this.getItemGenerator = function (itemXml) {
                var itemType = itemXml.attr('type');
                var generator = this.getGeneratorInstance(itemType);
                if (generator == null) {
                    generator = this.getGeneratorInstance('ItemBase');
                }

                //generator.SetControlXml(controlXml);
                return generator;
            };

            this.getGeneratorInstance = function (itemType) {
                if (this.itemGenerators[itemType] == null) {
                    if (ItemGenerators2016[itemType] != null) {
                        this.itemGenerators[itemType] = new ItemGenerators2016[itemType]();
                    }
                    else if (ItemGenerators[itemType] != null) {
                        this.itemGenerators[itemType] = new ItemGenerators[itemType]();
                    }
                }
                return this.itemGenerators[itemType];
            };

            this._singletonInstance = this;
        }
    }
});


namespace("ControlGenerators");
ControlGenerators.ControlBase = function () {
    this.$controlXml = null;
    this.type = null;
    this.desc = null;
    this.$control = null;
    this.$wrapper = null;
    this.getControl = function () {
        this.makeControl();

        var $control = this.$control;
        var $controlXml = this.$controlXml;

        $control.data('controlType', this.type);

        //Adding custom classname
        var className = $controlXml.attr("classname");
        if (className != null && !Polyfills.string.isEmpty(className)) {
            $control.addClass(className);
        }

        var ident = $controlXml.attr("identifier");
        if (ident != null && !Polyfills.string.isEmpty(ident)) {
            $control.addClass(ident);
        }

        //add ids - required for practice mode
        if($controlXml.attr("id") && $control.attr("id")==null)   //avoid overriding already assigned ids
        {
          $control.attr("id",$controlXml.attr("id"));
        }

        this.AttachTooltip();

        //Attaching Keyboard Shortcuts
        this.AttachKeyboardShortcutHolders();

        //Attaching Event Id
        this.AttachEventId();

        //Attaching ICMessage Id
        this.AttachData($controlXml,$control,'ICMessageId');

        //Disabled Handling
        this.CheckDisabled();

        //Hidden Handling
        this.CheckHidden();

        var JSONcmmenuId = $controlXml.attr("menuId");
//Leonardo Start
        // if (JSONcmmenuId) {
        //     //Attaching New Contextmenu
        //     this.AddJSONContextMenu(JSONcmmenuId);
        // }
        // else {
        //     //Attaching Old Contextmenu
        //     this.AddContextMenu();
        // }
        //Leonardo End

        //this.AttachCustomData();

        //AttachStandardKeyFunctionality
        //this.AttachStandardKeyFunctionality();

        return $control;
    };
    this.AddFunctionality = function () { };
    this.AddMoreFunctionality = function () { };
    this.tooltipTargets = [{ target: '$control', tooltipSelector: 'default'}];
};

//ControlGenerators.ControlBase.prototype.AttachStandardKeyFunctionality = function () {
//    var $control = this.$control;

//    var standardKeyHandler = function (e) {
//        var $this = $(this);

//        var $reqControl = ControlGetters.GetControlFunctionMap[e.keyCode].call($this, ".office-control");
//        $reqControl.focus();
//    };

//    $control.keydown(standardKeyHandler);

//};

ControlGenerators.ControlBase.prototype.AddContextMenu = function () {
    var xContextMenu = this.$controlXml.children("contextmenu").children("items").first();

    if (xContextMenu.length > 0) {
        var $contextMenu = ControlGenerators.ItemsGenerator.prototype.GetItems(xContextMenu);

        $contextMenu.addClass("contextMenu combobox-dropdown");
        $contextMenu.attr("tabindex", "-1");

        //$contextMenu.attr('id', "ribbon-cm-" + this.$controlXml.attr('text').removeSpaces());

        this.$control.append($contextMenu);

        this.bindContextMenu($contextMenu);
    }
    else {
        var $defaultContextMenu = this.getDefaultContextMenu();
        if ($defaultContextMenu != null) this.bindContextMenu($defaultContextMenu);
    }
};

ControlGenerators.ControlBase.prototype.AddJSONContextMenu = function (JSONcmmenuId) {

    this.$control.data("contextMenuId", JSONcmmenuId);
    this.$controlXml.trigger("AddJSONCM", { MenuId: JSONcmmenuId });

    if (this.$controlXml.attr("cmEventId") && this.$control.attr("cmEventId") == null)   //avoid overriding already assigned ids
    {
        this.$control.data("cmEventId", this.$controlXml.attr("cmEventId"));
    }
};
ControlGenerators.ControlBase.prototype.getDefaultContextMenu = function () {

};

ControlGenerators.ControlBase.prototype.bindContextMenu = function ($contextMenu) {
    //this.$control.contextMenu();
    if ($contextMenu == undefined) return;

    this.$control.contextMenu({
        $menu: $contextMenu,
        //captureClickFor: captureClick,
        //doNotHideOnClickOf: '.shyToolBarInside',
        //shyToolBar: '.shyToolBarInside',
        inSpeed: 25,
        outSpeed: 50
    });
};

ControlGenerators.ControlBase.prototype.AttachCustomData = function () {
    var $xCustomData = this.$controlXml.children("customdata");
    if ($xCustomData.length > 0) {
        var objData = JSON.parse($xCustomData.text());
        this.$control.data("customdata", objData);
    }
};

ControlGenerators.ControlBase.prototype.CheckDisabled = function () {
    if (this.$controlXml.attr("disabled") === "true") {
        this.$control.addClass('disabled');
    }
};

ControlGenerators.ControlBase.prototype.CheckHidden = function () {
    if (this.$controlXml.attr("hidden") === "true") {
        this.$control.addClass('hidden');
    }
};

ControlGenerators.ControlBase.prototype.AttachEventId = function () {
    var eventId = this.$controlXml.attr('eventId');
    if (eventId != null && !Polyfills.string.isEmpty(eventId)) {
        this.$control.data('eventId', eventId);
    }
};

ControlGenerators.ControlBase.prototype.AttachData = function ($controlXml,$control,dataName) {
    var dataId = $controlXml.attr(dataName);
    if (dataId != null && !Polyfills.string.isEmpty(dataId)) {
        $control.data(dataName, dataId);
    }
};




ControlGenerators.ControlBase.prototype.AttachKeyboardShortcutHolders = function () {
    var shortCut = this.$controlXml.attr("ak");
    if (shortCut != null && shortCut.length > 0) {
        this.$control.addShortCut(shortCut);
    }
};

ControlGenerators.ControlBase.prototype.GenerateClickstreamInfo  = function($controlXml) {
        //setting click stream data
        var clickstream = "", 
            tabName = SIMS.Components.Common.RibbonCurrentTabName;

        if (tabName) {
            clickstream  = tabName;
            if (tabName !== "Titlebar") {
                clickstream += " tab ";
            }
        }

        if(SIMS.Components.Common.RibbonCurrentSectionName){
            if(clickstream)  {
                clickstream += " : ";    
            }
            clickstream += SIMS.Components.Common.RibbonCurrentSectionName + " group ";
        }

        var controlDesc = this.desc || $controlXml.attr("noTextClickInfo") || "";
                
        if (controlDesc) {
            if(clickstream)  {
                clickstream += " : ";    
            }
            clickstream += controlDesc;
        }
        return clickstream;
       
};

ControlGenerators.ControlBase.prototype.SetControlXml = function (controlXml) {
    var $controlXml = this.$controlXml = controlXml;
    this.type = $controlXml.attr('type');
    this.desc = $controlXml.attr('text');
    this.id = $controlXml.attr('id');
    var $control = this.$control = UIUtils.getUnselectableSpan(this.id, 'office-control');
    $control.addClass('ctrl-' + this.type.toLowerCase());
    $control.data('desc', this.desc);

    var clickstream = this.GenerateClickstreamInfo($controlXml);
    $control.data('clickstreamInfo', clickstream);
 
    //Minimal Handling
    if ($controlXml.getTrueOrFalse('minimal', false)) {
        $control.addClass('minimal-control');
    }

    //Big Control Handling
    if ($controlXml.getTrueOrFalse('big', false)) {
        $control.addClass('big-control');
    }


};

ControlGenerators.ControlBase.prototype.AttachTooltip = function () {
    if (this.tooltipTargets.length > 0) {
        var $controlXml = this.$controlXml;
        for (var i = 0; i < this.tooltipTargets.length; i++) {
            var tooltipInfo = this.tooltipTargets[i];

            var xToolTip = null;
            var toolTipTarget = tooltipInfo.tooltipSelector.toLowerCase();
            xToolTip = $controlXml.find('tooltips tooltip[target="' + toolTipTarget + '"]');
            if (toolTipTarget == 'default') {
                xToolTip = $controlXml.find('tooltips tooltip[target="' + toolTipTarget + '"],tooltips tooltip[target=""],tooltip:not([target])');
            }
            if (xToolTip.length > 0) {
                var currentControlPart = this[tooltipInfo.target];
                if (currentControlPart != null) {
                    currentControlPart.addTooltip(xToolTip);
                }
            }
        }
    }
};

ControlGenerators.ControlBase.prototype.AttachTooltipFunctionality = function ($externallyPassedControl) {
    var showtooltip = this.showTooltip;
    var hideTooltip = this.hideTooltip;
    var $control = this.$control;
    if ($externallyPassedControl != null) {
        $control = $externallyPassedControl;
    }

    $control.hover(function () {
        hoveredControl = $(this);
        tooltipTimeout = setTimeout(showtooltip, 1000);
    }, hideTooltip);
};

ControlGenerators.ControlBase.prototype.GetToolTip = function (xToolTip) {
    var templateMarkup = '<div class="tooltip"><div class="tooltip-header">${header}</div><div class="tooltip-body">{{html body}}</div></div>';
    templateMarkup = templateMarkup.replace(/[\n\r\t]/g, "");
    var $template = $.template('tooltipTemplate', templateMarkup);
    var jsonToolTip = xToolTip.convertToJSON();
    var $tooltip = $.tmpl('tooltipTemplate', jsonToolTip);
    return $tooltip;
};
ControlGenerators.ControlBase.prototype.showTooltip = function () {
    var $tooltip = $(hoveredControl).find('.tooltip');
    if (!$tooltip.is(':visible')) {
        $('.tooltip').not($tooltip).hide();
        var ddLeft = $(hoveredControl).position().left;
        var $ribbon = $(hoveredControl).parents('.ribbon-section');
        var ddTop = $ribbon.outerHeight() + $ribbon.position().top;
        $tooltip.css({ 'top': ddTop, 'left': ddLeft });
        $tooltip.fadeIn(200);

        //Width Handling
        var overflow = UIUtils.getHorizontalOverflow($tooltip, SIMS.Objects.DOMElements.SIMArea);
        if (overflow > 0) {
            $tooltip.css('left', '-=' + (overflow+2));
        }
    }
};
ControlGenerators.ControlBase.prototype.hideTooltip = function (delay) {
    clearTimeout(tooltipTimeout);
    $(hoveredControl).find('.tooltip').delay(delay != null ? delay : 20).fadeOut(200);
};

ControlGenerators.ControlBase.prototype.handleStandardKey = function () {
};

ControlGenerators.ControlBase.prototype.addNavigationHover = function ($item) {
    this.getHoverItems($item).addClass("hovered");
};

ControlGenerators.ControlBase.prototype.removeNavigationHover = function ($item) {
    this.getHoverItems($item).removeClass("hovered");
};

ControlGenerators.ControlBase.prototype.getHoverItems = function ($control) {
    var $itemsToBeHovered = $();
    if ($control.is(".office-hover-default")) {
        $itemsToBeHovered = $itemsToBeHovered.add($control);
    }
    $itemsToBeHovered = $itemsToBeHovered.add($control.find(".office-hover-default").filter(function () {
        return $(this).closest(".dropdown-items-wrapper").length === 0;
    }));

    return $itemsToBeHovered;
};

ControlGenerators.ControlBase.prototype.getNextTabItem = function ($item) {
    var $ribbon = $item.closest(".ribbon");
    var exclude = ".ctrl-separator";
    var currentTabSelector = ".ribbon-tab-container:visible:first";
    var includeFromTab = ".section-launcher, .office-control";
    var selectedTabHeader = ".ribbon-tabs-wrapper .tab-header-selected:visible";

    var $itemsToLoopfrom = $ribbon.find(selectedTabHeader).add($ribbon.find(currentTabSelector).find(includeFromTab)).not(exclude);

    var currentIndex = $itemsToLoopfrom.index($item);

    var $tabItem = $($itemsToLoopfrom[(currentIndex + 1) % $itemsToLoopfrom.length]);

    return $tabItem;
};

//Fix for KL032
ControlGenerators.ControlBase.prototype.getPreviousTabItem = function ($item) {
    var $ribbon = $item.closest(".ribbon");
    var exclude = ".ctrl-separator";
    var currentTabSelector = ".ribbon-tab-container:visible:first";
    var includeFromTab = ".section-launcher, .office-control";
    var selectedTabHeader = ".ribbon-tabs-wrapper .tab-header-selected:visible";

    var $itemsToLoopfrom = $ribbon.find(selectedTabHeader).add($ribbon.find(currentTabSelector).find(includeFromTab)).not(exclude);

    var currentIndex = $itemsToLoopfrom.index($item);

    var $tabItem = null;
    if (currentIndex === 0) {
        $tabItem = $($itemsToLoopfrom[($itemsToLoopfrom.length -1)]);
    }
    else {
        $tabItem = $($itemsToLoopfrom[(currentIndex - 1)]);
    }

    return $tabItem;
};

ControlGenerators.ControlBase.prototype.getItemForStandardKey = function ($item, key) {
    var $openDropdown = $item.find(".dropdown-open:visible");

    if ($openDropdown.length > 0) {
        var $extractItemsFrom = $openDropdown;
        var $lastWrapper = $openDropdown.find(".dropdown-next-level-wrapper:visible").last();
        if ($lastWrapper.length > 0) {
            $extractItemsFrom = $lastWrapper;
        }

        return { item: $extractItemsFrom.find(".dropdown-item:visible:not(.disabled):first") };
    }
    else {
        var $itemWrapper = $item.parents(".ribbon");
        var exclude = ".ctrl-separator";
        var currentTabSelector = ".ribbon-tab-container:visible:first";
        var includeFromTab = ".section-footer, .office-control";
        var tabHeaders = ".ribbon-tabs-wrapper .tab-header:visible";

        $itemsToLoopfrom = $itemWrapper.find(tabHeaders).add($itemWrapper.find(currentTabSelector).find(includeFromTab)).not(exclude);
    }

    var itemInfo = ControlGetters.GetControlFunctionMap[key]($item, $itemsToLoopfrom, true);
    var $reqItem = itemInfo.item;

    if ($reqItem.is(".tab-header")) {
        $reqItem = $itemsToLoopfrom.filter(".tab-header-selected");
    }
    else if ($reqItem.is(".section-footer")) {
        $reqItem = $reqItem.find(".section-launcher");
    }

    itemInfo.item = $reqItem;

    return itemInfo;
};


var ControlGetters = {
    getControlImmediatelyToTheLeftOf: function ($control, $allItems, bLookAlongXY, bFarthest) {
        var w = $control.outerWidth(), h = $control.outerHeight(), controlX = $control.offset().left;
        var opts = bLookAlongXY ? { checkHoriz: true, checkVert: false, tolerance: 2} : null;
        var index = $allItems.index($control);
        var func = bFarthest ? $.furthest : $.nearest;
        var $filteredItems;

        var returnObj = { bounced: false };

        //At the beginning of a list
        if (index === 0) {
            returnObj.bounced = true;
            returnObj.item = $.furthest({ y: $control.offset().top + ($control.outerHeight() / 2), x: controlX }, $allItems, opts).first();
            return returnObj;
        }

        $filteredItems = $($allItems.slice(0, index));

        returnObj.item = func({ y: $control.offset().top + ($control.outerHeight() / 2), x: controlX }, $filteredItems, opts).first();

        //At the beginning of a list
        if (returnObj.item.length === 0 || returnObj.item.offset().left > controlX) {
            returnObj.item = $.furthest({ y: $control.offset().top + ($control.outerHeight() / 2), x: controlX }, $allItems, opts).first();
            returnObj.bounced = true;
        }

        return returnObj;
    },
    getControlImeediatelyOnTopOf: function ($control, $allItems, bLookAlongXY, bFarthest) {
        var opts = bLookAlongXY ? { checkHoriz: false, checkVert: true, tolerance: 2} : null;
        var controlX = $control.offset().left, controlY = $control.offset().top, controlH = $control.outerHeight(), controlW = $control.outerWidth();
        var index = $allItems.index($control);
        var pt = { y: controlY, x: controlX + 22 };
        var $filteredItems;

        var returnObj = { bounced: false };

        //Beginning of a list
        if (index === 0) {
            returnObj.bounced = true;
            returnObj.item = $.furthest(pt, $allItems, opts).first();
            return returnObj;
        }
        $filteredItems = $($allItems.slice(0, index));
        var w = $control.outerWidth(), h = $control.outerHeight();

        var func = bFarthest ? $.furthest : $.nearest;

        returnObj.item = func(pt, $filteredItems, opts).first();

        //Beginning of a list
        if (returnObj.item.length === 0 || returnObj.item.offset().top > controlY) {
            returnObj.item = $.furthest(pt, $allItems, opts).first();
            returnObj.bounced = true;
        }

        return returnObj;
    },
    getControlImmediatelyToTheRightOf: function ($control, $allItems, bLookAlongXY, bFarthest) {
        var index = $allItems.index($control);
        var opts = bLookAlongXY ? { checkHoriz: true, checkVert: false, tolerance: 2} : null;
        var func = bFarthest ? $.furthest : $.nearest;
        var w = $control.outerWidth(), h = $control.outerHeight(), controlX = $control.offset().left;
        var $filteredItems;

        var returnObj = { bounced: false };

        //At the end of a list
        if (index == $allItems.length - 1) {
            returnObj.item = $.furthest({
                y: $control.offset().top + ($control.outerHeight() / 2),
                x: $control.offset().left + $control.outerWidth()
            }, $allItems, opts).first();
            returnObj.bounced = true;
            return returnObj;
        }

        $filteredItems = $($allItems.slice(index + 1, $allItems.length));

        returnObj.item = func({
            y: $control.offset().top + ($control.outerHeight() / 2),
            x: $control.offset().left + $control.outerWidth()
        }, $filteredItems, opts).first();

        //At the end of a list
        if (returnObj.item.length === 0 || returnObj.item.offset().left < controlX) {
            returnObj.item = $.furthest({
                y: $control.offset().top + ($control.outerHeight() / 2),
                x: $control.offset().left + $control.outerWidth()
            }, $allItems, opts).first();
            returnObj.bounced = true;
        }

        return returnObj;
    },
    getControlImmediatelyBelow: function ($control, $allItems, bLookAlongXY, bFarthest) {
        var w = $control.outerWidth(), h = $control.outerHeight();
        var opts = bLookAlongXY ? { checkHoriz: false, checkVert: true, tolerance: 2} : null;
        var controlX = $control.offset().left, controlY = $control.offset().top, controlH = $control.outerHeight(), controlW = $control.outerWidth();
        var func = bFarthest ? $.furthest : $.nearest;
        var index = $allItems.index($control);
        var $filteredItems;

        var returnObj = { bounced: false };

        //At the end of a list
        if (index == $allItems.length - 1) {
            returnObj.item = $.furthest({
                y: controlY + controlH,
                x: controlX
            }, $allItems, opts).first();
            returnObj.bounced = true;
            return returnObj;
        }

        $filteredItems = $($allItems.slice(index + 1, $allItems.length));

        returnObj.item = func({
            y: controlY + controlH,
            x: controlX + 22
        }, $filteredItems, opts).first();

        //At the end of a list
        if (returnObj.item.length === 0 || returnObj.item.offset().top < controlY) {
            $reqItem = $.furthest({
                y: controlY + controlH,
                x: controlX
            }, $allItems, opts).first();
            returnObj.item = $reqItem;
        }

        return returnObj;
    }
};

ControlGetters.GetControlFunctionMap = { LEFT: ControlGetters.getControlImmediatelyToTheLeftOf, UP: ControlGetters.getControlImeediatelyOnTopOf, RIGHT: ControlGetters.getControlImmediatelyToTheRightOf, DOWN: ControlGetters.getControlImmediatelyBelow };
ControlGenerators.ControlBase.prototype.AttachTooltip = function (oldFunc) {
    return function () {
        var titleText = this.$controlXml.attr("tooltip-title");
        if (titleText) {
                this.$control.attr("title", titleText);
        }
        else{
            oldFunc.apply(this);
        }
    };
} (ControlGenerators.ControlBase.prototype.AttachTooltip);
 /// <reference path="ControlBase.js" />
/// <reference path="jquery.xml2json.js" />
        namespace("ControlGenerators");
//////////////////////////////ComboBoxBase/////////////////////////////////////
ControlGenerators.ComboBoxBase = function() {
};
ControlGenerators.ComboBoxBase.prototype = new ControlGenerators.ControlBase();
ControlGenerators.ComboBoxBase.prototype.ItemsGenerator = new ControlGenerators.ItemsGenerator();

ControlGenerators.ComboBoxBase.prototype.handleAccessKey = function($control, key) {
    var $param = $control.find(".dropdown-button");
    if ($param.length === 0) {
        $param = $control;
    }
    if (key === "ESCAPE") {
        this.DropdownCloser.apply($param);
    }
    else {
        this.DropdownOpener.apply($param);
    }
};
ControlGenerators.ComboBoxBase.prototype.GetValuePart = function() {
    var $valuePart = $("<div class='combo-value-wrapper'/>");

    var $icon = this.GetIcon();
    var $value = this.GetLabel();

    if ($icon != null) {
        $icon.addClass('combo-icon-part control-icon');
        $valuePart.append($icon);
    }

    if ($value != null) {
        this.$label = $value;
        $value.addClass('combo-value-part control-label');
        $valuePart.append($value);
    }

    return $valuePart;
};
ControlGenerators.ComboBoxBase.prototype.GetLabel = function() {
    var $label = UIUtils.getUnselectableDiv();
    $label.text(this.$controlXml.attr('text'));
    return $label;
};
ControlGenerators.ComboBoxBase.prototype.GetIcon = function() {
    var $iconPart = UIUtils.getUnselectableDiv();
    $iconPart.append(getIcon(this.$controlXml.find('icon')));
    return $iconPart;
};

ControlGenerators.ComboBoxBase.prototype.GetArrowPart = function() {
    return getDropdownButton(true);
};
ControlGenerators.ComboBoxBase.prototype.GetItems = function() {
    var xItems = this.$controlXml.children('items');
    return ControlGenerators.ItemsGenerator.prototype.GetItems(xItems);
};

ControlGenerators.ComboBoxBase.prototype.GetItem = function() {
};
ControlGenerators.ComboBoxBase.prototype.AddItems = function() {
};
ControlGenerators.ComboBoxBase.prototype.AddFunctionality = function() {
};
ControlGenerators.ComboBoxBase.prototype.AddMoreFunctionality = function() {
};
ControlGenerators.ComboBoxBase.prototype.AddItemFunctionality = function() {
};
ControlGenerators.ComboBoxBase.prototype.ApplyStylesToComboBox = function() {
    this.$comboBox.css('width', this.$controlXml.attr('width'));
};

ControlGenerators.ComboBoxBase.prototype.FormatItemText = function() {
};
ControlGenerators.ComboBoxBase.prototype.$comboBox = null;
ControlGenerators.ComboBoxBase.prototype.$valuePart = null;
ControlGenerators.ComboBoxBase.prototype.$arrow = null;
ControlGenerators.ComboBoxBase.prototype.$dropDown = null;
ControlGenerators.ComboBoxBase.prototype.ItemsToBeHighlighttedOnClick = ['$wrapper'];

ControlGenerators.ComboBoxBase.prototype.DropdownOpener = function() {
};
ControlGenerators.ComboBoxBase.prototype.DropdownCloser = function() {
};
////////////////////////////////////////////////////////////////////////////////

//////////////////////////////ComboBox//////////////////////////////////////////
ControlGenerators.ComboBox = function() {
};
ControlGenerators.ComboBox.prototype = new ControlGenerators.ComboBoxBase();
ControlGenerators.ComboBox.prototype.makeControl = function() {
    var $comboboxWrapper = this.$wrapper = UIUtils.getUnselectableDiv('', 'combobox-wrapper');
    this.$control.append($comboboxWrapper);

    //    var shortcutkey = this.$controlXml.attr('ak');
    //    var $tabSKdiv = UIUtils.getUnselectableDiv("", "ribbon-tab-SK");
    //    $tabSKdiv.addClass("SK_" + shortcutkey);
    //    this.$control.append($tabSKdiv);

    var $controlXml = this.$controlXml;
    var $comboBox = this.$comboBox = UIUtils.getUnselectableDiv('', 'combobox');
    //$comboBox.attr("tabindex", -1);

    this.ApplyStylesToComboBox();


    $comboboxWrapper.append($comboBox);

    //Text Box
    this.$valuePart = this.GetValuePart();
    $comboBox.append(this.$valuePart);

    //Arrow
    this.$arrow = this.GetArrowPart();
    $comboBox.append(this.$arrow);

    $comboBox.data('desc', this.$controlXml.attr('text'));

    //Add items
    if ($controlXml.find('items item').length > 0) {
        this.AddItems();
        $comboboxWrapper.append(this.$dropDown);

        //Add functionality to dropdown...
        this.AddFunctionality(this.$dropDown, $comboBox);
    }
    else {
        this.$dropDown = null;
    }

    if (this.$controlXml.attr("changeColor")) {
        var changeColorData = JSON.parse(this.$controlXml.attr("changeColor"));
        if (changeColorData.enable == "true") {
            this.$valuePart.find(".icon-binder").append("<div class='colorchanger'>");
        }
        if (changeColorData.top && changeColorData.top !== "") {
            this.$valuePart.find(".icon-binder .colorchanger").css("top", changeColorData.top);
        }
        if (changeColorData.left && changeColorData.left !== "") {
            this.$valuePart.find(".icon-binder .colorchanger").css("left", changeColorData.left);
        }
        if (changeColorData.width  && changeColorData.width !== "") {
            this.$valuePart.find(".icon-binder .colorchanger").css("width", changeColorData.width);
        }
        if (changeColorData.height && changeColorData.height !== "") {
            this.$valuePart.find(".icon-binder .colorchanger").css("height", changeColorData.height);
        }
        

        this.$wrapper.on("colorchanged", function(e, $control, myCallbackData) {
            var $colorchanger = $(this).find(".combobox .colorchanger");
            if ($colorchanger.length > 0) {
                $colorchanger.css("background-color", "#" + myCallbackData.selectedColor);
            }
            e.stopPropagation();
        });
    }
    return this.$control;
};
ControlGenerators.ComboBox.prototype.AddFunctionality = function($dropDown, $comboBox) {
    if ($dropDown != null) {
        var $curtain = this.$curtain = $('.dropdown-curtain');
        var hidetooltip = this.hideTooltip;

        //Get Items to be highlighted
        var itemsToBeHightlighted = [];
        for (var i = 0; i < this.ItemsToBeHighlighttedOnClick.length; i++) {
            var item = this[this.ItemsToBeHighlighttedOnClick[i]];
            if (item != null) {
                itemsToBeHightlighted.push(item);
            }
        }

        this.$arrow.click(this.DropdownOpener);

        if (this.$valuePart != null) {
            this.$valuePart.click(function(e) {
                e.stopPropagation();
                $('.combobox-dropdown').not($dropDown).hide();
                $comboBox.trigger("comboClick");
            });
        }

        var $simArea = SIMS.Objects.DOMElements.SIMArea;
        var self = this;

        $comboBox.focusout(this.DropdownCloser);

        $simArea.not(this.$arrow).not(this.$valuePart).bind('click contextmenu', function(e) {
            if ($simArea.has($(e.target)).length > 0)
                self.DropdownCloser();
        });

        $dropDown.hover(function(e) {
            e.stopPropagation();
        });

        this.AddMoreFunctionality($dropDown, $comboBox);
    }
};


ControlGenerators.ComboBox.prototype.DropdownCloser = function() {

    var $curtain = $('.dropdown-curtain');
    var $dropdown = $('.SIMArea .ribbon .dropdown-open,.SIMArea .mt-kb-util .dropdown-open');

    $dropdown.hide();

    var $RibbonControl = $dropdown.closest('.office-control');
    var bTriggerEvent = true;
    if ($RibbonControl.length > 0 && $RibbonControl.data("SuppressTriggerDropdownEvent")){ // This check was added for SO-73393, by this check we have stopped firing "RibbonDropdownClosed" event on closing of dropdown for all controls having "SuppressTriggerDropdownEvent" as true in their data. for now this is set for Comboboxtext control only.
        bTriggerEvent = false;
    }
    
    if(bTriggerEvent){ 
        $dropdown.trigger("RibbonDropdownClosed");
    }
    
    $curtain.hide();

    $dropdown.removeClass('dropdown-open');

    //Remove highlights
    var $itemsToBeHightlighted = $dropdown.closest('.active-toggle');
    $itemsToBeHightlighted.removeClass('active-toggle');

    var $itemsToBeHightlighted = $dropdown.find('.hovered');
    $itemsToBeHightlighted.removeClass('hovered');



    //    for (var i = 0; i < itemsToBeHightlighted.length; i++) {
    //        itemsToBeHightlighted[i].removeClass('active-toggle');
    //    }
};

ControlGenerators.ComboBox.prototype.DropdownOpener = function(e) {
    if (e != null && e.stopPropagation != null) {
        e.stopPropagation();
    }
    //this.hidetooltip(0);

    var $comboBox = $(this).closest('.combobox');
    $comboBox = $comboBox.length > 0 ? $comboBox : $(this).find('.combobox');
    var $ribbon = $comboBox.parents('.ribbon');
    $comboBox.find('.tooltip').delay(10).fadeOut(200);

    var $curtain = $('.dropdown-curtain');
    var $comboWrapper = $comboBox.closest('.combobox-wrapper');
    var $dropDown = $comboWrapper.find('.combobox-dropdown:not(.contextMenu)');

    //Lazy Generation of dropdowns
    if ($dropDown.children(".dropdown-items-wrapper").length == 0) {
        var itemsInfo = $dropDown.data("itemsInfo");

        var $generatedItems = ControlGenerators.ItemsGenerator.prototype.GetItems(itemsInfo);

        $generatedItems.appendTo($dropDown);

        $dropDown.removeData("itemsInfo");

        $dropDown.bind("mousemove", function() {
            $(this).find(".hovered").removeClass("hovered");

        });

    }

    // Change done to fix SIMS-79458, regression of colorgrid dd lazyloading
    // This data is set in ExcelRibbonComp
    if ($dropDown.data('colorIndex') != undefined) {
        $dropDown.find('.item-type-colorpicker .sims-ColorGrid.sims-control').setData({ index: $dropDown.data('colorIndex') });
        $dropDown.removeData('colorIndex');
    }

    if ($curtain.length == 0) {
        $curtain = UIUtils.getUnselectableDiv('', 'dropdown-curtain');
        $curtain.attr("tabindex", -1);
    }
    $ribbon.append($curtain);
    $curtain.show();
    $('.combobox-dropdown').not($dropDown).hide();

    var $RibbonControl = $dropDown.closest('.office-control');
    var bTriggerEvent = true;
    if($RibbonControl.length > 0 && $RibbonControl.data("SuppressTriggerDropdownEvent")){ // This check was added for SO-73393, by this check we have stopped firing "RibbonDropdownOpened" event on opening of dropdown for all controls having "SuppressTriggerDropdownEvent" as true in their data. for now this is set for Comboboxtext control only.
        bTriggerEvent = false;
    }

    if(bTriggerEvent){
        $dropDown.trigger("RibbonDropdownOpened");    
    }
    
    $dropDown.fadeToggle(200);
    var ddLeft = $comboBox.position().left;
    var ddTop = $comboBox.outerHeight() + $comboBox.position().top;

    $dropDown.css({top: ddTop, left: ddLeft, bottom: ""});

    var ddCss = {};
    ddCss.left = $comboBox.position().left;

    //Vertical Overflow
    // var $leonardoArea = SIMS.Objects.DOMElements.LeonardoArea;
    var $leonardoArea = SIMS.Objects.DOMElements.SIMArea;
    var $simArea = SIMS.Objects.DOMElements.SIMArea;

    var vOverflow = UIUtils.getVerticalOverflow($dropDown, $leonardoArea) + 40;

    if ((vOverflow > 0) && ($comboBox.offset().top - $dropDown.outerHeight()) > 0) {
        ddCss.bottom = $comboBox.position().top + $comboBox.outerHeight();
        ddCss.top = "";
    }
    else {
        ddCss.top = $comboBox.outerHeight() + $comboBox.position().top;
        ddCss.bottom = "";
    }

    //Fix for SIMS-403, Added check for window width
    var comboLeft = $comboBox.offset().left;
    var winWidth = $simArea.width();
    var ddWidth = $dropDown.width();
    if (comboLeft + ddWidth > winWidth) {
        ddCss.left = (winWidth - ddWidth - comboLeft) - 4;
    }

    $dropDown.css(ddCss);

    $dropDown.addClass('dropdown-open');
    //Add highlights
    //var $itemsToBeHightlighted = $(this).closest('.combobox-wrapper');
    $comboWrapper.addClass('active-toggle');

    //    for (var i = 0; i < itemsToBeHightlighted.length; i++) {
    //        itemsToBeHightlighted[i].addClass('active-toggle');
    //    }

    //Only if status bar exists
    var $statusBar = $('.excelStatusBar');
    if ($statusBar.length > 0) {
        $dropDown.css('height', '');
        //if overflow
        var ddHeight = $dropDown.outerHeight();
        var ddBottom = $dropDown.offset().top + ddHeight;
        var statusbarTop = $statusBar.offset().top;
        if (ddBottom > statusbarTop) {
            //resize
            ddHeight -= ddBottom - statusbarTop + 5;
            $dropDown.css('height', ddHeight + 'px');
        }
    }


    // Highlight first dropdown item when accessible or navigation state is active
    ////////////////////////////////////////////////////////////////////////////////

    if ($dropDown.closest('.accesible-state').length > 0 || $dropDown.closest('.navigation-key-state').length > 0) {

        var $subItems = $dropDown.find(".dropdown-item:visible:not(.disabled)");
        var $firstItem = null;

        if ($subItems != undefined && $subItems.length > 0) {
            $firstItem = $subItems.first();

            var $itemsToBeHovered = $();
            if ($firstItem.is(".office-hover-default")) {
                $itemsToBeHovered = $itemsToBeHovered.add($firstItem);
            }
            $itemsToBeHovered = $itemsToBeHovered.add($firstItem.find(".office-hover-default:visible"));

            $itemsToBeHovered.addClass("hovered");

        }



    }


    // Specific handling for TableGridDiv item for Word - Insert - Table
    var $tablegrid = $dropDown.find(".table-grid-div");
    if ($tablegrid.length != 0)
    {
        $($tablegrid).children(".table-grid-container").children().removeClass("hovered-table-element").attr("highlighted", "false");
        if ($($tablegrid).index() == 0 && $dropDown.closest('.accesible-state').length > 0 && $firstItem.find(".table-grid-div").length != 0)
        {
            $($tablegrid).children(".table-grid-container").children(":first-child").addClass("hovered-table-element");
            $($tablegrid).children(".table-grid-header").text("1x1 Table");
        }
        else
        {
            $($tablegrid).children(".table-grid-header").text("Insert Table");
        }
    }
    /////////////////////////////////////////////////////////////////////////////////

};

ControlGenerators.ComboBox.prototype.AddItems = function() {
    var $items = this.$controlXml.children('items');
    this.$dropDown = this.GetDropdown();

    var $colorGrids = $items.length> 0 ? $items.find("item[type='ColorPicker']") : null;

    var goodToGenerateColorGrids = [];  // in case of ribbon controls used in Mini Toolbar / Shy Toolbar of Chart / PPT Text Placeholder/ Shape Placeholder etc
    // user needs to add attribute 'gtg' attribute and set it to 'true' so that these color grids are not lazy generated

    if($colorGrids.length>0)
    {
        goodToGenerateColorGrids = $colorGrids.filter(function(){
            return $(this).attr('gtg')=="true";
        });
    }
	
	
    //Add options	
	if(goodToGenerateColorGrids.length != 0)
	{
		var $generatedItems = this.GetItems($items);

        $generatedItems.appendTo(this.$dropDown);
	}
    else if ($colorGrids == null || $colorGrids.length == 0 || gRibbonCMTheme.toUpperCase() == 'WORD' || gRibbonCMTheme.toUpperCase() == 'EXCEL' || gRibbonCMTheme.toUpperCase() == 'PPT') {// Preventing Lazy Generation of Color Grids in PPT and Access -  Monalika-Ashwin
        this.$dropDown.data("itemsInfo", $items);
        //        var $generatedItems = this.GetItems($items);

        //        $generatedItems.appendTo(this.$dropDown);

        //        this.AddItemFunctionality($generatedItems, this.$dropDown, this.$valuePart);
    }
    else {
        var $generatedItems = this.GetItems($items);

        $generatedItems.appendTo(this.$dropDown);
    }

};

ControlGenerators.ComboBox.prototype.GetDropdown = function() {
    var $items = this.$controlXml.find('items');
    var ddWidth = $items.attr('width');
    var ddheight = $items.attr('height');
    if ($items.attr('ddscrolly')) {
        var ddscrolly = $items.attr('ddscrolly');
    }
    else{
        var ddscrolly = "none";
    }
    
    var $dropDown = UIUtils.getUnselectableDiv('', 'combobox-dropdown');
    $dropDown.css({'display': 'none', 'width': ddWidth, 'max-height': ddheight , 'overflow-y' : ddscrolly});
    return $dropDown;
};

///////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////ComboBoxText//////////////////////////////////////////
ControlGenerators.ComboBoxText = function() {
};
ControlGenerators.ComboBoxText.prototype = new ControlGenerators.ComboBox();
ControlGenerators.ComboBoxText.prototype.ItemsToBeHighlighttedOnClick = ['$arrow'];
ControlGenerators.ComboBoxText.prototype.GetLabel = function() {
    var $textBox = $("<input type='text' class='combo-textbox combobox-value-holder'/>");
    var defaultValue = this.$controlXml.getAttribute('defaulttext');

    var dontFireEventOnESC = this.$controlXml.attr('dontFireEventOnESC');
    if (dontFireEventOnESC != undefined) {
        $textBox.attr('dontFireEventOnESC', dontFireEventOnESC);
    }

    var NoStopPropagationOnESC = this.$controlXml.attr('NoStopPropagationOnESC');
    if (NoStopPropagationOnESC && NoStopPropagationOnESC == "true") {
        $textBox.attr('NoStopPropagationOnESC', true);
    }

    var ConfirmTextOnTab = this.$controlXml.attr('ConfirmTextOnTab');
    if (ConfirmTextOnTab && ConfirmTextOnTab == "true") {
        $textBox.attr('ConfirmTextOnTab', true);
    }

    var selectTextOnNav = this.$controlXml.attr('selectTextOnNav');
    if (selectTextOnNav) {
        $textBox.attr('selectTextOnNav', selectTextOnNav);
    }

    if (defaultValue != null) {
        this.setText($textBox, defaultValue);
    }

    //Selection on focus
    $textBox.focus(function(e) {
        e.preventDefault();
        $(this).select();
    });

    $textBox.bind("click", function(e) {
        if(navigator.userAgent.indexOf("Edge") === -1)
        {
            $(this).select();
        }
        else{
            $(this).select().focus();  
        }
    });

    var $comboBox = this.$control;

    $comboBox.data('SuppressTriggerDropdownEvent', true);

    var StopPropagationOnKeyDown = this.$controlXml.attr('StopPropagationOnKeyDown');
    if (StopPropagationOnKeyDown && StopPropagationOnKeyDown.toLowerCase() === "true") {
        $comboBox.data('StopPropagationOnKeyDown', true);
    }

    // Fetching Item Texts to show on autocomplete

    var itemsInfo = this.$controlXml.children('items');

    var children = $(itemsInfo).children();

    var textArray = [];

    textArray.length = 0;

    for (var i = 0; i < children.length; i++) {
        var currentChild = children[i];
        var tagName = $(currentChild).tagName().toLowerCase();

        if (tagName == 'items') {

            var subChildren = $(currentChild).children();

            for (var j = 0; j < subChildren.length; j++) {

                var currentSubChild = subChildren[j];
                var subtagName = $(currentSubChild).tagName().toLowerCase();
                if (subtagName == 'item') {
                    var str = $(currentSubChild).attr('text');
                    if (str != undefined) {
                        textArray.push($(currentSubChild).attr('text'));
                    }
                }
            }
        }
        else if (tagName == 'item') {

            var str = $(currentChild).attr('text');

            if (str != undefined) {
                textArray.push($(currentChild).attr('text'));
            }

        }

    }

    var T = new Trie();
    var i;
    for (i = 0; i < textArray.length; i++) {
        T.insert(textArray[i].toLowerCase());
    }

    this.$control.data("StopPropagationOnEnter", this.$controlXml.getAttribute('StopPropagationOnEnter'));


    //Firing event  ; Useful Key codes ALT = 18 ; F10 = 121 ; F6 = 117
    $textBox.bind("keydown", function(e) {

        var stopPropagation = false;

        if($comboBox.data('StopPropagationOnKeyDown')){
            stopPropagation = true;
        }

        if (e.keyCode === 13) { // Enter
            stopPropagation = true;
            var eventId = $comboBox.data('eventId');
            //if ($(this).data("val") !== $(this).attr('value')) {
            if ($(this).attr('defaultValue') !== $(this).attr('value')) {
                $(this).data("val", $(this).attr('value'));
                var clickstreamInfo = $comboBox.data('clickstreamInfo')+ " : " + $(this).data("val");
                //Reset to default value. If this is an correct action then value should be set via attributes in next state
                $(this).attr('value', $(this).attr('defaultValue'));
                $comboBox.trigger('selectedIndexChanged', [null, eventId, undefined, undefined, clickstreamInfo]);

            }
            $(this).blur();
        }

        if (e.keyCode === 9) { // TAB
            if($(this).attr("ConfirmTextOnTab")){
                e.preventDefault();
                var eventId = $comboBox.data('eventId');
                //if ($(this).data("val") !== $(this).attr('value')) {
                if ($(this).attr('defaultValue') !== $(this).attr('value')) {
                    $(this).data("val", $(this).attr('value'));
                    var clickstreamInfo = $comboBox.data('clickstreamInfo')+ " : " + $(this).data("val");
                    //Reset to default value. If this is an correct action then value should be set via attributes in next state
                    $(this).attr('value', $(this).attr('defaultValue'));
                    $comboBox.trigger('selectedIndexChanged', [null, eventId, undefined, undefined, clickstreamInfo]);

                }
            }

            if ($comboBox.find(".combobox-dropdown").is(":visible")) {
                e.preventDefault();
                stopPropagation = true;
            }

        }

        if (e.keyCode === 32) { // SPACE
            if ($comboBox.data("StopPropagationOnEnter") == "true") {
                stopPropagation = true;
            }

        }

        if (e.keyCode === 27) {
            if($(this).attr('NoStopPropagationOnESC')){
                stopPropagation = false;
            }
        }

        if (e.keyCode === 40 || e.keyCode === 38) { //DOWN || UP
            stopPropagation = false;
            var $dropdown = $comboBox.find(".combobox-dropdown");
            if ($dropdown != undefined) {
                if ($dropdown.is(":hidden"))
                    $comboBox.find(".dropdown-button").click();
            }


        }

        if(stopPropagation){
            e.stopPropagation();
        }
    }
    );



    $textBox.bind("keyup", function(e) {

        var keycode = (e.keyCode ? e.keyCode : e.which);

        if (e.keyCode === 40 || e.keyCode === 38) { //DOWN || UP
           
            var $selectedItem = $comboBox.find(".combobox-dropdown").find(".hovered:first");
            var $itemText = $selectedItem.find(".dropdown-item-text");
            var $imageItemText = $selectedItem.data('ImageItemText');
            if ($itemText.length > 0) {
                var $itemValue = $itemText.find(".dropdown-item-value");

                if ($itemValue.length > 0) {
                    this.value = $itemValue.text();
                }
                else
                    this.value = $itemText.text();

                $(this).select();
            }
            else if ($imageItemText != undefined){
                 this.value = $imageItemText; 
                 $(this).select();

            }
            

        }

        if (e.keyCode === 27) { //ESCAPE
            $(this).blur();
            this.value = $(this).attr('value');
            e.stopPropagation();

        }


        /////////////////////////////Trie Implementation   

        var englishAlphabetDigitsAndWhiteSpace = /[A-Za-z0-9 ]/g;

        var key = String.fromCharCode(e.which);

        if (englishAlphabetDigitsAndWhiteSpace.test(key)) {

            var queryText = this.value.toLowerCase();
            var result;

            var autoList = T.autoComplete(queryText);

            if (autoList != null && autoList.length > 0) {

                result = autoList[0];

                var i;
                var exactText;
                for (i = 0; i < textArray.length; i++) {
                    if (textArray[i].toLowerCase() === result) {
                        exactText = textArray[i];
                        break;
                    }
                    ;
                }

                //added this after accelerator keys and ribbon shortcuts have now been implemented on keydown event rather than keyup event.
                if (queryText.length != result.length)
                {
                    this.value = exactText;
                    this.setSelectionRange(queryText.length, result.length);
                }
            }

        }

        ////////////////////////////////////////////////

    }
    );



    $textBox.focus(function() {
        $(this).data("val", $(this).attr('value'));

    });


    $textBox.bind("focusout", function(e) {

        var eventId = $comboBox.data('eventId');
        var text = $(this).attr('value')

            if (($(this).attr('defaultValue') !== $(this).attr('value')) && $(this).attr('defaultValue') !== undefined) {

                $(this).data("val", text);
                var clickstreamInfo = $comboBox.data('clickstreamInfo')+ " : " + $(this).data("val");
                //Reset to default value. If this is an correct action then value should be set via attributes in next state
                $(this).attr('value', $(this).attr('defaultValue'));

                if ($textBox.attr('dontFireEventOnESC') == undefined || $textBox.attr('dontFireEventOnESC') != "true") {         //SIMS-118190
                    $comboBox.trigger('selectedIndexChanged', [null, eventId, undefined, undefined, clickstreamInfo]);
                }
 
            }
  
    });


    return $textBox;
};

ControlGenerators.ComboBoxText.prototype.handleAccessKey = function($control, key) {
    if(navigator.userAgent.indexOf("Edge") === -1)
    {
        $control.find("input").select();
    }
    else{
        $control.find("input").select().focus();  
    }

    return true;
};

ControlGenerators.ComboBoxText.prototype.addNavigationHover = function($item) {  
    var $textBox = $item.find("input"); 
     this.getHoverItems($item).addClass("hovered");
     if ($textBox.attr('selectTextOnNav') && $textBox.attr('selectTextOnNav') === "true") {
        $textBox.select().focus();
     }

};

ControlGenerators.ComboBoxText.prototype.removeNavigationHover = function ($item) {  
    var $textBox = $item.find("input"); 
      this.getHoverItems($item).removeClass("hovered");
    if ($textBox.attr('selectTextOnNav') && $textBox.attr('selectTextOnNav') === "true") { 
        if($item.find(".combobox-dropdown").is(":hidden")){
            $textBox.blur();
        }   
    }
};

ControlGenerators.ComboBoxText.prototype.setText = function($control, sText) {
    if (!$control.is('input.combo-textbox')) {
        $control = $control.find('input.combo-textbox');
    }
    $control.val(sText);
    $control.attr('value', sText);
    $control.attr('defaultValue', sText);
};

ControlGenerators.ComboBoxText.prototype.GetIcon = function() {
    return null;
};

////////////////DropDownButton/////////////////////
ControlGenerators.DropDownButtonHorizontal = function() {
};
ControlGenerators.DropDownButtonHorizontal.prototype = new ControlGenerators.ComboBox();
ControlGenerators.DropDownButtonHorizontal.prototype.GetArrowPart = function() {
    return getDropdownButton(false);
};
ControlGenerators.DropDownButtonHorizontal.prototype.ApplyStylesToComboBox = function() {
    ControlGenerators.ComboBoxBase.call();
    this.$comboBox.addClass('office-hover-default');
};
ControlGenerators.DropDownButtonHorizontal.prototype.AddFunctionality = function($dropdown, $comboBox) {
    ControlGenerators.ComboBox.prototype.AddFunctionality.call(this, $dropdown, $comboBox);
    this.$valuePart.click(this.DropdownOpener);

    if (this.$controlXml.attr("dblClick"))
    {
        if (this.$controlXml.attr("dblClick").toString().toLowerCase() == "true")
        {
            this.$valuePart.bind("dblclick", this.DoubleClickHandler);
        }

    }

};


ControlGenerators.DropDownButtonHorizontal.prototype.DoubleClickHandler = function(e)
{
    var control = $(this).parents(".office-control:first");
    var clickstreamInfo = control.data('clickstreamInfo') + " double-clicked";
    $(this).trigger("officeButtonClick", ["control double clicked", control.data('eventId'), undefined, undefined, clickstreamInfo]);
    $(this).parents(".combobox-wrapper:first").removeClass('active-toggle');
};

ControlGenerators.ImageDropdown = function() {
};
ControlGenerators.ImageDropdown.prototype = new ControlGenerators.DropDownButtonHorizontal();
ControlGenerators.ImageDropdown.prototype.GetArrowPart = function() {
    return $("<div />");
};


ControlGenerators.CondensedSectionControl = function() {
};
ControlGenerators.CondensedSectionControl.prototype = new ControlGenerators.ImageDropdown();

ControlGenerators.CondensedSectionControl.prototype.makeControl = function() {
    var $comboboxWrapper = this.$wrapper = UIUtils.getUnselectableDiv('', 'combobox-wrapper condensed-controlwrapper');
    this.$control.append($comboboxWrapper);

    //    var shortcutkey = this.$controlXml.attr('ak');
    //    var $tabSKdiv = UIUtils.getUnselectableDiv("", "ribbon-tab-SK");
    //    $tabSKdiv.addClass("SK_" + shortcutkey);
    //    this.$control.append($tabSKdiv);

    var $controlXml = this.$controlXml;
    var $comboBox = this.$comboBox = UIUtils.getUnselectableDiv('', 'combobox condensed-control');
    //$comboBox.attr("tabindex", -1);

    this.ApplyStylesToComboBox();


    $comboboxWrapper.append($comboBox);

    //Text Box
    this.$valuePart = this.GetValuePart();
    $comboBox.append(this.$valuePart);

    //Arrow
    this.$arrow = this.GetArrowPart();
    $comboBox.append(this.$arrow);

    $comboBox.data('desc', this.$controlXml.attr('text'));

    //Add items

    this.AddItems();
    $comboboxWrapper.append(this.$dropDown);

    if (this.$controlXml.attr("sectionWidth"))
    {
        this.$dropDown.css({width: this.$controlXml.attr("sectionWidth")});
    }

    //Add functionality to dropdown...
    this.AddFunctionality(this.$dropDown, $comboBox);




    return this.$control;
};




ControlGenerators.CondensedSectionControl.prototype.DropdownCloser = function() {

    var $ribbon = SIMS.Objects.DOMElements.SIMArea.find(".ribbon");

    var $control = $ribbon.find('.ctrl-condensedsectioncontrol').find('.combobox-wrapper.active-toggle').first().parent();
    if (!($control.find("input").is(":focus") || !(!($control.data("avoidClose"))))) //if any of the inputs is focused then don't close the dropdown
    {
        var $curtain = $ribbon.find('.section-dropdown-curtain');
        var $dropdown = $ribbon.find('.section-dropdown-open');

        $dropdown.hide();
        $curtain.hide();

        $dropdown.removeClass('section-dropdown-open');

        //Remove highlights
        var $itemsToBeHightlighted = $dropdown.closest('.active-toggle');
        $itemsToBeHightlighted.removeClass('active-toggle');

        var $itemsToBeHightlighted = $dropdown.find('.hovered');
        $itemsToBeHightlighted.removeClass('hovered');
    }
    $control.removeData("avoidClose");

};


ControlGenerators.CondensedSectionControl.prototype.ForceDropdownCloser = function($control) {


    var $curtain = $control.find('.section-dropdown-curtain');
    var $dropdown = $control.find('.section-dropdown-open');

    $dropdown.hide();
    $curtain.hide();

    $dropdown.removeClass('section-dropdown-open');

    //Remove highlights
    var $itemsToBeHightlighted = $dropdown.closest('.active-toggle');
    $itemsToBeHightlighted.removeClass('active-toggle');

    var $itemsToBeHightlighted = $dropdown.find('.hovered');
    $itemsToBeHightlighted.removeClass('hovered');

};




ControlGenerators.CondensedSectionControl.prototype.DropdownOpener = function(e) {
    if (e != null && e.stopPropagation != null) {
        e.stopPropagation();
    }
    //this.hidetooltip(0);

    var $comboBox = $(this).closest('.combobox');
    $comboBox = $comboBox.length > 0 ? $comboBox : $(this).find('.combobox:first');
    var $ribbon = $comboBox.parents('.ribbon');
    $comboBox.find('.tooltip').delay(10).fadeOut(200);

    var $curtain = $('.dropdown-curtain');
    var $comboWrapper = $comboBox.closest('.combobox-wrapper');
    var $dropDown = $comboWrapper.children('.condensed-combobox-dropdown:not(.contextMenu)');


    if ($curtain.length == 0) {
        $curtain = UIUtils.getUnselectableDiv('', 'section-dropdown-curtain');
        $curtain.attr("tabindex", -1);
    }
    $ribbon.append($curtain);
    $curtain.show();
    $('.combobox-dropdown').not($dropDown).hide();
    $dropDown.fadeToggle(200);
    var ddLeft = $comboBox.position().left;
    var ddTop = $comboBox.outerHeight() + $comboBox.position().top;

    $dropDown.css({top: ddTop, left: ddLeft, bottom: ""});

    var ddCss = {};
    ddCss.left = $comboBox.position().left;

    //Vertical Overflow
    // var $leonardoArea = SIMS.Objects.DOMElements.LeonardoArea;
    var $leonardoArea = SIMS.Objects.DOMElements.SIMArea;
    var $simArea = SIMS.Objects.DOMElements.SIMArea;

    var vOverflow = UIUtils.getVerticalOverflow($dropDown, $leonardoArea) + 40;

    if ((vOverflow > 0) && ($comboBox.offset().top - $dropDown.outerHeight()) > 0) {
        ddCss.bottom = $comboBox.position().top + $comboBox.outerHeight();
        ddCss.top = "";
    }
    else {
        ddCss.top = $comboBox.outerHeight() + $comboBox.position().top;
        ddCss.bottom = "";
    }

    //Fix for SIMS-403, Added check for window width
    var comboLeft = $comboBox.offset().left;
    var winWidth = $simArea.width();
    var ddWidth = $dropDown.width();
    if (comboLeft + ddWidth > winWidth) {
        ddCss.left = (winWidth - ddWidth - comboLeft) - 4;
    }

    $dropDown.css(ddCss);

    $dropDown.addClass('section-dropdown-open');
    //Add highlights
    //var $itemsToBeHightlighted = $(this).closest('.combobox-wrapper');
    $comboWrapper.addClass('active-toggle');

    //    for (var i = 0; i < itemsToBeHightlighted.length; i++) {
    //        itemsToBeHightlighted[i].addClass('active-toggle');
    //    }

    //Only if status bar exists
    var $statusBar = $('.excelStatusBar');
    if ($statusBar.length > 0) {
        $dropDown.css('height', '');
        //if overflow
        var ddHeight = $dropDown.outerHeight();
        var ddBottom = $dropDown.offset().top + ddHeight;
        var statusbarTop = $statusBar.offset().top;
        if (ddBottom > statusbarTop) {
            //resize
            ddHeight -= ddBottom - statusbarTop + 5;
            $dropDown.css('height', ddHeight + 'px');
        }
    }





};


ControlGenerators.CondensedSectionControl.prototype.AddItems = function() {
    this.$dropDown = this.GetDropdown();

    //Add options

    var $dummySectionDiv = UIUtils.getUnselectableDiv('', 'section-div');

    $dummySectionDiv.appendTo(this.$dropDown);

};


ControlGenerators.CondensedSectionControl.prototype.GetDropdown = function() {
    var $dropDown = UIUtils.getUnselectableDiv('', 'condensed-combobox-dropdown');
    $dropDown.css({'display': 'none'});
    return $dropDown;
};

ControlGenerators.CondensedSectionControl.prototype.handleAccessKey = function($control, key) {
    var $param = $control.find(".condensed-control").children(".dropdown-button");
    if ($param.length === 0) {
        $param = $control;
    }

    if (key === "ESCAPE") {

        if (!($control.find("input").is(":focus")))
            this.DropdownCloser.apply($param);
    }
    else {
        this.DropdownOpener.apply($param);
    }
};



ControlGenerators.CondensedSectionControl.prototype.UpdateControlData = function($control, dataName, value) {

    $control.data(dataName, value);

};


////////////////File Menu DropDown/////////////////////
//This control should not be used in Ribbon////////////
ControlGenerators.DropDownButtonHorizontalFM = function() {
};
ControlGenerators.DropDownButtonHorizontalFM.prototype = new ControlGenerators.DropDownButtonHorizontal();


ControlGenerators.DropDownButtonHorizontalFM.prototype.handleStandardKey = function() {
};

ControlGenerators.DropDownButtonHorizontalFM.prototype.addNavigationHover = function($item) {
    this.getHoverItems($item).addClass("hovered");
};

ControlGenerators.DropDownButtonHorizontalFM.prototype.removeNavigationHover = function($item) {
    this.getHoverItems($item).removeClass("hovered");
};

ControlGenerators.DropDownButtonHorizontalFM.prototype.getHoverItems = function($control) {
    var $itemsToBeHovered = $();
    if ($control.is(".office-hover-default")) {
        $itemsToBeHovered = $itemsToBeHovered.add($control);
    }
    $itemsToBeHovered = $itemsToBeHovered.add($control.find(".office-hover-default").filter(function() {
        return $(this).closest(".dropdown-items-wrapper").length === 0;
    }));

    return $itemsToBeHovered;
};

ControlGenerators.DropDownButtonHorizontalFM.prototype.getNextTabItem = function($item) {

    var $rightPane = $item.closest(".ribbon");

    var $nextItem;

    var $allItems = $rightPane.find("*:visible").filter(function() {

        return $(this).data("tab-order");
    });

    var currentTabOrder = $item.data("tab-order");

    var maxTabOrder = 0;

    $allItems.each(function() {

        if ($(this).data("tab-order") > maxTabOrder) {
            maxTabOrder = $(this).data("tab-order");
        }
    });


    var counter = 0;
    while (($nextItem == null || $nextItem == undefined || $nextItem.length < 1) && counter < 10) {

        $nextItem = $allItems.filter(function() {

            return $(this).data("tab-order") === (currentTabOrder % maxTabOrder) + 1;
        });

        currentTabOrder++;
        counter++;
    }

    if ($nextItem.length > 0) {
        return {item: $nextItem}.item;
    }
    return {item: null};

    //    var $ribbon = $item.closest(".ribbon");
    //    var exclude = ".ctrl-separator";
    //    var currentTabSelector = ".ribbon-tab-container:visible:first";
    //    var includeFromTab = ".section-launcher, .office-control";
    //    var selectedTabHeader = ".ribbon-tabs-wrapper .tab-header-selected:visible";

    //    var $itemsToLoopfrom = $ribbon.find(selectedTabHeader).add($ribbon.find(currentTabSelector).find(includeFromTab)).not(exclude);

    //    var currentIndex = $itemsToLoopfrom.index($item);

    //    var $tabItem = $($itemsToLoopfrom[(currentIndex + 1) % $itemsToLoopfrom.length]);

    //    return $tabItem;
};

ControlGenerators.DropDownButtonHorizontalFM.prototype.getItemForStandardKey = function($item, key) {
    if (key == "UP" || key == "DOWN") {
        this.handleAccessKey($item, key);
    }

    var $openDropdown = $item.find(".dropdown-open:visible");

    if ($openDropdown.length > 0) {
        var $extractItemsFrom = $openDropdown;
        var $lastWrapper = $openDropdown.find(".dropdown-next-level-wrapper:visible").last();
        if ($lastWrapper.length > 0) {
            $extractItemsFrom = $lastWrapper;
        }

        return {item: $extractItemsFrom.find(".dropdown-item:visible:not(.disabled):first")};
    }
    else {
        var $itemWrapper = $item.parents(".ribbon");
        var exclude = ".ctrl-separator";
        var currentTabSelector = ".ribbon-tab-container:visible:first";
        var includeFromTab = ".section-footer, .office-control";
        var tabHeaders = ".ribbon-tabs-wrapper .tab-header:visible";

        $itemsToLoopfrom = $itemWrapper.find(tabHeaders).add($itemWrapper.find(currentTabSelector).find(includeFromTab)).not(exclude);
    }

    var itemInfo = ControlGetters.GetControlFunctionMap[key]($item, $itemsToLoopfrom, true);
    var $reqItem = itemInfo.item;

    if ($reqItem.is(".tab-header")) {
        $reqItem = $itemsToLoopfrom.filter(".tab-header-selected");
    }
    else if ($reqItem.is(".section-footer")) {
        $reqItem = $reqItem.find(".section-launcher");
    }

    itemInfo.item = $reqItem;

    return itemInfo;
};



///////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////ComboBoxReadonlyText//////////////////////////////////////////
ControlGenerators.ComboBoxReadonlyText = function() {
};
ControlGenerators.ComboBoxReadonlyText.prototype = new ControlGenerators.ComboBox();
ControlGenerators.ComboBoxReadonlyText.prototype.ItemsToBeHighlighttedOnClick = ['$arrow'];
ControlGenerators.ComboBoxReadonlyText.prototype.GetLabel = function() {
    var self = this;
    var $textBox = $("<input type='text' class='combo-textbox combobox-value-holder' readonly/>");
    var defaultValue = this.$controlXml.getAttribute('defaulttext');
    if (defaultValue != null) {
        this.setText($textBox, defaultValue);
    }

    //Selection on focus
    /* $textBox.focus(function (e) {
     self.$arrow.click();
     e.preventDefault();
     });*/

    //Binding click instead of focus for issue with Chrome
    $textBox.click(function(e) {
        //self.$arrow.click();

        $(this).closest(".combobox").find(".dropdown-button").first().click();
        e.preventDefault();
        e.stopPropagation();
    });


    $textBox.bind("keydown", function(e) {
        if (e.keyCode === 13) { // Enter
            $(this).blur();
        }

    }
    );

    return $textBox;
};




ControlGenerators.ComboBoxReadonlyText.prototype.handleAccessKey = function($control, key) {
    //$control.find("input").click();

    var $param = $control.find(".dropdown-button");
    if ($param.length === 0) {
        $param = $control;
    }
    if (key === "ESCAPE") {
        this.DropdownCloser.apply($param);
    }
    else {
        this.DropdownOpener.apply($param);
    }

};

ControlGenerators.ComboBoxReadonlyText.prototype.setText = function($control, sText) {
    if (!$control.is('input.combo-textbox')) {
        $control = $control.find('input.combo-textbox');
    }
    $control.val(sText);
    $control.attr('value', sText);
    $control.attr('defaultValue', sText);
};

ControlGenerators.ComboBoxReadonlyText.prototype.GetIcon = function() {
    return null;
};
namespace("ControlGenerators");

ControlGenerators.ComboBox.prototype.makeControl = function(basefunc) {
	return function() {
		var $control = basefunc.apply(this);
		if (this.$controlXml.attr('leftOffset')) {
			$control.find('.combobox').data('leftOffset', this.$controlXml.attr('leftOffset'));
		};
		return $control;
	}
}(ControlGenerators.ComboBox.prototype.makeControl);

ControlGenerators.ComboBox.prototype.DropdownOpener = function(basefunc) {
	return function() {
		basefunc.apply(this, arguments);
		var $comboBox = $(this).closest('.combobox');
		if ($comboBox.data('leftOffset')) {
			var $simArea = SIMS.Objects.DOMElements.SIMArea;
			var $comboWrapper = $comboBox.closest('.combobox-wrapper');
			var $dropDown = $comboWrapper.find('.combobox-dropdown:not(.contextMenu)');
			var comboLeft = $comboBox.offset().left;
			var winWidth = $simArea.width();
			var ddWidth = $dropDown.width();
			var offset = 0;
			if ($comboBox.data('leftOffset')) {
				offset = parseInt($comboBox.data('leftOffset'));
			}
			if (comboLeft + ddWidth > winWidth) {
				$dropDown.css("left", (winWidth - ddWidth - comboLeft) - offset);
			}
		}

	}

}(ControlGenerators.ComboBox.prototype.DropdownOpener);

ControlGenerators.DropDownButtonHorizontal.prototype.DoubleClickHandler = function(e)
{
    var control = $(this).parents(".office-control:first");

    // Done for SO-98186, on double clicking the app icon control, message for dropdown close was not triggered.
    var $dropdown = control.find(".dropdown-open");
    if($dropdown.length > 0){
    	$dropdown.trigger("RibbonDropdownClosed");
    }
    
    var clickstreamInfo = control.data('clickstreamInfo') + " double-clicked";
    $(this).trigger("officeButtonClick", ["control double clicked", control.data('eventId'), undefined, undefined, clickstreamInfo]);
    $(this).parents(".combobox-wrapper:first").removeClass('active-toggle');
};

namespace("ControlGenerators");

ControlGenerators.Big_Icon_Text = function () { };
ControlGenerators.Big_Icon_Text.prototype = new ControlGenerators.ComboBox();
ControlGenerators.Big_Icon_Text.prototype.GetValuePart = function () {
    var $valuePart = this.$arrow = $("<div class='combo-value-wrapper'/>");

    var $icon = this.GetIcon();
    var $value = this.GetLabel();

    if ($icon != null) {
        $icon.addClass('combo-icon-part control-icon');
        $valuePart.append($icon);
    }

    if ($value != null) {
        this.$label = $value;
        $value.addClass('combo-value-part control-label');
        $valuePart.append($value);
    }

    //Arrow
    this.$arrowpart = this.GetArrowPart();
    $valuePart.append(this.$arrowpart);

    return $valuePart;
};

ControlGenerators.Big_Icon_Text.prototype.makeControl = function () {
    var $comboboxWrapper = this.$wrapper = UIUtils.getUnselectableDiv('', 'combobox-wrapper');
    this.$control.append($comboboxWrapper);
    var $controlXml = this.$controlXml;
    this.$comboBox = UIUtils.getUnselectableDiv('', 'combobox');
    this.$comboBox.attr("tabindex", -1);

    if (this.$controlXml.attr('wd') != null) {
        this.$comboBox.css('width', this.$controlXml.attr('wd'));
    }
    if (this.$controlXml.attr('wraptext') != null && this.$controlXml.attr('wraptext') == 'true') {
        this.$comboBox.css('text-wrap', 'normal');
    }

    this.ApplyStylesToComboBox();


    $comboboxWrapper.append(this.$comboBox);

    //Text Box
    this.$valuePart = this.GetValuePart();



    this.$wrapper.addClass('hovered-frame');
    this.$valuePart.addClass('office-hover-default');

    this.$comboBox.append(this.$valuePart);

    this.$comboBox.data('desc', this.$controlXml.attr('text'));

    //Add items
    if ($controlXml.find('items item').length > 0) {
        this.AddItems();
    }
    else {
        this.$dropDown = null;
    }
    $comboboxWrapper.append(this.$dropDown);

    this.AttachButtonEvents();

    //Add functionality to dropdown...
    this.AddFunctionality(this.$dropDown, this.$comboBox);

    if (this.$controlXml.attr('hasList') == 'true') {
        this.$control.addClass('has-list');
    }

    return this.$control;
};

ControlGenerators.Big_Icon_Text.prototype.AttachButtonEvents = function () {
    var $control = this.$control;
    var $controlXml = this.$controlXml;
    this.$valuePart.click(function (e) {
        $control.data('state', '');
        if ($controlXml.find('items').length == 0) {
            var clickstreamInfo = $control.data('clickstreamInfo');
            $control.trigger('officeButtonClick', [$control.data('desc'), $control.data('eventId'), undefined, undefined, clickstreamInfo]);
        }
    });
};

        //apply css styles to button
    ControlGenerators.Big_Icon_Text.prototype.ApplyStylesToButton = function () {
        this.$wrapper.css('width', this.$controlXml.attr('width'));
    };

        //get first part of split part button
    ControlGenerators.Big_Icon_Text.prototype.GetFirstPart = function ($controlXml) {
        //var $firstPart = $("<div class='combo-value-wrapper office-hover-default'/>");
        var $firstPart = UIUtils.getUnselectableDiv('', 'firstpart');
        var $firstPartframe = UIUtils.getUnselectableDiv('', 'control-frame office-hover-default');
        var $icon = getIcon($controlXml.find('icon'));


        if ($icon != null) {
            $icon.addClass('icon-part');
            $firstPartframe.append($icon);
        }

        var $text = getLabel($controlXml.find('text'));

        if ($text != null) {
            $firstPartframe.append($text);
        }

        var $arrowRequired = $controlXml.attr('hasItems');
        if ($arrowRequired == "true") {
            //var $arrowpart = UIUtils.getUnselectableDiv('', 'officearrow');
            //Add an arrow to arrow part
            var $arrow = getDownArrow();
            $text.append($arrow);
            //$firstPartframe.append($arrowpart);
        }
        $firstPartframe.append($text);
        $firstPart.append($firstPartframe);

        return $firstPart;
    };

//    ControlGenerators.Big_Icon_Text.prototype.AddFunctionality = function () {
//        var $control = this.$control;
//        this.$firstPart.click(function () {
//            //$control.trigger('iconClick', [$control.data('desc')]);
//        });
//    };

    ControlGenerators.Big_Icon_Text.prototype.GetItems = function () {
        var xItems = this.$controlXml.children('items');
        return ControlGenerators.ItemsGenerator.prototype.GetItems(xItems);
    };

//    ControlGenerators.Big_Icon_Text_Dropdown = function () { };
//    ControlGenerators.Big_Icon_Text_Dropdown.prototype = new ControlGenerators.Big_Icon_Text();

//    ControlGenerators.Big_Icon_Text_Dropdown.prototype.AttachButtonEvents = function () {
////        var $control = this.$control;
////        this.$valuePart.click(function (e) {
////            $control.data('state', '');
////            $control.trigger('officeButtonClick', [$control.data('desc'), $control.data('state')]);
////            //alert("Yo nigga! You clicked " + $(this).data('desc'));
////        });
    //    };



    ////////////////File Menu DropDown/////////////////////
    //This control should not be used in Ribbon////////////
    ControlGenerators.Big_Icon_TextFM = function () { };
    ControlGenerators.Big_Icon_TextFM.prototype = new ControlGenerators.Big_Icon_Text();


    ControlGenerators.Big_Icon_TextFM.prototype.handleStandardKey = function () {
    };

    ControlGenerators.Big_Icon_TextFM.prototype.addNavigationHover = function ($item) {
        this.getHoverItems($item).addClass("hovered");
    };

    ControlGenerators.Big_Icon_TextFM.prototype.removeNavigationHover = function ($item) {
        this.getHoverItems($item).removeClass("hovered");
    };

    ControlGenerators.Big_Icon_TextFM.prototype.getHoverItems = function ($control) {
        var $itemsToBeHovered = $();
        if ($control.is(".office-hover-default")) {
            $itemsToBeHovered = $itemsToBeHovered.add($control);
        }
        $itemsToBeHovered = $itemsToBeHovered.add($control.find(".office-hover-default").filter(function () {
            return $(this).closest(".dropdown-items-wrapper").length === 0;
        }));

        return $itemsToBeHovered;
    };

    ControlGenerators.Big_Icon_TextFM.prototype.getNextTabItem = function ($item) {

        var $rightPane = $item.closest(".ribbon");

        var $nextItem;

        var $allItems = $rightPane.find("*:visible").filter(function () {

            return $(this).data("tab-order");
        });

        var currentTabOrder = $item.data("tab-order");

        var maxTabOrder = 0;
        $allItems.each(function () {

            if ($(this).data("tab-order") > maxTabOrder) {
                maxTabOrder = $(this).data("tab-order");
            }
        });


        var counter = 0;
        while (($nextItem == null || $nextItem == undefined || $nextItem.length < 1) && counter < 10) {

            $nextItem = $allItems.filter(function () {

                return $(this).data("tab-order") === (currentTabOrder % maxTabOrder) + 1;
            });

            currentTabOrder++;
            counter++;
        }

        if ($nextItem.length > 0) {
            return { item: $nextItem}.item;
        }
        return { item: null };

        //    var $ribbon = $item.closest(".ribbon");
        //    var exclude = ".ctrl-separator";
        //    var currentTabSelector = ".ribbon-tab-container:visible:first";
        //    var includeFromTab = ".section-launcher, .office-control";
        //    var selectedTabHeader = ".ribbon-tabs-wrapper .tab-header-selected:visible";

        //    var $itemsToLoopfrom = $ribbon.find(selectedTabHeader).add($ribbon.find(currentTabSelector).find(includeFromTab)).not(exclude);

        //    var currentIndex = $itemsToLoopfrom.index($item);

        //    var $tabItem = $($itemsToLoopfrom[(currentIndex + 1) % $itemsToLoopfrom.length]);

        //    return $tabItem;
    };

    ControlGenerators.Big_Icon_TextFM.prototype.getItemForStandardKey = function ($item, key) {
        var $openDropdown = $item.find(".dropdown-open:visible");

        if ($openDropdown.length > 0) {
            var $extractItemsFrom = $openDropdown;
            var $lastWrapper = $openDropdown.find(".dropdown-next-level-wrapper:visible").last();
            if ($lastWrapper.length > 0) {
                $extractItemsFrom = $lastWrapper;
            }

            return { item: $extractItemsFrom.find(".dropdown-item:visible:not(.disabled):first") };
        }
        else {
            var $itemWrapper = $item.parents(".ribbon");
            var exclude = ".ctrl-separator";
            var currentTabSelector = ".ribbon-tab-container:visible:first";
            var includeFromTab = ".section-footer, .office-control";
            var tabHeaders = ".ribbon-tabs-wrapper .tab-header:visible";

            $itemsToLoopfrom = $itemWrapper.find(tabHeaders).add($itemWrapper.find(currentTabSelector).find(includeFromTab)).not(exclude);
        }

        var itemInfo = ControlGetters.GetControlFunctionMap[key]($item, $itemsToLoopfrom, true);
        var $reqItem = itemInfo.item;

        if ($reqItem.is(".tab-header")) {
            $reqItem = $itemsToLoopfrom.filter(".tab-header-selected");
        }
        else if ($reqItem.is(".section-footer")) {
            $reqItem = $reqItem.find(".section-launcher");
        }

        itemInfo.item = $reqItem;

        return itemInfo;
    };
/// <reference path="ControlBase.js" />

namespace("ControlGenerators");
ControlGenerators.ButtonBase = function () {
    this.AddButtonClass = function () { };
    this.$button = null;
};
ControlGenerators.ButtonBase.prototype = new ControlGenerators.ControlBase();

ControlGenerators.ButtonBase.prototype.fireButtonClick = function ($control) {
    //$control.data('state', '');
    var clickstreamInfo = $control.data('clickstreamInfo');
    $control.trigger('officeButtonClick', [$control.data('desc'), $control.data('eventId'), $control.data('ICMessageId'), undefined, clickstreamInfo]);
    return false;
};

ControlGenerators.ButtonBase.prototype.handleAccessKey = function ($control, key) {
    this.fireButtonClick($control);
    return true;
};

ControlGenerators.Button = function () { };
ControlGenerators.Button.prototype = new ControlGenerators.ButtonBase();

ControlGenerators.Button.prototype.makeControl = function () {
    //var controlLabel = $controlXml.attr("text");
    //this.type = $controlXml.attr('type');
    var $controlXml = this.$controlXml;

    var bEnabled = true;
    var disabled = $controlXml.attr('disabled');
    if (disabled != null && (disabled.toLowerCase() == 'true' || disabled == '1')) {
        bEnabled = false;
    }

    this.$button = bEnabled ? getHoveredSpan(bEnabled) : UIUtils.getUnselectableSpan();
    this.$button.addClass("button-binder");
    this.$button.appendTo(this.$control);

    this.AddButtonClass();

    //Add Button Icon
    var $iconXml = $controlXml.find("icon");
    var $icon = getIcon($iconXml);
    $icon.addClass("button-icon");
    this.$button.append($icon);

    //Add button text
    var $buttonText = UIUtils.getUnselectableSpan("", "button-label");
    $buttonText.text(this.desc);
    this.$button.append($buttonText);

    //Width handling
    var wd = $controlXml.attr("wd");
    if (wd != null && !wd.isEmpty()) {
        this.$button.css("width", wd);
    }

    //Add Functionality
    this.AddFuctionality();
    this.AddMoreFunctionality();

    return this.$control;
};

ControlGenerators.Button.prototype.AddFuctionality = function () {
    var self = this;
    this.$button.click(function () {
        self.fireButtonClick($(this).parents(".office-control").first());
        //alert("Yo nigga! You clicked " + $(this).data('desc'));
    });
};

ControlGenerators.ToggleButton = function () { };
ControlGenerators.ToggleButton.prototype = new ControlGenerators.Button();
//ControlGenerators.ToggleButton.prototype.AddMoreFunctionality = function () {
//    this.$button.click(function () {
//        $(this).toggleClass('active-toggle');
//        $(this).data('state', $(this).hasClass('active-toggle').toString());
//    });
//};

ControlGenerators.MinimalButton = function () { };
ControlGenerators.MinimalButton.prototype = new ControlGenerators.Button();
ControlGenerators.MinimalButton.prototype.AddButtonClass = function () {
    this.$button.addClass('minimal-button');
};

////////////////MinimalToggleButton/////////////////////
ControlGenerators.MinimalToggleButton = function () { };
ControlGenerators.MinimalToggleButton.prototype = new ControlGenerators.MinimalButton();
//ControlGenerators.MinimalToggleButton.prototype.AddMoreFunctionality = ControlGenerators.ToggleButton.prototype.AddMoreFunctionality;
//--------------MinimalToggleButton--------------------/

/// <reference path="ControlBase.js" />
/// <reference path="jquery.xml2json.js" />


//----------------------******************----------------------------------------------
//public methods
//----------------------******************----------------------------------------------
//ICON
function getIcon(iconXml) {
    if (iconXml == null) {
        return null;
    }

    var $icon = $(iconXml);
    var $imgCrop = $icon.find("imgcrop");

    var iconAttrs = [];

    //Building Icon Attributes
    var src = $icon.getAttribute("src", null);
    if(src!=null){
        iconAttrs.push({ name: "src", value: src });
    }
    iconAttrs.push({ name: "height", value: $icon.getAttribute("ht", "16px") });
    iconAttrs.push({ name: "width", value: $icon.getAttribute("wd", "16px") });
    if($imgCrop!=null)
    {
        iconAttrs.push({ name: "top", value: $imgCrop.getAttribute("top", null) });
        iconAttrs.push({ name: "left", value: $imgCrop.getAttribute("left", null) });
    }
    else
    {
        iconAttrs.push({ name: "top", value: $imgCrop.getAttribute("top", "0px") });
        iconAttrs.push({ name: "left", value: $imgCrop.getAttribute("left", "0px") });
    }


    var $iconBinder = getGenericIcon(iconAttrs);

    return $iconBinder;

};

//TEXT
function getLabel(textXml) {
    var $label = UIUtils.getUnselectableDiv('','control-label centered-text');
    $label.text(textXml.text());
    return $label;
};

//DOWN ARROW
//Leonardo Start
function getDownArrow() {
    var eleAttrs = [{ name: "src", value: "dist/assets/ribbon/img/EwaCommon.png" }, //Changing Image Path
                    { name: "width", value: "5px" },
                    { name: "height", value: "3px" },
                    { name: "top", value: "-133px" },
                    { name: "left", value: "-74px"}];
    var $arrow = getGenericIcon(eleAttrs);
    $arrow.addClass("office-arrow");
    return $arrow;
};

//Right ARROW
function getRightArrow() {
    var eleAttrs = [{ name: "src", value: "dist/assets/ribbon/img/EwaCommon.png" },//changing Image Path
                    { name: "width", value: "4px" },
                    { name: "height", value: "7px" },
                    { name: "top", value: "-113px" },
                    { name: "left", value: "-129px"}];
    var $arrow = getGenericIcon(eleAttrs);
    $arrow.addClass("office-arrow");
    return $arrow;
};
//Leonardo End
//UP ARROW

//LIST
function getComboBox(){

};

//TEXTBOX
function getTextBox(){

}

//SPINNER

//CHECK BOX

//RADIO BUTTON
function getRadioButton(options) {
    var $radio = UIUtils.getGenericHtmlElement({
        tagName: "input",
        id: options.id,
        class: options.className,
        attributes: [{
            name: "name",
            value: options.name
        }, {
            name: "type",
            value: 'radio'
        }]
    });

    var $div = $("<span/>");
    $div.addClass(options.class);
    $div.text(options.text);
    $div.prepend($radio);
    
    return $div;
};

//----------------------******************----------------------------------------------



//----------------------******************----------------------------------------------
//private methods
//----------------------******************----------------------------------------------
function getGenericIcon(iconAttrs) {
    var $wrapper = UIUtils.getUnselectableDiv('', 'icon-wrapper');
    var $img = $("<img class='icon' />");
    var $iconBinder = UIUtils.getUnselectableSpan("", "icon-binder");
    $iconBinder.appendTo($wrapper);
    //Adding Icon Attributes
    for (var i = 0; i < iconAttrs.length; i++) {
        var currentItem = iconAttrs[i];
        if (currentItem.value != null) {
            var currentItemName = currentItem.name.toLowerCase();
            if (currentItemName == "height" || currentItemName == "width") {
                $iconBinder.css(currentItem.name, currentItem.value);
            }
            else {
                if (currentItemName == "src") {
                    $img.attr(currentItem.name, currentItem.value);
                }
                else {
                    $img.css(currentItem.name, currentItem.value);
                }
            }
        }
    }

    $iconBinder.append($img);

    return $wrapper;
};



namespace("ControlGenerators");
ControlGenerators.Separator = function () {
};
ControlGenerators.Separator.prototype = new ControlGenerators.ControlBase();
ControlGenerators.Separator.prototype.getControl = function () {
    //var $controlXml = this.$controlXml;
    var $control = this.$control;
    var $separator = UIUtils.getUnselectableSpan('', 'office-separator');
    $separator.appendTo($control);
    return $control;
};
/// <reference path="ComboBox.js" />
namespace("ControlGenerators");

ControlGenerators.SplitButtonNewBase = function () {
    this.tooltipTargets = [{ target: '$valuePart', tooltipSelector: 'icon' }, { target: '$arrow', tooltipSelector: 'arrow'}];
};
ControlGenerators.SplitButtonNewBase.prototype = new ControlGenerators.ComboBox();

ControlGenerators.SplitButtonNewBase.prototype.makeControl = function () {
    ControlGenerators.ComboBox.prototype.makeControl.apply(this, Array.prototype.slice(arguments, 0));
    this.$wrapper.addClass('hovered-frame');
    this.$valuePart.addClass('office-hover-default');
};

ControlGenerators.SplitButtonNewBase.prototype.AddFunctionality = function ($dropDown, $comboBox) {
    ControlGenerators.ComboBox.prototype.AddFunctionality.apply(this, [$dropDown, $comboBox]);
    var $control = this.$control;
    var eventId = this.$controlXml.attr('eventId');
    this.$valuePart.click(function () {
        var clickstreamInfo = $control.data('clickstreamInfo');
        $control.trigger('iconClick', [$control.data('desc'), eventId, undefined, undefined, clickstreamInfo]);
        //alert('Yo Nigga! You clicked icon part of ' + $control.data('desc') + eventId);
    });

    this.$arrow.click(function () {
        var clickstreamInfo = $control.data('clickstreamInfo');
        $control.trigger('arrowClick', [$control.data('desc'), undefined, undefined, undefined,clickstreamInfo]);
        //alert('Yo Nigga! You clicked arrow part of ' + $control.data('desc'));
    });

};

ControlGenerators.SplitButtonNewBase.prototype.GetItems = function () {
    var xItems = this.$controlXml.children('items');
    return ControlGenerators.ItemsGenerator.prototype.GetItems(xItems);
};

ControlGenerators.SplitButtonNewHorizontal = function () { };
ControlGenerators.SplitButtonNewHorizontal.prototype = new ControlGenerators.SplitButtonNewBase();

ControlGenerators.SplitButtonNewVertical = function () { };
ControlGenerators.SplitButtonNewVertical.prototype = new ControlGenerators.SplitButtonNewBase();
ControlGenerators.SplitButtonNewVertical.prototype.makeControl = function () {
    ControlGenerators.SplitButtonNewBase.prototype.makeControl.apply(this, Array.prototype.slice.call(arguments, 0));
    this.$label.prependTo(this.$arrow);

    var comboboxWidth = parseInt(this.$label.parents(".combobox:first").css('width'), 10);
    if(comboboxWidth !=0 && comboboxWidth!= undefined )
    {    //to make the arrow and text and second line come together.. Check Word - Review - Track Changes
        if((this.$label.text().length * 8)/comboboxWidth > 1)
        {
             this.$label.css({"display":"inline","line-height":"14px"});
        }
    }

}

ControlGenerators.SplitButtonMultipleSelect = function(){ };
ControlGenerators.SplitButtonMultipleSelect.prototype = new ControlGenerators.SplitButtonNewHorizontal();



ControlGenerators.SplitButtonMultipleSelect.prototype.GetItems = function (items) {
        var xItems = this.$controlXml.children('items');
        return ControlGenerators.ItemsGenerator.prototype.GetItems(xItems);
    };


ControlGenerators.SplitButtonMultipleSelect.prototype.AddItems = function () {
        var $items = this.$controlXml.children('items');
        this.$dropDown = this.GetDropdown();

        var self= this.$control;
        if(this.$controlXml.attr("itemClickEvent"))
        $(self).data("itemClickEvent",this.$controlXml.attr("itemClickEvent"));

        $(self).data("mode",this.$controlXml.attr("mode").toLowerCase()=="redo"?"Redo":"Undo");

        if(this.$controlXml.attr("defaultText"))
        {
            $(self).data("defaultText",this.$controlXml.attr("defaultText"));
        }
        else
        {
            $(self).data("defaultText","Cancel");
        }

    //add items

        var $generatedItems = this.GetItems($items);
        $generatedItems.appendTo(this.$dropDown);

        var lastDiv = UIUtils.getUnselectableDiv('', 'dropdown-items-special dropdown-item-text');
        lastDiv.css({'width': $items.attr("wd"), 'height': "23px"});

        lastDiv.appendTo(this.$dropDown.find(".dropdown-items-wrapper"));
        lastDiv.html($(self).data("defaultText"));


    var $itemsToBeHovered = [];
    var $itemsToBeRemovedFromHover = [];
    var $tempItem = null;
    var selectedIndex = null;

    var subitems = this.$dropDown.children().find(".dropdown-item");

    for(var i=0; i < subitems.length ; i++)
    {


       $(subitems[i]).mouseover(function(){

             var parent = $(this).parent();
             selectedIndex = $(this).index() +1;
             for(var j=0; j<=$(this).index(); j++)
             {
                 $tempItem = $(parent).children().get(j);
                 //alert("Index on mouseover::"+ $($tempItem).index());
                 $itemsToBeHovered.push($tempItem);
             }

               $($itemsToBeHovered).each(function (){
                      $(this).addClass("hovered");
               });

               $(parent).find(".dropdown-items-special").html($(self).data("mode")+ " " +selectedIndex +" Actions");

               $itemsToBeHovered = [];
               $tempItem = null;

           }
         );


        $(subitems[i]).mouseout(function(){

                var parent = $(this).parent();
                // alert("Index"+ $(this).index())
                for(var j=0; j<=$(this).index(); j++)
                {
                    $tempItem = $(parent).children().get(j);
                    //alert("Index on mouseout::"+ $($tempItem).index());
                    $itemsToBeRemovedFromHover.push($tempItem);
                }

                $($itemsToBeRemovedFromHover).each(function (){
                    $(this).removeClass("hovered");
                });

                $(parent).find(".dropdown-items-special").html($(parent).parents(".office-control.ctrl-splitbuttonmultipleselect:first").data("defaultText"));

                $itemsToBeRemovedFromHover = [];
                $tempItem = null;
            }


        );

       // note keyboard up down arrows not working



        //to avoid sending 9999 event through itemBase
        $(subitems[i]).unbind("click");

        $(subitems[i]).click(function (e) {
                //alert("Clicked "+ selectedIndex);
                self.trigger('selectedIndexChanged', [$(self).data("mode"), $(self).data("itemClickEvent"),null,selectedIndex, $(self).data('clickstreamInfo')+" : "+$(self).data("mode")]);
            }
        );
    }

    this.AddItemFunctionality(self);
};


ControlGenerators.SplitButtonMultipleSelect.prototype.AddItemFunctionality = function (self) {

    var $control  =  $(self);
    var self = this;
    $control.bind("selectedIndexChanged",function (e, desc, eventId, ICMessageId, eventInfo) {
        if(eventId!=$control.data("itemClickEvent"))
        {
            e.stopPropagation();

            var itemText = desc;
            var itemValue = eventInfo;          // to differentiate between same text items
            var subItems = self.$dropDown.find(".dropdown-item");
            var selectedIndex = 0;

            for(var i = 0;i < subItems.length; i++)
            {
                if($(subItems[i]).text() == itemText)
                {
                    if(itemValue)
                    {
                      if($(subItems[i]).data("itemValue") == itemValue)
                      {
                          selectedIndex = i;
                          break;
                      }
                    }
                    else
                    {
                        selectedIndex = i;
                        break;
                    }

                }
            }

            var clickstreamInfo = $control.data('clickstreamInfo') + " : " + $control.data("mode");
            $control.trigger('selectedIndexChanged', [$control.data("mode"), $control.data("itemClickEvent"),null,(selectedIndex+1), clickstreamInfo]);
        }

    });

};

ControlGenerators.SplitButtonWithLabel= function(){ };
ControlGenerators.SplitButtonWithLabel.prototype = new ControlGenerators.SplitButtonNewHorizontal();


ControlGenerators.SplitButtonWithLabel.prototype.makeControl = function () {
    ControlGenerators.SplitButtonNewHorizontal.prototype.makeControl.apply(this, Array.prototype.slice.call(arguments, 0));
    this.$label.prependTo(this.$arrow);
};









function containsText(str,text){
return (str.toLowerCase().indexOf(text) >= 0);
};

var ControlGenerator = Base.extend({
    _singletonInstance: null,
    getControl: null,
    getControlGenerator: null,
    getGeneratorInstance:null,
    
    //Making it singleton
    constructor: function () {
        if (this._singletonInstance != null) {
            return this._singletonInstance;
        }
        else {
            this.getControl = function (controlXml) {
                return this.getControlGenerator($(controlXml)).getControl();
            };

            this.controlGenerators = {};

            this.getControlGenerator = function (controlXml) {
                var controlType = controlXml.attr('type');
                var generator = this.getGeneratorInstance(controlType);
                if (generator == null) {
                    generator = this.getGeneratorInstance('ControlBase');
                }

                generator.SetControlXml(controlXml);
                return generator;
            };

            this.getGeneratorInstance = function (controlType) {
                if (this.controlGenerators[controlType] == null) {
                    if (ControlGenerators[controlType] != null) {
                        this.controlGenerators[controlType] = new ControlGenerators[controlType]();
                    }
                    else{
                        alert('Pleas include control generator for control Type - ' + controlType)
                    }
                }
                return this.controlGenerators[controlType];
            };

            this._singletonInstance = this;
        }
    }
});
namespace("SIMS.Manipulators");

SIMS.Manipulators.TabHeader = function () {
};

SIMS.Manipulators.TabHeader.getNextTabItem = ControlGenerators.ControlBase.prototype.getNextTabItem;
SIMS.Manipulators.TabHeader.getPreviousTabItem = ControlGenerators.ControlBase.prototype.getPreviousTabItem;
SIMS.Manipulators.TabHeader.addNavigationHover = ControlGenerators.ControlBase.prototype.addNavigationHover;
SIMS.Manipulators.TabHeader.removeNavigationHover = ControlGenerators.ControlBase.prototype.removeNavigationHover;
SIMS.Manipulators.TabHeader.getHoverItems = function ($item) {
    return $item;
};

SIMS.Manipulators.TabHeader.handleAccessKey = function ($control, key) {
    return this.selectTab($control);
};

SIMS.Manipulators.TabHeader.handleStandardKey = function ($control, key) {
    return this.selectTab($control);
};


SIMS.Manipulators.TabHeader.ShowContextMenu = function($control)
{

    var $ribbon = $control.parents(".ribbon:first");
    if ($ribbon.length!=0) {
        if ($ribbon.data('ContextMenuType') === "JSON") {
            $control.showContextMenu("ribbon");
        }
        else {
            $ribbon.triggerHandler('contextmenu'); // does not bubble up the event

            var $cm = $ribbon.find(".contextMenu:visible");
            if($cm.length>0)
            {
                $cm = $cm.first();
                var left = $control.offset().left;
                var top = $control.offset().top + $control.outerHeight();  // set its position
                $cm.offset({left : left,top : top});
            }
        }
        return true;
    }
    else
        return false;
};

SIMS.Manipulators.TabHeader.getItemForStandardKey = function ($item, key) {
    if (key === "LEFT") {
        var $requiredItem = $item.prev(".tab-header:visible");
        if ($requiredItem.length > 0) {
            return { item: $requiredItem };
        }

        return $item.siblings(".tab-header:visible").last();
    }
    else if (key === "RIGHT") {
        var $requiredItem = $item.next(".tab-header:visible");
        if ($requiredItem.length > 0) {
            return { item: $requiredItem };
        }

        return { item: $item.siblings(".tab-header:visible").first() };
    }
    else if (key === "DOWN") {
        return { item: $item.parents(".ribbon").find(".ribbon-tab-container:visible:first .office-control:first") };
    }
    else if (key === "UP") {
        var $itemsToLoopfrom = $item.parents(".ribbon").find(".title-bar .office-control:visible:not(.disabled)");
        var $reqItem = ControlGetters.GetControlFunctionMap[key]($item, $itemsToLoopfrom, true);
        return { item: $requiredItem };
    }
};

SIMS.Manipulators.TabHeader.selectTab = function ($tabHeader, $tabContainer) {

    if (!$tabHeader.is('.tab-header-backstage')) {
        $tabHeader.addClass("tab-header-selected");
        $tabHeader.siblings().removeClass("tab-header-selected");
        if ($tabContainer == null) {
            $tabContainer = $tabHeader.parent().parent().find($tabHeader.data('tabcontainer'));
        }

        //Lazy Generation of Tab content
        var $tabXml = $tabContainer.data('tabxml');
        if ($tabXml) {

            if (!SIMS.SharedData.RibbonOptimization.enableRibbonLazyLoad) {//No lazyloading of ribbon

                if (!this._ribbonGenerator) {
                    this._ribbonGenerator = new ribbonGenerator();
                }
                $tabContainer.append(this._ribbonGenerator.getTabBody($tabXml));

            }
            else { //lazy loading of ribbon

                if ($tabHeader.hasClass('tab-header-home'))     // need to call once for Home tab because until that time the event listener is not bound for 'lazyLoadTab' event
                {
                    if (!this._ribbonGenerator) {
                        this._ribbonGenerator = new ribbonGenerator();
                    }
                    $tabContainer.append(this._ribbonGenerator.getTabBody($tabXml, true));
                }
                else {
                    $tabContainer.trigger('lazyLoadTab', { tabXML: $tabXml, tabContainer: $tabContainer });       //trigger tab generation
                }


                if ($tabContainer.data('subRibbonUpdate'))                 //first the sub ribbon has to be updated then the attributes
                {
                    //this._ribbonGenerator.updateTabBody($tabContainer.data('subRibbonUpdate'));
                    $tabContainer.trigger('updateTabSubRibbon', { subRibXML: $tabContainer.data('subRibbonUpdate') });
                    //$tabContainer.trigger('updateTab',{attrList : $tabContainer.data('subRibbonUpdate')});
                    $tabContainer.removeData('subRibbonUpdate');
                }

                if ($tabContainer.data('attrList')) {
                    $tabContainer.trigger('updateTabAttributes', { attrList: $tabContainer.data('attrList') });
                    $tabContainer.removeData('attrList');
                }

            }
        }    //Lazy generation code

        //Free resources //Moved out as same code to be run for both cases i.e. Lazy Loading and No Lazy Loading
        $tabContainer.removeData('tabxml');
        $tabContainer.trigger('lazyload');
        
        $tabContainer.show();
        $tabContainer.siblings('.ribbon-tab-container').hide();

        //Allow event on Ribbon Tab click
        //Time delay is introduced in order to let the code of accesskeys to be executed at first, before the custom event listener is triggered and event is fired
        if ($tabHeader.attr("enableTabClickEvent")) {
            setTimeout(function (e) {
                $tabHeader.trigger("fireEventOnTabClick");
                $tabHeader.attr("enableTabClickEvent", false)
            }, 0);
        }
       
        return false;
    }
    else {
        $tabHeader.trigger("fileMenu");
        return true;
    }
};
namespace("SIMS.Manipulators");

SIMS.Manipulators.TabHeader.oldSelectTab = SIMS.Manipulators.TabHeader.selectTab;
SIMS.Manipulators.TabHeader.selectTab = function($tabHeader, $tabContainer) {
    
    var $ribbon = $tabHeader.closest(".ribbon");
    if (!this.isCollapsedMode($ribbon)) { //base handling for non-collpased mode
        return SIMS.Manipulators.TabHeader.oldSelectTab.apply(this, [$tabHeader, $tabContainer]);
    } else {
        return this.selectTabForCollapsedMode($tabHeader, $tabContainer, $ribbon);
    }
};

SIMS.Manipulators.TabHeader.isCollapsedMode = function($ribbon) {
    var isCollapsedMode = false;
    if ($ribbon.length > 0) {
        isCollapsedMode = $ribbon.hasClass("COLLAPSED");
    }
    return isCollapsedMode;

};

SIMS.Manipulators.TabHeader.selectTabForCollapsedMode = function($tabHeader, $tabContainer, $ribbon) {
    var retVal = false;
    if ($tabHeader.is('.tab-header-backstage')) {
        this.UnbindSIMAreaMouseDown();
        retVal = SIMS.Manipulators.TabHeader.oldSelectTab.apply(this, [$tabHeader, $tabContainer]);
    }
    else if ($tabHeader.hasClass("tab-header-selected")) {
        this.UnbindSIMAreaMouseDown();
        this.HideTabContainer($ribbon);
    } else {
        retVal = SIMS.Manipulators.TabHeader.oldSelectTab.apply(this, [$tabHeader, $tabContainer]);
        this.BindSIMAreaMouseDownInCollapsedMode($ribbon);
    }
    return retVal;

};

SIMS.Manipulators.TabHeader.SIMAreaMouseDownHandler = function($ribbon, e) {
    if ((!$(e.target).closest(".ribbon").length > 0) || ($(e.target).closest(".title-bar").length > 0)) {
        this.UnbindSIMAreaMouseDown();
        this.HideTabContainer($ribbon);
    }

}
SIMS.Manipulators.TabHeader.BindSIMAreaMouseDownInCollapsedMode = function($ribbon) {
    this.UnbindSIMAreaMouseDown();
    SIMS.Objects.DOMElements.SIMArea.on("mousedown.tabs",  $.proxy(this.SIMAreaMouseDownHandler,this, $ribbon));
};


SIMS.Manipulators.TabHeader.HideTabContainer = function($ribbon) {
    var $selectedTabHeader = $ribbon.find(".tab-header-selected");
    if ($selectedTabHeader.length > 0) {
        $selectedTabHeader.removeClass("tab-header-selected");
    }
    var $selectedTabContainer = $ribbon.find(".ribbon-tab-container");
    if ($selectedTabContainer.length > 0) {
        $selectedTabContainer.hide();
    }
    

};

SIMS.Manipulators.TabHeader.UnbindSIMAreaMouseDown = function() {
SIMS.Objects.DOMElements.SIMArea.off("mousedown.tabs",  this.SIMAreaMouseDownHandler);
};
namespace("SIMS.Manipulators");

SIMS.Manipulators.RibbonControlManipulatorFactory = Base.extend({
    _controlFactory: null,
    _itemFactory: null,
    _singletonInstance: null,
    handleAccessKey: null,

    //Making Singleton
    constructor: function () {
        if (this._singletonInstance != null) {
            return this._singletonInstance;
        }
        else {
            this._controlFactory = new ControlGenerator();
            this._itemFactory = new ItemGenerators.Factory();
            this.getManipulator = function ($control) {

                if ($control.is(".filemenu-manipulator")) {

                    if (($control.is(".submenu-item"))||($control.is(".left-pane-submenu-item"))) {

                        return SIMS.Manipulators.FileSubMenuList;
                    }

                    if (($control.is(".folder-item"))||($control.is(".right-pane-folder-item"))) {

                        return SIMS.Manipulators.FileFolderItem;
                    }

                    if ($control.is(".change-filetype-item")) {

                        return SIMS.Manipulators.ChangeFileTypeList;
                    }

                    if ($control.is(".tempImgTextSelector")) {

                        return SIMS.Manipulators.NewTemplateList;
                    }

                    if ($control.is(".hyperLinkList")) {

                        return SIMS.Manipulators.SearchLinks;
                    }

                    if ($control.is(".tempSearchWrap")) {

                        return SIMS.Manipulators.SearchInput;
                    }

                    if ($control.is(".tempSearchImgWrap")) {

                        return SIMS.Manipulators.SearchButton;
                    }

                    if ($control.is(".general-hyperlink")) {

                        return SIMS.Manipulators.GeneralHyperlink;
                    }
                    if ($control.is(".featured-personal-hyperlink")) {

                        return SIMS.Manipulators.FeaturedPersonalHyperlink;
                    }

                    if ($control.is(".general-textbox")) {

                        return SIMS.Manipulators.GeneralTextBox;
                    }

                    if ($control.is(".navigation-button")) {

                        return SIMS.Manipulators.NavigationButton;
                    }

                    if ($control.is(".start-page-left-pane-item")) {

                        return SIMS.Manipulators.StartPageLeftPaneItem;
                    }
                    if ($control.is(".hyperlink")) {

                        return SIMS.Manipulators.Hyperlink;
                    }
                    if ($control.is(".HyperlinkWithoutStandardKeyHandling")) {

                        return SIMS.Manipulators.HyperlinkWithoutStandardKeyHandling;
                    }
                    if ($control.is(".manage-doc-option-manipulator")) {
                        return SIMS.Manipulators.ManageDocOption;
                    }

                    return SIMS.Manipulators.FileMenuList;
                }

                var type = $control.data("controlType");
                if (type != null && type != "") {
                    var generator = this._controlFactory.getGeneratorInstance(type);

                    if (!generator) {
                        generator = SIMS.Controls.Factory.getGenerator(type);
                    }

                    return generator;
                }
                type = $control.data("itemType");
                if (type != null && type != "") {
                    return this._itemFactory.getGeneratorInstance(type);
                }
                else if ($control.is(".tab-header")) {
                    return SIMS.Manipulators.TabHeader;
                }
                else if ($control.is(".section-launcher")) {
                    return SIMS.Manipulators.SectionLauncher;
                }


            };
            this.handleAccessKey = function ($control, key) {
                var requiredManipulator = this.getManipulator($control);
                if(requiredManipulator!= undefined)
                return requiredManipulator.handleAccessKey($control, key);
            };
            this.handleStandardKey = function ($control, key) {
                var requiredManipulator = this.getManipulator($control);
                if(requiredManipulator!= undefined)
                return requiredManipulator.handleStandardKey($control, key);
            };
            this.getItemForStandardKey = function ($control, key) {
                var requiredManipulator = this.getManipulator($control);
                if(requiredManipulator!= undefined)
                return requiredManipulator.getItemForStandardKey($control, key);
            };

            this.addNavigationHover = function ($control) {
                var requiredManipulator = this.getManipulator($control);
                if(requiredManipulator!= undefined)
                return requiredManipulator.addNavigationHover($control);
            };

            this.addNavigationHoverOnParentItemOnly = function ($control) {
                var requiredManipulator = this.getManipulator($control);
                if(requiredManipulator!= undefined)
                return requiredManipulator.addNavigationHoverOnParentItemOnly($control);
            };

            this.removeNavigationHover = function ($control) {
                var requiredManipulator = this.getManipulator($control);
                if(requiredManipulator!=undefined)
                    return requiredManipulator.removeNavigationHover($control);
            };

            this.getNextTabItem = function ($control) {
                var requiredManipulator = this.getManipulator($control);
                if(requiredManipulator!= undefined)
                    return requiredManipulator.getNextTabItem($control);
            };

            //Fix for KL032
            this.getPreviousTabItem = function ($control) {
                var requiredManipulator = this.getManipulator($control);
                if (requiredManipulator != undefined) {
                    if (requiredManipulator["getPreviousTabItem"]) {
                        return requiredManipulator.getPreviousTabItem($control);    
                    }
                    else {
                        return requiredManipulator.getNextTabItem($control);
                    }
                }                    
                    
            };

            this.ShowContextMenu = function ($control) {
                var requiredManipulator = this.getManipulator($control);
                if(requiredManipulator!=undefined)
                {
                    if(typeof (requiredManipulator.ShowContextMenu) != "undefined")
                        return requiredManipulator.ShowContextMenu($control);
                    else
                     return null;
                }

            };

            this.getSpecialEnterMode = function ($control) {
                var requiredManipulator = this.getManipulator($control);

                if (typeof (requiredManipulator.getSpecialEnterMode) != "undefined") {
                    // safe to use the function
                    return requiredManipulator.getSpecialEnterMode($control);
                }
                else
                    return null;      

            };
        }
    }
});
// <reference path="jquery-1.8.2.js" />
// <reference path="UIUtils.js" />
// <reference path="OfficeUIUtils.js" />
// <reference path="ControlGenerator.js" />


    var ribbonGenerator = function() {
    this.$ribbon = null;
    this.appName = 'word';
    this.activeTabList = "";
    this.menuType;
    this.$ribbonXmlArray = [];
	
    this.getRibbonFromXml = function(ribbonXml, appName) {
        SIMS.Objects.DOMElements.Ribbon = null;
        this.appName = appName;

        var $ribbonXml = this.$ribbonXml = $(ribbonXml);
        this.$ribbonXmlArray.push(this.$ribbonXml);

        var $ribbon = this.$ribbon = $("<div class='" + this.appName + " ribbon' />");

        this.menuType = $ribbonXml.find('ribbon').attr('menutype');

        if (this.menuType == "JSON") {
            this.ribbonContextMenu = new SIMS.Components.Common.RibbonContextMenu($ribbon, this.appName);
            $ribbon.attr('id', 'ribbonmaindiv');   // this id was added as new context menu does not hide if ID not present.
            this.bindAddJSONCMEvent();
            $ribbon.data('ContextMenuType', 'JSON');
        }

        //Make Title Bar
        var $titleBar = this.getTitleBar($ribbonXml.find('ribbon titlebar'));
        $ribbon.append($titleBar);

        //Make Tabs
        var $tabs = $ribbonXml.find("ribbon tabs tab");
        var $tabsWrapper = this.$tabsWrapper = UIUtils.getUnselectableGenericElement("ul", "", "ribbon-tabs-wrapper");
        $ribbon.append($tabsWrapper);
        //Adding Tabs
        for (var i = 0; i < $tabs.length; i++) {
            var tabXml = $tabs[i];
            this.AddTab(tabXml);
        }

        //adding head for contextual tabs in title bar area.
        var $contextualTabs = $ribbon.find(".tab-header-contextual");
        for (var index = 0; index < $contextualTabs.length; index++) {
            var $contextualTabHead = $("<div></div>").addClass("contextual-tab-head");
            /*var $contextualTabHead = UIUtils.getUnselectableDiv('', 'contextual-tab-head');*/

            var headText = $($contextualTabs[index]).data("head-text") || "";
            $contextualTabHead.text(headText.toUpperCase());
            var headNameMin = Polyfills.string.removeSpaces(headText).replace("&", "").toLowerCase();
            $contextualTabHead.addClass("contextual-head-" + headNameMin);
            $contextualTabHead.data("tabclass", $($contextualTabs[index]).data("tabclass"));

            var self = this;
            $contextualTabHead.bind('click', function(e, desc) {
                var tabClass = $(this).data("tabclass");
                var tab = self.$ribbon.find("." + tabClass);
                //special handling for chart tool tabs
                if (tabClass == "tab-header-charttoolsformat")
                    tab = self.$ribbon.find(".tab-header-charttoolsdesign");

                if (tabClass == "tab-header-tabletoolslayout")
                    tab = self.$ribbon.find(".tab-header-tabletoolsdesign");

                if (tabClass == "tab-header-smartarttoolsformat")
                    tab = self.$ribbon.find(".tab-header-smartarttoolsdesign");

                tab.trigger("click");
            });

            $titleBar.append($contextualTabHead);
        }
        //////////////////////////////////////////////////////////////////////////

        //Adding user info
        //Leonardo Start
        // if (this.appName.toLowerCase() == "win10explorer") { // adding this case for win10 file exploror ribbon
        //     var $xUserInfo = $ribbonXml.find('userinfo');
        //     if ($xUserInfo != null) {
        //         var $userInfo = $('<li class="userinfo"/>');

        //         //Collapse button for windows 10 explorer
        //         var $collapseBtn = UIUtils.getUnselectableDiv('', 'collapseButton');

        //         //Help button for windows 10 explorer
        //         var $helpeBtn = UIUtils.getUnselectableDiv('', 'helpButton');

        //         $userInfo.append($collapseBtn, $helpeBtn);
                
        //         $userInfo.appendTo($tabsWrapper);
        //     }
        // }
        // else {
        //     var $xUserInfo = $ribbonXml.find('userinfo');  // For all office applications
        //     if ($xUserInfo != null) {
        //         var $userInfo = $('<li class="userinfo"/>');

        //         //user name
        //         var $username = UIUtils.getUnselectableDiv('', 'username');
        //         $username.text($xUserInfo.attr('name'));

        //         //Arrow
        //         var $arrow = getDownArrow();

        //         //User Icon
        //         var $icon = $('<img class="userinfo-icon" src="app/comps/common/Ribbon/img/user.png"/>');

        //         $userInfo.append($username, $arrow, $icon);

        //         $userInfo.appendTo($tabsWrapper);
        //     }
        // }
        //Leonardo End

        //Select Second tab by Default... changing selector from "tab-header:nth-child(2)" to "tab-header-home"
        var $secondTabHeader = $ribbon.find('.tab-header-home');
        this.manipulatorFactory.getManipulator($secondTabHeader).selectTab($secondTabHeader);


        if (this.menuType == "JSON") {
           // this.ribbonContextMenu.UpdateMenuBindings();
        }
        else {
            //this.AddContextMenus();
        }

        if(this.appName.toString().toLowerCase() == "ppt")
        {
            //////////////////////////////////////////////////////////////////////////
            //Selection Retainer - prevents focus shifting to Ribbon
            var blockFor = ".ribbon:not(.SIMS-PPTFileMenu)";

            var selectionRetainer = function (e) {
               // if ($(e.target).parents(".contextMenuBinder").add($(e.target).parents(".shyToolBarDropDown")).length == 0) {
                    var $clickedItem = $(e.target);
                    if ($clickedItem.closest(blockFor).length > 0) {
                        if ($clickedItem.is("input[type=text]:not(.ctrl-comboboxreadonlytext .combo-textbox)")) {
                            $clickedItem.select();
                        }
                        e.preventDefault();
                    }
                //}
            };

            SIMS.Objects.DOMElements.SIMArea.unbind("mousedown",selectionRetainer).bind("mousedown", selectionRetainer);
            //////////////////////////////////////////////////////////////////////////
        }


        /*if (gSimsAreaWidth < 1279) {
            $ribbon.find(".");

        }*/

        
        SIMS.Objects.DOMElements.Ribbon = $ribbon;  // to make the ribbon available without parsing the DOM
        return $ribbon;
    };

    this.AddContextMenus = function() {
        var $ribXml = this.$ribbonXml;
        var $ribbon = this.$ribbon;
        var xRibbonContextMenu = $ribXml.find("defaultcontextmenus:first>ribbon");
        if (xRibbonContextMenu.length > 0) {
            var $cm = ControlGenerators.ItemsGenerator.prototype.GetItems(xRibbonContextMenu);
            $cm.attr("tabindex", "-1");
            // There is 2 wrapper class, so give the wrapper class MenuItemsIterator (InsideWhich menuItems are there)
            $cm.find('.dropdown-items-wrapper').addClass("MenuItemsIterator");
            $cm.appendTo($ribbon);
            this.bindContextMenu($cm, $ribbon);
        }

        var $titlebar = this.$ribbon.find(".title-bar");
        var xtitlebarContextMenu = $ribXml.find("defaultcontextmenus:first>titlebar");
        if (xtitlebarContextMenu.length > 0) {
            var $cm = ControlGenerators.ItemsGenerator.prototype.GetItems(xtitlebarContextMenu);
            $cm.attr("tabindex", "-1");
            // There is 2 wrapper class, so give the wrapper class MenuItemsIterator (InsideWhich menuItems are there)
            $cm.find('.dropdown-items-wrapper').addClass("MenuItemsIterator");
            $cm.appendTo($titlebar);
            this.bindContextMenu($cm, $titlebar);
        }

        var xControlContextMenu = $ribXml.find("defaultcontextmenus>control");
        var $controls = $ribbon.find(".office-control");
        if ($controls.length > 0) {
            var $cm = ControlGenerators.ItemsGenerator.prototype.GetItems(xControlContextMenu);

            // There is 2 wrapper class, so give the wrapper class MenuItemsIterator (InsideWhich menuItems are there)
            $cm.find('.dropdown-items-wrapper').addClass("MenuItemsIterator");
            $cm.attr("tabindex", "-1");
            $cm.appendTo($ribbon);
            for (var i = 0; i < $controls.length; i++) {
                var $control = $($controls[i]);
                if ($control.children(".contextMenu").length == 0) {
                    this.bindContextMenu($cm, $control);
                }
            }
        }
    };

    this.bindContextMenu = function($contextMenu, $item) {
        $contextMenu.addClass("contextMenu combobox-dropdown");
        $contextMenu.attr("tabindex", "-1");
        $item.contextMenu({
            $menu: $contextMenu,
            //captureClickFor: captureClick,
            //doNotHideOnClickOf: '.shyToolBarInside',
            //shyToolBar: '.shyToolBarInside',
            inSpeed: 25,
            outSpeed: 50
        });
    };

    this.getTitleBar = function($titleBarXml) {
        var $titleBar = UIUtils.getUnselectableDiv('', 'title-bar');
        SIMS.Components.Common.RibbonCurrentTabName = "Titlebar";
        SIMS.Components.Common.RibbonCurrentSectionName = "";
        var $sections = $titleBarXml.find('sections section');

        for (var i = 0; i < $sections.length; i++) {
            var newGroup = this.getGroup($sections[i]);
            var identifier = $($sections[i]).attr('identifier');
            if (identifier != '' || identifier != undefined) {
                newGroup.addClass(identifier);
            }
            $titleBar.append(newGroup);
        }

        $titleBar.find(".office-control").addClass("titlebar-control");

        return $titleBar;
    };


    this.updateTitleBar = function ($titleBarXml) {

        SIMS.Components.Common.RibbonCurrentTabName = "Titlebar";
        SIMS.Components.Common.RibbonCurrentSectionName = "";
        var $sections = $titleBarXml.find('sections section');

        for (var i = 0; i < $sections.length; i++) {
            var identifier = $($sections[i]).attr('identifier');

            if (identifier != '' && identifier != undefined) {

                var newSection = this.getGroup($sections[i]);
                if (this.AttachSubRibbonWithIdentifier) {
                    $(newSection).addClass(identifier);
                }
                $(newSection).find(".office-control").addClass("titlebar-control");
                var oldSection = $('.title-bar .control-group.' + identifier);
                oldSection.replaceWith(newSection);

            }
            // Incase identifier is not found on section, update control as earlier
            else { 
                this.updateSection($sections[i]);
            }
        }
    };


    this.AddTab = function (tabXml) {
        var tabName = $(tabXml).attr('name');

        //Adding tab header
        var $tabHeader = this.getTabHeader(tabXml);
        this.$tabsWrapper.append($tabHeader);

        //Adding tab body

        var $tabContainer = UIUtils.getUnselectableDiv("ribbon-tab-container-" + Polyfills.string.removeSpaces(tabName).replace("&", "").toLowerCase(), "ribbon-tab-container");

       // $tabContainer.data('tabxml',tabXml);
        this.$ribbon.append($tabContainer);

        if (!SIMS.SharedData.RibbonOptimization.enableRibbonLazyLoad) {
            var self = this;
            $tabContainer.append(self.getTabBody(tabXml));
            $tabHeader.click(function () {
                        self.manipulatorFactory.getManipulator($(this)).selectTab($(this), $tabContainer);
            });
        }
        else {

            if ($(tabXml).attr('disabled') != 'true') {
                var self = this;
                if (this.appName.toString().toLowerCase() == "excel" || this.appName.toString().toLowerCase() == "word" || this.appName.toString().toLowerCase() == "access" || this.appName.toString().toLowerCase() == "ppt" || this.appName.toString().toLowerCase() == "win10explorer")    //do lazy generation only in Word and Excel only
                {
                    $tabContainer.data('tabxml', tabXml);
                }
                else {
                    $tabContainer.append(self.getTabBody(tabXml));
                }

                //Attching Fucnctionality
                $tabHeader.click(function () {
                    self.manipulatorFactory.getManipulator($(this)).selectTab($(this), $tabContainer);
                });

            }
        }
    };

    this.getTabHeader = function(tabXml) {
        var type = $(tabXml).attr('type');
        var tabName = $(tabXml).attr("name");
        var tabNameMin = Polyfills.string.removeSpaces(tabName).replace("&", "").toLowerCase();
        var $tabHead = UIUtils.getUnselectableGenericElement("li", "", "tab-header");
        if (type != null && type.length > 0) {
            $tabHead.addClass('tab-header-' + type.toLowerCase());
        }

        //contextual tab head name
        var headname = $(tabXml).attr('headertext');
        $tabHead.data("head-text", headname);

        $tabHead.data('tabcontainer', '#ribbon-tab-container-' + tabNameMin);

        var tabDisplayName = tabName;
        if (type != undefined) {
            if (type.toLowerCase() == "contextual")
                tabDisplayName = tabName.replace(headname, "");
        }
        $tabHead.text(tabDisplayName);
        $tabHead.addClass("tab-header-" + tabNameMin);
        //added for contextual tab click handling
        $tabHead.data("tabclass", "tab-header-" + tabNameMin);
        if(!$tabHead.attr("id")){
            $tabHead.attr("id", "tab-header-" + tabNameMin);
        }

        //Shortcut key
        var shortcutkey = $(tabXml).attr("ak");
        if (shortcutkey != null) {
            $tabHead.addShortCut(shortcutkey);
        }
        return $tabHead;
    };

    this.selectTabByName = function(tabName) {
        var $tabHeader = $(".tab-header:contains(" + tabName + ")").filter(function() {
            return $(this).text() === tabName;
        });
        this.selectTab($tabHeader);
    };



    this.getTabBody = function(tabXml,gtg) {
        var $tabXml = $(tabXml);
        var tabName = $tabXml.attr("name");
        SIMS.Components.Common.RibbonCurrentTabName = tabName;
        var tabType = "" + $tabXml.attr("type");
        var goodToGenerate = true;

        var $tabContainer = UIUtils.getUnselectableGenericElement("ul", "ribbon-tab-" + tabName, "ribbon-tab-content");

        tabType = tabType.toLowerCase();
        tabName = tabName.toLowerCase();

        if (tabType == "contextual")
        {
            goodToGenerate = (this.activeTabList.indexOf(tabName) > -1) ? true : false;
        }



        if (goodToGenerate == true || gtg)
        {
            var $sections = $tabXml.find("sections section");
            for (var i = 0; i < $sections.length; i++) {
                            var $section = $($sections[i]);
                            if ($($sections[i]).attr("type") === "condensed") {
                                $tabContainer.append(this.getCondensedSection($sections[i]));
                            }
                            else {
                $tabContainer.append(this.getSection($sections[i]));
                           }
            }
        }



        return $tabContainer;
    };

    this.getCondensedSection = function(sectionXml) {
        var $section = $(sectionXml);
        var self = this;
        var $condensedSectionControl = null;
        // add null checks
        var condSecControlXML = $section.children("control[type='CondensedSectionControl']");
        if(condSecControlXML.length >0)
        {
            $condensedSectionControl = this.controlGeneratorFactory.getControl(condSecControlXML);

            var condSectionXML =  $section.children('condensedsection');

            if(condSectionXML.length>0)
            {
                var $condensedSection = this.getSection(condSectionXML);
                $condensedSection.find(".section-content-wrapper").addClass("condensed-section");
                $condensedSectionControl.find(".section-div").replaceWith($condensedSection);

                $condensedSection.noRepeatBind('officeButtonClick selectedIndexChanged dropdownMenuItemClick iconClick spinValueChanged checkChanged launcherClick', function(e, desc, eventId, ICMessageId, eventInfo)
                {
                    if((eventInfo==undefined) || (eventInfo.spinChangedBy == "enter"))    //special handling for spin control
                    {
                        var $parentControl = $(this).parents(".office-control.ctrl-condensedsectioncontrol:first");

                        if($parentControl.length>0)
                        {
                            self.manipulatorFactory.getManipulator($parentControl).ForceDropdownCloser($parentControl);
                            self.manipulatorFactory.getManipulator($parentControl).UpdateControlData($parentControl,"avoidClose",false);
                        }

                    }
                    else if(eventInfo && (eventInfo.spinChangedBy == "arrow"))      //special handling for spin control
                    {
                        var $parentControl = $(this).parents(".office-control.ctrl-condensedsectioncontrol:first");

                        if($parentControl.length>0)
                            self.manipulatorFactory.getManipulator($parentControl).UpdateControlData($parentControl,"avoidClose",true);
                    }
                });
            }


        }

        return $condensedSectionControl;
    };



    this.getSection = function(sectionXml) {
        var $sectionXml = $(sectionXml);
        var sectionName = $sectionXml.attr('name');
        SIMS.Components.Common.RibbonCurrentSectionName = sectionName;
        var sectionWidth = $sectionXml.attr('width');
        var sectionIdentiFier = $sectionXml.attr('identifier');
        var sectionVisibility = $sectionXml.attr('visible');


        var $section = $("<li class='ribbon-section'/>");
        //if (sectionIdentiFier !== undefined && sectionVisibility !== undefined) {

        if (sectionIdentiFier !== undefined)
            $section.attr('id', sectionIdentiFier);
        /*HideOnLowRes for December Demo*/
        var hideOnLowRes = $sectionXml.attr('display');
        if (hideOnLowRes != undefined && hideOnLowRes == 'hideOnLowRes') {
            $section.addClass('hideOnLowRes');
        }

        if ($sectionXml.attr('nrows') == '2') {
            $section.addClass('two-row-section');
        }

        $section.css('width', sectionWidth);
        var $sectionWrapper = UIUtils.getUnselectableSpan('', 'section-wrapper');
        var $sectionContentWrapper = UIUtils.getUnselectableSpan('', 'section-content-wrapper');
        var $sectionContent = this.getGroup($sectionXml);
        $sectionContent.addClass('section-content');

        var $sectionFooterArea = UIUtils.getUnselectableSpan('', 'section-footer');
        var $sectionTitle = UIUtils.getUnselectableSpan("", "section-title");
        var $sectionTitleWrapper = UIUtils.getUnselectableSpan("", "section-title-wrapper");

        $sectionTitle.text(sectionName);
        $sectionTitleWrapper.append($sectionTitle);
        $sectionFooterArea.append($sectionTitleWrapper);

        //Launcher
        var eventid = $sectionXml.attr('eventId');
        if ($sectionXml.getTrueOrFalse('launcher', false)) {
            var $dialogLauncher = this.getLauncher(sectionName, eventid, $(sectionXml).attr("ak"));
            $dialogLauncher.addTooltip($sectionXml.find('>tooltips>tooltip'));
            $sectionFooterArea.append($dialogLauncher);

            //            $dialogLauncher.bind('launcherClick', function (e,desc) {
            //                console.log(desc);
            //            });
        }
        $sectionWrapper.append($sectionContentWrapper);
        $sectionContentWrapper.append($sectionContent);
        $sectionWrapper.append($sectionFooterArea);

        $section.append($sectionWrapper);

        if (sectionVisibility == "false")
        {
            $section.addClass("sectionHide");
        }

        return $section;
    };

    this.getLauncher = function(sectionName, eventId, shortcutkey) {
        var $dialogLauncher = UIUtils.getUnselectableSpan("", "section-launcher office-hover-default");
        var clickstreamInfo = SIMS.Components.Common.RibbonCurrentTabName + " Tab : "  + SIMS.Components.Common.RibbonCurrentSectionName + " Group : Launcher";
        $dialogLauncher.data('sectionName', sectionName);
        $dialogLauncher.data('eventId', eventId);
        $dialogLauncher.data('clickstreamInfo', clickstreamInfo);
        $dialogLauncher.click(function() {
            $(this).trigger("launcherClick", [sectionName, eventId, clickstreamInfo]);
        });

        //Shortcut key
        if (shortcutkey != null) {
            $dialogLauncher.addShortCut(shortcutkey);
        }

        return $dialogLauncher;
    };

    this.getGroup = function(groupXml) {
        var $grpXml = $(groupXml);

        //Orientation
        var orientation = $grpXml.attr('orientation');

        var $group = UIUtils.getUnselectableSpan('', orientation == 'vertical' ? 'control-group-vertical' : 'control-group');

        //Float
        var float = $grpXml.attr('float');
        if (float != null && float.length > 0) {
            $group.css('float', float);
        }

        var orientation = $grpXml.attr('orientation');
        if (orientation == 'vertical') {
            $group.addClass('control-group-vertical');
        }

        //Getting groups recursively
        var $groupItems = $(groupXml).children('control');
        for (var i = 0; i < $groupItems.length; i++) {
            var itemXml = $groupItems[i];

            if ($(itemXml).children('control').length == 0) {
                $group.append(this.controlGeneratorFactory.getControl(itemXml));
            }
            else {
                $group.append(this.getGroup(itemXml));
            }
        }


        return $group;
    };

    this.updateRibbonfromXML = function (ribbonXml, ribbon, AttachSubRibbonWithIdentifier) {

        var $ribbonXml = this.$ribbonXml = $(ribbonXml);
        this.$ribbonXmlArray.push(this.$ribbonXml);

        if (this.menuType == "JSON") {
            $ribbonXml.find("ribbon").attr("menutype", "JSON");
            this.bindAddJSONCMEvent();
        }

        if (AttachSubRibbonWithIdentifier) {
            this.AttachSubRibbonWithIdentifier = true;
        }
        else {
            this.AttachSubRibbonWithIdentifier = false;
        }

        if (ribbon != null/* && ribbon.length > 0*/)
            this.$ribbon = $(ribbon);

        //        var $ribbon = this.$ribbon = $("<div class='" + this.appName + " ribbon' />");

        //Update Title Bar

        //        var $titleBar = this.getTitleBar($ribbonXml.find('ribbon titlebar'));
        //        $ribbon.append($titleBar);

        //Update Tabs
        // means updating titlebar
        var $tabs = $ribbonXml.find("ribbon tabs tab,ribbon titlebar");


        //        var $tabsWrapper = this.$tabsWrapper = UIUtils.getUnselectableGenericElement("ul", "", "ribbon-tabs-wrapper");
        //        $ribbon.append($tabsWrapper);

        //Adding Tabs

        for (var i = 0; i < $tabs.length; i++) {
            var tabXml = $tabs[i];
            this.UpdateTab(tabXml);
        }

        //Update ContextMenu

        //this.UpdateContextMenus();



    };

    this.UpdateTab = function(tabXml) {
        //var tabName = $(tabXml).attr('name');

        //Adding tab header
        //var $tabHeader = this.getTabHeader(tabXml);

        //this.$tabsWrapper.append($tabHeader);

        //Adding tab body

        //var $tabContainer = UIUtils.getUnselectableDiv("ribbon-tab-container-" + tabName.removeSpaces().replace("&", "").toLowerCase(), "ribbon-tab-container");

        //$tabContainer.append(this.getTabBody(tabXml));


        this.updateTabHeader(tabXml);



        this.updateTabBody(tabXml);



        //this.$ribbon.append($tabContainer);

        //        if ($(tabXml).attr('disabled') != 'true') {
        //            var self = this;

        //            //Attching Fucnctionality
        //            $tabHeader.click(function () {
        //                self.manipulatorFactory.getManipulator($(this)).selectTab($(this), $tabContainer);
        //            });
        //        }
    };

    this.updateTabHeader = function(tabXml) {
        //update shortcut key...

        if ($(tabXml).attr("name") != undefined) {

            var tabName = Polyfills.string.removeSpaces($(tabXml).attr("name")).replace("&", "").toLowerCase();
            var $tabHead = this.$ribbon.find(".tab-header-" + tabName);

            //////////////////////////////////////////////////////////////////////////
            // Implemented for SIMS-69992
            if ($(tabXml).attr("newname") != undefined) {
                var newtabName = $(tabXml).attr("newname");
                $tabHead.text(newtabName);
            }
            //////////////////////////////////////////////////////////////////////////

            //////////////////////////////////////////////////////////////////////////
            // Implemented for SIMS-61773
            var convert = $(tabXml).attr("convertToContextual");
            if (convert != undefined && convert == 'true') {
                if (!$tabHead.hasClass('tab-header-selected')) { // Do not convert tab to contextual if tab is visible.
                    $tabHead.addClass('tab-header-contextual');
                }
            }
            //////////////////////////////////////////////////////////////////////////

            var shortcutkey = $(tabXml).attr("ak");

            if (shortcutkey != null && shortcutkey != undefined) {

                if ($tabHead != undefined && $tabHead != null) {
                    $tabHead.find(".ribbon-SK").remove();
                    $tabHead.addShortCut(shortcutkey);
                }

            }
        }

    };


    this.updateTabBody = function(tabXml) {
        
        var $tabXml = $(tabXml);
        var tabName = $tabXml.attr("name");


        if(tabName)
        {
            SIMS.Components.Common.RibbonCurrentTabName = tabName;
            tabName =  Polyfills.string.removeSpaces($tabXml.attr("name")).replace("&", "").toLowerCase();
            var $tabContainer = this.getTabContainer(tabName);
            
            if($tabContainer.children().length==0) {// tab has not been created yet
              $tabContainer.data('subRibbonUpdate',tabXml);
            }
            else{
                if ($tabXml.attr('isTabUpdate') == "true") {
                    this.regenerateTab(tabXml);
                }
                else {
                    var $sections = $tabXml.find("sections section");
                    for (var i = 0; i < $sections.length; i++) {
                        this.updateSection($sections[i]);
                    }
                }
            }
            //UIUtils.getUnselectableGenericElement("ul", "ribbon-tab-" + tabName, "ribbon-tab-content");
        }

        else{ //titlebar doesnot have name and is created everytime, so lazyloading not handled for titlebar
            if ($tabXml.is('titlebar') == true) {
                this.updateTitleBar($tabXml);
            }
        }
    };

    this.getTabContainer = function(tabName){
        return SIMS.Objects.DOMElements.Ribbon.find('#ribbon-tab-container-'+tabName);
    };



    this.regenerateTab = function(tabXml) {
        var $ribbon = this.$ribbon;
        var $tabxml = $(tabXml);
        var tabName = $tabxml.attr("name");
        var oldTabContainer = $ribbon.find('ul#ribbon-tab-' + tabName);
        var updatedTabWrapper = this.getTabBody(tabXml, true);
        oldTabContainer.replaceWith(updatedTabWrapper);
    };

    this.updateSection = function(sectionXml) {
        var $sectionXml = $(sectionXml);

        var sectionName = $sectionXml.attr('name');
        SIMS.Components.Common.RibbonCurrentSectionName = sectionName;
        //        var sectionWidth = $sectionXml.attr('width');

        //        var $section = $("<li class='ribbon-section'/>");

        /*HideOnLowRes for December Demo*/

        //        var hideOnLowRes = $sectionXml.attr('display');

        //        if (hideOnLowRes != undefined && hideOnLowRes == 'hideOnLowRes') {
        //            $section.addClass('hideOnLowRes');
        //        }

        //        if ($sectionXml.attr('nrows') == '2') {
        //            $section.addClass('two-row-section');
        //        }

        //        $section.css('width', sectionWidth);

        //        var $sectionWrapper = UIUtils.getUnselectableSpan('', 'section-wrapper');
        //        var $sectionContentWrapper = UIUtils.getUnselectableSpan('', 'section-content-wrapper');

        this.updateGroup($sectionXml);

        //        $sectionContent.addClass('section-content');

        //        var $sectionFooterArea = UIUtils.getUnselectableSpan('', 'section-footer');
        //        var $sectionTitle = UIUtils.getUnselectableSpan("", "section-title");
        //        var $sectionTitleWrapper = UIUtils.getUnselectableSpan("", "section-title-wrapper");

        //        $sectionTitle.text(sectionName);
        //        $sectionTitleWrapper.append($sectionTitle);
        //        $sectionFooterArea.append($sectionTitleWrapper);

        //Launcher
        //        var eventid = $sectionXml.attr('eventId');

        //        if ($sectionXml.getTrueOrFalse('launcher', false)) {
        //            var $dialogLauncher = this.getLauncher(sectionName, eventid, $(sectionXml).attr("ak"));
        //            $dialogLauncher.addTooltip($sectionXml.find('>tooltips>tooltip'));
        //            $sectionFooterArea.append($dialogLauncher);

        //            //            $dialogLauncher.bind('launcherClick', function (e,desc) {
        //            //                console.log(desc);
        //            //            });
        //        }

        //        $sectionWrapper.append($sectionContentWrapper);
        //        $sectionContentWrapper.append($sectionContent);
        //        $sectionWrapper.append($sectionFooterArea);

        //        $section.append($sectionWrapper);

        //        return $section;
    };

    this.updateGroup = function(groupXml) {

        var $grpXml = $(groupXml);

        //Orientation
        //        var orientation = $grpXml.attr('orientation');

        //        var $group = UIUtils.getUnselectableSpan('', orientation == 'vertical' ? 'control-group-vertical' : 'control-group');

        //        //Float
        //        var float = $grpXml.attr('float');
        //        if (float != null && float.length > 0) {
        //            $group.css('float', float);
        //        }

        //        var orientation = $grpXml.attr('orientation');
        //        if (orientation == 'vertical') {
        //            $group.addClass('control-group-vertical');
        //        }

        //Getting groups recursively
        var $groupItems = $(groupXml).children('control');

        for (var i = 0; i < $groupItems.length; i++) {
            var itemXml = $groupItems[i];

            if ($(itemXml).children('control').length == 0) {
                this.updateControl(itemXml);
            }
            else {
                this.updateGroup(itemXml);
            }
        }
    };

    this.updateControl = function(itemXml) {



        var $ribbon = this.$ribbon ? this.$ribbon : SIMS.Objects.DOMElements.Ribbon;

        var $itemXml = $(itemXml);

        var id = $itemXml.attr('identifier');

        //var $controlParent = null;

        var selector = "." + id;

        if (id != null && !id.isEmpty()) {

            var $prevControl = $ribbon.find(selector);

            var $newControl = this.controlGeneratorFactory.getControl($itemXml);
            if($prevControl.hasClass("titlebar-control"))
            {
                $newControl.addClass("titlebar-control");
            }
            $prevControl.replaceWith($newControl);

            //$controlParent = $prevControl.parent();
            //$(selector).remove();
            //$controlParent.remove(selector);
        }
        //        if ($controlParent != null) {
        //            $controlParent.append(this.controlGeneratorFactory.getControl($itemXml));
        //        }

    };


    this.bindAddJSONCMEvent = function () {
        var self = this;
        this.$ribbonXml.noRepeatBind('AddJSONCM', function (e, eventInfo) {
            if (eventInfo && eventInfo.MenuId) {
                self.ribbonContextMenu.CMdata.Add(eventInfo.MenuId);
                //self.ribbonContextMenu.UpdateMenuBindings();
            }
        });
    };

    this.controlGeneratorFactory = new ControlGenerator();
    this.manipulatorFactory = new SIMS.Manipulators.RibbonControlManipulatorFactory();
            
    this.Dispose = function () {

        //preventing memory leak caused because of binding event 'AddJSONCM' on $ribbonXml
        //SIMCMP-3839 : fix for memory leak due to ribbon optimization code changes
        for (var i = 0; i < this.$ribbonXmlArray.length; i++) {
            this.$ribbonXmlArray[i].unbind();
        }

        //force disposing just to ensure minimal leak in future
        this.$ribbon = null;
        this.$ribbonXmlArray = null;
        this.$ribbonXml = null;
        this.$tabsWrapper = null;
    };




};


namespace("SIMS.Components.Common.RibbonBase");


var gRibbonCMTheme = "EXCEL";
SIMS.Components.Common.RibbonCurrentTabName = "";
SIMS.Components.Common.RibbonCurrentSectionName = "";
SIMS.Components.Common.RibbonXML = { // This data is added to cache ribbon xml, at a time only last used xml is being cached across all application. Also this implementation is not done for Win 10 explorer ribbon.
    XmlData: null,
    XmlPath: null,
    Get: function (XmlPath) {
        if (this.XmlPath && this.XmlData && this.XmlPath.toLowerCase() === XmlPath.toLowerCase()) {
            return this.XmlData.cloneNode(true);
        }
    },
    Set: function (XmlData, XmlPath) {
        this.XmlData = XmlData;
        this.XmlPath = XmlPath;
    }
};

SIMS.Components.Common.RibbonBase = SIMS.Components.Common.AccessKeyComponent.extend({
    //PUBLIC
    Compinfo: null,
    //Constructor    
    ArrValCompVal: null,
    //this.ribbonGenerator = new ribbonGenerator();
    ribbonXmlPath: 'word-ribbon.xml',
    appName: 'word',
    ribbonGenerator: null,
    compId: null,
    attrUpdateList: null,

    focusCompIdForAccessKeys: null,
    activatedTabsList: null,
    ribbonXmlPathMap: {},

    constructor: function () {
        this.base();
        this.activatedTabsList = [];
        //Fix for KL032
        //These chnages are done here because file menu also uses accesskeycomponent.js, so in order to limit chnages to ribbon component only these changes are done here.
        this._navigationKeyState._keyHandlers.TAB = function () {
            var $tabItem = null;
            if (arguments[1] === "SHIFT+TAB") {
                $tabItem = this._manipulator.getPreviousTabItem(this._currentItem);
            }
            else {
                $tabItem = this._manipulator.getNextTabItem(this._currentItem);
            }

            if ($tabItem)
                this.setCurrentItem($tabItem);
        };

        this._navigationAndAccessibilityState._keyHandlers.TAB = function () {
            var $tabItem = null;
            if (arguments[1] === "SHIFT+TAB") {
                $tabItem = this._manipulator.getPreviousTabItem(this._currentItem);
            }
            else {
                $tabItem = this._manipulator.getNextTabItem(this._currentItem);
            }

            if ($tabItem)
                this.setCurrentItem($tabItem);
        };
    },

    AddPathToXmlPathMap: function (key, value) {
        this.ribbonXmlPathMap[key] = value + SIMS.Core.PreloadData.RequestSuffix;        
    },

    GetXmlPathFromMap: function (attrValue) {

        if (this.ribbonXmlPathMap[attrValue.toLowerCase()]) {
            attrValue = this.ribbonXmlPathMap[attrValue.toLowerCase()];
        }
        else if(attrValue.indexOf("ver=rd") != -1){
            GlobalLog("Ribbon path provided in the task xml contains RD version query parameter. Component add this parameter by itself. Please remove this parameter from Ribbon path.");
        }
        else{
            var paramIndex = attrValue.indexOf("?");
            if(paramIndex != -1)
                attrValue = attrValue.slice(0,paramIndex);
            attrValue += SIMS.Core.PreloadData.RequestSuffix;
        }
        return attrValue;
    },

    getSeedAccessibles: function () {

        return this.$thisCompElement.find(".ribbon-tabs-wrapper .accessible:visible, .title-bar .accessible:visible");

    },
    getSeedingNavigationControl: function () {
        return this.$thisCompElement.find(".tab-header-selected:first");
    },
    getUniqueComponentIdentity: function () {
        return "RIBBON";
    },
    Validate: function (validationMode, attrSet) {
        return this.ValidateOnlyFinalAttributes(attrSet);
    },
    RegisterF6Panes: function () {
        console.log("RegisterF6Panes - RibbonBase " + this._compinfo.compName);
        return [{ GroupID: SIMS.Components.F6PaneGroups.TOP_PANES, PaneObject: { CompID: this._compID, Name: "RIBBON"}}];
    },
    HandleF6Focus: function (bSetFocus, paneObject) {

        if (paneObject != null) {
            console.log("HandleF6Focus - RibbonBase " + this._compinfo.compName + "   SetFocus:" + bSetFocus + " paneObject.Name:" + paneObject.Name);
        }
        else {
            console.log("HandleF6Focus - RibbonBase " + this._compinfo.compName + "   SetFocus:" + bSetFocus + " paneObject is NULL");
        }

        if (bSetFocus) {
            this.goIntoAccessibilityState(true);
        }
        else {
            this.goIntoNormalState(true);
        }
    },

    ////////////////////////////////////////////////////
    // Ribbon Optimiazations methods moved to base class
    //////////////////////////////////////////////////////

    setAttributeValue: function (attrName, className, attrVal) {
        var value = {};
        value.classname = className;
        value.attrVal = attrVal;
        value.attrName = attrName;
        this.attrUpdateList.push(value);



    },
    removeAttrFrmUpdateList: function (attrName, className, attrVal) {
        var index = -1;
        if (this.attrUpdateList.length != 0) {
            for (var i = 0, len = this.attrUpdateList.length; i < len; i++) {
                if (this.attrUpdateList[i].classname == className && this.attrUpdateList[i].attrVal == attrVal && this.attrUpdateList[i].attrName == attrName) {
                    index = i;
                    break;
                }
            }

            if (index != -1) {
                this.attrUpdateList.splice(index, 1);         //remove that object
            }

        }

    },
    UpdateTabAttributes: function (compId, attrList) {
        var self = this;

        for (var i = 0; i < attrList.length; i++) {
            self.SetAttribute(compId, attrList[i].attrName, attrList[i].attrValue);
        }


    },
    UpdateTabSubRibbon: function (subRibbonXML) {

        var ribbonGenr = this.ribbonGenerator;

        ribbonGenr.updateTabBody(subRibbonXML);
    },
    LazyLoadTab: function (tabXML, $tabCont) {
        var self = this;
        var ribbonGenr = this.ribbonGenerator;

        var $tabBody = ribbonGenr.getTabBody(tabXML, true);
        $tabCont.append($tabBody);

        var attrUpdateList = this.attrUpdateList.slice(0); //checkbox, spin_val

        if (attrUpdateList.length != 0) {
            for (var i = 0; i < attrUpdateList.length; i++)         //try to set attribute value if any
            {
                if (attrUpdateList[i].attrName == 'CHECKBOX')
                    self.toggleCheckBox(attrUpdateList[i].classname, attrUpdateList[i].attrVal);
                else if (attrUpdateList[i].attrName == 'SPIN_VAL')
                    self.setSpinVal(attrUpdateList[i].classname, attrUpdateList[i].attrVal);
            }
        }
    },
    addAttrDataInTab: function ($tab, attrName, attrValue) {
        var dataObj = {};
        dataObj.attrName = attrName;
        dataObj.attrValue = attrValue;

        if ($tab.data('attrList') != undefined) {
            var dataArr = $tab.data('attrList');
            dataArr.push(dataObj);
            //dataArr = $.unique(dataArr);
            $tab.data('attrList', dataArr);
        }
        else {
            $tab.data('attrList', [dataObj]);
        }
    },
    toggleCheckBox: function (params, attrValue) {
        var $control = this.$thisCompElement.find('.office-control.' + params);



        var className = params;
        if ($control.length != 0) {
            var bChecked = false;
            if (attrValue) {
                //bChecked = Boolean(attrValue);

                if (attrValue == "false" || attrValue == false) {
                    bChecked = false;
                }
                else {
                    bChecked = true;
                }

            }


            var params = {
                checked: bChecked
            };
            this.manipulatorFactory.getManipulator($control).setData($control, params);
            this.removeAttrFrmUpdateList('CHECKBOX', className, attrValue);
        }

        else {
            this.setAttributeValue('CHECKBOX', className, attrValue);
        }


    },
    setSpinVal: function (controlClassName, attrValue) {
        var $spinControl = this.$thisCompElement.find('.' + controlClassName);

        if ($spinControl != undefined && $spinControl.length > 0) {
            var data = $spinControl.find(".sims-SpinControl").setData({
                currentvalue: attrValue
            });
            this.removeAttrFrmUpdateList('SPIN_VAL', controlClassName, attrValue);
        }
        else {
            this.setAttributeValue('SPIN_VAL', controlClassName, attrValue);
        }
    },

    Dispose: function () {

        SIMS.Objects.DOMElements.Ribbon = null;

        SIMS.Manipulators.TabHeader._ribbonGenerator = null;

        //clear global variable "hoveredControl" defined in OfficeTooltips and ControlBase
        if (window.hoveredControl) {
            window.hoveredControl.remove();
            window.hoveredControl = null;
        }


        /******************************************************* ItemGenerators *******************************************************/

        if (ItemGenerators.ColorPicker && ItemGenerators.ColorPicker.prototype.$item) {
            ItemGenerators.ColorPicker.prototype.$item.remove();
            ItemGenerators.ColorPicker.prototype.$item = null;
        }

        if (ItemGenerators.CustomItem && ItemGenerators.CustomItem.prototype.$item) {
            ItemGenerators.CustomItem.prototype.$item.remove();
            ItemGenerators.CustomItem.prototype.$item = null;
        }

        if (ItemGenerators.Default && ItemGenerators.Default.prototype.$item) {
            ItemGenerators.Default.prototype.$item.remove();
            ItemGenerators.Default.prototype.$item = null;
        }

        if (ItemGenerators.Font && ItemGenerators.Font.prototype.$item) {
            ItemGenerators.Font.prototype.$item.remove();
            ItemGenerators.Font.prototype.$item = null;
        }

        if (ItemGenerators.IconAndText && ItemGenerators.IconAndText.prototype.$item) {
            ItemGenerators.IconAndText.prototype.$item.remove();
            ItemGenerators.IconAndText.prototype.$item = null;
        }

        if (ItemGenerators.IconTextDesc && ItemGenerators.IconTextDesc.prototype.$item) {
            ItemGenerators.IconTextDesc.prototype.$item.remove();
            ItemGenerators.IconTextDesc.prototype.$item = null;
        }

        if (ItemGenerators.ImageArea && ItemGenerators.ImageArea.prototype.$item) {
            ItemGenerators.ImageArea.prototype.$item.remove();
            ItemGenerators.ImageArea.prototype.$item = null;
        }

        if (ItemGenerators.ImageItem && ItemGenerators.ImageItem.prototype.$item) {
            ItemGenerators.ImageItem.prototype.$item.remove();
            ItemGenerators.ImageItem.prototype.$item = null;
        }

        if (ItemGenerators.ItemBase && ItemGenerators.ItemBase.prototype.$item) {
            ItemGenerators.ItemBase.prototype.$item.remove();
            ItemGenerators.ItemBase.prototype.$item = null;
        }

        if (ItemGenerators.ItemHeader && ItemGenerators.ItemHeader.prototype.$item) {
            ItemGenerators.ItemHeader.prototype.$item.remove();
            ItemGenerators.ItemHeader.prototype.$item = null;
        }

        if (ItemGenerators.Separator && ItemGenerators.Separator.prototype.$item) {
            ItemGenerators.Separator.prototype.$item.remove();
            ItemGenerators.Separator.prototype.$item = null;
        }

        if (ItemGenerators.TableGridDiv && ItemGenerators.TableGridDiv.prototype.$item) {
            ItemGenerators.TableGridDiv.prototype.$item.remove();
            ItemGenerators.TableGridDiv.prototype.$item = null;
        }

        if (ItemGenerators.Text && ItemGenerators.Text.prototype.$item) {
            ItemGenerators.Text.prototype.$item.remove();
            ItemGenerators.Text.prototype.$item = null;
        }

        /******************************************************* ItemGenerators *******************************************************/



        /******************************************************* ControlGenerators *******************************************************/
        if (ControlGenerators.Big_Icon_Text && ControlGenerators.Big_Icon_Text.prototype.$control) {
            ControlGenerators.Big_Icon_Text.prototype.$control.remove();
            ControlGenerators.Big_Icon_Text.prototype.$control = null;
        }

        if (ControlGenerators.Big_Icon_TextFM && ControlGenerators.Big_Icon_TextFM.prototype.$control) {
            ControlGenerators.Big_Icon_TextFM.prototype.$control.remove();
            ControlGenerators.Big_Icon_TextFM.prototype.$control = null;
        }

        if (ControlGenerators.Button && ControlGenerators.Button.prototype.$control) {
            ControlGenerators.Button.prototype.$control.remove();
            ControlGenerators.Button.prototype.$control = null;
        }

        if (ControlGenerators.ButtonBase && ControlGenerators.ButtonBase.prototype.$control) {
            ControlGenerators.ButtonBase.prototype.$control.remove();
            ControlGenerators.ButtonBase.prototype.$control = null;
        }

        if (ControlGenerators.CheckBox && ControlGenerators.CheckBox.prototype.$control) {
            ControlGenerators.CheckBox.prototype.$control.remove();
            ControlGenerators.CheckBox.prototype.$control = null;
        }

        if (ControlGenerators.ComboBox && ControlGenerators.ComboBox.prototype.$control) {
            ControlGenerators.ComboBox.prototype.$control.remove();
            ControlGenerators.ComboBox.prototype.$control = null;
        }

        if (ControlGenerators.ComboBoxBase && ControlGenerators.ComboBoxBase.prototype.$control) {
            ControlGenerators.ComboBoxBase.prototype.$control.remove();
            ControlGenerators.ComboBoxBase.prototype.$control = null;
        }

        if (ControlGenerators.ComboBoxReadonlyText && ControlGenerators.ComboBoxReadonlyText.prototype.$control) {
            ControlGenerators.ComboBoxReadonlyText.prototype.$control.remove();
            ControlGenerators.ComboBoxReadonlyText.prototype.$control = null;
        }

        if (ControlGenerators.ComboBoxText && ControlGenerators.ComboBoxText.prototype.$control) {
            ControlGenerators.ComboBoxText.prototype.$control.remove();
            ControlGenerators.ComboBoxText.prototype.$control = null;
        }

        if (ControlGenerators.CondensedSectionControl && ControlGenerators.CondensedSectionControl.prototype.$control) {
            ControlGenerators.CondensedSectionControl.prototype.$control.remove();
            ControlGenerators.CondensedSectionControl.prototype.$control = null;
        }

        if (ControlGenerators.ControlBase && ControlGenerators.ControlBase.prototype.$control) {
            ControlGenerators.ControlBase.prototype.$control.remove();
            ControlGenerators.ControlBase.prototype.$control = null;
        }

        if (ControlGenerators.DropDownButtonHorizontal && ControlGenerators.DropDownButtonHorizontal.prototype.$control) {
            ControlGenerators.DropDownButtonHorizontal.prototype.$control.remove();
            ControlGenerators.DropDownButtonHorizontal.prototype.$control = null;
        }

        if (ControlGenerators.DropDownButtonHorizontalFM && ControlGenerators.DropDownButtonHorizontalFM.prototype.$control) {
            ControlGenerators.DropDownButtonHorizontalFM.prototype.$control.remove();
            ControlGenerators.DropDownButtonHorizontalFM.prototype.$control = null;
        }

        if (ControlGenerators.Gallery && ControlGenerators.Gallery.prototype.$control) {
            ControlGenerators.Gallery.prototype.$control.remove();
            ControlGenerators.Gallery.prototype.$control = null;
        }

        if (ControlGenerators.Icon_Text_Spinner_Button && ControlGenerators.Icon_Text_Spinner_Button.prototype.$control) {
            ControlGenerators.Icon_Text_Spinner_Button.prototype.$control.remove();
            ControlGenerators.Icon_Text_Spinner_Button.prototype.$control = null;
        }

        if (ControlGenerators.Icon_Text_Textbox_Button && ControlGenerators.Icon_Text_Textbox_Button.prototype.$control) {
            ControlGenerators.Icon_Text_Textbox_Button.prototype.$control.remove();
            ControlGenerators.Icon_Text_Textbox_Button.prototype.$control = null;
        }

        if (ControlGenerators.Image && ControlGenerators.Image.prototype.$control) {
            ControlGenerators.Image.prototype.$control.remove();
            ControlGenerators.Image.prototype.$control = null;
        }

        if (ControlGenerators.ImageDropdown && ControlGenerators.ImageDropdown.prototype.$control) {
            ControlGenerators.ImageDropdown.prototype.$control.remove();
            ControlGenerators.ImageDropdown.prototype.$control = null;
        }

        if (ControlGenerators.MinimalButton && ControlGenerators.MinimalButton.prototype.$control) {
            ControlGenerators.MinimalButton.prototype.$control.remove();
            ControlGenerators.MinimalButton.prototype.$control = null;
        }

        if (ControlGenerators.MinimalToggleButton && ControlGenerators.MinimalToggleButton.prototype.$control) {
            ControlGenerators.MinimalToggleButton.prototype.$control.remove();
            ControlGenerators.MinimalToggleButton.prototype.$control = null;
        }

        if (ControlGenerators.Separator && ControlGenerators.Separator.prototype.$control) {
            ControlGenerators.Separator.prototype.$control.remove();
            ControlGenerators.Separator.prototype.$control = null;
        }

        if (ControlGenerators.SplitButtonBase && ControlGenerators.SplitButtonBase.prototype.$control) {
            ControlGenerators.SplitButtonBase.prototype.$control.remove();
            ControlGenerators.SplitButtonBase.prototype.$control = null;
        }

        if (ControlGenerators.SplitButtonHorizontal && ControlGenerators.SplitButtonHorizontal.prototype.$control) {
            ControlGenerators.SplitButtonHorizontal.prototype.$control.remove();
            ControlGenerators.SplitButtonHorizontal.prototype.$control = null;
        }

        if (ControlGenerators.SplitButtonHorizontalMinimal && ControlGenerators.SplitButtonHorizontalMinimal.prototype.$control) {
            ControlGenerators.SplitButtonHorizontalMinimal.prototype.$control.remove();
            ControlGenerators.SplitButtonHorizontalMinimal.prototype.$control = null;
        }

        if (ControlGenerators.SplitButtonMultipleSelect && ControlGenerators.SplitButtonMultipleSelect.prototype.$control) {
            ControlGenerators.SplitButtonMultipleSelect.prototype.$control.remove();
            ControlGenerators.SplitButtonMultipleSelect.prototype.$control = null;
        }

        if (ControlGenerators.SplitButtonNewBase && ControlGenerators.SplitButtonNewBase.prototype.$control) {
            ControlGenerators.SplitButtonNewBase.prototype.$control.remove();
            ControlGenerators.SplitButtonNewBase.prototype.$control = null;
        }

        if (ControlGenerators.SplitButtonNewHorizontal && ControlGenerators.SplitButtonNewHorizontal.prototype.$control) {
            ControlGenerators.SplitButtonNewHorizontal.prototype.$control.remove();
            ControlGenerators.SplitButtonNewHorizontal.prototype.$control = null;
        }

        if (ControlGenerators.SplitButtonNewVertical && ControlGenerators.SplitButtonNewVertical.prototype.$control) {
            ControlGenerators.SplitButtonNewVertical.prototype.$control.remove();
            ControlGenerators.SplitButtonNewVertical.prototype.$control = null;
        }

        if (ControlGenerators.SplitButtonVertical && ControlGenerators.SplitButtonVertical.prototype.$control) {
            ControlGenerators.SplitButtonVertical.prototype.$control.remove();
            ControlGenerators.SplitButtonVertical.prototype.$control = null;
        }

        if (ControlGenerators.SplitButtonWithLabel && ControlGenerators.SplitButtonWithLabel.prototype.$control) {
            ControlGenerators.SplitButtonWithLabel.prototype.$control.remove();
            ControlGenerators.SplitButtonWithLabel.prototype.$control = null;
        }

        if (ControlGenerators.Text && ControlGenerators.Text.prototype.$control) {
            ControlGenerators.Text.prototype.$control.remove();
            ControlGenerators.Text.prototype.$control = null;
        }

        if (ControlGenerators.Textbox_Button && ControlGenerators.Textbox_Button.prototype.$control) {
            ControlGenerators.Textbox_Button.prototype.$control.remove();
            ControlGenerators.Textbox_Button.prototype.$control = null;
        }

        if (ControlGenerators.ToggleButton && ControlGenerators.ToggleButton.prototype.$control) {
            ControlGenerators.ToggleButton.prototype.$control.remove();
            ControlGenerators.ToggleButton.prototype.$control = null;
        }

        /******************************************************* ControlGenerators *******************************************************/


        this.base();
    },

    IsSelectedInRibbon: function (selectedTabsArray) {  //check if contextual Tab is alrady selected
        try {
            if (selectedTabsArray != undefined) {
                if (!Array.isArray(selectedTabsArray)) {
                    selectedTabsArray = selectedTabsArray.split(",");
                }
                var selectedTabRibbon;
                if (this.$thisCompElement.find('.tab-header-selected').length > 0 && this.$thisCompElement.find('.tab-header-selected').data("tabclass") !== undefined && this.$thisCompElement.find('.tab-header-selected').data("tabclass") !== null) {
                    selectedTabRibbon = this.$thisCompElement.find('.tab-header-selected').data("tabclass").split("-")[2];
                }

                for (var tabs = 0; tabs < selectedTabsArray.length; tabs++) {

                    var checkContextualTab = selectedTabsArray[tabs].removeSpaces().replace("&", "").toLowerCase();
                    if (selectedTabRibbon == checkContextualTab)
                        return true;

                }
                return false;
            }
        }
        catch (ex) {
            return false;
        }
    },

    RemoveTabFromList: function (attrValue) {
        var tabNameMin = attrValue.removeSpaces().replace("&amp;", "").replace("&", "").toLowerCase();
        var searchedIndex = $.inArray(tabNameMin, this.activatedTabsList);
        if (searchedIndex >= 0) {
            this.activatedTabsList.splice(searchedIndex, 1);
        }
    },

    HideTab: function () {
        // to be overwritten in respective ribboncomp.js
        // add code written in setattribute function for HIDE_TAB attribute
    },

    CheckIfTabIsActivated: function (tabName) {
        var IsTabActivated = false;
        var TabNameToBeCompared = tabName.removeSpaces().replace("&amp;", "").replace("&", "").toLowerCase();
        if (this.activatedTabsList.indexOf(TabNameToBeCompared) !== -1) {
            IsTabActivated = true;
        }
        return IsTabActivated;
    },

    // Contextual Tab handling using enter component messaging
    ReceiveComponentMessage: function (compMessageArgs) {

        var MessageId = parseInt(compMessageArgs.MessageId);
        // check for specific ID-
        // desable this functionality for PRACTIVE mode .this is because in practice user can deselect contextual element with blurb still pointing to contextual tab
        if (MessageId == SIMS.SharedData.UniqueMessages.SHOW_HIDE_RIBBON_TAB && SIMS.SharedData.PracticeData.isPracticeOn != undefined && SIMS.SharedData.PracticeData.isPracticeOn == false) {
            var appContextualId;
            var self = this;

            //All Contextual TabNames-Array .. All contextual tabs are getting activated here
            var TabName = compMessageArgs.MessageDetails.tab;
            if (!compMessageArgs.MessageDetails.hide) {
                for (var counter = TabName.length - 1; counter >= 0; counter--) {
                    if (this.CheckIfTabIsActivated(TabName[counter])) {
                        this.SetAttribute(self.compId, "ACTIVATE_TAB", TabName[counter]);
                    }
                }
                var selectTab = compMessageArgs.MessageDetails.selectTab;

                // check if tab to be selected is already selected in Ribbon
                if (selectTab != null && self.IsSelectedInRibbon(selectTab) == false) {
                    self.SetAttribute(self.compId, "SEL_TAB", selectTab);  //select Home tab 
                }
            }
            else {

                var selectedTabsArray = compMessageArgs.MessageDetails.selectedTabsArray;

                // check if tabs to be selected is already selected in Ribbon
                if (selectedTabsArray == undefined || (!self.IsSelectedInRibbon(selectedTabsArray))) {
                    // code to hide contextual Tab
                    //check if last selected tab was a contextual tab- > then select home tab
                    //Getting the selected contextualTab name
                    var selectedTab;

                    if (this.$thisCompElement.find('.tab-header-selected').length > 0 && this.$thisCompElement.find('.tab-header-selected').data("tabclass") !== undefined && this.$thisCompElement.find('.tab-header-selected').data("tabclass") !== null) {
                        selectedTab = this.$thisCompElement.find('.tab-header-selected').data("tabclass").split("-")[2];
                    }


                    var appName = this.appName.toString().toLowerCase();
                    var RibbonContextualTabIDs; //All  contextual Tab ids
                    switch (appName) {

                        case "word":
                            {
                                RibbonContextualTabIDs = SIMS.SharedData.WordRibbonContextualTabIDs;
                                break;
                            }
                        case "ppt":
                            {
                                RibbonContextualTabIDs = SIMS.SharedData.PPTRibbonContextualTabIDs;
                                break;
                            }
                        case "excel":
                            {
                                RibbonContextualTabIDs = SIMS.SharedData.ExcelRibbonContextualTabIDs;
                                break;
                            }
                        case "access":
                            {
                                RibbonContextualTabIDs = SIMS.SharedData.AccessRibbonContextualTabIDs;
                                break;
                            }
                    }

                    //for loop is required because because contextual tab attribute is set for other non contextual tab(eg developer). 
                    //Therefore we need to check by the key map stored in shared data
                    for (var tabs in RibbonContextualTabIDs) {
                        // checking if selected tabs in contextualTab Array (word Contextula tab IDs)
                        var minRiibonTabName = RibbonContextualTabIDs[tabs].removeSpaces().replace("&", "").toLowerCase();
                        if (minRiibonTabName == selectedTab) {
                            self.SetAttribute(self.compId, "SEL_TAB", "HOME");  //select Home tab 
                            break;
                        }
                    }
                    // Hide required  tabs
                    for (var counter = TabName.length - 1; counter >= 0; counter--) {
                        //this.SetAttribute(self.compId,"HIDE_TAB",TabName[counter]);
                        this.HideTab(TabName[counter]);
                    }

                }

            }
        }

    }


});

'use strict';
namespace("SIMS.Components2016.Common");


SIMS.Components2016.Common.RibbonVisibilityModes = {
    "NORMAL": "NORMAL",
    "COLLAPSED": "COLLAPSED",
    "EMBEDDED":"EMBEDDED"
};

SIMS.Components2016.Common.RibbonBase = SIMS.Components.Common.RibbonBase.extendOverwrite({
    RibbonMode : SIMS.Components2016.Common.RibbonVisibilityModes.NORMAL,
	
    showHideDropdownEvent : false,
    MaintainKeyboardState : null,
    accessibilityStateEscHandlingFix: false,
	constructor: function () {
        this.base();
        this.MaintainKeyboardState = [];
        this._navigationAndAccessibilityState.AddHoverToParentDropdownItem = function() {
            if(this._controlStack[this._controlStack.length -1].hasClass("dropdown-item")){
                this._manipulator.addNavigationHoverOnParentItemOnly(this._controlStack[this._controlStack.length - 1]);
            }
        };

        this._navigationKeyState.AddHoverToParentDropdownItem = function() {
            if(this._controlStack[this._controlStack.length -1].hasClass("dropdown-item")){
                this._manipulator.addNavigationHoverOnParentItemOnly(this._controlStack[this._controlStack.length - 1]);
            }
        };

        this._accessibilityState.AddHoverToParentDropdownItem = function() {
            var parendropdownItem = this._controlStack[this._controlStack.length - 1];
            if(parendropdownItem.hasClass("dropdown-item")){
                var closestcontrol = $(parendropdownItem).closest(".office-control");
                closestcontrol.find('div.hovered, span.hovered').removeClass('hovered');
                this._manipulator.addNavigationHoverOnParentItemOnly(this._controlStack[this._controlStack.length - 1]);
            }
        };

        /*** Added to correct the accesskey ESC handling, Refer SO-108685 ***/
        this._accessibilityState.populateAccessiblePath = function(searchKey) {
            /*** The flag accessibilityStateEscHandlingFix must be set through attribute in corresponding application ribbon component, where fix is required ***/
            if(this._ribbonComp.accessibilityStateEscHandlingFix) {
                if(searchKey.length === 1) {
                    this._accessiblePath.push(this._currentAccessibleElements);       
                }
            }
            else{
                this._accessiblePath.push(this._currentAccessibleElements);       
            }   
        }

        this._navigationAndAccessibilityState.SetDefaultItemForNavAccessState = function($currentItem , $subItems) {
            var $returnItem = $currentItem;
            if ($subItems != undefined && $subItems.length > 0) {
                var hoveredItems = $currentItem.find(".dropdown-item.hovered:visible:not(.disabled)");
                if(hoveredItems && hoveredItems.length > 0){
                    $returnItem = hoveredItems.first();
                }
                else{
                    $returnItem = $subItems.first();
                }
            }
            return $returnItem;
        };

    },

    AdjustTellMeSerachBox : function () {
	    var $LastTabHeader = this.$thisCompElement.find('.tab-header:visible').last();
	    var $username = this.$thisCompElement.find('.userinfo .username');
        var $TellmeSearchBox = this.$thisCompElement.find('.tellMeSearchBox');
        var $Tellmetext = this.$thisCompElement.find('.tellMeSearchBox .tellMeBoxText');
        var $shareButtonDiv = this.$thisCompElement.find(".shareButtonLI");

	    if ($username.length > 0 && $LastTabHeader.length > 0 && ($username.offset().left - $LastTabHeader.offset().left - $LastTabHeader.outerWidth() < 225)) {
	        $TellmeSearchBox.css({ "width": $username.offset().left - $LastTabHeader.offset().left -  $LastTabHeader.outerWidth() - 10 });
	        $Tellmetext.css({ "width": 50 });
           } 
        else if ($shareButtonDiv.length > 0){
            this.AdjustTellMeSerachBoxIfShareBtnEnabled($LastTabHeader, $username, $TellmeSearchBox, $Tellmetext, $shareButtonDiv);
        }
    },

    AdjustTellMeSerachBoxIfShareBtnEnabled: function($LastTabHeader, $username, $TellmeSearchBox, $Tellmetext, $shareButtonDiv){
        if($username.length > 0 && $LastTabHeader.length > 0 && ((gSimsAreaWidth - $LastTabHeader.offset().left - $LastTabHeader.outerWidth() ) <  ($username.outerWidth()  + $TellmeSearchBox.outerWidth() + $shareButtonDiv.outerWidth() + 20 ))) {
            $TellmeSearchBox.css({
                "width": (gSimsAreaWidth -  $LastTabHeader.offset().left - $LastTabHeader.outerWidth()) - ($username.outerWidth()  + $shareButtonDiv.outerWidth() + 20)
            });
            $Tellmetext.css({
                "width": 50
            });
        }
},
	ShowApplicationContextMenu: function (appIconSelector) {
		/*****appIconSelector is the unique selector through which the application icon can be identified*****/
	    var $appIcon = this.$thisCompElement.find(appIconSelector);
	    $appIcon.showContextMenu($appIcon.data('contextMenuId'));
	    return true;
	},
    
    AttachDropdownToggleEvents: function($Comp){
    	var self = this;
        var $ribbonComp = $Comp.find(".ribbon:first");

        // This is the handler for dropdown handling which is called on recieving message for dropdown open.
        // On using addEventListener the callback has to be mentioned in a variable if the event also needs to be unbind.
        // Inline callback function used in addEventListener are not unbinded.
        this.DropdownKeyHandlerProxied = $.proxy(this.HandleKeyOnDropdownOpen, this); 


        $ribbonComp.noRepeatBind('RibbonDropdownOpened', function (e, eventInfo) {
            if(self._currentState === self._normalState){
                self.goIntoDropdownState($(e.target));    
                SIMS.Objects.DOMElements.SIMArea.get(0).addEventListener("keydown", self.DropdownKeyHandlerProxied, true);
            }
        });

        $ribbonComp.noRepeatBind('RibbonDropdownClosed', function (e, eventInfo) {
            SIMS.Objects.DOMElements.SIMArea.get(0).removeEventListener("keydown", self.DropdownKeyHandlerProxied, true);
        });
    },

    HandleKeyOnDropdownOpen: function (e) { 
        // added this check to not handle key if the current keyboard owner is context menu for SO-66386.
        if (SIMS.SharedData.KeyboardData.OWNER == SIMS.SharedData.KeyboardOwner.CONTEXT_MENU)
        { return; }

        this.HandleTabKey(e, { keyName: SIMS.Objects.Utils.GetFriendlyKeyName(e), keyCombination: SIMS.Objects.Utils.GetFriendlyShortCutString(e) });
        e.stopPropagation();
        e.preventDefault();
    },

    handleSpinnerControlEvent: function(compEventId, spinCtrlName, finalAttrName, controlEventArgs, clickstreamStr) {
        var isHandled = false;
        
        if (controlEventArgs.spinChangedBy == "enter") {
            this.LogComponentEvent(compEventId, clickstreamStr);
            isHandled = true;
        } else {
            if (this._compinfo.finalattrs && this._compinfo.finalattrs.attr) {
                var attr = getArray(this._compinfo.finalattrs.attr).findSingle("@name", finalAttrName);
                if (attr) {
                    if (this.getSpinVal(spinCtrlName).toString() === attr["@value"].toString()) {
                        this.LogComponentEvent(compEventId, clickstreamStr);
                    }
                   isHandled = true;
                }
            }
        }

        return isHandled;
    },

    UpdateRibbonVisibilityMode: function($Comp,attrValue){
          var $ribbon = $Comp.find(".ribbon");
                if (attrValue &&  SIMS.Components2016.Common.RibbonVisibilityModes.hasOwnProperty([attrValue.toUpperCase()])) {
                    this.RibbonMode = SIMS.Components2016.Common.RibbonVisibilityModes[attrValue.toUpperCase()];
                    if($ribbon.length > 0){
                        switch (this.RibbonMode) {
                            case SIMS.Components2016.Common.RibbonVisibilityModes.COLLAPSED:
                                $ribbon.addClass(this.RibbonMode);
                                var $selectedTabHeader = $ribbon.find(".tab-header-selected")
                                if($selectedTabHeader.length > 0){
                                    $selectedTabHeader.removeClass("tab-header-selected");        
                                }
                                var $selectedTabContainer = $ribbon.find(".ribbon-tab-container")
                                if($selectedTabContainer.length > 0){  
                                    $selectedTabContainer.hide();        
                                }
                                break;

                            case SIMS.Components2016.Common.RibbonVisibilityModes.NORMAL:
                                for(var key in SIMS.Components2016.Common.RibbonVisibilityModes){
                                    $ribbon.removeClass(SIMS.Components2016.Common.RibbonVisibilityModes[key]);     
                                }  
                                break;
                            case SIMS.Components2016.Common.RibbonVisibilityModes.EMBEDDED:
                                 $ribbon.addClass(this.RibbonMode);
                            break;

                            default:
                                break;
                        }
                    }
                }
    },

    trackDropdownShowHide: function(eventTypeAndDropdownId,showEvent,hideEvent){
        var self =  this;
        var $ribbonElement = this.$thisCompElement;
        var dropdownId = eventTypeAndDropdownId.id;
        
        if(eventTypeAndDropdownId.type == "hide"){

            $ribbonElement.unbind('RibbonDropdownClosed.trackDD').bind('RibbonDropdownClosed.trackDD',function(e){
                    var controlId = $(e.target).closest(".office-control").attr("id");
                    var controlInfo = $(e.target).closest(".office-control").data('clickstreamInfo');
                    if( dropdownId.indexOf(controlId) != -1){
                        self.LogComponentEvent(hideEvent,"Ribbon: "+controlInfo+" : Dropdown Closed.",true);
                    }
            });
            $ribbonElement.unbind('hideSubItems').bind('hideSubItems',function(e){
                    var parentItemId = $(e.target).attr("id");
                    var parentItemInfo = $(e.target).data('clickstreamInfo');
                    var controlInfo = $(e.target).closest(".office-control").data('clickstreamInfo');
                    if(dropdownId.indexOf(parentItemId) != -1){
                        self.LogComponentEvent(hideEvent,"Ribbon: "+controlInfo+" : "+parentItemInfo+" : Sub Dropdown Closed.",true);
                    }
            });
        }

        else if(eventTypeAndDropdownId.type == "show"){

            $ribbonElement.unbind('RibbonDropdownOpened.trackDD').bind('RibbonDropdownOpened.trackDD',function(e){
                    var controlId = $(e.target).closest(".office-control").attr("id");
                    var controlInfo = $(e.target).closest(".office-control").data('clickstreamInfo');
                    if(dropdownId.indexOf(controlId) != -1){
                        self.LogComponentEvent(showEvent,"Ribbon: "+controlInfo+" : Dropdown Opened.",true);
                    }
            });
            $ribbonElement.unbind('showSubItems').bind('showSubItems',function(e){
                    var parentItemId = $(e.target).attr("id");
                    var parentItemInfo = $(e.target).data('clickstreamInfo');
                    var controlInfo = $(e.target).closest(".office-control").data('clickstreamInfo');
                    if(dropdownId.indexOf(parentItemId) != -1){
                        self.LogComponentEvent(showEvent,"Ribbon: "+controlInfo+" : "+parentItemInfo+" : Sub Dropdown Opened.",true);
                    }
            });

        }

        this.showHideDropdownEvent = true;
    },

    ResetBetweenStates: function(){

        // For dropdown show/hide event
        if(this.showHideDropdownEvent == true){
            this.MaintainKeyboardState = [];
            var $ribbonElement = this.$thisCompElement;
            
            $ribbonElement.unbind('hideSubItems');
            $ribbonElement.unbind('RibbonDropdownClosed.trackDD');

            $ribbonElement.unbind('showSubItems');
            $ribbonElement.unbind('RibbonDropdownOpened.trackDD');

            this.showHideDropdownEvent = false;
        }
    },

    UpdateComponentState: function (compInfo, attrSet) {        
        this.ResetBetweenStates();
        this.base(compInfo, attrSet);
    },

    HideComponent: function(){
        // Done for SO-98186, hidecomponent is called when comp is removed from xml, so when comp is removed we have removed the finding done for kl006
        SIMS.Objects.DOMElements.SIMArea.get(0).removeEventListener("keydown", this.DropdownKeyHandlerProxied, true);
        this.base();
    },

    Dispose: function() {
        this.base();
        SIMS.Objects.DOMElements.SIMArea.get(0).removeEventListener("keydown", this.DropdownKeyHandlerProxied, true);
    }
    
});

//'use strict';
namespace("SIMS.Components.Common");
namespace("SIMS.Components.Excel");
namespace("SIMS.Components.Word");

//Class Declaration and Derivation
var SIMS_Ribbon_Excel = SIMS.Components.Common.Ribbon = SIMS.Components.Excel.Ribbon = SIMS.Components.Word.Ribbon = SIMS.Components.Common.RibbonBase.extend({

    ribbonGenArr: null,
    constructor: function () {
        this.base();
        this.ribbonXmlPath = 'word-ribbon.xml';
        this.appName = 'word';
        this.manipulatorFactory = new SIMS.Manipulators.RibbonControlManipulatorFactory();
        this.controlXMLPath = null;
        this.controlXMLUpdate = false;
        this.galleryUpdateStack = [];
        this.colorTheme = null;
        this.tabName = null;
        this.pivotChartToolsFieldButton = false;
        this.attrUpdateList = [];
        //This is for storing the value of new attribute CHART_TOOLS_FORMAT_LAUNCHER_GROUP
        this.chartFormatTablauncherGroup = null;
        // this.pageColor = null;
        // this.myTabPageColor = null;
        //----Commented above as not required. Unneccesarily done by Ravi Sahu. Same sould be commented by Ravi in Trunk - Ashwin
        this.ribbonGenArr = [];
        this.AddPathToXmlPathMap("app/comps/common/ribbon/excel-ribbon.xml", "app/comps/common/ribbon/excel-ribbon.xml");
        this.AddPathToXmlPathMap("app/comps/common/ribbon/word-ribbon.xml", "app/comps/common/ribbon/word-ribbon.xml");
    },

    RegisterMe: function () {
        this.ArrValCompVal = [];

        this.RegisterAttributes();
        this.RegisterEvents();

        //this.RegisteredComponent = new ComponentRegistration();           

        //return compRegn;
    },

    RegisterAttributes: function () {

        //Attributes Registration..
        this.RegisterAttribute("DOCUMENT_NAME", "Document1 - Microsoft Word", 'text');
        this.RegisterAttribute("SEL_TAB", "Home", 'text');
        //this.RegisterAttribute("SEL_ITEMS", "[{&quot;ItemName&quot;: &quot;bold&quot;,&quot;isSelected&quot;: &quot;false&quot;},{&quot;ItemName&quot;: &quot;aligncenter&quot;,&quot;isSelected&quot;: &quot;false&quot;},{&quot;ItemName&quot;: &quot;alignleft&quot;,&quot;isSelected&quot;: &quot;false&quot;},{&quot;ItemName&quot;: &quot;alignbottom&quot;,&quot;isSelected&quot;: &quot;false&quot;}]", 'json', new this.SELECTED_RIBBON_ITEMS());
        this.RegisterAttribute("FONT_SIZE", "11", 'int');
        this.RegisterAttribute("FONT_NAME", "Calibri", 'text');
        this.RegisterAttribute("NUM_FORMAT", "General", 'text');
        this.RegisterAttribute("CITATION_STYLE", "MLA", 'text');
        this.RegisterAttribute("BOTTOM_ALIGN", "General", 'text');
        this.RegisterAttribute("TOP_ALIGN", "General", 'text');
        this.RegisterAttribute("RIBBON_PATH", "word-ribbon.xml", 'text');
        this.RegisterAttribute("APP", "word", 'text');
        this.RegisterAttribute("CENTER_ALIGN", "false", 'bool');
        this.RegisterAttribute("WATCH_WINDOW", "false", 'bool');
        this.RegisterAttribute("LEFT_ALIGN", "false", 'bool');
        this.RegisterAttribute("CHANGE_TAB_NAME", "General", 'text');
        this.RegisterAttribute("HIDE_TAB", "General", 'text');
        this.RegisterAttribute("ACTIVATE_TAB", "General", 'text');
        this.RegisterAttribute("FORMAT_PAINTER", "General", 'text');
        this.RegisterAttribute("TEXT_PANE_HIGHLIGHTED", "false", 'bool');
        this.RegisterAttribute("FONT_COLOR", "General", 'text');
        this.RegisterAttribute("PICTURE_BORDER", "General", 'text');
        this.RegisterAttribute("PARA_SPACING_AFTER", "General", 'text');
        this.RegisterAttribute("PARA_SPACING_BEFORE", "General", 'text');
        this.RegisterAttribute("SHAPE_FILL", "General", 'text');
        this.RegisterAttribute("SHAPE_OUTLINE", "General", 'text');
        this.RegisterAttribute("QAT_QUICK_PRINT", "General", 'bool');
        this.RegisterAttribute("QAT_TRACK_CHANGES", "General", 'bool');
        this.RegisterAttribute("QAT_PRINT_PREVIEW", "General", 'bool');
        this.RegisterAttribute("QAT_SPELLING_GRAMMAR", "General", 'bool');
        this.RegisterAttribute("JUSTIFY", "General", 'bool');
        this.RegisterAttribute("PARAGRAPH_MARKER_PRESSED", "false", 'bool');
        this.RegisterAttribute("HIGHLIGHT_BOLD", "false", 'bool');
        this.RegisterAttribute("HIGHLIGHT_MAILINGS_PREVIEW", "false", 'bool');
        this.RegisterAttribute("HIGHLIGHT_TRACK_CHANGES", "false", 'bool');
        this.RegisterAttribute("TAB_COLOR", "General", 'bool');
        this.RegisterAttribute("THEME", "Office", 'text');
        this.RegisterAttribute("SHADING_COLOR", "0", 'text');
        this.RegisterAttribute("TOGGLE_STATE", "0", 'text');
        this.RegisterAttribute("CHECKBOX", "false", 'bool');
        this.RegisterAttribute("CHECKBOX_ARRAY", "false", 'bool');
        this.RegisterAttribute("SPIN_VAL", "false", 'bool');
        this.RegisterAttribute("DIMENSIONS", "", 'obj');
        this.RegisterAttribute("SHAPE_WIDTH", "", 'number');
        this.RegisterAttribute("SHAPE_HEIGHT", "", 'number');
        this.RegisterAttribute("SMART_HEIGHT", "", 'number');
        this.RegisterAttribute("SMART_WIDTH", "", 'number');
        this.RegisterAttribute("TABLE_WIDTH", "", 'number');
        this.RegisterAttribute("TABLE_HEIGHT", "", 'number');
        this.RegisterAttribute("PICTURE_WIDTH", "", 'number');
        this.RegisterAttribute("PICTURE_HEIGHT", "", 'number');
        this.RegisterAttribute("SELECTED_SPARKLINE_INDEX", "0", 'int');
        this.RegisterAttribute("SELECTED_PARAGRAPH_STYLES_INDEX", "0", 'int');
        this.RegisterAttribute("SELECTED_TABLE_STYLES_INDEX_WORD", "0", 'int');
        this.RegisterAttribute("SELECTED_PICTURE_STYLES_INDEX", "0", 'int');
        this.RegisterAttribute("SELECTED_CHART_STYLE_INDEX", "0", 'int');
        this.RegisterAttribute("SPARKLINE_SRC", "app/Comps/Common/Ribbon/img/Excel/sparklines/SparklineItems.png", 'text');
        this.RegisterAttribute("RIBBON_SUB_XML", "", 'text');
        this.RegisterAttribute("SUB_XML_UPDATE", "false", 'bool');
        this.RegisterAttribute("MERGE_AND_CENTER", "false", 'bool');
        this.RegisterAttribute("WRAP_TEXT", "false", 'bool');
        this.RegisterAttribute("MIDDLE_ALIGN", "false", 'bool');
        this.RegisterAttribute("SCALE_WIDTH", "Automatic", 'text');
        this.RegisterAttribute("SCALE_HEIGHT", "Automatic", 'text');
        this.RegisterAttribute("LEFT_INDENT", "", 'number');
        this.RegisterAttribute("RIGHT_INDENT", "", 'number');
        this.RegisterAttribute("RIGHT_ALIGN", "false", 'bool');
        this.RegisterAttribute("SELECTED_LINE_SPACING_INDEX", "1", 'int');
        this.RegisterAttribute("HIGHLIGHT_ITALICS", "false", 'bool');
        this.RegisterAttribute("NORMAL_VIEW", "false", 'bool');
        this.RegisterAttribute("PAGE_BREAK_PREVIEW", "false", 'bool');
        this.RegisterAttribute("PAGE_LAYOUT", "false", 'bool');
        this.RegisterAttribute("SPARKLINE_TYPE", "Line", 'text');
        this.RegisterAttribute("EXCEL_FONT_COLOR", "General", 'bool');
        this.RegisterAttribute("UNDO_REDO_INDEX", "", 'number');
        this.RegisterAttribute("TABLE_DIMENSIONS", "", 'text');
        this.RegisterAttribute("FORMAT_PAINTER_EXCEL", "", "text");
        this.RegisterAttribute("SHOW_LEVEL", "", "text");
        this.RegisterAttribute("OUTLINE_LEVEL", "", "text");
        this.RegisterAttribute("WINDOW_SPLIT", "false", 'bool');
        this.RegisterAttribute("NUMBERING_OPTIONS", "false", 'bool');
        this.RegisterAttribute("BULLET_OPTIONS", "false", 'bool');
        this.RegisterAttribute("DOC_FORMATTING_INDEX", "0", 'int')
        this.RegisterAttribute("SELECTED_TABLE_STYLE_INDEX", "0", 'int');
        this.RegisterAttribute("PIVOT_TABLE_STYLE_INDEX", "0", 'int');
        this.RegisterAttribute("PIVOT_CHART_TOOLS_DESIGN_STYLE_INDEX", "0", 'int');
        this.RegisterAttribute("SLICER_STYLE_INDEX", "0", 'int');
        this.RegisterAttribute("CHART_TOOLS_CHART_ELEMENTS", "", 'text');
        this.RegisterAttribute("SPARKLINE_COLOR", "General", "bool");
        this.RegisterAttribute("TEXT_HIGHLIGHT_COLOR", "false", "bool");
        this.RegisterAttribute("HIGHLIGHT_UNDERLINE", "false", "bool");
        this.RegisterAttribute("HIGHLIGHT_REPEAT_HEADER_ROWS", "false", 'bool');
        this.RegisterAttribute("CHART_HEIGHT", "", 'int');
        this.RegisterAttribute("CHART_WIDTH", "", 'int');
        this.RegisterAttribute("PAGE_LAYOUT_SCALE", "", 'int');
        this.RegisterAttribute("DATA_FILTER", "", "bool");
        this.RegisterAttribute("SHOW_MARKUP", "All Markup", 'text');
        this.RegisterAttribute("CHART_SHAPEFILL_COLOR", "0", 'int');
        this.RegisterAttribute("FILL_COLOR", "0", 'int');
        this.RegisterAttribute("HIGHLIGHT_ALIGN_TOPRIGHT", "false", 'bool');
        this.RegisterAttribute("HIGHLIGHT_ALIGN_CENTER", "false", 'bool');
        this.RegisterAttribute("PIVOTTABLETOOLS_ACTIVE_FIELD", "false", 'bool');
        this.RegisterAttribute("PIVOTTABLETOOLS_TABLE_NAME", "false", 'bool');
        this.RegisterAttribute("PIVOTCHARTTOOLS_CHART_NAME", "false", 'bool');
        this.RegisterAttribute("TABLETOOLS_DESIGN_TABLE_NAME", "false", 'string');
        this.RegisterAttribute("SLICERTOOLS_OPTIONS_SLICER_CAPTION", "false", 'bool');



        //Above attributes were available in Feb 17 Ribbon Investigation Brach. 
        //It is expected, Lazyload Handling for all the above attributes would have been done by Monalika mam. - Ashwin

        this.RegisterAttribute("CONTEXT_MENU_ITEM_INDEX", "", "text");
        this.RegisterAttribute("SHOW_FORMULAS", "false", 'bool');
        this.RegisterAttribute("EXCEL_SELECTED_SHAPE_INDEX", "0", 'int');
        this.RegisterAttribute("WORDART_SELECTED_STYLE_INDEX", "0", 'int');
        this.RegisterAttribute("HIGHLIGHT_RESTRICT_EDITING", "false", 'bool');
        this.RegisterAttribute("HIGHLIGHT_HOME_BORDERS", "false", 'bool');
        this.RegisterAttribute("HIGHLIGHT_ALIGN_TOP_LEFT", "false", 'bool');
        this.RegisterAttribute("HIGHLIGHT_ALIGN_CENTER_LEFT", "false", 'bool');

        this.RegisterAttribute("HIGHLIGHT_ALIGN_TOP_CENTER", "false", 'bool');
        this.RegisterAttribute("HIGHLIGHT_REVIEW_REVIEWINGPANE", "false", 'bool');
        this.RegisterAttribute("SLICER_BUTTON_WIDTH", "", 'number');
        this.RegisterAttribute("SLICER_BUTTON_COLUMN", "", 'number');
        this.RegisterAttribute("SLICER_SIZE_HEIGHT", "", 'number');
        this.RegisterAttribute("HIGHLIGHT_VIEW_SIDEBYSIDE", "false", 'bool');
        this.RegisterAttribute("HIGHLIGHT_VIEW_SYNCHRONOUS_SCROLLING", "false", 'bool');
        this.RegisterAttribute("PAGE_COLOR", "General", 'text');
        this.RegisterAttribute("MYTAB_PAGE_COLOR", "General", 'text');
        this.RegisterAttribute("HIGHLIGHT_DEVELOPER_DESIGN_MODE", "false", 'bool');
        this.RegisterAttribute("HIGHLIGHT_DEVELOPER_RESTRICT_EDITING", "false", 'bool');
        this.RegisterAttribute("HIGHLIGHT_DEVELOPER_XML_SOURCE", "false", 'bool');
        this.RegisterAttribute("TAB_HEADER_CSS", "", 'text');
        //        this.RegisterAttribute("HIGHLIGHT_OUTLINING_SHOW_DOCUMENT", "false", 'bool'); //Commenting this attribute as its not working in subribbon for outlining tab. Ravi Sahu
        this.RegisterAttribute("HIGHLIGHT_PRINT_LAYOUT", "false", 'bool');
        this.RegisterAttribute("VALIDATE_SELECTED_TAB", "false", "bool", false);
        this.RegisterAttribute("SELECTED_TAB", "", "string", false);
        this.RegisterAttribute("HIGHLIGHT_HOME_BULLETS", "false", 'bool');
        this.RegisterAttribute("IS_TAB_SELECTED_ONCE", "NO", 'string', false);
        this.RegisterAttribute("HIGHLIGHT_SHOW_COMMENTS", "false", 'bool');
        this.RegisterAttribute("SELECTED_SHAPE_STYLES_INDEX", "0", 'int');
        this.RegisterAttribute("FOCALIZE_SPIN_CONTROL", "", 'string', false);
        this.RegisterAttribute("SELECTED_SMARTART_LAYOUT_INDEX", "0", 'int');
        this.RegisterAttribute("SELECTED_SMARTART_STYLE_INDEX", "0", 'int');
        this.RegisterAttribute("PIVOTTABLETOOLS_HIGHLIGHT_FIELD_LIST", "false", 'bool');
        this.RegisterAttribute("PIVOTTABLETOOLS_HIGHLIGHT_+/-BUTTONS", "false", 'bool');
        this.RegisterAttribute("PIVOTTABLETOOLS_HIGHLIGHT_FIELD_HEADERS", "false", 'bool');
        this.RegisterAttribute("PIVOTCHARTTOOLS_HIGHLIGHT_FIELD_BUTTONS", "false", 'bool');
        this.RegisterAttribute("PIVOTCHARTTOOLS_HIGHLIGHT_FIELD_LIST", "false", 'bool');
        this.RegisterAttribute("HIGHLIGHT_REVIEW_SHOW_INK", "false", 'bool');
        this.RegisterAttribute("HIGHLIGHT_REVIEW_PROTECT_WORKBOOK", "false", 'bool');
        this.RegisterAttribute("HIGHLIGHT_TABLETOOLS_DESIGN_EXTERNAL_REFRESH", "false", 'bool');
        this.RegisterAttribute("SELECTED_TABS_LIST", "", 'json', false);
        this.RegisterAttribute("ENABLE_COLLAPSE_BUTTON", "false", "bool", false);
        this.RegisterAttribute("POWERVIEW_HIGHLIGHT_FIT_TO_WINDOW", "false", 'bool');
        this.RegisterAttribute("POWERVIEW_HIGHLIGHT_FIELD_LIST", "false", 'bool');
        this.RegisterAttribute("POWERVIEW_HIGHLIGHT_FILTER_AREA", "false", 'bool');
        this.RegisterAttribute("POWERPIVOT_HIGHLIGHT_DATA_VIEW", "false", 'bool');
        this.RegisterAttribute("POWERPIVOT_HIGHLIGHT_DIAGRAM_VIEW", "false", 'bool');
        this.RegisterAttribute("POWERPIVOT_HIGHLIGHT_SHOW_HIDDEN", "false", 'bool');
        this.RegisterAttribute("POWERPIVOT_HIGHLIGHT_CALCULATION_AREA", "false", 'bool');
        this.RegisterAttribute("FOCUS_COMP_ID_FOR_ACCESS_KEYS", "", 'string');
        this.RegisterAttribute("USE_RELATIVE_REFERENCES", "false", 'bool');
        this.RegisterAttribute("HIGHLIGHT_INSERT_TEXTBOX", "false", 'bool');
        this.RegisterAttribute("ATTACH_SUB_RIBBON_WITH_IDENTIFIER", "false", 'bool');
        //To identify which Group launcher event is called for id 531 
        this.RegisterAttribute("CHART_TOOLS_FORMAT_LAUNCHER_GROUP", null, 'string', true);

    },

    RegisterEvents: function () {

        //Events Registration..
        this.RegisterEvent(1, "Ribbon_Bold_Click", "Ribbon: Bold button clicked", false, false, "");
        this.RegisterEvent(2, "Ribbon_Center-Align_Click", "Ribbon: Center-Align button clicked", false, false, "");
        this.RegisterEvent(3, "Ribbon_Left-Align_Click", "Ribbon: Left-Align button clicked", false, false, "");
        this.RegisterEvent(4, "Ribbon_Styles pane launcher_Click", "Ribbon: Styles pane launcher clicked", false, false, "Component not yet developed");
        this.RegisterEvent(5, "Ribbon_Font Size 16_Click", "Ribbon: Font Size 16 clicked", false, false, "");
        this.RegisterEvent(6, "Ribbon_Open File_Click", "Ribbon: Open File is clicked", false, false, "");
        this.RegisterEvent(7, "Save_Click", "Save is clicked", false, false, "");
        this.RegisterEvent(8, "Close_Click", "Close is clicked", false, false, "");
        this.RegisterEvent(9, "Ribbon_SaveAs_Click", "Ribbon: SaveAs is clicked", false, false, "");
        this.RegisterEvent(10, "Ribbon_Clear_Click", "Ribbon: Clear is clicked", false, false, "");
        this.RegisterEvent(11, "Ribbon_Clear-Formats_Click", "Ribbon: Clear Formats is clicked", false, false, "");
        this.RegisterEvent(12, "Ribbon_Clear-Contents_Click", "Ribbon: Clear Contents is clicked", false, false, "");
        this.RegisterEvent(13, "Ribbon_Clear-All_Click", "Ribbon: Clear All is clicked", false, false, "");
        this.RegisterEvent(14, "CheckMark_Bullet_Click", "", false, false, "");
        this.RegisterEvent(20, "Ribbon_Insert_Text_From_File", "Ribbon: Text from file is clicked", false, false, "SIMS.Components.Common.InsertFileDialog");
        this.RegisterEvent(21, "Ribbon_Insert_Pictures_Click", "Ribbon: Pictures is clicked", false, false, "SIMS.Components.Common.SaveAsDialog");
        this.RegisterEvent(22, "Ribbon_PictureTools_Wrap_Tight_Click", "Ribbon: Wrap Tight is clicked", false, false, "");
        this.RegisterEvent(23, "Ribbon_PictureTools_Position_MoreLayoutOptions_Click: More layout options (position) is clicked", "", false, false, "SIMS.Components.Word.LayoutDialog");
        this.RegisterEvent(24, "Ribbon_Review_Spelling_Click: Spelling is clicked", "", false, false, "SIMS.Components.Excel.SpellingDialog");
        this.RegisterEvent(25, "Ribbon_PictureTools_Position_Click: Picture Position is clicked", "", false, false, "");
        this.RegisterEvent(26, "Ribbon_ArtisticEffects_PlasticWrap_Click: Plastic Wrap artistic effect is clicked", "", false, false, "");
        this.RegisterEvent(27, "Ribbon_ArtisticEffect_Options_Click: Artistic effect options is clicked", "", false, false, "SIMS.Components.Common.FormatPane");
        this.RegisterEvent(28, "Ribbon_WrapText_Click: Wrap text is clicked", "", false, false, "");
        this.RegisterEvent(29, "Ribbon_Fill_Series: Fill Series is clicked", "", false, false, "SIMS.Components.Excel.ExcelSeriesDlg");
        this.RegisterEvent(30, "Ribbon_Format_Autofit_ColumnWidth_Click: Autofit column width is clicked", "", false, false, "");
        this.RegisterEvent(31, "Ribbon_PictureEffect_Bevel_Divot_Click: Divot Bevel is clicked", "", false, false, "");
        this.RegisterEvent(32, "Ribbon_Design_PageBorder_Click: Page Borders is clicked", "", false, false, "SIMS.Components.Word.BordersShadingDialog");
        this.RegisterEvent(33, "Ribbon_Shape_DoubleWave_Click: Double Wave shape is clicked", "", false, false, "");
        this.RegisterEvent(34, "Ribbon_Borders_And_Shading_Click: Borders and Shading is clicked", "", false, false, "SIMS.Components.Word.BordersShadingDialog");
        this.RegisterEvent(35, "Ribbon_Size_Launcher: Size Launcher is clicked", "", false, false, "SIMS.Components.Word.LayoutDialog");
        this.RegisterEvent(36, "Margin_Dialog_Launcher: Margin_Size is clicked", "", false, false, "SIMS.Components.Word.PageSetupDialog");
        this.RegisterEvent(37, "Solid_Bullet_Click", "", false, false, "");
        this.RegisterEvent(38, "Bullets_Icon_Click", "", false, false, "");
        this.RegisterEvent(39, "Line_Spacing_1.0", "", false, false, "");

        this.RegisterEvent(41, "Ribbon_Clipboard", "Ribbon: Clipboard launcher clicked", false, false, "SIMS.Components.Excel.FormatCellDialog");
        this.RegisterEvent(42, "Ribbon_Font", "Ribbon: Font launcher clicked", false, false, "SIMS.Components.Excel.FormatCellDialog");
        this.RegisterEvent(43, "Ribbon_Paragraph", "Ribbon: Paragraph launcher clicked", false, false, "SIMS.Components.Excel.FormatCellDialog");
        this.RegisterEvent(44, "Ribbon_Alignment", "", false, false, "SIMS.Components.Excel.FormatCellDialog");
        this.RegisterEvent(45, "Ribbon_Number", "", false, false, "SIMS.Components.Excel.FormatCellDialog");
        this.RegisterEvent(46, "Ribbon_Charts", "", false, false, "SIMS.Components.Excel.InsertChart");
        this.RegisterEvent(47, "Ribbon_ScaleToFit", "", false, false, "SIMS.Components.Excel.PageSetupDialog");
        this.RegisterEvent(48, "Ribbon_SheetOptions", "", false, false, "SIMS.Components.Excel.PageSetupDialog");
        this.RegisterEvent(49, "Ribbon_PageSetup", "", false, false, "SIMS.Components.Excel.PageSetupDialog");
        this.RegisterEvent(50, "Column Width...", "", false, false, "SIMS.Components.Excel.ColWidthRowHeightDialog");
        this.RegisterEvent(51, "Insert Cells...", "", false, false, "SIMS.Components.Excel.CellInsertDeleteDialog");
        this.RegisterEvent(52, "Insert Sheet Rows", "", false, false, "");
        this.RegisterEvent(53, "Insert Sheet Columns", "", false, false, "");
        this.RegisterEvent(54, "Insert Sheet", "", false, false, "");
        this.RegisterEvent(55, "Delete Cells...", "", false, false, "SIMS.Components.Excel.CellInsertDeleteDialog");
        this.RegisterEvent(56, "Delete Sheet Rows", "", false, false, "");
        this.RegisterEvent(57, "Delete Sheet Columns", "", false, false, "");
        this.RegisterEvent(58, "Delete Sheet", "", false, false, "");
        this.RegisterEvent(59, "Font_Borders_MoreBorders", "", false, false, "");
        this.RegisterEvent(60, "Alignment_Middle", "", false, false, "");
        this.RegisterEvent(61, "Alignment_MergeNCenter", "", false, false, "");
        this.RegisterEvent(62, "Format_FormatCells", "", false, false, "SIMS.Components.Excel.FormatCellDialog");
        this.RegisterEvent(63, "Accounting Number Format", "", false, false, "");
        this.RegisterEvent(64, "Percent Style", "", false, false, "");
        this.RegisterEvent(65, "Comma Style", "", false, false, "");
        this.RegisterEvent(66, "Increase Decimal", "", false, false, "");
        this.RegisterEvent(67, "Decrease Decimal", "", false, false, "");
        this.RegisterEvent(68, "Select_All_Click", "", false, false, "");

        this.RegisterEvent(69, "Cell Styles: Title", "", false, false, "");
        this.RegisterEvent(70, "Cell Styles: Heading 1", "", false, false, "");
        this.RegisterEvent(71, "Cell Styles: Heading 4", "", false, false, "");
        this.RegisterEvent(72, "Cell Styles: Total", "", false, false, "");

        this.RegisterEvent(73, "Justify", "", false, false, "");

        this.RegisterEvent(74, "Font Size Changed", "", false, false, "");

        this.RegisterEvent(75, "Format Cell Alignment", "", false, false, "SIMS.Components.Excel.FormatCellDialog");

        this.RegisterEvent(78, "More Rotation Options - wrap text", "", false, false, "SIMS.Components.Word.LayoutDialog");
        this.RegisterEvent(79, "Size launcher", "", false, false, "");
        this.RegisterEvent(80, "More Borders", "", false, false, "SIMS.Components.Excel.FormatCellDialog");
        this.RegisterEvent(82, "Insert", "", false, false, "SIMS.Components.Excel.CellInsertDeleteDialog");

        this.RegisterEvent(84, "Delete", "", false, false, "SIMS.Components.Excel.CellInsertDeleteDialog");
        this.RegisterEvent(85, "Merge Across", "", false, false, "");
        this.RegisterEvent(86, "Merge Cells", "", false, false, "");
        this.RegisterEvent(87, "Unmerge Cells", "", false, false, "");
        this.RegisterEvent(88, "Picture effects options", "", false, false, "SIMS.Components.Common.FormatPane");

        this.RegisterEvent(89, "Number Format - General", "", false, false, "");
        this.RegisterEvent(90, "Number Format - Number", "", false, false, "");
        this.RegisterEvent(91, "Number Format - Currency", "", false, false, "");
        this.RegisterEvent(92, "Number Format - Short Date", "", false, false, "");
        this.RegisterEvent(93, "Number Format - Long Date", "", false, false, "");
        this.RegisterEvent(94, "Number Format - Time", "", false, false, "");
        this.RegisterEvent(95, "Number Format - Fraction", "", false, false, "");
        this.RegisterEvent(96, "Number Format - Scientific", "", false, false, "");
        this.RegisterEvent(97, "Number Format - Text", "", false, false, "");

        //From Country Specific Accounting Formats
        this.RegisterEvent(98, "English - United States", "", false, false, "");
        this.RegisterEvent(99, "More Accounting Formats...", "", false, false, "SIMS.Components.Excel.FormatCellDialog");

        this.RegisterEvent(100, "Cell Styles: Comma", "", false, false, "");
        this.RegisterEvent(101, "Cell Styles: Currency", "", false, false, "");
        this.RegisterEvent(102, "Shape layout", "", false, false, "SIMS.Components.Word.LayoutDialog");
        this.RegisterEvent(103, "Increase Indent", "", false, false, "");
        this.RegisterEvent(104, "Row Height...", "", false, false, "SIMS.Components.Excel.ColWidthRowHeightDialog");
        this.RegisterEvent(105, "hide columns", "", false, false, "");

        this.RegisterEvent(108, "arial narrow font clicked", "", false, false, "");
        this.RegisterEvent(109, "11 font size clicked", "", false, false, "");
        this.RegisterEvent(110, "blue shadow clicked", "", false, false, "");
        this.RegisterEvent(111, "below clicked", "", false, false, "");
        this.RegisterEvent(113, "font clicked", "", false, false, "");
        this.RegisterEvent(114, "Excel page setup dialog launch", "", false, false, "");
        this.RegisterEvent(115, "Excel potrait layout", "", false, false, "");
        this.RegisterEvent(116, "Excel Landscape Layout", "", false, false, "");
        this.RegisterEvent(117, "Print titles .. excel", "", false, false, "SIMS.Components.Excel.PageSetupDialog");
        this.RegisterEvent(118, "number dropdown..percent", "", false, false, "");
        this.RegisterEvent(119, "word font size 26 select", "", false, false, "");
        this.RegisterEvent(120, "Font 30 clicked", "", false, false, "");
        this.RegisterEvent(121, "More symbols clicked", "", false, false, "SIMS.Components.Word.InsertSymbolDialog");
        this.RegisterEvent(122, "Edit Footer", "", false, false, "");
        this.RegisterEvent(123, "Edit Header", "", false, false, "");
        this.RegisterEvent(124, "File Tab", "", false, false, "SIMS.Components.FileMenu.Excel");
        this.RegisterEvent(125, "Close Header and Footer", "", false, false, "");
        this.RegisterEvent(126, "Go to Footer", "", false, false, "");
        this.RegisterEvent(127, "Insert Document Info .. Filename", "", false, false, "");
        this.RegisterEvent(128, "Header and Footer .. insert field", "", false, false, "SIMS.Components.Word.FieldDialog");
        this.RegisterEvent(129, "Header and Footer .. quick parts", "", false, false, "");
        this.RegisterEvent(131, "Paste Value and Source Formatting", "", false, false, "");
        this.RegisterEvent(132, "Language prefernces clicked", "", false, false, "SIMS.Components.Word.WordOptionsDialog");
        this.RegisterEvent(133, "Excel Ribbon Copy Clicked", "", false, false, "");
        this.RegisterEvent(134, "Word ribbon font 22", "", false, false, "");
        this.RegisterEvent(135, "Word ribbon format shape pane launch", "", false, false, "");
        this.RegisterEvent(137, "Tracking launcher in review tab clicked", "", false, false, "SIMS.Components.Word.TrackChangesOptions");
        this.RegisterEvent(138, "Excel autosum", "", false, false, "");
        this.RegisterEvent(139, "view one page", "", false, false, "");
        this.RegisterEvent(140, "view 100%", "", false, false, "");
        this.RegisterEvent(141, "view.. zoom", "", false, false, "SIMS.Components.Word.ZoomDialog");
        this.RegisterEvent(142, "word cut", "", false, false, "");
        this.RegisterEvent(143, "format painter word", "", false, false, "");
        this.RegisterEvent(144, "Excel - Home - Fill - Flash Fill", "", false, false, "");
        this.RegisterEvent(145, "format painter double clicked", "", false, false, "");
        this.RegisterEvent(146, "Show/Hide (Ctrl+*) clicked", "", false, false, "");
        this.RegisterEvent(147, "mirrored clicked", "", false, false, "");
        this.RegisterEvent(148, "Paste clicked", "", false, false, "");
        this.RegisterEvent(149, "Flash Fill", "", false, false, "");
        this.RegisterEvent(150, "Increase Font Size clicked", "", false, false, "");
        this.RegisterEvent(151, "Show Formula", "", false, false, "");
        this.RegisterEvent(152, "line spacing 1.15", "", false, false, "");
        this.RegisterEvent(153, "Font Color Picked", "", false, false, "");
        this.RegisterEvent(154, "Shape Fill Color Picked", "", false, false, "");
        this.RegisterEvent(155, "Shape Outline Color Picked", "", false, false, "");
        this.RegisterEvent(156, "Text Outline COlor Picked", "", false, false, "");
        this.RegisterEvent(157, "Para Spacing After", "", false, false, "");
        this.RegisterEvent(158, "Page break clicked", "", false, false, "");
        this.RegisterEvent(161, "Format pane- More Lines ", "", false, false, "SIMS.Components.Common.FormatPane");
        this.RegisterEvent(162, "Format pane- Shadow ", "", false, false, "SIMS.Components.Common.FormatPane");
        this.RegisterEvent(163, "Format pane- Reflection ", "", false, false, "SIMS.Components.Common.FormatPane");
        this.RegisterEvent(164, "Format pane- Glow ", "", false, false, "SIMS.Components.Common.FormatPane");
        this.RegisterEvent(165, "Format pane- Gradiant ", "", false, false, "SIMS.Components.Common.FormatPane");
        this.RegisterEvent(166, "Excel -Format -Rename sheets ", "", false, false, "");
        this.RegisterEvent(167, "Word drawing tools - 3d text options", "", false, false, "SIMS.Components.Common.FormatPane");
        this.RegisterEvent(168, "Word drawing tools - format shape - shape fill", "", false, false, "SIMS.Components.Common.FormatPane");
        this.RegisterEvent(169, "Word drawing tools - format shape - shape outline", "", false, false, "SIMS.Components.Common.FormatPane");
        this.RegisterEvent(170, "Word drawing tools - format shape - shape 3d options", "", false, false, "SIMS.Components.Common.FormatPane");
        this.RegisterEvent(171, "Word drawing tools - format shape - shape shadow options", "", false, false, "SIMS.Components.Common.FormatPane");
        this.RegisterEvent(172, "Word drawing tools - format shape - shape reflection options", "", false, false, "SIMS.Components.Common.FormatPane");
        this.RegisterEvent(173, "Word drawing tools - format shape - shape glow options", "", false, false, "SIMS.Components.Common.FormatPane");
        this.RegisterEvent(174, "Word drawing tools - format shape - shape soft edges options", "", false, false, "SIMS.Components.Common.FormatPane");
        this.RegisterEvent(175, "line spacing 1.5", "", false, false, "");
        this.RegisterEvent(176, "Different first page_header tab", "", false, false, "");
        this.RegisterEvent(177, "quick print", "", false, false, "");
        this.RegisterEvent(178, "Excel - thick box border applied", "", false, false, "");
        this.RegisterEvent(179, "QAT_More commands clicked", "", false, false, "SIMS.Components.Excel.OptionsDialog");
        this.RegisterEvent(180, "Excel - insert function", "", false, false, "SIMS.Components.Excel.InsertFunctionDialog");
        this.RegisterEvent(181, "Track Changes - Add To Quick Access Toolbar", "", false, false, "");
        this.RegisterEvent(182, "Remove from Quick Access Toolbar", "", false, false, "");
        this.RegisterEvent(183, "Insert function - all", "", false, false, "SIMS.Components.Excel.InsertFunctionDialog");
        this.RegisterEvent(184, "Insert function - recently used", "", false, false, "SIMS.Components.Excel.InsertFunctionDialog");
        this.RegisterEvent(185, "Insert function - financial", "", false, false, "SIMS.Components.Excel.InsertFunctionDialog");
        this.RegisterEvent(186, "Insert function - logical", "", false, false, "SIMS.Components.Excel.InsertFunctionDialog");
        this.RegisterEvent(187, "Insert function - text", "", false, false, "SIMS.Components.Excel.InsertFunctionDialog");
        this.RegisterEvent(188, "Insert function - date time", "", false, false, "SIMS.Components.Excel.InsertFunctionDialog");
        this.RegisterEvent(189, "Insert function - lookup reference", "", false, false, "SIMS.Components.Excel.InsertFunctionDialog");
        this.RegisterEvent(190, "Insert function - math trig", "", false, false, "SIMS.Components.Excel.InsertFunctionDialog");
        this.RegisterEvent(191, "Insert function - statistical", "", false, false, "SIMS.Components.Excel.InsertFunctionDialog");
        this.RegisterEvent(192, "Insert function - engineering", "", false, false, "SIMS.Components.Excel.InsertFunctionDialog");
        this.RegisterEvent(193, "Insert function - cube", "", false, false, "SIMS.Components.Excel.InsertFunctionDialog");
        this.RegisterEvent(194, "Function - NOW", "", false, false, "SIMS.Components.Excel.NowFuncArgDialog");
        this.RegisterEvent(195, "Insert Function - Information", "", false, false, "SIMS.Components.Excel.InsertFunctionDialog");
        this.RegisterEvent(196, "Insert Function - Compatibility", "", false, false, "SIMS.Components.Excel.InsertFunctionDialog");
        this.RegisterEvent(197, "Insert Function - Web", "", false, false, "SIMS.Components.Excel.InsertFunctionDialog");
        this.RegisterEvent(198, "Tab Color Picked", "", false, false, "");
        this.RegisterEvent(199, "Excel - Recently used - Sum", "", false, false, "SIMS.Components.Excel.SumFuncArgDialog");
        this.RegisterEvent(200, "Excel - Paste - Formulas", "", false, false, "");
        this.RegisterEvent(201, "Excel - Paste - Formulas and number formatting", "", false, false, "");
        this.RegisterEvent(202, "Excel - Paste - Keep source formatting", "", false, false, "");
        this.RegisterEvent(203, "Excel - Paste - No borders", "", false, false, "");
        this.RegisterEvent(204, "Excel - Paste - keep source column widths", "", false, false, "");
        this.RegisterEvent(205, "Excel - Paste - Paste Special", "", false, false, "SIMS.Components.Excel.PasteSpecialDialog");
        this.RegisterEvent(206, "Excel - Fill Down", "", false, false, "");
        this.RegisterEvent(207, "Save", "", false, false, "");
        this.RegisterEvent(208, "Excel- No Fill", "", false, false, "");
        this.RegisterEvent(209, "Excel - Home - Fill - Right", "", false, false, "");
        this.RegisterEvent(210, "Excel - Formulas -  MathTrig - Product", "", false, false, "SIMS.Components.Excel.SumFuncArgDialog");
        this.RegisterEvent(211, "Excel - Home - Format - Move/Copy sheet", "", false, false, "SIMS.Components.Excel.MoveSheetDialog");
        this.RegisterEvent(212, "Word - Picture tools format - artistic effects options", "", false, false, "SIMS.Components.Common.FormatPane");
        this.RegisterEvent(213, "Word - Picture tools format - 3d rotation options", "", false, false, "SIMS.Components.Common.FormatPane");
        this.RegisterEvent(214, "Word - Picture styles launcher", "", false, false, "SIMS.Components.Common.FormatPane");
        this.RegisterEvent(215, "Word-Page Bakground-Watermark-Custom Watermark", "", false, false, "SIMS.Components.Word.PrintedWatermarkDialog");
        this.RegisterEvent(216, "Word-Page Bakground-Watermark-Sample1", "", false, false, "");
        this.RegisterEvent(217, "Excel - Average Function applied from Autosum subitems", "", false, false, "");
        this.RegisterEvent(218, "Excel - Median Function", "", false, false, "SIMS.Components.Excel.SumFuncArgDialog");
        this.RegisterEvent(219, "Word-Drawing tools tab-Shape styles-2nd style in last row", "", false, false, "");
        this.RegisterEvent(220, "Word-Drawing tools tab-Shape Effects-3rd style in 3rd row-Offset Diagonal Top Left.", "", false, false, "");
        this.RegisterEvent(221, "Insert Sparklines - Line", "", false, false, "SIMS.Components.Excel.CreateSparklinesDlg");
        this.RegisterEvent(222, "Sparklines - Edit Data", "", false, false, "SIMS.Components.Excel.CreateSparklinesDlg");
        this.RegisterEvent(223, "Sparklines - Markers Checkbox", "", false, false, "");
        this.RegisterEvent(224, "Excel - Page Layout - Set Print Area", "", false, false, "");
        this.RegisterEvent(225, "Word - Page Setup - Scale", "", false, false, "");
        this.RegisterEvent(226, "Word - Insert tab - Online video clicked", "", false, false, "SIMS.Components.Word.InsertVideoDialog");
        this.RegisterEvent(227, "Word - Picture tools format tab - Shape height up spin clicked", "", false, false, "");
        this.RegisterEvent(228, "Word - Page setup dialog with margins tab", "", false, false, "SIMS.Components.Excel.PageSetupDialog");
        this.RegisterEvent(229, "Word - Page setup dialog launched with layout tab", "", false, false, "SIMS.Components.Excel.PageSetupDialog");
        this.RegisterEvent(230, "Word - Review Tab- spelling Grammer check", "", false, false, "SIMS.Components.Common.SpellingGrammarPane");
        this.RegisterEvent(231, "Excel - Average formula applied from Statistical formulas or Recently used list.", "", false, false, "SIMS.Components.Excel.SumFuncArgDialog");


        this.RegisterEvent(232, "Word  - DESIGN   MORE STYLE", "", false, false, "");
        this.RegisterEvent(233, "Word - Review Tab- define", "", false, false, "SIMS.Components.Common.SpellingGrammarPane");
        this.RegisterEvent(234, "Word - Review Tab- thesauruas", "", false, false, "SIMS.Components.Common.SpellingGrammarPane");
        this.RegisterEvent(235, "Excel - Autosum - Min", "", false, false, "");
        this.RegisterEvent(236, "Excel - Autosum - Max", "", false, false, "");
        this.RegisterEvent(237, "Excel - Statistical - Min", "", false, false, "SIMS.Components.Excel.SumFuncArgDialog");
        this.RegisterEvent(238, "Excel - Statistical - Max", "", false, false, "SIMS.Components.Excel.SumFuncArgDialog");
        this.RegisterEvent(239, "Excel - Statistical - Mina", "", false, false, "SIMS.Components.Excel.SumFuncArgDialog");
        this.RegisterEvent(240, "Excel - Statistical - Maxa", "", false, false, "SIMS.Components.Excel.SumFuncArgDialog");
        this.RegisterEvent(241, "Word-Picture tools tab-Shape height spin", "", false, false, "");
        this.RegisterEvent(242, "Word-Picture tools tab-Shape width spin", "", false, false, "");
        this.RegisterEvent(243, "Word-Home-Font SIze", "", false, false, "");
        this.RegisterEvent(244, "Word-Drawing tools tab-Shape height spin", "", false, false, "");
        this.RegisterEvent(245, "Word-Drawing tools tab-Shape width spin", "", false, false, "");
        this.RegisterEvent(246, "Word-Drawing tools tab-WordArt Styles group-Text outline-Weight-More lines", "", false, false, "SIMS.Components.Common.FormatPane");
        this.RegisterEvent(247, "Word-Insert-Draw Text Box", "", false, false, "");
        this.RegisterEvent(248, "Excel - theme - wisp", "", false, false, "");
        this.RegisterEvent(249, "Excel - themecolor - blue warm", "", false, false, "");
        this.RegisterEvent(250, "QAT - customize ribbon", "", false, false, "SIMS.Components.Excel.OptionsDialog");
        this.RegisterEvent(251, "Word - Shapes DropDown- Draw Text Box", "", false, false, "");
        this.RegisterEvent(252, "Word - Artistic effects - Paint Brush", "", false, false, "");
        this.RegisterEvent(253, "Word - Picture tools tab - Picture effects - Soft Edges option- 5 Point", "", false, false, "");
        this.RegisterEvent(254, "Word - Picture tools tab,Page layout tab - Wrap text-Square", "", false, false, "");
        this.RegisterEvent(255, "Word - Close button clicked", "", false, false, "");
        this.RegisterEvent(256, "Excel - Sparkline Tools Design - Styles - index 34", "", false, false, "");
        this.RegisterEvent(257, "Excel - Chart - Chart Title Above Chart", "", false, false, "");
        this.RegisterEvent(258, "Excel - Chart - Change colors index 3", "", false, false, "");
        this.RegisterEvent(259, "Excel - Chart - Chart Styles index 3", "", false, false, "");
        this.RegisterEvent(260, "Excel - Insert - Recommended Charts", "", false, false, "SIMS.Components.Excel.InsertChart");
        this.RegisterEvent(261, "Excel - Chart - Area - More chart areas", "", false, false, "SIMS.Components.Excel.InsertChart");
        this.RegisterEvent(262, "Excel - Chart - Bar charts - more bar charts", "", false, false, "SIMS.Components.Excel.InsertChart");
        this.RegisterEvent(263, "Excel - Chart - Bubble charts - more scatter charts", "", false, false, "SIMS.Components.Excel.InsertChart");
        this.RegisterEvent(264, "Excel - Chart - column charts - more column charts", "", false, false, "SIMS.Components.Excel.InsertChart");
        this.RegisterEvent(265, "Excel - Chart - combo charts - more combo charts", "", false, false, "SIMS.Components.Excel.InsertChart");
        this.RegisterEvent(266, "Excel - Chart - line charts - more line charts", "", false, false, "SIMS.Components.Excel.InsertChart");
        this.RegisterEvent(267, "Excel - Chart - pie charts - more pie charts", "", false, false, "SIMS.Components.Excel.InsertChart");
        this.RegisterEvent(268, "Excel - Chart - pivot charts - more pivot charts", "", false, false, "");
        this.RegisterEvent(269, "Excel - Chart - Stock charts - more stock charts", "", false, false, "SIMS.Components.Excel.InsertChart");
        this.RegisterEvent(270, "Word- smartart format- size- height ", "", false, false, "");
        this.RegisterEvent(271, "Word- smartart format- size- width", "", false, false, "");
        this.RegisterEvent(272, "Word- smartart design- change colors - colorful range - accent colors 2 to 3", "", false, false, "");
        this.RegisterEvent(273, "Word- smartart design- flat- 3D", "", false, false, "");
        this.RegisterEvent(274, "Word-Insert- smartart clicked", "", false, false, "SIMS.Components.Word.SmartArtDialog");
        this.RegisterEvent(275, "Word-Page layout-Para Spacing Before", "", false, false, "");
        this.RegisterEvent(276, "Excel - Page layout - theme colors - green", "", false, false, "");
        this.RegisterEvent(277, "Excel - Page layout - themes - retrospect", "", false, false, "");
        this.RegisterEvent(278, "Word - SmartArt design tab-Text pane clicked", "", false, false, "");
        this.RegisterEvent(279, "Word - Insert - Shapes - Recently Used - Text Box", "", false, false, "");
        this.RegisterEvent(280, "Word - QAT - Spelling & Grammar clicked", "", false, false, "SIMS.Components.Common.SpellingGrammarPane");
        this.RegisterEvent(281, "Word - QAT - Print Preview and Print clicked", "", false, false, "");
        this.RegisterEvent(282, "Word- smartart design- change colors - colorful range - accent colors 4 to 5", "", false, false, "");
        this.RegisterEvent(283, "Word- smartart design- inset- 3D", "", false, false, "");
        this.RegisterEvent(284, "Word insert shape rectangle", "", false, false, "");
        this.RegisterEvent(285, "Excel - Chart - Chart Styles index 6", "", false, false, "");
        this.RegisterEvent(286, "Word - Page layout tab - Margins-Narrow mragins clicked", "", false, false, "");
        this.RegisterEvent(287, "Excel - Sparkline Design Tools - Sparkline Styles - Gallery control item index 10", "", false, false, "");
        this.RegisterEvent(288, "Word - Insert - Shapes - Recently Used - rectangle", "", false, false, "");
        this.RegisterEvent(289, "Excel - Home - Styles - Cell Styles - Themed Cell styles - 40% Accent 1 ", "", false, false, "");
        this.RegisterEvent(290, "Word - Home - Text Effects - Fill - Black, Text 1, Outline - Background 1, Hard Shadow - Background 1", "", false, false, "");
        this.RegisterEvent(291, "Word - Home - Text Effects - Shadow - outer -offset left", "", false, false, "");
        this.RegisterEvent(292, "Word-Drawing tools tab-Shape styles-3rd style in the first row", "", false, false, "");
        this.RegisterEvent(293, "Word-Drawing tools tab-Shape Outer, Offset Diagonal Bottom Right shadow—in the first row, the first style.", "", false, false, "");
        this.RegisterEvent(294, "Add to QAT clicked in Default Context menu in Ribbon", "", false, false, "");
        this.RegisterEvent(295, "Number format changed", "", false, false, "");
        this.RegisterEvent(296, "Excel - Page layout - Scale to fit - Width changed", "", false, false, "");
        this.RegisterEvent(297, "Excel - Home-Styles-Themed Cell Styles-20% Accent1", "", false, false, "");
        this.RegisterEvent(298, "Excel - Formulas - Logical/Recently used - IF", "", false, false, "");
        this.RegisterEvent(299, "Excel - Clipboard-format painter", "", false, false, "");
        this.RegisterEvent(300, "Excel - INSERT-Sparklines-Column", "", false, false, "");
        this.RegisterEvent(301, "Excel - SPARKLINE TOOLS DESIGN tab-Style -Accent 4, (no dark or light)", "", false, false, "");
        this.RegisterEvent(302, "Excel - formulas-date _and_time-today", "", false, false, "");
        this.RegisterEvent(303, "Word - Home-Paragraph-Decrease Indent ", "", false, false, "");
        this.RegisterEvent(304, "Word -Insert-Text-Date and Time event", "", false, false, "SIMS.Components.Word.DateTimeDialog");
        this.RegisterEvent(305, "Excel - Formula - Lookup and Reference - VLOOKUP", "", false, false, "");
        this.RegisterEvent(306, "Excel - Formula - Financial - PMT", "", false, false, "");
        this.RegisterEvent(307, "Excel - Formula/Home - Autosum - Count numbers", "", false, false, "");
        this.RegisterEvent(308, "Word - View- SHow -Ruler", "", false, false, "");
        this.RegisterEvent(309, "Word -Home-Paragraph group-Numbering dropdown-2nd option event", "", false, false, "");
        this.RegisterEvent(310, "Word -Home-Paragraph group-Numbering dropdown-3rd option event", "", false, false, "");
        this.RegisterEvent(311, "Word -Design-Themes dropdown-5th option(Ion Boardroom) option event", "", false, false, "");
        this.RegisterEvent(313, "Word -Design-Themes dropdown-6th option(Organic) option event", "", false, false, "");
        this.RegisterEvent(312, "Word -Design-Colors dropdown-6th option (Blue II) event", "", false, false, "");
        this.RegisterEvent(315, "Word - Page Layout tab - Left Indent spin", "", false, false, "");
        this.RegisterEvent(314, "Word -Design-Colors dropdown-(Violet II) event", "", false, false, "");
        this.RegisterEvent(316, "Word -Home-Paragraph- Align Right", "", false, false, "");
        this.RegisterEvent(317, "Word -Home-Paste dropdown- Paste Special clicked", "", false, false, "SIMS.Components.Word.WordPasteSpecialDialog");
        this.RegisterEvent(318, "Word -Home-SElect All dropdown- Selection Pane clicked", "", false, false, "Component not yet developed");    //Replace with Actual component name when it will be developed
        this.RegisterEvent(319, "Word -Insert- Links-Hyperlink", "", false, false, "Component not yet developed");
        this.RegisterEvent(320, "Word -Review -Proofing- Word Count", "", false, false, "Component not yet developed");
        this.RegisterEvent(321, "Word -Review- Language -Translate- Choose Translational Language", "", false, false, "Component not yet developed");
        this.RegisterEvent(322, "Word -Insert- Links-Bookmark", "", false, false, "Component not yet developed");
        this.RegisterEvent(323, "Word -Review- TRacking -Review Pane", "", false, false, "Component not yet developed");
        this.RegisterEvent(324, "Word-Insert-Charts", "", false, false, "Component not yet developed");
        this.RegisterEvent(325, "Word -Insert- Links-Cross Reference", "", false, false, "Component not yet developed");
        this.RegisterEvent(326, "Word -Insert- Illustrations-Online pictures", "", false, false, "Component not yet developed");
        this.RegisterEvent(327, "Word -Insert- Apps-See all", "", false, false, "Component not yet developed");
        this.RegisterEvent(328, "Word -Insert- Word Art-Fill - Plum, Accent 1, Shadow (row 1, column 2)", "", false, false, "");
        this.RegisterEvent(329, "Word -Picture tools format,Page layout tab- wrap text- top and bottom", "", false, false, "");
        this.RegisterEvent(330, "Word - View tab-Navigation Pane check box clicked", "", false, false, "");
        this.RegisterEvent(331, "Word -Design-Paragraph spacing-No paragraph spacing clicked", "", false, false, "");
        this.RegisterEvent(332, "Excel - Formula - Defined names - Name Manager", "", false, false, "Component not yet developed");
        this.RegisterEvent(333, "Excel - Formula - Define name", "", false, false, "Component not yet developed");
        this.RegisterEvent(334, "Excel - Formula - Use in formula - Paste names", "", false, false, "Component not yet developed");
        this.RegisterEvent(335, "Word -Picture Tools Format-Arrange- rotate- Rotate Right 90", "", false, false, "");
        this.RegisterEvent(336, "Word -Picture Tools Format-Style- Drop Shadow Rectangle", "", false, false, "");
        this.RegisterEvent(337, "Word -Picture Tools Format-Style- Soft Edge Rectangle", "", false, false, "");
        this.RegisterEvent(338, "Word -Table Tools Layout- Cell Size - Width", "", false, false, "");
        this.RegisterEvent(339, "Word -Table Tools Layout- Cell Size - Autofit- Autofit Window", "", false, false, "");
        this.RegisterEvent(340, "Word -Table Tools Layout- Cell Size - Cell Size Launcher", "Ribbon: Table Properties Clicked", false, false, "");
        this.RegisterEvent(341, "Excel - Formula - More Functions - Statistical - COUNTIF", "Ribbon: COUNTIF clicked", false, false, "");
        this.RegisterEvent(342, "Excel - table tools format - convert to range", "Ribbon: convert to range Clicked", false, false, "");
        this.RegisterEvent(343, "Excel - Home - Editing - Find and replace - Find", "", false, false, "");
        this.RegisterEvent(344, "Excel - Home - Editing - Find and replace - Replace", "", false, false, "");
        this.RegisterEvent(345, "Word - Review Tab - Mailings clicked", "", false, false, "");
        this.RegisterEvent(346, "Word - Home - Editing - - Find", "", false, false, "SIMS.Components.Word.NavigationPane");
        this.RegisterEvent(347, "Word - Home - Editing - Find-Find", "", false, false, "SIMS.Components.Word.NavigationPane");
        this.RegisterEvent(348, "Word - Home - Editing - Find-Advanced Find", "", false, false, "SIMS.Components.Word.FindAndReplaceDialog");
        this.RegisterEvent(349, "Word - Home - Editing - Find-Go to", "", false, false, "SIMS.Components.Word.FindAndReplaceDialog");
        this.RegisterEvent(350, "Word - Home - Editing - Replace", "", false, false, "SIMS.Components.Word.FindAndReplaceDialog");
        this.RegisterEvent(351, "Word - Picture Tools Format Tab - Adjust- Corrections - Brightness- Brightness: +20% Contrast: 0%", "", false, false, "");
        this.RegisterEvent(352, "Word - Picture Tools Format Tab - Adjust- Corrections - Brightness- Brightness: 0% Contrast: +20%", "", false, false, "");
        this.RegisterEvent(353, "Excel - View Tab - Zoom clicked", "", false, false, "SIMS.Components.Excel.ZoomDialog");
        this.RegisterEvent(354, "Word -Table Tools Layout- Cell Size - Autofit- Autofit Contents", "", false, false, "");
        this.RegisterEvent(355, "Word - Home- Font Name", "", false, false, "");
        this.RegisterEvent(356, "Word - Home- Font Name- Times New Roman ", "", false, false, "");
        this.RegisterEvent(357, "Word - Home- Font Size- 12 ", "", false, false, "");
        this.RegisterEvent(358, "Word - Home- Text Effects and Typography- Row3,column3 ", "", false, false, "");
        this.RegisterEvent(359, "Excel - Formulas - More Functions - Statistical - COUNTIFS ", "", false, false, "");
        this.RegisterEvent(360, "Word- Home- Font- Italics ", "", false, false, "");
        this.RegisterEvent(361, "Excel - Home-Styles-Themed Cell Styles-20% Accent2", "", false, false, "");
        this.RegisterEvent(362, "Word - Home-Paragraph-Bullet- Hollow Round Bullet", "", false, false, "");
        this.RegisterEvent(363, "Word - Home-Paragraph-Bullet- Arrow Bullet", "", false, false, "");
        this.RegisterEvent(364, "Word - Home-Paragraph-Bullet- Define New Bullet", "", false, false, "");
        this.RegisterEvent(365, "Word - Home-Paragraph-Numbering", "", false, false, "");
        this.RegisterEvent(366, "Excel - View - Workbook Views - Normal", "", false, false, "");
        this.RegisterEvent(367, "Excel - View - Workbook Views - Page Break Preview", "", false, false, "");
        this.RegisterEvent(368, "Excel - View - Workbook Views - Page Layout", "", false, false, "");
        this.RegisterEvent(369, "Excel - View - Workbook Views - Custom Views", "", false, false, "");
        this.RegisterEvent(370, "Excel - Home - Styles - Equal To", "", false, false, "");
        this.RegisterEvent(371, "Excel - Home - Styles - Text That contains", "", false, false, "");
        this.RegisterEvent(372, "Excel - Home - Styles - Orange Bar", "", false, false, "");
        this.RegisterEvent(373, "Excel - Home - Styles - Red Bar", "", false, false, "");
        this.RegisterEvent(374, "Word - Page Layout - Page Setup - Columns- Two", "", false, false, "");
        this.RegisterEvent(375, "Word - Page Layout - Page Setup - Columns- More Columns", "", false, false, "");
        this.RegisterEvent(376, "Excel - View - Windows - Freeze panes - Freeze/Unfreeze", "", false, false, "");
        this.RegisterEvent(377, "Word - Design -Document Formatting - Styles- Lines", "", false, false, "");
        this.RegisterEvent(378, "Word - Design -Document Formatting - Styles- Minimallist", "", false, false, "");
        this.RegisterEvent(379, "Word - Outlining - Outline Tools- Move Up", "", false, false, "");
        this.RegisterEvent(380, "Word - Outlining - Outline Tools- Move Down", "", false, false, "");
        this.RegisterEvent(381, "Word - Outlining - Outline Tools- Expand", "", false, false, "");
        this.RegisterEvent(382, "Word - Outlining - Outline Tools- Collapse", "", false, false, "");
        this.RegisterEvent(383, "Word - View - Views Outline", "", false, false, "");
        this.RegisterEvent(384, "Word - outlining - Show Level- Level 3", "", false, false, "");
        this.RegisterEvent(385, "Word - Home - Paste- Keep SOurce formatting", "", false, false, "");
        this.RegisterEvent(386, "Word - outlining - close outline view", "", false, false, "");
        this.RegisterEvent(387, "Word - view - Print view", "", false, false, "");
        this.RegisterEvent(388, "Excel - Insert - Tables - PivotTable", "", false, false, "");
        this.RegisterEvent(389, "Excel - Insert - Tables - Recommended Pivot Table", "", false, false, "");
        this.RegisterEvent(390, "Excel - Insert - Tables - Table", "", false, false, "");
        this.RegisterEvent(391, "Excel - Page Layout - Themes - Slice", "", false, false, "");
        this.RegisterEvent(392, "Excel - Page Layout - Themes - Celestial", "", false, false, "");
        this.RegisterEvent(393, "Excel - View - Window - Split", "", false, false, "");
        this.RegisterEvent(394, "Excel - Sort A to Z", "", false, false, "");
        this.RegisterEvent(395, "Excel - HOME - Editting - Sort Z to A", "", false, false, "");
        this.RegisterEvent(396, "Excel - Custom Sort", "", false, false, "");
        this.RegisterEvent(397, "Excel - Formula - Define Name - Name manager", "", false, false, "");
        this.RegisterEvent(398, "Word - Table Tools Layout -Rows and columns- Insert Above", "", false, false, "");
        this.RegisterEvent(399, "Word - Table Tools Layout -Merge- Merge Cells", "", false, false, "");
        this.RegisterEvent(400, "Excel - Formula - Define Name", "", false, false, "");
        this.RegisterEvent(401, "Word - Table Tools Design -Borders-No Border", "", false, false, "");
        this.RegisterEvent(402, "Excel - SPARKLINE TOOLS DESIGN tab-Style -Accent 2, (no dark or light)", "", false, false, "");
        this.RegisterEvent(403, "Excel - Table Style Light 16", "", false, false, "");
        this.RegisterEvent(404, "Excel - Table Style Medium 2", "", false, false, "");
        this.RegisterEvent(405, "Word - outlining - Show Level- Level 1", "", false, false, "");
        this.RegisterEvent(406, "Excel - Formula - Define Name - use in formula - first item", "", false, false, "");
        this.RegisterEvent(407, "Excel - Undo Button clicked", "", false, false, "");
        this.RegisterEvent(408, "Excel - Item Clicked in Undo Dropdown", "", false, false, "");
        this.RegisterEvent(409, "Word - Insert - Tables - Table - Table grid item clicked", "", false, false, "");
        this.RegisterEvent(410, "Word - Home - Styles - Heading 1", "", false, false, "");
        this.RegisterEvent(411, "Word - Table Tools Layout -Select-Select Cell", "", false, false, "");
        this.RegisterEvent(412, "Word - Table Tools Layout -Select-Select Table", "", false, false, "");
        this.RegisterEvent(413, "Word - Insert tab-Table dropdown-Insert table clicked", "", false, false, "");
        this.RegisterEvent(414, "Word - Table Tools Design -Table styles-Table grid clicked", "", false, false, "");
        this.RegisterEvent(415, "Excel - Formula - Use in Formula - Item", "", false, false, "");
        this.RegisterEvent(416, "Excel - Formula - Use in Formula - Paste Names", "", false, false, "");
        this.RegisterEvent(417, "Word - Present Online - End Online Presentation", "", false, false, "");
        this.RegisterEvent(418, "Word - Table Tools Layout -Properties clicked", "", false, false, "");
        this.RegisterEvent(419, "Word - Table Tools Design -Borders-Bottom Border", "", false, false, "");
        this.RegisterEvent(420, "Word - Home - Styles - Heading 2", "", false, false, "");
        this.RegisterEvent(421, "Word - Home - Styles - Heading 3", "", false, false, "");
        this.RegisterEvent(422, "Word - Home - Styles - Apply Styles", "", false, false, "");
        this.RegisterEvent(423, "Excel - Table Tools Design - Table Style Options- Total Rows", "", false, false, "");
        this.RegisterEvent(424, "Excel - HOME - Conditional Formatting - Highlight Cell Rules - More Rules", "", false, false, "SIMS.Components.Excel.ConditionalFormattingRulesManagerDialog");
        this.RegisterEvent(425, "Excel - HOME - Conditional Formatting - Top/Bottom Rules - More Rules", "", false, false, "SIMS.Components.Excel.ConditionalFormattingRulesManagerDialog");
        this.RegisterEvent(426, "Excel - HOME - Conditional Formatting - Data Bars - More Rules", "", false, false, "SIMS.Components.Excel.ConditionalFormattingRulesManagerDialog");
        this.RegisterEvent(427, "Excel - HOME - Conditional Formatting - Color Scales - More Rules", "", false, false, "SIMS.Components.Excel.ConditionalFormattingRulesManagerDialog");
        this.RegisterEvent(428, "Excel - HOME - Conditional Formatting - Icon Sets - More Rules", "", false, false, "SIMS.Components.Excel.ConditionalFormattingRulesManagerDialog");
        this.RegisterEvent(429, "Excel - HOME - Conditional Formatting - Manage Rules", "", false, false, "SIMS.Components.Excel.ConditionalFormattingRulesManagerDialog");
        this.RegisterEvent(430, "Excel - HOME - Conditional Formatting - New Rule", "", false, false, "SIMS.Components.Excel.NewFormattingRuleDialog.NewRuleDialog");
        this.RegisterEvent(431, "Excel - Header and Footer Tools - Header and Footer Elements - File Name", "", false, false, "");
        this.RegisterEvent(432, "Excel - HOME - Conditional Formatting - Data Bars - Red Data Bars", "", false, false, "");
        this.RegisterEvent(433, "Word - Table Tools Layout -Select-Select Row", "", false, false, "");
        this.RegisterEvent(434, "Excel - Table Tools Design - Table Styles - Table Style Light 10", "", false, false, "");
        this.RegisterEvent(435, "Word - Insert Tab - Illustrations - Insert Screenshot", "", false, false, "");
        this.RegisterEvent(436, "Word - Insert Tab - Pages - Blank Page", "", false, false, "");
        this.RegisterEvent(437, "Word - Insert Tab - Pages - Page Break", "", false, false, "");
        this.RegisterEvent(438, "Word - Page Layout Tab - Page Setup - Break", "", false, false, "");
        this.RegisterEvent(439, "Word - Header and Footer Design Tab - Header and Footer - Page Number - Current Position - Plain Number", "", false, false, "");
        this.RegisterEvent(440, "Excel - Data Tab - Data Tools - What if Analysis - Goal Seek", "", false, false, "");
        this.RegisterEvent(441, "Excel - Home tab - Styles - Number Format - Currency[0]", "", false, false, "");
        this.RegisterEvent(442, "Excel - Home tab - Styles - Themed Styles - Accent 4", "", false, false, "");
        this.RegisterEvent(443, "Excel - Home tab - Clipboard - Paste - Value & Number formatting", "", false, false, "");
        this.RegisterEvent(444, "Word - Pictures Tools tab - Adjust - Paste - Corrections-Brightness: -40% Contrast: +40%", "", false, false, "");
        this.RegisterEvent(445, "Word - Home tab - Paragraph - Paste -line and spacing-2.0", "", false, false, "");
        this.RegisterEvent(446, "Word - View tab - Views - Read Mode", "", false, false, "");
        this.RegisterEvent(447, "Word - Reference tab - Citations and Bibliography - Bibliography - Insert Bibliography", "", false, false, "");
        this.RegisterEvent(448, "Word - Reference tab - Citations and Bibliography - Insert Citation - Add New Source", "", false, false, "");
        this.RegisterEvent(449, "Word - Reference tab - Citations and Bibliography - Bibliography Style - APA", "", false, false, "");
        this.RegisterEvent(450, "Word - Reference tab - Citations and Bibliography - Manage Sources", "", false, false, "");
        this.RegisterEvent(451, "Word - Reference tab - Footnotes Launcher clicked", "", false, false, "");
        this.RegisterEvent(452, "Word - Reference tab - Footnotes - Insert Footnote", "", false, false, "");
        this.RegisterEvent(457, "Word - Picture Tools Format tab - Picture Styles - Picture Border", "", false, false, "");
        this.RegisterEvent(453, "Excel - Chart Tools Design - Data - Select Data", "", false, false, "");
        this.RegisterEvent(454, "Excel - Insert Tab Pie  - chart - Select Data", "", false, false, "");
        this.RegisterEvent(455, "Excel - Insert Tab Pie  - chart  - Select Data", "", false, false, "");
        this.RegisterEvent(456, "Excel - Chart Tools Design - Data - Select Data", "", false, false, "");
        this.RegisterEvent(461, "Word - Pictures Tools tab/Page Layout Tab-Arrange-Rotate -flip horizontal", "", false, false, "");
        this.RegisterEvent(463, "Word - Pictures Tools tab-Picture Styles-Picture Border-weight-1.5pt", "", false, false, "");
        this.RegisterEvent(464, "Word - Pictures Tools tab-Picture Styles-Picture Border-weight-3pt", "", false, false, "");
        this.RegisterEvent(465, "Word - Pictures Tools tab-Adjust-Set Transparent Color", "", false, false, "");
        this.RegisterEvent(467, "Word - Pictures Tools tab-Adjust-Recolor-olive green,accent color 3,light", "", false, false, "");
        this.RegisterEvent(466, "Word - Pictures Tools tab-Adjust-Recolor-aqua ,accent color 5,light", "", false, false, "");
        this.RegisterEvent(458, "Excel - Chart Tools Format - Current Selection - Chart Elements - Chart Area", "", false, false, "");
        this.RegisterEvent(459, "Excel - Chart Tools Format - Current Selection - Chart Elements -  Chart Title", "", false, false, "");
        this.RegisterEvent(460, "Excel - Chart Tools Format - Current Selection - Vertical (Value) Axis", "", false, false, "");
        this.RegisterEvent(462, "Excel - Chart Tools Format - Current Selection - Format Selection", "", false, false, "");
        this.RegisterEvent(468, "Excel - Chart Tools Format - Word Art Styles - Fill - Gold, Accent 4, Soft Bevel", "", false, false, "");
        this.RegisterEvent(469, "Excel - Chart Tools Format - Word Art Styles -  Fill - Blue, Accent 1, Shadow", "", false, false, "");
        this.RegisterEvent(470, "Excel - Header and Footer Design - Navigation -  Go To footer", "", false, false, "");
        this.RegisterEvent(471, "Word - Pictures Tools tab-size-crop drop down-crop", "", false, false, "");
        this.RegisterEvent(472, "Excel - Home - Styles- Format as table - Table Style Medium 3, Excel - Table tools Design - Table Styles - Table Style Medium 3", "", false, false, "");
        this.RegisterEvent(473, "Excel - Chart Tools Format - Current Selection - Shape effect shadow ", "", false, false, "");
        this.RegisterEvent(474, "Excel - Chart Tools Format - Current Selection - Shape effect shadow", "", false, false, "");
        this.RegisterEvent(475, "Excel - Home - Styles- Format as table - Table Style Medium 10, Excel - Table tools Design - Table Styles - Table Style Medium 10", "", false, false, "");
        this.RegisterEvent(476, "Excel - Home - Styles- Format as table - Table Style Medium 9, Excel - Table tools Design - Table Styles - Table Style Medium 9", "", false, false, "");
        this.RegisterEvent(477, "Excel - Home - Cells - Delete - Delete Table Columns", "", false, false, "");
        this.RegisterEvent(478, "Word-Mailings - Start Mail Merge-Edit Recipient List", "", false, false, "");
        this.RegisterEvent(479, "Excel - Chart Tools Format - Current Selection - Series 1 ", "", false, false, "");
        this.RegisterEvent(480, "Excel - Chart Tools Format - Current Selection - Vertical (Value) Axis major Gridlines", "", false, false, "");
        this.RegisterEvent(481, "Word- Mailings -Start Mail Merge-Start Mail Merge drop down- step by step wizard", "", false, false, "");
        this.RegisterEvent(482, "Word- Mailings -Start Mail Merge-Select Recipients-Use an Existing List", "", false, false, "");
        this.RegisterEvent(483, "Excel - Chart Tools Format - Current Selection - Chart elements", "", false, false, "");
        this.RegisterEvent(484, "Excel - Chart Tools Format - Current Selection - Shape Fill picture", "", false, false, "");
        this.RegisterEvent(485, "Word - Pictures Tools tab - Adjust - Paste - Corrections- Brightness -20% Contrast: 0% (Normal)", "", false, false, "");
        this.RegisterEvent(486, "Excel - Chart Tools Design - Chart layouts - Data Labels - Center", "", false, false, "");
        this.RegisterEvent(487, "Excel - Chart Tools Design - Chart layouts - Data Labels - More options ", "", false, false, "");
        this.RegisterEvent(488, "Excel - Chart Tools Design - Chart layouts - Data Labels - Legend - None", "", false, false, "");
        this.RegisterEvent(489, "Word - References - Citations and Bibliography - Bibliography - Works Cited", "", false, false, "");
        this.RegisterEvent(490, "Word - Table Tools Layout - Rows and Columns - Delete - Delete Columns", "", false, false, "");
        this.RegisterEvent(491, "Word - Table Tools Layout - Table - Select - Select Columns", "", false, false, "");
        this.RegisterEvent(492, "Word - Table Tools Layout - Rows and Columns - Delete - Delete Cells", "", false, false, "");
        this.RegisterEvent(493, "Word - Table Tools Layout - Rows and Columns - Insert Cells Dialog Box Launcher", "Ribbon: Insert Cells Clicked", false, false, "");
        this.RegisterEvent(494, "Excel - Insert - Charts - Insert Line Chart - Line With Markers", "", false, false, "");
        this.RegisterEvent(495, "Word - Review - Tracking - Simple Markup", "", false, false, "");
        this.RegisterEvent(496, "Word- Mailings -Write and Insert Fields -Address Block", "", false, false, "");
        this.RegisterEvent(497, "Word- Mailings -Write and Insert Fields -Match Fields", "", false, false, "");
        this.RegisterEvent(498, "Word- Mailings -Write and Insert Fields -Update Labels ", "", false, false, "");
        this.RegisterEvent(499, "Excel - Sparkline tools design - Styles - Sparkline Color - Color ", "", false, false, "");
        this.RegisterEvent(500, "Excel - Views - Freeze panes - Freeze Top row ", "", false, false, "");
        this.RegisterEvent(501, "Word- References - Table of Contents - Table of Contents - Automatic Table 2", "", false, false, "");
        this.RegisterEvent(502, "Word- References - Index - Mark Entry", "", false, false, "");
        this.RegisterEvent(503, "Word- References - Index -Insert Index", "", false, false, "");
        this.RegisterEvent(504, "Excel - Insert - Charts - Pie - Pie", "", false, false, "");
        this.RegisterEvent(505, "Excel - Home - Font - Font size", "", false, false, "");
        this.RegisterEvent(506, "Excel - Home - Font - Font size - 12", "", false, false, "");
        this.RegisterEvent(507, "Excel - Home - Font - Font size - 14 ", "", false, false, "");
        this.RegisterEvent(508, "Excel - Home - Font - Font size - 18", "", false, false, "");
        this.RegisterEvent(509, "Excel - Home - Font - Font size - 20", "", false, false, "");
        this.RegisterEvent(510, "Word- Table Tools Layout - Alignment - Align Center", "", false, false, "");
        this.RegisterEvent(511, "Word- Table Tools Layout - Alignment - Align Top Right", "", false, false, "");
        this.RegisterEvent(512, "Excel - Insert tab - charts section - insert cloumn chart dropdown - clustered column", "", false, false, "");
        this.RegisterEvent(513, "Excel - Data Tab - Sort order largest to smallest", "", false, false, "");
        this.RegisterEvent(514, "Excel - Chart Tools Design - Chart layouts - Axes - Primary Vertical ", "", false, false, "");
        this.RegisterEvent(515, "Excel - Chart Tools Format - Chart Elements - Horizontal Value Axis ", "", false, false, "");
        this.RegisterEvent(516, "Excel - Chart Tools Design - Chart layouts - Axes - More Axes Options", "", false, false, "");
        this.RegisterEvent(517, "Excel - Chart Tools Design - Chart layouts - Axes Title - More Axes Title Options", "", false, false, "");
        this.RegisterEvent(518, "Excel - Chart Tools Design - Chart layouts - Chart Titles - More Title Options ", "", false, false, "");
        this.RegisterEvent(519, "Excel - Chart Tools Design - Chart layouts - Legends - More Legend Options", "", false, false, "");
        this.RegisterEvent(520, "Excel - Home - Conditional Formatting - Data Bars - Purple Data bars", "", false, false, "");
        this.RegisterEvent(521, "Excel - Insert - Bar Chart - 2D Bar - Clustered Bar", "", false, false, "");
        this.RegisterEvent(522, "Excel - Chart Tools Design - Chart layouts - Data Labels -Inside End", "", false, false, "");
        this.RegisterEvent(523, "Word - Home - Font - Font size - 36", "", false, false, "");
        this.RegisterEvent(524, "Excel - Chart Tools Design - Chart Styles - Style 2", "", false, false, "");
        this.RegisterEvent(525, "Excel - Chart Tools Format - Texture - Blue Tissue paper", "", false, false, "");
        this.RegisterEvent(526, "Excel - Chart Tools Format - Texture - Papyrus", "", false, false, "");
        this.RegisterEvent(527, "Excel - Chart Tools Design - Type - Change Chart Type", "", false, false, "");
        this.RegisterEvent(528, "Word-Present Online-edit", "", false, false, "");
        this.RegisterEvent(529, "Word-Home-Font-Text Highlight Color", "", false, false, "");
        this.RegisterEvent(530, "Word-Present Online-Resume Online Presentation", "", false, false, "");
        this.RegisterEvent(531, "Excel - Chart Tools Format - Size - Launcher , Excel - Chart Tools Format - Word Art Styles - Launcher, Chart Tools Format - Shape Styles - Shape Fill - Gradient - More Gradients Textures, Chart Tools Format - Shape Styles - Shape Fill - point to Texture - More Textures , Chart Tools Format - Shape Outline - Weight or Dashes - More Lines Textures,Chart Tools Format - Shape Styles - Shape Effects - Presets or Bevel - 3-D Options", "", false, false, "");
        this.RegisterEvent(532, "Word - Review - Changes - Next", "", false, false, "");
        this.RegisterEvent(533, "Word - Review - Comments - New Comment", "", false, false, "");
        this.RegisterEvent(534, "Word - Review - Comments - Next", "", false, false, "");
        this.RegisterEvent(535, "Word - Review - Tracking - All Markup", "", false, false, "");
        this.RegisterEvent(536, "Word - Review - Changes - Reject - Reject and Move to Next ", "", false, false, "");
        this.RegisterEvent(537, "Word - Review - Changes - Reject - Reject Change ", "", false, false, "");
        this.RegisterEvent(538, "Word - Review - Changes - Previous", "", false, false, "");
        this.RegisterEvent(539, "Word - Review - Changes - Accept - Accept all changes and stop tracking", "", false, false, "");
        this.RegisterEvent(540, "Word - Citation - Citation - Style", "", false, false, "");
        this.RegisterEvent(541, "Word - Review - Comments - Delete Comment - Delete All Comments in Document", "", false, false, "");
        this.RegisterEvent(542, "Word - Table tools layout - Merge - Split Cells", "", false, false, "");
        this.RegisterEvent(543, "Word - Table tools layout - Data - Sort", "", false, false, "");
        this.RegisterEvent(544, "Word - Home - Paragraph - Sort", "", false, false, "");
        this.RegisterEvent(545, "Word - Table tools layout - Data - Repeat Header Rows", "", false, false, "");
        this.RegisterEvent(546, "Word - Table tools layout - Cell Size - Height", "", false, false, "");
        this.RegisterEvent(547, "Word - Table tools Design - Borders - All Borders", "", false, false, "");
        this.RegisterEvent(548, "Word - Reference tab -Captions -Insert Caption", "", false, false, "");
        this.RegisterEvent(549, "Word - Insert tab -Tables -Table-Conver Text to Table", "", false, false, "");
        this.RegisterEvent(550, "Word - Table Tools Layout tab -Data -Formula", "", false, false, "");
        this.RegisterEvent(551, "Excel - Chart Tools Format - Size - Shape Height", "", false, false, "");
        this.RegisterEvent(552, "Excel - Chart Tools Format - Size - Shape Width", "", false, false, "");
        this.RegisterEvent(553, "Word - Reference tab - Citations and Bibliography - Bibliography Style - MLA", "", false, false, "");
        this.RegisterEvent(554, "Excel - Home - Styles - Conditional Formattting - Top Bottom Rules - Top 10 items", "", false, false, "");
        this.RegisterEvent(555, "Word - Reference - Citations and Bibliography - Insert Citation - Jewett Citation (In Sub-Ribbon Xml)", "", false, false, "");
        this.RegisterEvent(556, "Excel - Page Layout - Page Setup - Print Area - Clear Print Area", "", false, false, "");
        this.RegisterEvent(557, "Excel - Home - Cells - Insert - Insert Table Rows Above", "", false, false, "");
        this.RegisterEvent(558, "Excel - Table Tools Design - Tools - Remove Duplicates", "", false, false, "");
        this.RegisterEvent(559, "Excel - Page layout - Page Setup - Breaks - Insert Page Break", "", false, false, "");
        this.RegisterEvent(560, "Excel - Sparklines Tools design tab - Show - High Point", "", false, false, "");
        this.RegisterEvent(561, "Excel - Sparklines Tools design tab - Styles - Sparkline Style Dark #3", "", false, false, "");
        this.RegisterEvent(562, "Word - Design/Home/Table tools Design -color grid -More colors", "", false, false, "");
        this.RegisterEvent(563, "Excel - Sparkline Tools Design - Style - Sparkline Style Dark #6", "", false, false, "");
        this.RegisterEvent(564, "Word - References - Citations & Bibliography - Bibliography - Bibliography", "", false, false, "");
        this.RegisterEvent(565, "Word - Home - Font - Font Styles - Cambria", "", false, false, "");
        this.RegisterEvent(566, "Word - Table Tools Design - Table Styles -  Gallery - List Table 3 Accent 6", "", false, false, "");
        this.RegisterEvent(567, "Word - Mailings - Finish & Merge -  Edit Individual Documents", "", false, false, "");
        this.RegisterEvent(568, "Word - Table Tools Design - Table Styles -  Gallery - List Table 3 Accent 1", "", false, false, "");
        this.RegisterEvent(569, "Excel - Chart Tools Format - Word Art styles - Fill Blue Accent 1 Shadow ", "", false, false, "");
        this.RegisterEvent(570, "Word - Review - Changes - Accept - Accept all changes", "", false, false, "");
        this.RegisterEvent(571, "Word - Review - Tracking - Track - Track Changes", "", false, false, "");
        this.RegisterEvent(572, "Word - Review - Changes - Reject", "", false, false, "");
        this.RegisterEvent(573, "Word - Table tools Design - Border Styles - Double solid line 1/2 accent 4", "", false, false, "");
        this.RegisterEvent(574, "Excel - Chart Tools Format - Current Selection - Series 1 Data Labels ", "", false, false, "");
        this.RegisterEvent(575, "Excel - Home - Font group - Italics ", "", false, false, "");
        this.RegisterEvent(576, "Word - Table tools Design - Border Styles - Double solid line 1/2 accent 5", "", false, false, "");
        this.RegisterEvent(577, "Excel - Chart Tools Design - Chart layouts - Data Labels - Outside End", "", false, false, "");
        this.RegisterEvent(578, "Excel - Chart Tools Format - Shape Styles - Shape Effects - 3-D Rotation - More Options", "", false, false, "");
        this.RegisterEvent(579, "Excel - Chart Tools Design - Shape Fill - Color", "", false, false, "");
        this.RegisterEvent(580, "Word - Design - Watermark - Draft1", "", false, false, "");
        this.RegisterEvent(581, "Excel - Home - Cell Styles - Heading 2", "", false, false, "");
        this.RegisterEvent(582, "Excel - Home - Format - Hide & Unhide - Unhide Columns", "", false, false, "");
        this.RegisterEvent(583, "Word - Insert - Symbol - Insert Symbol - TradeMark Sign", "", false, false, "");
        this.RegisterEvent(584, "Word - Home - Styles - Galary - No Spacing", "", false, false, "");
        this.RegisterEvent(585, "Word - Home - Font - Font Styles - Calibri", "", false, false, "");
        this.RegisterEvent(586, "Word - Smartart Tools Format - Shape Styles - Shape Effects - Preset", "", false, false, "");
        this.RegisterEvent(587, "Word smartart tools format - shape outline", "", false, false, "");
        this.RegisterEvent(588, "Word smartart tools format - shape fill - gradient - more gradient", "", false, false, "");
        this.RegisterEvent(589, "Word smartart tools format - shape fill - texture - more txture", "", false, false, "");
        this.RegisterEvent(590, "Word smartart tools format - shape effects - reflection - reflection options", "", false, false, "");
        this.RegisterEvent(591, "Word smartart tools format - shape fill - color picker", "", false, false, "");
        this.RegisterEvent(592, "Word smartart tools format - shape effects - glow - glow options", "", false, false, "");
        this.RegisterEvent(593, "Word smartart tools format - shape effects - Soft Edge - soft edges options", "", false, false, "");
        this.RegisterEvent(594, "Word smartart tools format - shape outline - dashes - more lines", "", false, false, "");
        this.RegisterEvent(595, "Word smartart tools format - shape effects - 3D-Rotation - 3-d rotation options", "", false, false, "");
        this.RegisterEvent(596, "Word smartart tools format - text effects - reflection - tight reflection, touching", "", false, false, "");
        this.RegisterEvent(597, "Excel - Home-Styles-Themed Cell Styles-Accent1", "", false, false, "");
        this.RegisterEvent(598, "Excel - Home-Styles-Themed Cell Styles-Accent5", "", false, false, "");
        this.RegisterEvent(599, "Excel - Insert - Text - Header&Footer", "", false, false, "");
        this.RegisterEvent(600, "Excel - Home - Format as a table - Table style light 5", "", false, false, "");
        this.RegisterEvent(601, "Excel - Insert - Wordart - Wordart1", "", false, false, "");
        this.RegisterEvent(602, "Excel - Insert - Wordart - Wordart6", "", false, false, "");
        this.RegisterEvent(603, "Excel - Data - Sort - Clear", "", false, false, "");
        this.RegisterEvent(604, "Excel - Home - Conditional Formatting - Data Bars - Blue Data bars", "", false, false, "");
        this.RegisterEvent(605, "Excel - Home -> Alignment group -> Orientation -> Angle Counter Clockwise", "", false, false, "");
        this.RegisterEvent(606, "Excel - Home -> Font group -> Bottom Borders -> Outside Border", "", false, false, "");
        this.RegisterEvent(607, "Excel - PageLayout -> ScaleToFit group -> Height -> 1Page", "", false, false, "");
        this.RegisterEvent(608, "Excel - Formula - More Functions - Statistical - COUNT", "Ribbon: COUNT clicked", false, false, "");
        this.RegisterEvent(609, "Excel - PageLayout -> ScaleToFit group -> Height ", "", false, false, "");
        this.RegisterEvent(610, "Excel - HeaderFooterDesign -> Footer -> FileName ", "", false, false, "");
        this.RegisterEvent(611, "Excel - Data -> Outline -> SubTotol ", "", false, false, "");
        this.RegisterEvent(612, "Excel - Data -> Outline -> Group -> AutoOutline", "", false, false, "");
        this.RegisterEvent(613, "Excel - PivotTable Tools Analyze -> Active Field -> Field Settings", "", false, false, "");
        this.RegisterEvent(614, "Excel - PivotTable Tools Analyze -> Filter -> Insert Slicer", "", false, false, "");
        this.RegisterEvent(615, "Excel - PivotTable Tools Analyze -> Data -> Refresh", "", false, false, "");
        this.RegisterEvent(616, "Excel - PivotTable Tools Analyze -> Data -> Refres-All", "", false, false, "");
        this.RegisterEvent(617, "Excel - PivotTable Tools Analyze -> Calculations -> calculte field", "", false, false, "");
        this.RegisterEvent(618, "Excel - Data -> WhatIfAnalysis -> ScenarioManager", "", false, false, "");
        this.RegisterEvent(619, "Excel - Data -> WhatIfAnalysis -> DataTable", "", false, false, "");
        this.RegisterEvent(620, "Excel - SlicerToolsOptions -> Size -> launcher", "", false, false, "");
        this.RegisterEvent(621, "Excel - SlicerToolsOptions -> Size -> height", "", false, false, "");
        this.RegisterEvent(622, "Excel - SlicerToolsOptions -> Buttons -> width", "", false, false, "");
        this.RegisterEvent(623, "Excel - SlicerToolsOptions -> Buttons -> columns", "", false, false, "");
        this.RegisterEvent(624, "Excel - SlicerToolsOptions -> Styles -> Dark1", "", false, false, "");
        this.RegisterEvent(625, "Excel - Data -> Sort&Filter -> Advanced", "", false, false, "");
        this.RegisterEvent(626, "Excel - Formulas -> Financial -> CUMPRINC", "", false, false, "");
        this.RegisterEvent(627, "Excel - Averageif formula applied from Statistical formulas or Recently used list.", "", false, false, "");
        this.RegisterEvent(628, "Excel - Recently used - Sumif", "", false, false, "");
        this.RegisterEvent(629, "Excel - Averageifs formula applied from Statistical formulas or Recently used list.", "", false, false, "");
        this.RegisterEvent(630, "word-    Picture Formate Tool>Picture Style > [1][5]", "", false, false, "");
        this.RegisterEvent(631, "Word -  Titlebar->Undo->Paragraph alignment", "", false, false, "");
        this.RegisterEvent(632, "Word -  Home->styles->lower paragraph", "", false, false, "");
        this.RegisterEvent(633, "Word -  Titlebar->context menu->Customize quick access toolbar", "", false, false, "");
        this.RegisterEvent(634, "Word -  Home->Font group->Underline->Thick underline", "", false, false, "");
        this.RegisterEvent(635, "Word -  Home->Font group->Text effects and typography->shadow->Outer->Offset Right", "", false, false, "");
        this.RegisterEvent(636, "Word -  Quick Access Toolbar->Undo", "", false, false, "");
        this.RegisterEvent(637, "Word -  Developer->Controls->rich text contend control", "", false, false, "");
        this.RegisterEvent(638, "Word -  Outlining->Master Document->Insert", "", false, false, "");
        this.RegisterEvent(639, "word-   Developer Tab->Controls->Drop-Down List Content Control", "", false, false, "");
        this.RegisterEvent(640, "Word -  myTab>Web->Page Color->Color grid", "", false, false, "");
        this.RegisterEvent(641, "Word -  Home->Clipboard->Paste->Use Destination Theme", "", false, false, "");
        this.RegisterEvent(642, "Word -  Design->->Document Formatting->Themes->Save Current Theme", "", false, false, "");
        this.RegisterEvent(643, "Word -  Insert->Text->TextBox->Austin Quote", "", false, false, "");
        this.RegisterEvent(644, "Word -  View->Windows->View Side by Side", "", false, false, "");
        this.RegisterEvent(645, "Word -  View->Windows->Synchronous Scrolling", "", false, false, "");
        this.RegisterEvent(646, "Word -  Insert->Illustrations->Shapes-> Starts and Banners->Horizontal Scroll", "", false, false, "");

        this.RegisterEvent(647, "Word -  View->Window->Switch Window->1", "", false, false, "");
        this.RegisterEvent(648, "Word -  View->Window->Switch Window->2", "", false, false, "");
        this.RegisterEvent(649, "Word -  Outlining->Master Document->Create", "", false, false, "");
        this.RegisterEvent(650, "Word -  Outlining->Master Document->Show Document", "", false, false, "");
        this.RegisterEvent(651, "Word -  Design>Colors>Customize Colors", "", false, false, "");
        this.RegisterEvent(652, "Word -  Review>Compare>Combine", "", false, false, "");
        this.RegisterEvent(653, "Word -  Page Layout>Page Setup>Columns>One", "", false, false, "");
        this.RegisterEvent(654, "Word -  Page Layout>Page Setup>Columns>Left", "", false, false, "");
        this.RegisterEvent(655, "Word -  Page Layout>Page Setup>Breaks>Continuous", "", false, false, "");

        this.RegisterEvent(656, "Word -  Picture Formate Tool>Picture Effects> Shadow> outer> [2][2]", "", false, false, "");
        this.RegisterEvent(657, "Word - Home - Paragraph - Numbering - Document Numbering - (First)", "", false, false, "");
        this.RegisterEvent(658, "Word - Home - Paragraph - Bullets - Document Bullets - (First)", "", false, false, "");
        this.RegisterEvent(659, "word-    Picture Formate Tool>picture effect > shadow>inner [5][5]", "", false, false, "");

        this.RegisterEvent(660, "word-    Picture Formate Tool>Picture Style > [5][5]", "", false, false, "");

        this.RegisterEvent(661, "word-    picture formate tool>artist effect>marker", "", false, false, "");
        this.RegisterEvent(662, "word-    picture formate tool>artist effect>sketch", "", false, false, "");
        this.RegisterEvent(663, "Word - Home Tab -> Styles -> heading 2 -> modify", "", false, false, "");
        this.RegisterEvent(664, "Word - Home Tab -> Styles -> heading 1 -> Updationg section", "", false, false, "");
        this.RegisterEvent(665, "Word - Insert Tab -> Header & Footer -> Page Number ->Top of Page -> Plain Number 2", "", false, false, "");
        this.RegisterEvent(666, "Word - Design Tab -> Document Formatting -> Themes -> Celestial", "", false, false, "");
        this.RegisterEvent(667, "Word - Insert Tab -> Header & Footer -> Page Number ->Top of Page -> Plain Number 3", "", false, false, "");
        this.RegisterEvent(668, "Word - Developer Tab -> Code -> Visual Basic", "", false, false, "");
        this.RegisterEvent(669, "Word - Developer Tab -> Controls -> Legecy Tools -> Check Box Form Field", "", false, false, "");
        this.RegisterEvent(670, "Word - View Tab -> Macros -> Macros click -> record macro", "", false, false, "");
        this.RegisterEvent(671, "Word - Home Tab -> Font -> Text effects and typography -> shadow -> Offset Diagonal Top Left", "", false, false, "");
        this.RegisterEvent(672, "Word - Developer Tab -> Controls -> Combo box content control", "", false, false, "");
        this.RegisterEvent(673, "Word - View Tab -> Macros -> Macros click -> view macros", "", false, false, "");
        this.RegisterEvent(674, "Word - View Tab -> Macros -> Upper half click", "", false, false, "");
        this.RegisterEvent(675, "Word - Design Tab -> Fonts -> Century Gothic Platino Linotype", "", false, false, "");
        this.RegisterEvent(676, "Word - Developer Tab -> Controls -> Properties", "", false, false, "");
        this.RegisterEvent(677, "Word - Developer Tab -> Controls -> Legecy Tools -> Text Form Field", "", false, false, "");
        this.RegisterEvent(678, "Word - Developer Tab -> Controls -> Design Mode", "", false, false, "");
        this.RegisterEvent(679, "Word - Developer Tab -> Controls -> Date Picker Content Control", "", false, false, "");
        this.RegisterEvent(680, "Word - Table Tools Design -> Table Styles -> List Table 3 - Acent 4", "", false, false, "");
        this.RegisterEvent(681, "Word - Home -> Font -> Font size -> font size 20", "", false, false, "");
        this.RegisterEvent(682, "Word - Mailings -> Preview Results Group -> Preview Results", "", false, false, "");
        this.RegisterEvent(683, "Word - Home -> Styels Group -> More option -> Create a Style", "", false, false, "");
        this.RegisterEvent(684, "Word - Design -> Document Formatting -> Fong -> Calibri Cambria", "", false, false, "");
        this.RegisterEvent(685, "Word Picture Tools Format tab - Color - Recolor - 1st Row 4th Column Washout", "", false, false, "");
        this.RegisterEvent(686, "Word Home tab - Font size - 14", "", false, false, "");
        this.RegisterEvent(687, "Word TABLE TOOLS LAYOUT tab - Rows and Column - Insert Below", "", false, false, "");
        this.RegisterEvent(688, "VIEW tab -  Zoom group - Multiple Pages", "", false, false, "");
        this.RegisterEvent(689, "PAGE LAYOUT tab -  Page Setup group - Margins  - Normal", "", false, false, "");
        this.RegisterEvent(690, "Word mailings - start mail merge - start mail merge - labels", "", false, false, "");
        this.RegisterEvent(691, "TABLE TOOLS DESIGN tab - Table Styles group - More - List Table 4 - Accent 4", "", false, false, "");
        this.RegisterEvent(692, "TABLE TOOLS DESIGN tab -  Table Style Options group -  First Column check box", "", false, false, "");
        this.RegisterEvent(693, "Word home - clipboard - copy", "", false, false, "");
        this.RegisterEvent(694, "Word - titlebar - minimize", "", false, false, "");
        this.RegisterEvent(695, "Word home - font - calibri", "", false, false, "");
        this.RegisterEvent(696, "Word picture tools format - picture styles - Moderate frame white", "", false, false, "");
        this.RegisterEvent(697, "Word picture tools format - picture styles - picture effects - shadow - Offset Diagonal Top Left", "", false, false, "");
        this.RegisterEvent(698, "Word home - font - Change case - uppercase", "", false, false, "");
        this.RegisterEvent(699, "Word design - document formatting - fonts - century gothic", "", false, false, "");
        this.RegisterEvent(700, "Word Table Tools Layout - Rows and Columns - Delete - Delete Row", "", false, false, "");
        this.RegisterEvent(701, "Word Table Tools Layout - Rows and Columns - Insert Right", "", false, false, "");
        this.RegisterEvent(702, "Word Picture Tools Format - Adjust - Change Picture", "", false, false, "");
        this.RegisterEvent(703, "Word Insert - Text - Signature Line - Microsoft Office Signature Line", "", false, false, "");
        this.RegisterEvent(704, "Word Review - Protect - Restrict Editing", "", false, false, "");
        this.RegisterEvent(705, "Word Table Tools Layout - Alignment- Align Top Left", "", false, false, "");
        this.RegisterEvent(706, "Excel - Home - Cell Style - Comma[0]", "", false, false, "");
        this.RegisterEvent(707, "Excel - Chart Tools Design - Chart Styles - Style 7", "", false, false, "");
        this.RegisterEvent(708, "hide sheet", "", false, false, "");
        this.RegisterEvent(709, "unhide sheet", "", false, false, "");
        this.RegisterEvent(710, "Word Table Tools Layout - Alignment- Align Top Left", "", false, false, "");
        this.RegisterEvent(711, "Chart tools design - chart layout - quick layout - Layout 9", "", false, false, "");
        this.RegisterEvent(712, "Word - SMART ART TOOLS FORMAT Tab -> Arrange -> Position-> Bottom Right", "", false, false, "");
        this.RegisterEvent(713, "Word - SMART ART TOOLS FORMAT Tab -> Arrange -> Position-> Top Center", "", false, false, "");

        this.RegisterEvent(714, "Word - SMART ART TOOLS FORMAT Tab -> Shape Styles -> Shape Effects-> Preset -> Preset 7", "", false, false, "");
        this.RegisterEvent(715, "Word -Font Decrease Event -> home -> font group", "", false, false, "");
        this.RegisterEvent(716, "Word -font customize -> design-> documents formating groups> font > customize", "", false, false, "");
        this.RegisterEvent(717, "Word -Dropped clicked  Insert ->text groups> drop cap >dropped clicked", "", false, false, "");
        this.RegisterEvent(718, "Word -book title style  home ->style groups> book title clicked", "", false, false, "");
        this.RegisterEvent(719, "Word -Drop Cap Custom  insert->Text group> drop cap", "", false, false, "");
        this.RegisterEvent(720, "Word -Quick Parts  insert->Text group> QuickPart > save selection to galary", "", false, false, "");
        this.RegisterEvent(721, "Word  horizontal line myTab->horizontal line", "", false, false, "");
        this.RegisterEvent(722, "Word  BookMark myTab->BookMark", "", false, false, "");
        this.RegisterEvent(723, "Word  WebPage preview myTab-WebPage preview", "", false, false, "");
        this.RegisterEvent(724, "Word  custom theme Design-theme", "", false, false, "");
        this.RegisterEvent(725, "Word  Select object Home->style group >select", "", false, false, "");
        this.RegisterEvent(726, "Word  group clicked drawing tool->arrange group >group", "", false, false, "");
        this.RegisterEvent(727, "Word  Publish clicked blog post->publish", "", false, false, "");
        this.RegisterEvent(728, "Word  managed clicked blog post->managed", "", false, false, "");
        this.RegisterEvent(729, "Word  Save selection  to auto text galary clicked  insert >text section->auto text", "", false, false, "");
        this.RegisterEvent(730, "Word  Use destination styles clicked ,Home >Clipboard->paste", "", false, false, "");
        this.RegisterEvent(731, "Word  $th Bullet type  clicked ,Home >paragraph group->bullet library", "", false, false, "");
        this.RegisterEvent(732, "Word  Link & Keep Source Formatting(F)  clicked ,from paste option", "", false, false, "");
        this.RegisterEvent(733, "Word -  Page Layout - Right Indent Spin", "", false, false, "");
        this.RegisterEvent(734, "Word -  Insert Tab Text Box - First Item clicked", "", false, false, "");
        this.RegisterEvent(735, "Word -  Page Layout Tab > Breaks > - Next Line clicked", "", false, false, "");
        this.RegisterEvent(736, "Word -  Picture formate tool>color > Recolor> 3rd row 3rd coll", "", false, false, "");
        this.RegisterEvent(737, "Word -  Picture formate tool>color > galary style> Soft edge oval", "", false, false, "");
        this.RegisterEvent(738, "Word -  TableTools > Design > Table Styles Group > Click More > click List Table 3 - Accent 2 ", "", false, false, "");
        this.RegisterEvent(739, "Word -  SmartArt > style > basic cycle clicked ", "", false, false, "");
        this.RegisterEvent(740, "Word -  SmartArt > style > polished clicked ", "", false, false, "");
        this.RegisterEvent(741, "Word -  Gradient range Acent 2 clicked - smarttool design >style group >color", "", false, false, "");
        this.RegisterEvent(742, "Word -  title clicked from insert merge field", "", false, false, "");
        this.RegisterEvent(743, "Word -  LastName clicked from insert merge field", "", false, false, "");
        this.RegisterEvent(744, "Word -  Double solid line 1/2pt clicked from Table Layout", "", false, false, "");
        this.RegisterEvent(745, "Word -  Home -> Font -> Underline", "", false, false, "");
        this.RegisterEvent(746, "Word -  Mailing -> Insert Merge Field", "", false, false, "");

        this.RegisterEvent(783, "Word -  Review->Comments->Delete arrow->Delete", "", false, false, "");
        this.RegisterEvent(784, "Word -  Home->Font->font size->9", "", false, false, "");
        this.RegisterEvent(785, "Word -  References->Citations & Bibliography->Insert Citation-> The Greening", "", false, false, "");
        this.RegisterEvent(786, "Word -  Review->Comments->Previous", "", false, false, "");
        this.RegisterEvent(787, "Word -  Review->Changes->Accept->Accept and Move to next", "", false, false, "");
        this.RegisterEvent(788, "Word -  Review->Changes->Accept", "", false, false, "");
        this.RegisterEvent(789, "Word -  Page layout->Page setup->columns->Three", "", false, false, "");
        this.RegisterEvent(790, "Word -  SmartArt Tools Design->layouts->more layouts", "", false, false, "");
        this.RegisterEvent(791, "Word -  Drawing Tools Format->shapestyles->shapeeffects->bevel->angle", "", false, false, "");
        this.RegisterEvent(792, "Word -  Drawing Tools Format->wordartstyles->texteffects->transform->Chevron up", "", false, false, "");
        this.RegisterEvent(793, "Word -  Insert->text->wordart->Fill – White, Outline -Accent 2, Hard Shadow - Accent 2", "", false, false, "");
        this.RegisterEvent(794, "Word -  Drawing Tools Format->text->align text->middle", "", false, false, "");
        this.RegisterEvent(795, "Word -  Drawing Tools Format->shape styles->colored fill red acent 2", "", false, false, "");
        this.RegisterEvent(796, "Word -  WordArt Tools Design->Create graphic->Add Shape->Add shape after", "", false, false, "");
        this.RegisterEvent(797, "Word -  WordArt Tools Design->Create graphic->Add Shape", "", false, false, "");
        this.RegisterEvent(798, "Word -  Design->Fonts->Times New Roman- Arial", "", false, false, "");
        this.RegisterEvent(799, "Word -  Design->Themes->Integral", "", false, false, "");
        this.RegisterEvent(800, "Word -  Titlebar->Undo->cancel", "", false, false, "");
        this.RegisterEvent(801, "Excel - Recently used - Sumifs", "", false, false, "");
        this.RegisterEvent(802, "Excel - RANK.AVG formula applied from Statistical formulas or Recently used list.", "", false, false, "");
        this.RegisterEvent(803, "Excel - QUARTILE.EXC formula applied from Statistical formulas or Recently used list.", "", false, false, "");
        this.RegisterEvent(804, "Excel - STDEV.S formula applied from Statistical formulas or Recently used list.", "", false, false, "");
        this.RegisterEvent(805, "Excel - VAR.S formula applied from Statistical formulas or Recently used list.", "", false, false, "");
        this.RegisterEvent(806, "Excel - correl formula applied from Statistical formulas or Recently used list.", "", false, false, "");
        this.RegisterEvent(807, "Excel - FREQUENCY formula applied from Statistical formulas or Recently used list.", "", false, false, "");
        this.RegisterEvent(808, "Excel - CELL_STYLES - Currecy -Context menu", "", false, false, "");
        this.RegisterEvent(809, "Excel - TitleBar -> App icon Double click", "", false, false, "");
        this.RegisterEvent(810, "Excel - Formula -> Trave Precedents", "", false, false, "");
        this.RegisterEvent(811, "Excel - Formula -> Trave Dependents", "", false, false, "");
        this.RegisterEvent(812, "Excel - Formula -> Remove Arrows", "", false, false, "");
        this.RegisterEvent(813, "Excel - Data -> Data Validation", "", false, false, "");
        this.RegisterEvent(814, "Excel - View -> New Window", "", false, false, "");
        this.RegisterEvent(815, "Excel - View -> Arrange All", "", false, false, "");
        this.RegisterEvent(816, "Excel - Home -> Editing -> fill -> across worksheets", "", false, false, "");
        this.RegisterEvent(817, "Excel - Insert > Links > Hyperlink", "", false, false, "");
        this.RegisterEvent(818, "Excel - HOME -> Font -> Borders arrow -> Top and Double Bottom Border.", "", false, false, "");
        this.RegisterEvent(819, "Excel - Data Tab -> Data Tools -> Text to Columns", "", false, false, "");
        this.RegisterEvent(820, "Excel - Data Tab-> Connections group ->Connections", "", false, false, "");
        this.RegisterEvent(821, "Excel - Data Tab-> Connections group ->Properties", "", false, false, "");
        this.RegisterEvent(822, "Excel - Formula -> Function Library group -> Text -> Substitute", "", false, false, "");
        this.RegisterEvent(823, "Excel - Data -> Get External Data group -> From Access button", "", false, false, "");
        this.RegisterEvent(824, "Excel - Data -> Get External Data group -> From Web button", "", false, false, "");
        this.RegisterEvent(825, "Excel - FORMULAS tab > Formula Auditing group > Watch Window", "", false, false, "");
        this.RegisterEvent(826, "Excel - Formula -> Function Library group -> Text -> Proper", "", false, false, "");
        this.RegisterEvent(827, "Excel - FORMULAS tab > Formula Auditing group > Error Checking", "", false, false, "");
        this.RegisterEvent(828, "Excel - Formulas tab - Look up and Reference - INDEX", "", false, false, "");
        this.RegisterEvent(829, "Excel - PivotTable Tools Design - banded columns", "", false, false, "");
        this.RegisterEvent(830, "Excel - PivotTable Tools Design - gallery - pivot style medium 3", "", false, false, "");
        this.RegisterEvent(831, "Excel - PivotTable Tools Analyze - active field - expand field", "", false, false, "");
        this.RegisterEvent(832, "Excel - PivotTable Tools Analyze - active field - collapse field", "", false, false, "");
        this.RegisterEvent(833, "Excel - Data - Analysis - Data Analysis", "", false, false, "");
        this.RegisterEvent(834, "Excel - Data - Analysis - Solver", "", false, false, "");
        this.RegisterEvent(835, "Excel - Titlebar - Minimize", "", false, false, "");
        this.RegisterEvent(836, "Excel - Titlebar - Close", "", false, false, "");
        this.RegisterEvent(837, "Excel - Data - Properties", "", false, false, "");
        this.RegisterEvent(838, "Excel - Formula - Financial - PV", "", false, false, "");
        this.RegisterEvent(839, "Excel - Insert - PivotChart", "", false, false, "");
        this.RegisterEvent(840, "Excel - PivotChart Analyze - PivotChart", "", false, false, "");
        this.RegisterEvent(841, "Excel - Formulas -> Financial -> CUMIPMT", "", false, false, "");
        this.RegisterEvent(842, "Excel - Formulas -> Financial -> IPMT", "", false, false, "");
        this.RegisterEvent(843, "Excel - Formulas -> Financial -> PPMT", "", false, false, "");
        this.RegisterEvent(844, "Excel - Formulas -> Error Checking -> circular reference -> 1", "", false, false, "");
        this.RegisterEvent(845, "Excel - View -> Window -> Switch Windows -> 1", "", false, false, "");
        this.RegisterEvent(846, "Excel - View -> Window -> Switch Windows -> 2", "", false, false, "");
        this.RegisterEvent(847, "Excel - View -> Window -> Switch Windows -> 3", "", false, false, "");
        this.RegisterEvent(848, "Excel - Review -> Share Workbook", "", false, false, "");
        this.RegisterEvent(849, "Excel - Review -> New\Edit Comment", "", false, false, "");
        this.RegisterEvent(850, "Excel - Review -> Highlight Changes", "", false, false, "");
        this.RegisterEvent(851, "Excel - Review -> Accept/Reject Changes", "", false, false, "");
        this.RegisterEvent(852, "Excel - Page Layout > Themes > Basis", "", false, false, "");
        this.RegisterEvent(853, "Excel - Insert > Text > Signature Line", "", false, false, "");
        this.RegisterEvent(854, "Excel - Developer > Code > Visual Basic", "", false, false, "");
        this.RegisterEvent(855, "Excel - Developer > Code > Macros", "", false, false, "");
        this.RegisterEvent(856, "Excel - Developer > Code > Record Macro", "", false, false, "");
        this.RegisterEvent(857, "Excel - View > Macro > Macro", "", false, false, "");
        this.RegisterEvent(858, "Excel - Developer > Code > View Code", "", false, false, "");
        this.RegisterEvent(859, "Excel - Home > Cells > Format > protect sheet", "", false, false, "");
        this.RegisterEvent(860, "Excel - Review > Changes > Allow Users to edit ranges", "", false, false, "");
        this.RegisterEvent(861, "Excel - Home tab -> Cells group -> Format -> Lock Cell", "", false, false, "");
        this.RegisterEvent(862, "Excel -  page layout -> page set up -> background", "", false, false, "");
        this.RegisterEvent(863, "Excel -  Titlebar -> compare and merge workbooks", "", false, false, "");
        this.RegisterEvent(864, "Excel -  Home tab -> Font group -> Borders -> Top and Bottom border", "", false, false, "");
        this.RegisterEvent(865, "Excel -  Home tab -> Cell Styles -> input", "", false, false, "");
        this.RegisterEvent(866, "Excel -  Home tab -> Cell Styles -> 20% accent 6", "", false, false, "");
        this.RegisterEvent(867, "Excel -  Insert tab -> Illustrations  -> Pictures", "", false, false, "");
        this.RegisterEvent(868, "Excel -  Insert tab -> Text  -> Text Box", "", false, false, "");
        this.RegisterEvent(869, "Excel -  Home-tab -> Alignment  -> Orientation ->Angle Clockwise ", "", false, false, "");
        this.RegisterEvent(870, "Excel -  Home-tab -> Paste  -> Formatting ", "", false, false, "");
        this.RegisterEvent(871, "Excel - Home - Styles - Conditional Formattting - Top Bottom Rules - Bottom 10 items", "", false, false, "");
        this.RegisterEvent(872, "Excel - Page Layout- Sheet options - Gridlines - View", "", false, false, "");
        this.RegisterEvent(873, "Excel -Home - Font -Border-All border", "", false, false, "");
        this.RegisterEvent(874, "Excel -Home - Font -Border- Thick bottom border", "", false, false, "");
        this.RegisterEvent(875, "Excel -Home - Editing- Find & Select-Go To", "", false, false, "");
        this.RegisterEvent(876, "Excel -Home - Clipboard- Paste-Transpose", "", false, false, "");
        this.RegisterEvent(877, "Excel -Home - Clipboard- Paste-Values", "", false, false, "");
        this.RegisterEvent(878, "PAGE LAYOUT-Page Setup -Margins button -Narrow.", "", false, false, "");
        this.RegisterEvent(879, "PAGE LAYOUT-Page Setup -Margins button -Custom margins", "", false, false, "");
        this.RegisterEvent(880, "PAGE LAYOUT -Scale to Fit- Width arrow -1 page.", "", false, false, "");
        this.RegisterEvent(881, "Excel - Header and Footer Tools - Header and Footer Elements - Page Number", "", false, false, "");
        this.RegisterEvent(882, "Excel - Header and Footer Tools - Header and Footer Elements - Number Of Pages", "", false, false, "");
        this.RegisterEvent(883, "Excel - Header and Footer Tools - Header and Footer Elements - Current Data", "", false, false, "");
        this.RegisterEvent(884, "Excel - Header and Footer Tools - Header and Footer Elements - Current Time", "", false, false, "");
        this.RegisterEvent(885, "Excel - Header and Footer Tools - Header and Footer Elements - File Path", "", false, false, "");
        this.RegisterEvent(886, "Excel - Header and Footer Tools - Header and Footer Elements - Sheet Name", "", false, false, "");
        this.RegisterEvent(887, "Excel - Header and Footer Tools - Header and Footer Elements - Picture", "", false, false, "");
        this.RegisterEvent(888, "Excel - Developer - Insert - Button", "", false, false, "");
        this.RegisterEvent(889, "Excel - Page Layout > Themes > Metropolitan", "", false, false, "");
        this.RegisterEvent(890, "Excel - Page Layout > Themes > Parallax", "", false, false, "");
        this.RegisterEvent(891, "Excel - CELL_STYLES - Heading4 -Context menu", "", false, false, "");
        this.RegisterEvent(892, "Excel - CELL_STYLES - Total -Context menu", "", false, false, "");
        this.RegisterEvent(893, "Excel - CELL_STYLES - 20%-Acent2 -Context menu", "", false, false, "");
        this.RegisterEvent(894, "Excel - Header and Footer Tools - Header and Footer  - Footer  listitem no 6", "", false, false, "");
        this.RegisterEvent(895, "Excel -  Picture formate tool  Arrange  Align  Snap to Grid", "", false, false, "");
        this.RegisterEvent(896, "Excel - Header and Footer Design - Navigation -  Go To header", "", false, false, "");
        this.RegisterEvent(897, "hide rows", "", false, false, "");
        this.RegisterEvent(898, "Excel -  FORMULAS - Defined names - Apply names..", "", false, false, "");
        this.RegisterEvent(899, "Excel - FORMULAS - Defined names - create from selection", "", false, false, "");
        this.RegisterEvent(900, "Excel - Chart - combo charts -  Clustered Column - Line on Secondary Axis", "", false, false, "");
        this.RegisterEvent(901, "Excel - Chart - Chart Gridline Primary Major Vertical", "", false, false, "");
        this.RegisterEvent(902, "Excel - MATHS & TRIG - Abs", "", false, false, "");
        this.RegisterEvent(903, "Excel - MATHS & TRIG - Int", "", false, false, "");
        this.RegisterEvent(904, "Excel - Chart - Chart Styles style 7", "", false, false, "");
        this.RegisterEvent(905, "Excel - Chart Tools Design - Data - Switch Row/Column", "", false, false, "");
        this.RegisterEvent(906, "Excel - Chart - Chart Axis Title Primary Horizontal", "", false, false, "");
        this.RegisterEvent(907, "Excel - Chart - Chart Axis Title Secondary Vertical", "", false, false, "");
        this.RegisterEvent(908, "Excel - Insert - Chart - Insert chart", "", false, false, "");
        this.RegisterEvent(909, "Excel - Picture Tools Format - Size  Height", "", false, false, "");
        this.RegisterEvent(910, "Excel - Picture Tools Format - Arrange  Rotate  More Rotation Options", "", false, false, "");
        this.RegisterEvent(911, "Excel - Insert - Shape  Rounded Rectangle", "", false, false, "");
        this.RegisterEvent(912, "Excel - ChartTool Design -Styles -Accent2_Darker 50", "", false, false, "");
        this.RegisterEvent(913, "Excel - HOME tab>Styles group->Conditional Formatting->point to Data Bars-> Green Data Bar", "", false, false, "");
        this.RegisterEvent(914, "Excel - ChartTool Design -Styles -Change Colors Color4", "", false, false, "");
        this.RegisterEvent(915, "Excel - Chart Tools Design - Chart layouts - Trendline -Linear ", "", false, false, "");
        this.RegisterEvent(916, "Excel - Chart Tools Design - Chart layouts - Trendline -More Trendline Options.. ", "", false, false, "");
        this.RegisterEvent(917, "Excel - Insert Tab -> Charts Group -> Insert bar chart ->Stacked Bar", "", false, false, "");
        this.RegisterEvent(918, "Excel - CHART Tools Format Tab -> Shape Styles Group ->Shape Fill Arrow -> No Fill ", "", false, false, "");
        this.RegisterEvent(919, "Excel - CHART Tools Format Tab -> Shape Styles Group ->Shape Outline Arrow -> No Outline", "", false, false, "");
        this.RegisterEvent(920, "Alignment_Bottom", "", false, false, "");
        this.RegisterEvent(921, "Excel -HOME ->Styles Group ->Conditional formatting ->Clear Rule-> Clear Rule from selected cells", "", false, false, "");
        this.RegisterEvent(922, "Excel - Formula - Use in Formula - BasketSubtotals", "", false, false, "");
        this.RegisterEvent(923, "Excel - Chart Tool Format - Current Seelction - Chart Elements -Series Total Revenue", "", false, false, "");
        this.RegisterEvent(924, "Excel - Chart Tool Format - Current Seelction - Chart Elements -Horizontal (Value) Axis", "", false, false, "");
        this.RegisterEvent(925, "Excel - Home - Styles - Less Than..", "", false, false, "");
        this.RegisterEvent(926, "Excel -Chart Tools Design Tab - Add Chart Element - Legend - Right", "", false, false, "");
        this.RegisterEvent(927, "Excel -Chart Tools Format Tab - Chart Elements - Legend", "", false, false, "");
        this.RegisterEvent(928, "Excel -Chart Tools Design Tab > Add Chart Element > Data Label > Data Callout ", "", false, false, "");
        this.RegisterEvent(929, "Excel -FORMULAS Tab >Functional Librrary > Text > Left ", "", false, false, "");
        this.RegisterEvent(930, "Excel -FORMULAS Tab >Functional Librrary >More Functions> MODE.SGNL ", "", false, false, "");
        this.RegisterEvent(931, "Excel - Formulas Tab - Error Checking - Trace Error", "", false, false, "");
        this.RegisterEvent(932, "Excel - Home tab -> Styles group -> Cells Styles -> Data and Model -> Note", "", false, false, "");
        this.RegisterEvent(933, "Excel - Data tab -data tool group -data validation arrow -Circle invalid data", "", false, false, "");
        this.RegisterEvent(934, "Excel - Page Layout Tab - Themes group- Themes-Ion", "", false, false, "");
        this.RegisterEvent(935, "Excel - Home Tab - Styles group -Format as Table - New Table Style", "", false, false, "");
        this.RegisterEvent(936, "Excel - Home Tab - Font - Fill Color", "", false, false, "");
        this.RegisterEvent(937, "Excel - Home Tab - Editing -> Find & Select -> Go to Special", "", false, false, "");
        this.RegisterEvent(938, "Excel - Home Tab - Sort and Filter -> Clear", "", false, false, "");
        this.RegisterEvent(939, "Excel - Page Layout Tab - Themes -> Fonts -> Calibri", "", false, false, "");
        this.RegisterEvent(940, "Excel - Title Bar - Undo", "", false, false, "");
        this.RegisterEvent(941, "Excel - Home Tab - Paste ->Paste Link", "", false, false, "");
        this.RegisterEvent(942, "Excel - Home Tab - Paste ->Picture", "", false, false, "");
        this.RegisterEvent(943, "Excel - Home Tab - Paste ->Linked Picture", "", false, false, "");
        this.RegisterEvent(944, "Excel - CHART TOOLS DESIGN -Chart Layouts -Add Chart Element-Data Labels-click Best Fit.", "", false, false, "");
        this.RegisterEvent(945, "Excel -FORMULAS Tab >Defined Names >Use in Formula ", "", false, false, "");
        this.RegisterEvent(946, "Excel - PageLayout >> ScaleToFit >> Width >> 2 Pages", "", false, false, "");
        this.RegisterEvent(947, "Excel - PageLayout >> ScaleToFit >> Height >> 2 Pages", "", false, false, "");
        this.RegisterEvent(948, "Excel -  Insert tab -> Charts  -> Insert Line Chart -> 2-D Line -> Line", "", false, false, "");
        this.RegisterEvent(949, "Excel - Chart Tool Format - Current Seelction - Chart Elements -Horizontal (Category) Axis", "", false, false, "");
        this.RegisterEvent(950, "Excel - INSERT - Text - Word Art: Fill – Black, Text 1, Outline – Background 1, Hard Shadow – Background 1", "", false, false, "");
        this.RegisterEvent(951, "Excel - Picture Tools Format - Picture Styles - Bevel Rectangle", "", false, false, "");
        this.RegisterEvent(952, "Excel - Sparkline Tools Design - Show - Last Point", "", false, false, "");
        this.RegisterEvent(953, "Excel - Sparkline Tools Design - Style - More - Sparkline Style Accent 1, (no dark or light)", "", false, false, "");
        this.RegisterEvent(954, "Excel - Smartart Tools Design - Create Graphic - Text Pane", "", false, false, "");
        this.RegisterEvent(955, "Excel - Smartart Tools Format- Shape Effects - Bevel - Riblet", "", false, false, "");
        this.RegisterEvent(956, "Excel - Chart Tools Design -  Chart Layouts - Add Chart Element - Axis Titles - Primary Vertical", "", false, false, "");
        this.RegisterEvent(957, "Excel - Drawing Tools Format->shape styles->Shape Fill->Texture->Stationery", "", false, false, "");
        this.RegisterEvent(958, "Excel - Insert -> Illustrations ->Insert a SmartArt Graphic", "", false, false, "");
        this.RegisterEvent(959, "Excel - Chart Tool Format - Current Seelction - Chart Elements -Plot Area", "", false, false, "");
        this.RegisterEvent(960, "Excel - Chart Tool Format - Current Seelction - Chart Elements -Series ''Dallas''", "", false, false, "");
        this.RegisterEvent(961, "Excel - Smartart Tools Design - Change Colors - Colorful - Colorful Range - Accent Colors 3 to 4", "", false, false, "");
        this.RegisterEvent(962, "Excel - Smartart Tools Design - Smartart Styles - 3D- Polished", "", false, false, "");
        this.RegisterEvent(963, "Excel - Smartart Tools Format - Shape Styles - Shape Fill", "", false, false, "");
        this.RegisterEvent(964, "Word - Table Tools Layout Data group Convert to Text", "", false, false, "");
        this.RegisterEvent(965, "PIVOT Chart Analyze Field List", "", false, false, "");
        this.RegisterEvent(966, "PIVOT TABLES Analyze Field List", "", false, false, "");
        this.RegisterEvent(967, "INSERT Reports Power View", "", false, false, "");
        this.RegisterEvent(968, "Pivot Tools Analyze Tab -> Pivot Table Group -> Options -> Show Report filter pages", "", false, false, "");
        this.RegisterEvent(969, "SLICER TOOLS OPTIONS ->Slicer Styles ->Slicer Style Dark 2", "", false, false, "");
        this.RegisterEvent(970, "Excel - Drawing Tools Format->shape effect->Preset->3-D Options", "", false, false, "");
        this.RegisterEvent(971, "Excel - Chart Tool Format - Current Seelction - Chart Elements -Back Wall", "", false, false, "");
        this.RegisterEvent(972, "Excel - Chart Tool Format - Current Seelction - Chart Elements -Floor", "", false, false, "");
        this.RegisterEvent(973, "Excel - Drawing Tools Format-> shape effect -> Bevel -> 3-D Options", "", false, false, "");
        this.RegisterEvent(974, "Excel - Drawing Tools Format-> shape effect -> Shadow -> Shadow Options", "", false, false, "");
        this.RegisterEvent(975, "Excel - Drawing Tools Format-> shape effect -> Soft Edges Effects -> Soft Edges Options", "", false, false, "");
        this.RegisterEvent(976, "Excel - Drawing Tools Format-> shape effect -> Reflection -> Reflection Options", "", false, false, "");
        this.RegisterEvent(977, "Excel - Drawing Tools Format-> shape effect -> 3-D Rotation -> 3-D Rotation Options", "", false, false, "");
        this.RegisterEvent(978, "Excel - Drawing Tools Format-> shape effect -> Glow -> Glow Options", "", false, false, "");
        this.RegisterEvent(979, "Excel - Drawing Tools Format-> Text Effects -> 3-D Rotation -> 3-D Rotation Options", "", false, false, "");
        this.RegisterEvent(980, "Excel - Drawing Tools Format-> Text Outline -> Weight -> More Lines", "", false, false, "");
        this.RegisterEvent(981, "Excel - Drawing Tools Format-> Text Outline -> Dashes -> More Lines", "", false, false, "");
        this.RegisterEvent(982, "Excel - Drawing Tools Format-> Shape Outline -> Weight -> More Lines", "", false, false, "");
        this.RegisterEvent(983, "Excel - Drawing Tools Format-> Shape Outline -> Dashes -> More Lines", "", false, false, "");
        this.RegisterEvent(984, "Excel - Drawing Tools Format-> Text effect -> Bevel -> 3-D Options", "", false, false, "");
        this.RegisterEvent(985, "Excel - Design-> Switch Visualization -> Column Chart -> Stacked Column", "", false, false, "");
        this.RegisterEvent(986, "Excel - Design-> Switch Visualization -> Other Chart -> Pie", "", false, false, "");
        this.RegisterEvent(987, "Excel - Design-> Switch Visualization -> Map", "", false, false, "");
        this.RegisterEvent(988, "Excel - Power View-> Themes -> Text Size -> 75%", "", false, false, "");
        this.RegisterEvent(989, "Excel - Power View-> Themes -> Background -> Light1 Center Gradient", "", false, false, "");
        this.RegisterEvent(990, "Excel - Smartart Tools Format - Shape Styles - Shape Outline - Weight - More Lines", "", false, false, "");
        this.RegisterEvent(991, "Excel - Smartart Tools Format - Shape Styles - Shape Outline - Dashes - More Lines", "", false, false, "");
        this.RegisterEvent(992, "Excel - Smartart Tools Format - Shape Styles - Shape Fill - Gradient - More Gradients", "", false, false, "");
        this.RegisterEvent(993, "Excel - Smartart Tools Format - Shape Styles - Shape Fill - Texture - More Textures", "", false, false, "");
        this.RegisterEvent(994, "Excel - Smartart Tools Format - Shape Styles - Shape Effects - Preset - 3D Options", "", false, false, "");
        this.RegisterEvent(995, "Excel - Smartart Tools Format - Shape Styles - Shape Effects - Bevel - 3D Options", "", false, false, "");
        this.RegisterEvent(996, "Excel - Smartart Tools Format - Shape Styles - Shape Effects - Shadow - Shadow Options", "", false, false, "");
        this.RegisterEvent(997, "Excel - Smartart Tools Format - Shape Styles - Shape Effects - Reflection - Reflection Options", "", false, false, "");
        this.RegisterEvent(998, "Excel - Smartart Tools Format - Shape Styles - Shape Effects - Glow - Glow Options", "", false, false, "");
        this.RegisterEvent(999, "Excel - Smartart Tools Format - Shape Styles - Shape Effects - Soft Edges - Soft Edges Options", "", false, false, "");
        this.RegisterEvent(1000, "Excel - Smartart Tools Format - Shape Styles - Shape Effects - 3D Rotation - 3D Rotation Options", "", false, false, "");
        this.RegisterEvent(1001, "Excel - INSERT -> Filters -> Slicer", "", false, false, "");
        this.RegisterEvent(1002, "Power Pivot - HOME -> Get External Data -> From Access", "", false, false, "");
        this.RegisterEvent(1003, "Power Pivot- HOME -> Get External Data -> From Other Sources", "", false, false, "");
        this.RegisterEvent(1004, "Power Pivot - HOME -> PIVOT TABLE -> Pivot Table", "", false, false, "");
        this.RegisterEvent(1005, "Excel - Page Layout Tab - Arrange - Rotate - More Rotation Options", "", false, false, "");
        this.RegisterEvent(1006, "Excel - PowerPivot - Manage", "", false, false, "");
        this.RegisterEvent(1007, "Excel - Formulas Tab - HLOOKUP", "", false, false, "");
        this.RegisterEvent(1008, "Excel - Formulas Tab - Text- Right", "", false, false, "");
        this.RegisterEvent(1009, "Excel - Formulas Tab - Text- Upper", "", false, false, "");
        this.RegisterEvent(1010, "Excel - Formulas Tab - Text- Concatenate", "", false, false, "");
        this.RegisterEvent(1011, "Excel - Table Tools Design Tab - Table Styles- Table Style Medium 11", "", false, false, "");
        this.RegisterEvent(1012, "Excel - Data -> Get External Data group -> From Text button", "", false, false, "");
        this.RegisterEvent(1013, "Excel - Data Tab -> Data Tools -> Remove Duplicates", "", false, false, "");
        this.RegisterEvent(1014, "Excel - Formulas Tab - MATCH", "", false, false, "");
        this.RegisterEvent(1015, "Excel - Data -> Get External Data group -> From Other Sources- From Microsoft Query", "", false, false, "");
        this.RegisterEvent(1016, "Excel - Formulas Tab -Use in Formula - Option4", "", false, false, "");
        this.RegisterEvent(1017, "Excel - Formulas Tab -Use in Formula - Paste Items", "", false, false, "");
        this.RegisterEvent(1018, "Excel - Home Tab - Styles group - Conditional Formatting - Icon Sets - 3 Arrows (Colored)", "", false, false, "");
        this.RegisterEvent(1019, "Excel - Picture Tools Format  - Adjust- Color- Picture Color Options", "", false, false, "");
        this.RegisterEvent(1020, "Excel - Picture Tools Format  - Adjust- Corrections- Picture Corrections Options", "", false, false, "");
        this.RegisterEvent(1021, "Excel - Picture Tools Format  - Picture Styles- Picture Border - Weight- More Lines", "", false, false, "");
        this.RegisterEvent(1022, "Excel - Picture Tools Format  - Picture Styles- Picture Border - Dashes- More Lines", "", false, false, "");
        this.RegisterEvent(1023, "Excel - Insert Tab  - Illustrations- Screenshot- Available Windows", "", false, false, "");
        this.RegisterEvent(1024, "Excel - Data -> Get External Data group -> From Other Source -> From XML Source", "", false, false, "");
        this.RegisterEvent(1025, "Power View - Design - Columns - Add", "", false, false, "");
        this.RegisterEvent(1026, "Power View - Home - PivotTable", "", false, false, "");
        this.RegisterEvent(1027, "Power View - Home  - PivotChart", "", false, false, "");
        this.RegisterEvent(1028, "Excel - Slicer Tools Options -> Slicer Settings", "", false, false, "");
        this.RegisterEvent(1029, "Excel - Insert -> Symbols  -> Symbol", "", false, false, "");
        this.RegisterEvent(1030, "Excel - Developer -> Controls  -> Properties", "", false, false, "");
        this.RegisterEvent(1031, "Pivot Tools Analyze Tab -> Group -> Group Selection", "", false, false, "");
        this.RegisterEvent(1032, "Review Tab -> Changes Group -> Protect Workbook", "", false, false, "");
        this.RegisterEvent(1033, "PivotTable Tools Design Tab -> Layout Group -> Subtotals dropdown-> 1st", "", false, false, "");
        this.RegisterEvent(1034, "PivotTable Tools Design Tab -> Layout Group -> Subtotals dropdown-> 2nd", "", false, false, "");
        this.RegisterEvent(1035, "PivotTable Tools Design Tab -> Layout Group -> Subtotals dropdown-> 3rd", "", false, false, "");
        this.RegisterEvent(1036, "PivotTable Tools Design Tab -> Layout Group -> Subtotals dropdown-> 4th", "", false, false, "");
        this.RegisterEvent(1037, "PivotTable Tools Design Tab -> Layout Group -> Report Layout dropdown-> 1st", "", false, false, "");
        this.RegisterEvent(1038, "PivotTable Tools Design Tab -> Layout Group -> Report Layout dropdown-> 2nd", "", false, false, "");
        this.RegisterEvent(1039, "PivotTable Tools Design Tab -> Layout Group -> Report Layout dropdown-> 3rd", "", false, false, "");
        this.RegisterEvent(1040, "PivotTable Tools Design Tab -> Layout Group -> Report Layout dropdown-> 4th", "", false, false, "");
        this.RegisterEvent(1041, "PivotTable Tools Design Tab -> Layout Group -> Report Layout dropdown-> 5th", "", false, false, "");
        this.RegisterEvent(1042, "Developer Tab -> Macro Security", "", false, false, "");
        this.RegisterEvent(1043, "Developer Tab -> Controls -> Insert -> Checkbox", "", false, false, "");
        this.RegisterEvent(1044, "Formula Tab -> Function Library -> Math & Triag -> Subtotal", "", false, false, "");
        this.RegisterEvent(1045, "Table Tools Design Tab -> Properties -> Table1 text box", "", false, false, "");
        this.RegisterEvent(1046, "Slicer Tools Options Tab -> Slicer -> Customer type text box", "", false, false, "");
        this.RegisterEvent(1047, "PivotTable Tools Analyze Tab -> Pivot table -> Options dropdown -> Options", "", false, false, "");
        this.RegisterEvent(1048, "PivotTable Tools Analyze Tab -> Pivot table -> Options", "", false, false, "");
        this.RegisterEvent(1049, "PivotTable Tools Design Tab -> PivotTable Style Options -> Banded Rows check box", "", false, false, "");
        this.RegisterEvent(1050, "PivotChart Tools Design Tab -> Chart Styles -> Change colors dropdown -> Color 2", "", false, false, "");
        this.RegisterEvent(1051, "Table Tools Design Tab -> Tools -> Summarize with PivotTable", "", false, false, "");
        this.RegisterEvent(1052, "DEVELOPER Tab -> Controls -> Insert arrow -> ActiveX control -> Command ", "", false, false, "");
        this.RegisterEvent(1053, "DEVELOPER Tab -> Controls -> Insert arrow -> ActiveX control -> Check Box ", "", false, false, "");
        this.RegisterEvent(1054, "Excel - Picture Tools Format  - Picture Styles- Picture Effect - Preset- Options", "", false, false, "");
        this.RegisterEvent(1055, "Excel - Picture Tools Format  - Picture Styles- Picture Effect - Shadow- Options", "", false, false, "");
        this.RegisterEvent(1056, "Excel - Picture Tools Format  - Picture Styles- Picture Effect - Reflection- Options", "", false, false, "");
        this.RegisterEvent(1057, "Excel - Picture Tools Format  - Picture Styles- Picture Effect - Glow- More Options", "", false, false, "");
        this.RegisterEvent(1058, "Excel - Picture Tools Format  - Picture Styles- Picture Effect - Soft Edges- Options", "", false, false, "");
        this.RegisterEvent(1059, "Excel - Picture Tools Format  - Picture Styles- Picture Effect - Bevel- Options", "", false, false, "");
        this.RegisterEvent(1060, "Excel - Picture Tools Format  - Picture Styles- Picture Effect - 3 D Rotation- Options", "", false, false, "");
        this.RegisterEvent(1061, "Power Pivot- HOME -> PivotTable group -> PivotTable arrow -> click Four Charts", "", false, false, "");
        this.RegisterEvent(1062, "PivotChart Tools Analyze Tab -> PivotChart group -> Chart Name box", "", false, false, "");
        this.RegisterEvent(1063, "Design -> Switch Visualization -> Column Chart -> Clustered Column", "", false, false, "");
        this.RegisterEvent(1064, "Power Pivot- HOME -> Calculations group -> Create KPI", "", false, false, "");
        this.RegisterEvent(1065, "PowerView -> Themes -> Themes -> Hardcover", "", false, false, "");
        this.RegisterEvent(1066, "PowerView -> Themes -> Background -> Dark 1 Vertical Gradient", "", false, false, "");
        this.RegisterEvent(1067, "PIVORTCHART Tools Analyze tab -> Show/Hide group -> Field Buttons", "", false, false, "");
        this.RegisterEvent(1068, "Design -> Switch Visualization -> Bar Chart -> Clustered Column", "", false, false, "");
        this.RegisterEvent(1069, "PowerView -> View -> Field List", "", false, false, "");
        this.RegisterEvent(1070, "Power Pivot -> Home tab -> Formatting group -> Format: General arrow -> Currency", "", false, false, "");
        this.RegisterEvent(1071, "Design -> Slicer -> Slicer", "", false, false, "");
        this.RegisterEvent(1072, "INSERT tab -> Apps group -> Store", "", false, false, "");
        this.RegisterEvent(1073, "Power Pivot -> Home tab -> View -> data view", "", false, false, "");
        this.RegisterEvent(1074, "Power Pivot -> Home tab -> View -> diagram view", "", false, false, "");
        this.RegisterEvent(1075, "PowerView -> View -> Filters Area", "", false, false, "");
        this.RegisterEvent(1076, "Power Pivot tab -> Tables -> Add to data model", "", false, false, "");
        this.RegisterEvent(1077, "Power Pivot -> Design tab -> Relationships -> Create Realationship", "", false, false, "");
        this.RegisterEvent(1078, "Formulas tab -> Function Library Group -> Financial -> DB", "", false, false, "");
        this.RegisterEvent(1079, "Formulas tab -> Function Library Group -> Financial -> DDB", "", false, false, "");
        this.RegisterEvent(1080, "Formulas tab -> Function Library Group -> Financial -> RATE", "", false, false, "");
        this.RegisterEvent(1081, "Formulas tab -> Function Library Group -> Financial -> NPV", "", false, false, "");
        this.RegisterEvent(1082, "Formulas tab -> Function Library Group -> Financial -> XIRR", "", false, false, "");
        this.RegisterEvent(1083, "Formulas tab -> Function Library Group -> Financial -> FV", "", false, false, "");
        this.RegisterEvent(1084, "Formulas tab -> Function Library Group -> Financial -> SLN", "", false, false, "");
        this.RegisterEvent(1085, "PIVORTCHART Tools Analyze tab -> Filter group -> Insert Slicer", "", false, false, "");
        this.RegisterEvent(1086, "Formulas tab -> Function Library Group -> Financial -> NPER", "", false, false, "");
        this.RegisterEvent(1087, "Formulas tab -> Function Library Group -> Financial -> IRR", "", false, false, "");
        this.RegisterEvent(1088, "Formulas tab -> Function Library Group -> Financial -> XNPV", "", false, false, "");
        this.RegisterEvent(1089, "Formulas tab -> Function Library Group -> More Functions --> Statistical -> NORM.DIST", "", false, false, "");
        this.RegisterEvent(1090, "Formulas tab -> Function Library Group -> Math & Trig -> RAND", "", false, false, "");
        this.RegisterEvent(1091, "Formulas tab -> Function Library Group -> More Functions --> Statistical -> COVARIANCE.S", "", false, false, "");
        this.RegisterEvent(1092, "Formulas tab -> Function Library Group -> More Functions --> Statistical -> EXPON.DIST", "", false, false, "");
        this.RegisterEvent(1093, "Fire event on TAB click", "", false, false, "");
        this.RegisterEvent(1094, "Ribbon collapse event", "", false, false, "");
        this.RegisterEvent(1095, "Formulas tab -> Function Library Group -> More Functions --> Statistical -> BINOM.DIST", "", false, false, "");
        this.RegisterEvent(1096, "Slicer Tools Options -> Slicer group  -> Report Connections", "", false, false, "");
        this.RegisterEvent(1097, "View tab -> Show Group -> Headings", "", false, false, "");
        this.RegisterEvent(1098, "Insert tab-> Charts group-> Insert Scatter (X,Y) or Bubble Chart-> Scatter with Smooth Lines", "", false, false, "");
        this.RegisterEvent(1099, "Formulas tab -> Function Library group -> More Functions -> Statistical -> HYPGEOM.DIST", "", false, false, "");
        this.RegisterEvent(1100, "Formulas tab -> Function Library group -> More Functions -> Statistical -> POISSON.DIST", "", false, false, "");
        this.RegisterEvent(1101, "Picture tools format tab -> Adjust -> Change Picture", "", false, false, "");
        this.RegisterEvent(1102, "Developer tab -> Code Group -> Use Relative References", "", false, false, "");
        this.RegisterEvent(1103, "View tab -> Window Group -> Switch Windows -> Option 1", "", false, false, "");
        this.RegisterEvent(1104, "View tab -> Window Group -> Switch Windows -> Option 2", "", false, false, "");
        this.RegisterEvent(1105, "Formulas tab -> Formula Auditing -> Evaluate Formula", "", false, false, "");
        this.RegisterEvent(1106, "Data tab -> Data Tools -> Consolidate", "", false, false, "");
        this.RegisterEvent(1107, "Formulas Tab -> Function Library Group -> Text -> LEN", "", false, false, "");
        this.RegisterEvent(1108, "Formulas Tab -> Function Library Group -> Date & Time -> DATE", "", false, false, "");
        this.RegisterEvent(1109, "Formulas Tab -> Function Library Group -> Text -> FIND", "", false, false, "");
        this.RegisterEvent(1110, "Formulas Tab -> Function Library Group -> Text -> TRIM", "", false, false, "");
        this.RegisterEvent(1111, "HOME tab -> Styles group -> Conditional Formatting -> Highlight Cells Rules -> Duplicate Values", "", false, false, "");
        this.RegisterEvent(1112, "Formulas Tab -> Function Library Group -> Date & Time -> DATEVALUE", "", false, false, "");
        this.RegisterEvent(1113, "INSERT tab -> Apps group -> My Apps", "", false, false, "");
        this.RegisterEvent(1114, "INSERT tab -> Apps group -> My Apps arrow -> See All", "", false, false, "");
        this.RegisterEvent(1115, "INSERT tab -> Apps group -> My Apps arrow -> Bing Maps", "", false, false, "");
        this.RegisterEvent(1116, "PIVOTCHART_TOOLS_ANALYSE tab -> Show/Hide group -> Field Buttons arrow -> show report", "", false, false, "");
        this.RegisterEvent(1117, "PIVOTCHART_TOOLS_ANALYSE tab -> Show/Hide group -> Field Buttons arrow -> show legend", "", false, false, "");
        this.RegisterEvent(1118, "PIVOTCHART_TOOLS_ANALYSE tab -> Show/Hide group -> Field Buttons arrow -> show axis", "", false, false, "");
        this.RegisterEvent(1119, "PIVOTCHART_TOOLS_ANALYSE tab -> Show/Hide group -> Field Buttons arrow -> show value", "", false, false, "");
        this.RegisterEvent(1120, "PIVOTCHART_TOOLS_ANALYSE tab -> Show/Hide group -> Field Buttons arrow -> hide all", "", false, false, "");
        this.RegisterEvent(1121, "Home Tab -> Style -> Conditional Formatting -> Highlight Cell Rules -> Greater than", "", false, false, "");
        this.RegisterEvent(1122, "Developer Tab -> Control Group -> Insert -> Form Control -> Scroll bar control", "", false, false, "");
        this.RegisterEvent(1123, "FORMULAS tab -> Function Library group -> Text -> MID", "", false, false, "");
        this.RegisterEvent(1124, "FORMULAS tab -> Function Library group -> date and time -> NETWORKDAYS", "", false, false, "");
        this.RegisterEvent(1125, "FORMULAS tab -> Function Library group -> Text -> REPLACE", "", false, false, "");
        this.RegisterEvent(1126, "Excel - Insert Tab -> Charts Group -> Insert bar chart ->3-D Clustured Bar", "", false, false, "");
        this.RegisterEvent(1127, "FORMULAS tab -> Formula Auditing -> Remove Arrows -> Remove Precedent Arrows", "", false, false, "");
        this.RegisterEvent(1128, "FORMULAS tab -> Formula Auditing  -> Remove Arrows -> Remove Dependent Arrows", "", false, false, "");
        this.RegisterEvent(1129, "FORMULAS tab -> Function Library group -> Text -> TEXT", "", false, false, "");
        this.RegisterEvent(1130, "DEVELOPER tab -> XML group -> Text -> Source", "", false, false, "");
        this.RegisterEvent(1131, "View tab -> Macros group -> Macros -> Use Relative References", "", false, false, "");
        this.RegisterEvent(1132, "TABLE TOOLS DESIGN -> External Table Data -> Refresh", "", false, false, "");
        this.RegisterEvent(1133, "DEVELOPER tab -> Controls -> Insert -> Spin Button (Form Control)", "", false, false, "");
        this.RegisterEvent(1134, "TABLE TOOLS DESIGN -> External Table Data -> Refresh drop[down -> Refresh All", "", false, false, "");
        this.RegisterEvent(1135, "Word - MailingsTab - Create group-Labels clicked", "", false, false, "");
        this.RegisterEvent(1136, "HOME -> Font -> Increase Font Size", "", false, false, "");
        this.RegisterEvent(1137, "TITLEBAR -> QAT -> Save", "", false, false, "");
        this.RegisterEvent(1138, "Powerpivot ribbon Home -> Formatting -> Appy Currency Format -> English United States", "", false, false, "");
        this.RegisterEvent(1139, "Powerpivot ribbon Home -> Formatting -> Appy Currency Format -> More Formats", "", false, false, "");
        this.RegisterEvent(1140, "TABLE TOOLS DESIGN -> Tools -> Insert Slicer", "", false, false, "");
        this.RegisterEvent(1141, "Excel -> Styles -> Cell Styles -> Accent 1 Context menu", "", false, false, "");
        this.RegisterEvent(1142, "Excel -> Styles -> Cell Styles -> Heading 2 Context menu", "", false, false, "");
        this.RegisterEvent(1143, "Excel -> Styles -> Cell Styles -> Heading 4 Context menu", "", false, false, "");
        this.RegisterEvent(1144, "Excel -> Styles -> Cell Styles -> Accent 5 Context menu", "", false, false, "");
        this.RegisterEvent(1145, "Excel -> Styles -> Cell Styles -> Heading 1 Context menu", "", false, false, "");
        this.RegisterEvent(1146, "Excel -> Styles -> Cell Styles -> Title Context menu", "", false, false, "");
        this.RegisterEvent(1147, "Excel -> Styles -> Cell Styles -> Comma Context menu", "", false, false, "");
        this.RegisterEvent(1148, "Excel -> Styles -> Cell Styles -> Comma [0] Context menu", "", false, false, "");
        this.RegisterEvent(1149, "Excel -> Styles -> Cell Styles -> Normal Context menu", "", false, false, "");
        this.RegisterEvent(1150, "Excel -> Styles -> Cell Styles -> Input Context menu", "", false, false, "");
        this.RegisterEvent(1151, "Excel -> Styles -> Cell Styles -> Note Context menu", "", false, false, "");
        this.RegisterEvent(1152, "Excel -> Styles -> Cell Styles -> 20% - Accent1 Context menu", "", false, false, "");
        this.RegisterEvent(1153, "Excel -> Styles -> Cell Styles -> 20% - Accent2 Context menu", "", false, false, "");
        this.RegisterEvent(1154, "Excel -> Styles -> Cell Styles -> 20% - Accent6 Context menu", "", false, false, "");
        this.RegisterEvent(1155, "Excel -> Styles -> Cell Styles -> 40% - Accent1 Context menu", "", false, false, "");
        this.RegisterEvent(1156, "Excel -> Styles -> Cell Styles -> Accent4 Context menu", "", false, false, "");
        this.RegisterEvent(1157, "Excel -> Styles -> Cell Styles -> Currency [0] Context menu", "", false, false, "");
        this.RegisterEvent(1158, "Excel -> Styles -> Cell Styles -> Percent Context menu", "", false, false, "");

        this.RegisterEvent(9999, "Ribbon_Incorrect_Click", "Ribbon: Incorrect Button Clicked", "", false, false, "");

    },

    //    HandleAccelaraterKey: function (event) {
    //        alert("gjdfjklgj");
    //        //console.log(this.Compinfo.compName + ": " + (event.ctrlKey == true ? "Ctrl + " : "") + (event.altKey == true ? "Alt + " : "") + (event.shiftKey == true ? "Shift + " : "") + event.keyCode + " pressed");
    //        //if(event.keyCode ==
    //        return false;
    //    },

    LogComponentEvent: function (eventId, desc, bsafe) {

        this.CheckAndMoveToNormalState(eventId);
        this.base(eventId, desc, bsafe);
    },

    CheckAndMoveToNormalState: function (eventId) {
        if ((eventId !== 124) && (eventId !== 5124)) {//Do not change state for File Menu Event.
            this.goIntoNormalState();
        }
    },

    SetAttribute: function (compid, attrName, attrValue) {

        var $thisComp = this.$thisCompElement;
        var params = null;


        try {
            var attr = getArray(this._compinfo.initialattrs.attr).find("@name", attrName);

            if (attr.length > 0) {
                params = attr[0]["@params"];
            }
        }
        catch (ex) { };

        switch (attrName) {

            //case "SPACING_BEFORE":        
            //    $thisComp.find(".LeftNumericUpDownBefore").val(attrValue);        
            //    break;        
            case "CHANGE_TAB_NAME":

                var attrVal = attrValue;
                //Header footer tab name is corrected in ribbon xml. Thus to support the old tasks below check is added.
                if (attrValue == "Header Footer Tools" || attrValue == "Header & Footer Tools")
                    attrVal = "Header Footer Tools Design";

                var tabNameMin = params.removeSpaces().replace("&amp;", "").replace("&", "").toLowerCase();
                var $tabHeader = $thisComp.find('.tab-header-' + tabNameMin);
                var $children = $tabHeader.children();

                $tabHeader.text(attrVal).append($children);

                break;

            case "HIDE_TAB":
                this.HideTab(attrValue);
                this.RemoveTabFromList(attrValue);

                break;

            case "ACTIVATE_TAB":
                var attrVal = attrValue;
                //Header footer tab name is corrected in ribbon xml. Thus to support the old tasks below check is added.
                if (attrValue == "Header Footer Tools" || attrValue == "Header & Footer Tools")
                    attrVal = "Header Footer Tools Design";

                var tabNameMin = attrVal.removeSpaces().replace("&amp;", "").replace("&", "").toLowerCase();

                // adding modified tab name in a array which is used to check at the time when contextual tab is shown or hide.
                if (this.activatedTabsList.indexOf(tabNameMin) === -1) {
                    this.activatedTabsList.push(tabNameMin);
                }

                var $tabHeader = $thisComp.find('.tab-header-' + tabNameMin);

                $tabHeader.show();

                //add css for contextual tab head
                var headText = $tabHeader.data("head-text");
                if (headText != undefined) {

                    var headNameMin = headText.removeSpaces().replace("&", "").toLowerCase();
                    var $contextualTabHead = $thisComp.find(".contextual-head-" + headNameMin);

                    //special handling for Excel Power Pivot ribbon contextual tabs
                    if ($contextualTabHead.parents().hasClass('excel-power-pivot ribbon')) {
                        $contextualTabHead.text(headText.toLowerCase());
                    }

                    //special handling for chart tools design tab
                    if ($tabHeader.is(".tab-header-charttoolsdesign")) {
                        var $chartToolFormatTab = $thisComp.find(".tab-header-charttoolsformat");
                        $contextualTabHead.css({ "left": $tabHeader.offset().left, "width": $tabHeader.outerWidth() + $chartToolFormatTab.outerWidth() + 5 })
                    }
                    else if ($tabHeader.is(".tab-header-charttoolsformat")) {
                        var $chartToolDesignTab = $thisComp.find(".tab-header-charttoolsdesign");
                        $contextualTabHead.css({ "left": $chartToolDesignTab.offset().left, "width": $tabHeader.outerWidth() + $chartToolDesignTab.outerWidth() + 5 })
                    }
                    //special handling for table tools tabs  -- Word Ribbon
                    else if ($tabHeader.is(".word .tab-header-tabletoolsdesign")) {
                        var $tab = $thisComp.find(".tab-header-tabletoolslayout");
                        $contextualTabHead.css({ "left": $tabHeader.offset().left, "width": $tabHeader.outerWidth() + $tab.outerWidth() + 5 })
                    }
                    else if ($tabHeader.is(".tab-header-tabletoolslayout")) {
                        var $tab = $thisComp.find(".tab-header-tabletoolsdesign");
                        $contextualTabHead.css({ "left": $tab.offset().left, "width": $tabHeader.outerWidth() + $tab.outerWidth() + 5 })
                    }
                    //special handling for smartart tools tabs
                    else if ($tabHeader.is(".tab-header-smartarttoolsformat")) {
                        var $tab = $thisComp.find(".tab-header-smartarttoolsdesign");
                        $contextualTabHead.css({ "left": $tab.offset().left, "width": $tabHeader.outerWidth() + $tab.outerWidth() + 5 })
                    }
                    else if ($tabHeader.is(".tab-header-smartarttoolsdesign")) {
                        var $tab = $thisComp.find(".tab-header-smartarttoolsformat");
                        $contextualTabHead.css({ "left": $tabHeader.offset().left, "width": $tabHeader.outerWidth() + $tab.outerWidth() + 5 })
                    }
                    else if ($tabHeader.is(".tab-header-pivottabletoolsanalyze")) {
                        var $pivottabletoolsdesign = $thisComp.find(".tab-header-pivottabletoolsdesign");
                        $contextualTabHead.css({ "left": $tabHeader.offset().left, "width": $tabHeader.outerWidth() + $pivottabletoolsdesign.outerWidth() + 5 })
                    }
                    else if ($tabHeader.is(".tab-header-pivottabletoolsdesign")) {
                        var $pivottabletoolsanalyze = $thisComp.find(".tab-header-pivottabletoolsanalyze");
                        $contextualTabHead.css({ "left": $pivottabletoolsanalyze.offset().left, "width": $tabHeader.outerWidth() + $pivottabletoolsanalyze.outerWidth() + 5 })
                    }
                    else if ($tabHeader.is(".tab-header-pivotcharttoolsanalyze")) {
                        var $pivotcharttoolsdesign = $thisComp.find(".tab-header-pivotcharttoolsdesign");
                        var $pivotcharttoolsformat = $thisComp.find(".tab-header-pivotcharttoolsformat");
                        $contextualTabHead.css({ "left": $tabHeader.offset().left, "width": $tabHeader.outerWidth() + $pivotcharttoolsdesign.outerWidth() + $pivotcharttoolsformat.outerWidth() + 10 })
                    }
                    else if ($tabHeader.is(".tab-header-pivotcharttoolsdesign")) {
                        var $pivotcharttoolsanalyze = $thisComp.find(".tab-header-pivotcharttoolsanalyze");
                        var $pivotcharttoolsformat = $thisComp.find(".tab-header-pivotcharttoolsformat");
                        $contextualTabHead.css({ "left": $pivotcharttoolsanalyze.offset().left, "width": $pivotcharttoolsanalyze.outerWidth() + $tabHeader.outerWidth() + $pivotcharttoolsformat.outerWidth() + 10 })
                    }
                    else if ($tabHeader.is(".tab-header-pivotcharttoolsformat")) {
                        var $pivotcharttoolsanalyze = $thisComp.find(".tab-header-pivotcharttoolsanalyze");
                        var $pivotcharttoolsdesign = $thisComp.find(".tab-header-pivotcharttoolsdesign");
                        $contextualTabHead.css({ "left": $pivotcharttoolsanalyze.offset().left, "width": $pivotcharttoolsanalyze.outerWidth() + $tabHeader.outerWidth() + $pivotcharttoolsdesign.outerWidth() + 10 })
                    }
                    else {
                        $contextualTabHead.css({ "left": $tabHeader.offset().left, "width": $tabHeader.outerWidth() })
                    }
                    $contextualTabHead.show();

                    //special handling for Excel Power Pivot ribbon contextual tabs, as those TABs open at the left side of the title bar instead of right
                    //Threfore repositioning of title text is avoided
                    if (!($contextualTabHead.parents().hasClass('excel-power-pivot ribbon'))) {
                        var $control = $thisComp.find('.title-bar .office-control.ctrl-text');
                        var wd = $control.innerWidth();
                        var controlPos = ($tabHeader.offset().left - wd).toString() + "px";
                        $control.css({ "position": "absolute", "left": "255px", "top": "6px" });
                    }
                    else {
                        // do nothing
                    }

                }

                break;
            case "DOCUMENT_NAME":
                var $control = $thisComp.find('.title-bar .office-control.ctrl-text');
                this.manipulatorFactory.getManipulator($control).setData($control, {
                    text: attrValue
                });
                break;
            case "CENTER_ALIGN":


                var $homeTab = $thisComp.find('#ribbon-tab-container-home');

                if ($homeTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($homeTab, attrName, attrValue);
                }


                else {
                    var $control = $thisComp.find('.office-control.align-center .button-binder');
                    if (attrValue.toLowerCase() === "true") {
                        $control.addClass('active-toggle');
                    }
                    else {
                        $control.removeClass('active-toggle');
                    }
                }

                break;
            case "WATCH_WINDOW":

                var $frmlasTab = $thisComp.find('#ribbon-tab-container-formulas');

                if ($frmlasTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($frmlasTab, attrName, attrValue);
                }


                else {
                    var $control = $thisComp.find('.office-control.formula_watch_windows .button-binder');
                    if (attrValue.toLowerCase() == "true") {
                        $control.addClass('active-toggle');
                    }
                    else {
                        $control.removeClass('active-toggle');
                    }
                }

                break;
            case "LEFT_ALIGN":


                var $homeTab = $thisComp.find('#ribbon-tab-container-home');

                if ($homeTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($homeTab, attrName, attrValue);
                }


                else {

                    var $control = $thisComp.find('.office-control.align-left .button-binder');
                    if (attrValue.toLowerCase() === "true") {
                        $control.addClass('active-toggle');
                    }
                    else {
                        $control.removeClass('active-toggle');
                    }

                }
                break;
            case "FORMAT_PAINTER":
                var $homeTab = $thisComp.find('#ribbon-tab-container-home');

                if ($homeTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($homeTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.format-painter .button-binder', attrValue);
                }
                break;

            case "TEXT_HIGHLIGHT_COLOR":
                var $homeTab = $thisComp.find('#ribbon-tab-container-home');

                if ($homeTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($homeTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.word-font-highlight .button-binder', attrValue);
                }
                break;

            case "HIGHLIGHT_UNDERLINE":
                var $homeTab = $thisComp.find('#ribbon-tab-container-home');

                if ($homeTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($homeTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.highlight-underline .combobox', attrValue);
                }
                break;

            case "FORMAT_PAINTER_EXCEL":
                var $homeTab = $thisComp.find('#ribbon-tab-container-home');

                if ($homeTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($homeTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.format-painter-excel .button-binder', attrValue);
                }
                break;

            case "RIGHT_ALIGN":
                var $homeTab = $thisComp.find('#ribbon-tab-container-home');

                if ($homeTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($homeTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.align-right .button-binder', attrValue);
                }
                break;
            case "TEXT_PANE_HIGHLIGHTED":
                var $smartArtDesignTab = $thisComp.find('#ribbon-tab-container-smartarttoolsdesign');

                if ($smartArtDesignTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($smartArtDesignTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.text-pane .button-binder', attrValue);
                }
                break;
            case "JUSTIFY":
                var $homeTab = $thisComp.find('#ribbon-tab-container-home');

                if ($homeTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($homeTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.justify .button-binder', attrValue);
                }
                break;
            case "PARAGRAPH_MARKER_PRESSED":
                var $homeTab = $thisComp.find('#ribbon-tab-container-home');

                if ($homeTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($homeTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.paragraph-marker .button-binder', attrValue);
                }
                break;
            case "EXCEL_SELECTED_SHAPE_INDEX":

                //this.setGalleryItem('excel-drawing-shape-gallery', attrValue);
                //Not sure of this change
                var $drawingToolsFormatTab = $thisComp.find('#ribbon-tab-container-drawingtoolsformat');

                if ($drawingToolsFormatTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($drawingToolsFormatTab, attrName, attrValue);
                }
                else {
                    this.setSelectedGalleryControlItem('excel-drawing-shape-gallery', attrValue);
                }

                break;
            case "WORDART_SELECTED_STYLE_INDEX":

                //this.setGalleryItem('excel-wordart-style-gallery', attrValue);
                //Not sure of this change
                var $drawingToolsFormatTab = $thisComp.find('#ribbon-tab-container-drawingtoolsformat');

                if ($drawingToolsFormatTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($drawingToolsFormatTab, attrName, attrValue);
                }
                else {
                    this.setSelectedGalleryControlItem('excel-wordart-style-gallery', attrValue);
                }
                break;
            case "HIGHLIGHT_BOLD":
                var $homeTab = $thisComp.find('#ribbon-tab-container-home');

                if ($homeTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($homeTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.boldbutton .button-binder', attrValue);
                }
                break;
            case "HIGHLIGHT_HOME_BORDERS":
                var $homeTab = $thisComp.find('#ribbon-tab-container-home');

                if ($homeTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($homeTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.borders .combobox', attrValue);
                }
                break;
            case "HIGHLIGHT_ALIGN_TOP_LEFT":
                var $tabletoolslayout = $thisComp.find('#ribbon-tab-container-tabletoolslayout');

                if ($tabletoolslayout.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($tabletoolslayout, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.aligntopleft .button-binder', attrValue);
                }
                break;
            case "HIGHLIGHT_ALIGN_CENTER_LEFT":
                var $tabletoolslayout = $thisComp.find('#ribbon-tab-container-tabletoolslayout');

                if ($tabletoolslayout.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($tabletoolslayout, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.aligncenterleft .button-binder', attrValue);
                }
                break;
            case "HIGHLIGHT_ALIGN_TOP_CENTER":
                var $tabletoolslayout = $thisComp.find('#ribbon-tab-container-tabletoolslayout');

                if ($tabletoolslayout.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($tabletoolslayout, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.aligntopcenter .button-binder', attrValue);
                }

                break;
            case "HIGHLIGHT_RESTRICT_EDITING":
                var $reviewTab = $thisComp.find('#ribbon-tab-container-review');

                if ($reviewTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($reviewTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.restrictediting .button-binder', attrValue);
                }
                break;
            case "HIGHLIGHT_ALIGN_TOPRIGHT":
                var $tabletoolslayout = $thisComp.find('#ribbon-tab-container-tabletoolslayout');

                if ($tabletoolslayout.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($tabletoolslayout, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.aligntopright .button-binder', attrValue);
                }
                break;
            case "HIGHLIGHT_ALIGN_CENTER":
                var $tabletoolslayout = $thisComp.find('#ribbon-tab-container-tabletoolslayout');

                if ($tabletoolslayout.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($tabletoolslayout, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.aligntablecenter .button-binder', attrValue);
                }
                break;
            case "HIGHLIGHT_TRACK_CHANGES":
                var $reviewTab = $thisComp.find('#ribbon-tab-container-review');

                if ($reviewTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($reviewTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.trackchange .combobox', attrValue);
                }
                break;
            case "HIGHLIGHT_ITALICS":
                var $homeTab = $thisComp.find('#ribbon-tab-container-home');

                if ($homeTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($homeTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.italicsbutton .button-binder', attrValue);
                }
                break;
            case "PIVOTTABLETOOLS_HIGHLIGHT_FIELD_LIST":
                var $pivottabletoolsanalyze = $thisComp.find('#ribbon-tab-container-pivottabletoolsanalyze');

                if ($pivottabletoolsanalyze.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($pivottabletoolsanalyze, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.field_list .button-binder', attrValue);
                }
                break;
            case "PIVOTCHARTTOOLS_HIGHLIGHT_FIELD_LIST":
                var $pivotcharttoolsanalyze = $thisComp.find('#ribbon-tab-container-pivotcharttoolsanalyze');

                if ($pivotcharttoolsanalyze.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($pivotcharttoolsanalyze, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.pivot_chart_field_list .button-binder', attrValue);
                }
                break;
            case "PIVOTTABLETOOLS_HIGHLIGHT_+/-BUTTONS":
                var $pivottabletoolsanalyze = $thisComp.find('#ribbon-tab-container-pivottabletoolsanalyze');

                if ($pivottabletoolsanalyze.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($pivottabletoolsanalyze, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.plus_minus_buttons .button-binder', attrValue);
                }
                break;
            case "PIVOTTABLETOOLS_HIGHLIGHT_FIELD_HEADERS":
                var $pivottabletoolsanalyze = $thisComp.find('#ribbon-tab-container-pivottabletoolsanalyze');

                if ($pivottabletoolsanalyze.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($pivottabletoolsanalyze, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.field_headers .button-binder', attrValue);
                }
                break;
            case "PIVOTCHARTTOOLS_HIGHLIGHT_FIELD_BUTTONS":
                var $pivotcharttoolsanalyze = $thisComp.find('#ribbon-tab-container-pivotcharttoolsanalyze');
                if ($pivotcharttoolsanalyze.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($pivotcharttoolsanalyze, attrName, attrValue);
                }
                else {
                    this.pivotChartToolsFieldButton = attrValue;
                    this.toggleButton('.office-control.pivot_chart_field_buttons', attrValue);
                }
                break;
            case "TOGGLE_STATE":
                this.toggleButton('.office-control.' + params + ' .button-binder', attrValue);
                break;
            case "SEL_TAB":
                var attrVal = attrValue;
                //Header footer tab name is corrected in ribbon xml. Thus to support the old tasks below check is added.
                if (attrValue == "Header Footer Tools" || attrValue == "Header & Footer Tools")
                    attrVal = "Header Footer Tools Design";

                var tabNameMin = attrVal.removeSpaces().replace("&amp;", "").replace("&", "").toLowerCase();
                var $tabHeader = $thisComp.find('.tab-header-' + tabNameMin);
                this.manipulatorFactory.getManipulator($tabHeader).selectTab($tabHeader);

                break;
            case "FONT_SIZE":
                var $homeTab = $thisComp.find('#ribbon-tab-container-home');

                if ($homeTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($homeTab, attrName, attrValue);
                }
                else {
                    this.setTextBoxVal("font-size", attrValue);
                }
                break;
            case "FONT_NAME":
                var $homeTab = $thisComp.find('#ribbon-tab-container-home');

                if ($homeTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($homeTab, attrName, attrValue);
                }
                else {
                    this.setTextBoxVal("font-name", attrValue);
                }
                break;
            case "NUM_FORMAT":
                var $homeTab = $thisComp.find('#ribbon-tab-container-home');

                if ($homeTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($homeTab, attrName, attrValue);
                }
                else {
                    this.setTextBoxVal("num-format", attrValue);
                }
                break;
            case "PIVOTTABLETOOLS_ACTIVE_FIELD":
                var $pivottabletoolsanalyze = $thisComp.find('#ribbon-tab-container-pivottabletoolsanalyze');

                if ($pivottabletoolsanalyze.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($pivottabletoolsanalyze, attrName, attrValue);
                }
                else {
                    $thisComp.find('.pivottabletools_activefield').find('.sims-TextBox').setData({ "value": attrValue });
                }
                break;
            case "PIVOTTABLETOOLS_TABLE_NAME":
                var $pivottabletoolsanalyze = $thisComp.find('#ribbon-tab-container-pivottabletoolsanalyze');

                if ($pivottabletoolsanalyze.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($pivottabletoolsanalyze, attrName, attrValue);
                }
                else {
                    $thisComp.find('.pivottabletools_tablename').find('.sims-TextBox').setData({ "value": attrValue });
                }
                break
            case "TABLETOOLS_DESIGN_TABLE_NAME":
                var $tabletoolsdesign = $thisComp.find('#ribbon-tab-container-tabletoolsdesign');

                if ($tabletoolsdesign.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($tabletoolsdesign, attrName, attrValue);
                }
                else {
                    $thisComp.find('.tabletools_tablename').find('.sims-TextBox').setData({ "value": attrValue });
                }
                break;
            case "SLICERTOOLS_OPTIONS_SLICER_CAPTION":
                var $sliceroptionsTab = $thisComp.find('#ribbon-tab-container-slicertoolsoptions');

                if ($sliceroptionsTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($sliceroptionsTab, attrName, attrValue);
                }
                else {
                    $thisComp.find('.slicer_caption_name').find('.sims-TextBox').setData({ "value": attrValue });
                }
                break;
            case "PIVOTCHARTTOOLS_CHART_NAME":
                var $pivotcharttoolsanalyze = $thisComp.find('#ribbon-tab-container-pivotcharttoolsanalyze');

                if ($pivotcharttoolsanalyze.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($pivotcharttoolsanalyze, attrName, attrValue);
                }
                else {
                    $thisComp.find('.pivotcharttools_chartname').find('.sims-TextBox').setData({ "value": attrValue });
                }
                break;
            case "BOLD":
                break;

            //            case "NUM_FORMAT":        
            //                $thisComp.find('#num-format.office-control input').val(attrName);        
            //                break;        
            case "BOTTOM_ALIGN":
                var $homeTab = $thisComp.find('#ribbon-tab-container-home');

                if ($homeTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($homeTab, attrName, attrValue);
                }
                else {
                    var bool = attrValue.toLowerCase();
                    var $button = $thisComp.find('#bottom-align.office-control .button-binder');
                    if (bool == '1' || bool == 'true') {
                        $button.addClass('active-toggle');
                    }
                    else {
                        $button.removeClass('active-toggle');
                    }
                }
                break;
            case "TOP_ALIGN":
                var $homeTab = $thisComp.find('#ribbon-tab-container-home');

                if ($homeTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($homeTab, attrName, attrValue);
                }
                else {
                    var bool = attrValue.toLowerCase();
                    var $button = $thisComp.find('#top_align.office-control .button-binder');
                    if (bool == '1' || bool == 'true') {
                        $button.addClass('active-toggle');
                    }
                    else {
                        $button.removeClass('active-toggle');
                    }
                }
                break;
            case "ITALICS":
                break;
            case "ALIGNLEFT":
                break;
            case "ALIGNBOTTOM":
                break;
            case "APP":
                this.appName = attrValue;
                gRibbonCMTheme = this.appName;
                break;
            case "RIBBON_PATH":
                this.ribbonXmlPath = this.GetXmlPathFromMap(attrValue);
                var self = this;
                var ribbonGenr = this.ribbonGenerator = new ribbonGenerator();

                if (this.ribbonGenArr) {
                    this.ribbonGenArr.push(this.ribbonGenerator);
                }

                var path = this.ribbonXmlPath; // = 'Comps/ExcelRibbon/word-ribbon.xml';

                //Load 1024 ribbon xml for lower resolutions
                if (gSimsAreaWidth < 1279) {
                    path = this.ribbonXmlPath.replace(".xml", "_1024.xml");

                }
                //Making ribbon generation to be only once for a task...
                //Need to correct this later if required
                if ($thisComp.children('.ribbon').length == 0) {

                    var storedXml = SIMS.Components.Common.RibbonXML.Get(path);

                    if (storedXml) {
                        self.CreateRibbon(storedXml);
                    }
                    else {
                        $.ajax({
                            async: false,
                            url: path,
                            success: function (xml) {
                                SIMS.Components.Common.RibbonXML.Set(xml, path);
                                self.CreateRibbon(xml);
                            }
                        });
                    }
                }
                break;
            case "RIBBON_SUB_XML":
                this.controlXMLPath = attrValue;
                break;
            case "SUB_XML_UPDATE":
                this.controlXMLUpdate = attrValue;
                break;
            case "ATTACH_SUB_RIBBON_WITH_IDENTIFIER":
                if (attrValue === "true") {
                    this.AttachSubRibbonWithIdentifier = true;
                }
                break;

            case "QAT_TRACK_CHANGES":
                this.hideShowControl('.qat-track-changes', attrValue);
                break;
            case "QAT_QUICK_PRINT":
                this.hideShowControl('.qat-quick-print', attrValue);
                break;
            case "QAT_SPELLING_GRAMMAR":
                this.hideShowControl('.qat-spelling-grammar', attrValue);
                break;
            case "QAT_PRINT_PREVIEW":
                this.hideShowControl('.qat-print-preview', attrValue);
                break;
            case "THEME":

                this.colorTheme = attrValue;
                // To set THEME twice - in case - Monalika-AShwin
                var $colorGrids = this.$thisCompElement.find('.sims-ColorGrid.sims-control');

                if ($colorGrids.length != 0) {
                    $colorGrids.setData({
                        theme: attrValue
                    });
                }

                //updating the color theme in GenerateHTML after sub ribbon XML update
                break;
            case "PARA_SPACING_AFTER":
                var $pageLayoutTab = this.getWordLayoutTabContainer($thisComp);

                if ($pageLayoutTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($pageLayoutTab, attrName, attrValue);
                }
                else {
                    var $control = $thisComp.find('.para-spacing-after .sims-SpinControl');
                    var params = {
                        currentvalue: attrValue
                    };
                    $control.setData(params);
                }
                break;
            case "PARA_SPACING_BEFORE":
                var $pageLayoutTab = this.getWordLayoutTabContainer($thisComp);

                if ($pageLayoutTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($pageLayoutTab, attrName, attrValue);
                }
                else {
                    var $control = $thisComp.find('.para-spacing-before .sims-SpinControl');
                    var params = {
                        currentvalue: attrValue
                    };
                    $control.setData(params);
                }
                break;
            case "CHECKBOX":
                this.toggleCheckBox(params, attrValue);
                break;
            case "CHECKBOX_ARRAY":
                var self = this;
                var cbArray = JSON.parse(attrValue);
                $.each(cbArray, function (classname, checked) {
                    self.toggleCheckBox('.' + classname, checked);
                });
                break;
            case "SPIN_VAL":
                attrValue = this.setSpinVal(params, attrValue);
                break;
            case "SMART_HEIGHT":
                attrValue = this.setSpinVal(params, attrValue);
                break;
            case "SMART_WIDTH":
                attrValue = this.setSpinVal(params, attrValue);
                break;
            case "SHAPE_HEIGHT":
                attrValue = this.setSpinVal(params, attrValue);
                break;
            case "SHAPE_WIDTH":
                attrValue = this.setSpinVal(params, attrValue);
                break;
            case "SLICER_BUTTON_WIDTH":
                var $sliceroptionsTab = $thisComp.find('#ribbon-tab-container-slicertoolsoptions');

                if ($sliceroptionsTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($sliceroptionsTab, attrName, attrValue);
                }
                else {
                    attrValue = this.setSpinVal('slicertools_buttons_width', attrValue);
                }
                break;
            case "SLICER_BUTTON_COLUMN":
                var $sliceroptionsTab = $thisComp.find('#ribbon-tab-container-slicertoolsoptions');

                if ($sliceroptionsTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($sliceroptionsTab, attrName, attrValue);
                }
                else {
                    attrValue = this.setSpinVal('slicer-column', attrValue);
                }
                break;
            case "SLICER_SIZE_HEIGHT":
                var $sliceroptionsTab = $thisComp.find('#ribbon-tab-container-slicertoolsoptions');

                if ($sliceroptionsTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($sliceroptionsTab, attrName, attrValue);
                }
                else {
                    attrValue = this.setSpinVal('slicertools_size_height', attrValue);
                }
                break;
            case "PICTURE_WIDTH":
            case "PICTURE_HEIGHT":
                attrValue = this.setSpinVal(params, attrValue);
                break;

            case "CHART_HEIGHT":
                var $chartToolsFrmtTab = $thisComp.find('#ribbon-tab-container-charttoolsformat');

                if ($chartToolsFrmtTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($chartToolsFrmtTab, attrName, attrValue);
                }
                else {
                    attrValue = this.setSpinVal('chart-height', attrValue);
                }
                break;

            case "CHART_WIDTH":
                var $chartToolsFrmtTab = $thisComp.find('#ribbon-tab-container-charttoolsformat');

                if ($chartToolsFrmtTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($chartToolsFrmtTab, attrName, attrValue);
                }
                else {
                    attrValue = this.setSpinVal('chart-width', attrValue);
                }
                break

            case "PAGE_LAYOUT_SCALE":


                var $pageLayoutTab = $thisComp.find('#ribbon-tab-container-pagelayout');

                if ($pageLayoutTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($pageLayoutTab, attrName, attrValue);
                }
                else {
                    attrValue = this.setSpinVal('scaling', attrValue);
                }
                break;

            case "TABLE_WIDTH":
                attrValue = this.setSpinVal(params, attrValue);
                break;
            case "TABLE_HEIGHT":

                var $tableToolsLayoutTab = $thisComp.find('#ribbon-tab-container-tabletoolslayout');

                if ($tableToolsLayoutTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($tableToolsLayoutTab, attrName, attrValue);
                }
                else {
                    var $control = $thisComp.find('.table-height .sims-SpinControl');
                    var params = {
                        currentvalue: attrValue
                    };
                    $control.setData(params);
                }
                break;
            case "SELECTED_SPARKLINE_INDEX":


                var $sparkLinesDesTab = $thisComp.find('#ribbon-tab-container-sparklinestoolsdesign');

                if ($sparkLinesDesTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($sparkLinesDesTab, attrName, attrValue);
                }
                else {
                    this.setSelectedGalleryControlItem('sparkline-gallery', attrValue);
                }
                break;

            case "SELECTED_PARAGRAPH_STYLES_INDEX":


                var $homeTab = $thisComp.find('#ribbon-tab-container-home');

                if ($homeTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($homeTab, attrName, attrValue);
                }
                else {
                    this.setSelectedGalleryControlItem('paragraph-styles-gallery', attrValue);
                    this.setGalleryItem('paragraph-styles-gallery', attrValue);
                }
                break;

            case "SELECTED_PICTURE_STYLES_INDEX":
                var $pictureToolsFrmtTab = $thisComp.find('#ribbon-tab-container-picturetoolsformat');

                if ($pictureToolsFrmtTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($pictureToolsFrmtTab, attrName, attrValue);
                }
                else {
                    this.setSelectedGalleryControlItem('picture-styles-gallery', attrValue);
                    this.setGalleryItem('picture-styles-gallery', attrValue);
                }
                break;

            case "SELECTED_CHART_STYLE_INDEX":

                //this.setGalleryItem('chart-style-gallery', attrValue);
                //Not sure of this change
                var $chartToolsDsgnTab = $thisComp.find('#ribbon-tab-container-charttoolsdesign');
                if ($chartToolsDsgnTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($chartToolsDsgnTab, attrName, attrValue);
                }
                else {
                    this.setSelectedGalleryControlItem('chart-style-gallery', attrValue);
                    this.setGalleryItem('chart-style-gallery', attrValue);
                }
                break;
            case "SELECTED_TABLE_STYLE_INDEX":

                //this.setSelectedGalleryControlItem('table-style-gallery', attrValue);
                var $tableToolsDsgnTab = $thisComp.find('#ribbon-tab-container-tabletoolsdesign');

                if ($tableToolsDsgnTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($tableToolsDsgnTab, attrName, attrValue);
                }
                else {
                    this.setSelectedGalleryControlItem('table-style-gallery', attrValue);
                    this.setGalleryItem('table-style-gallery', attrValue);
                }
                break;
            case "PIVOT_TABLE_STYLE_INDEX":

                var $pivottabledesignTab = $thisComp.find('#ribbon-tab-container-pivottabletoolsdesign');

                if ($pivottabledesignTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($pivottabledesignTab, attrName, attrValue);
                }
                else {
                    this.setSelectedGalleryControlItem('pivottable-style-gallery', attrValue);
                    this.setGalleryItem('pivottable-style-gallery', attrValue);
                }
                break;
            case "PIVOT_CHART_TOOLS_DESIGN_STYLE_INDEX":

                var $pivotchartdesignTab = $thisComp.find('#ribbon-tab-container-pivotcharttoolsdesign');

                if ($pivotchartdesignTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($pivotchartdesignTab, attrName, attrValue);
                }
                else {
                    this.setSelectedGalleryControlItem('chart-style-gallery', attrValue);
                    this.setGalleryItem('chart-style-gallery', attrValue);
                }
                break;
            case "SLICER_STYLE_INDEX":

                var $sliceroptionsTab = $thisComp.find('#ribbon-tab-container-slicertoolsoptions');

                if ($sliceroptionsTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($sliceroptionsTab, attrName, attrValue);
                }
                else {
                    this.setSelectedGalleryControlItem('slicer-style-gallery', attrValue);
                    this.setGalleryItem('slicer-style-gallery', attrValue);
                }
                break;
            case "SPARKLINE_SRC":

                var $sparkLinesDesTab = $thisComp.find('#ribbon-tab-container-sparklinestoolsdesign');

                if ($sparkLinesDesTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($sparkLinesDesTab, attrName, attrValue);
                }
                else {
                    this.setSpaklineControlImgSrc('sparkline-gallery', attrValue);
                }
                break;
            case "MERGE_AND_CENTER":
                var $homeTab = $thisComp.find('#ribbon-tab-container-home');

                if ($homeTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($homeTab, attrName, attrValue);
                }
                else {
                    var $control = $thisComp.find('.office-control.mergeandcenter .combobox');
                    if (attrValue.toLowerCase() === "true") {
                        $control.addClass('active-toggle');
                    }
                    else {
                        $control.removeClass('active-toggle');
                    }
                }
                break;
            case "SHOW_FORMULAS":


                var $frmlasTab = $thisComp.find('#ribbon-tab-container-formulas');

                if ($frmlasTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($frmlasTab, attrName, attrValue);
                }


                else {
                    var $control = $thisComp.find('.office-control.showformulas .button-binder');
                    if (attrValue.toLowerCase() === "true") {
                        $control.addClass('active-toggle');
                    }
                    else {
                        $control.removeClass('active-toggle');
                    }
                }
                break;
            case "WRAP_TEXT":


                var $homeTab = $thisComp.find('#ribbon-tab-container-home');

                if ($homeTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($homeTab, attrName, attrValue);
                }
                else {

                    var $control = $thisComp.find('.office-control.wraptext .button-binder');
                    if (attrValue.toLowerCase() === "true") {
                        $control.addClass('active-toggle');
                    }
                    else {
                        $control.removeClass('active-toggle');
                    }
                }
                break;
            case "MIDDLE_ALIGN":


                var $homeTab = $thisComp.find('#ribbon-tab-container-home');

                if ($homeTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($homeTab, attrName, attrValue);
                }
                else {

                    var $control = $thisComp.find('.office-control.middlealign .button-binder');
                    if (attrValue.toLowerCase() === "true") {
                        $control.addClass('active-toggle');
                    }
                    else {
                        $control.removeClass('active-toggle');
                    }
                }
                break;
            case "SCALE_WIDTH":


                var $pageLayoutTab = $thisComp.find('#ribbon-tab-container-pagelayout');

                if ($pageLayoutTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($pageLayoutTab, attrName, attrValue);
                }
                else {

                    this.setTextBoxVal("pagelayout_scale_width", attrValue);
                }
                break;
            case "FONT_COLOR":
                this.setColorGridVal('font_color', attrValue);
                break;
            case "SCALE_HEIGHT":
                this.setTextBoxVal("pagelayout_scale_height", attrValue);
                break;
            case "LEFT_INDENT":
                this.setSpinVal(params, attrValue);
                break;
            case "SELECTED_LINE_SPACING_INDEX":

                break;
            case "NORMAL_VIEW":


                var $viewTab = $thisComp.find('#ribbon-tab-container-view');

                if ($viewTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($viewTab, attrName, attrValue);
                }
                else {

                    var $control = $thisComp.find('.office-control.normal .button-binder');
                    if (attrValue.toLowerCase() === "true") {
                        $control.addClass('active-toggle');
                    }
                    else {
                        $control.removeClass('active-toggle');
                    }
                }
                break;

            case "PAGE_BREAK_PREVIEW":
                var $viewTab = $thisComp.find('#ribbon-tab-container-view');

                if ($viewTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($viewTab, attrName, attrValue);
                }
                else {
                    var $control = $thisComp.find('.office-control.pagebreak .button-binder');
                    if (attrValue.toLowerCase() === "true") {
                        $control.addClass('active-toggle');
                    }
                    else {
                        $control.removeClass('active-toggle');
                    }
                }
                break;

            case "PAGE_LAYOUT":
                var $viewTab = $thisComp.find('#ribbon-tab-container-view');

                if ($viewTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($viewTab, attrName, attrValue);
                }
                else {
                    var $control = $thisComp.find('.office-control.pagelayout .button-binder');
                    if (attrValue.toLowerCase() === "true") {
                        $control.addClass('active-toggle');
                    }
                    else {
                        $control.removeClass('active-toggle');
                    }
                }
                break;

            case "SPARKLINE_TYPE":
                var $sparkLinesDesTab = $thisComp.find('#ribbon-tab-container-sparklinestoolsdesign');

                if ($sparkLinesDesTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($sparkLinesDesTab, attrName, attrValue);
                }
                else {
                    var $control = null;
                    switch (attrValue.toLowerCase()) {
                        case "line":
                            $control = $thisComp.find('.office-control.line .button-binder');
                            $control = $thisComp.find('.office-control.line .button-binder');
                            $control.addClass('active-toggle');

                            $control = $thisComp.find('.office-control.column .button-binder');
                            $control.removeClass('active-toggle');

                            $control = $thisComp.find('.office-control.win .button-binder');
                            $control.removeClass('active-toggle');
                            break;

                        case "column":
                            $control = $thisComp.find('.office-control.column .button-binder');
                            $control.addClass('active-toggle');

                            $control = $thisComp.find('.office-control.line .button-binder');
                            $control.removeClass('active-toggle');

                            $control = $thisComp.find('.office-control.win .button-binder');
                            $control.removeClass('active-toggle');
                            break;


                        case "win":
                            $control = $thisComp.find('.office-control.win .button-binder');
                            $control.addClass('active-toggle');

                            $control = $thisComp.find('.office-control.line .button-binder');
                            $control.removeClass('active-toggle');

                            $control = $thisComp.find('.office-control.column .button-binder');
                            $control.removeClass('active-toggle');
                            break;



                        default:
                            break;

                    }
                }

                break;

            case "SHOW_LEVEL":
                var $outliningTab = $thisComp.find('#ribbon-tab-container-outlining');

                if ($outliningTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($outliningTab, attrName, attrValue);
                }
                else {
                    this.setTextBoxVal("outlining-showlevel", attrValue);
                }
                break;

            case "OUTLINE_LEVEL":
                var $outliningTab = $thisComp.find('#ribbon-tab-container-outlining');

                if ($outliningTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($outliningTab, attrName, attrValue);
                }
                else {
                    this.setTextBoxVal("outlining-outlinelevel", attrValue);
                }
                break;

            case "SHOW_MARKUP":
                var $reviewTab = $thisComp.find('#ribbon-tab-container-review');

                if ($reviewTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($reviewTab, attrName, attrValue);
                }
                else {
                    this.setTextBoxVal("review-showmarkup", attrValue);
                }
                break;

            case "DOC_FORMATTING_INDEX":
                var $designTab = $thisComp.find('#ribbon-tab-container-design');

                if ($designTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($designTab, attrName, attrValue);
                }
                else {
                    this.setSelectedGalleryControlItem('document-styles', attrValue);
                    this.setGalleryItem('document-styles', attrValue);
                }
                break;

            case "WINDOW_SPLIT":
                var $viewTab = $thisComp.find('#ribbon-tab-container-view');


                if ($viewTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($viewTab, attrName, attrValue);
                }
                {
                    var $control = $thisComp.find('.office-control.ZoomSplit .button-binder');
                    if (attrValue.toLowerCase() === "true") {
                        $control.addClass('active-toggle');
                    }
                    else {
                        $control.removeClass('active-toggle');
                    }
                }
                break;

            case "NUMBERING_OPTIONS":
                var $homeTab = $thisComp.find('#ribbon-tab-container-home');

                if ($homeTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($homeTab, attrName, attrValue);
                }
                else {
                    var $control = $thisComp.find('.office-control.numbering .combobox');
                    if (attrValue.toLowerCase() === "true") {
                        $control.addClass('active-toggle');
                    }
                    else {
                        $control.removeClass('active-toggle');
                    }
                }
                break;

            case "BULLET_OPTIONS":
                var $homeTab = $thisComp.find('#ribbon-tab-container-home');

                if ($homeTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($homeTab, attrName, attrValue);
                }
                else {
                    var $control = $thisComp.find('.office-control.bullets .combobox');
                    if (attrValue.toLowerCase() === "true") {
                        $control.addClass('active-toggle');
                    }
                    else {
                        $control.removeClass('active-toggle');
                    }
                }
                break;


            case "CHART_TOOLS_CHART_ELEMENTS":
                var $chartToolsFrmtTab = $thisComp.find('#ribbon-tab-container-charttoolsformat');

                if ($chartToolsFrmtTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($chartToolsFrmtTab, attrName, attrValue);
                }
                else {
                    this.setTextBoxVal("charttools-chartelements", attrValue);
                }
                break;

            case "CITATION_STYLE":
                var $referencesTab = $thisComp.find('#ribbon-tab-container-references');

                if ($referencesTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($referencesTab, attrName, attrValue);
                }
                else {
                    this.setTextBoxVal("citation-style", attrValue);
                }
                break;

            case "HIGHLIGHT_REPEAT_HEADER_ROWS":
                var $tableToolsLayoutTab = $thisComp.find('#ribbon-tab-container-tabletoolslayout');

                if ($tableToolsLayoutTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($tableToolsLayoutTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.repeatheader .button-binder', attrValue);
                }
                break;


            case "DATA_FILTER":
                var $dataTab = $thisComp.find('#ribbon-tab-container-data');
                if ($dataTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($dataTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.data-filter .button-binder', attrValue);
                }
                break;

            // -- lazyloading implemented till above by Monalika   
            // -- lazyloading implemented below by Ashwin   

            case "HIGHLIGHT_MAILINGS_PREVIEW":

                var $mailingsTab = $thisComp.find('#ribbon-tab-container-mailings');

                if ($mailingsTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($mailingsTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.previewresults .button-icon', attrValue);
                }

                break;

            case "HIGHLIGHT_REVIEW_REVIEWINGPANE":

                var $reviewTab = $thisComp.find('#ribbon-tab-container-review');

                if ($reviewTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($reviewTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.reviewingpane .combobox', attrValue);
                }

                break;

            case "HIGHLIGHT_VIEW_SIDEBYSIDE":

                var $viewTab = $thisComp.find('#ribbon-tab-container-view');

                if ($viewTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($viewTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.sidebyside .button-binder', attrValue);
                }

                break;

            case "HIGHLIGHT_VIEW_SYNCHRONOUS_SCROLLING":

                var $viewTab = $thisComp.find('#ribbon-tab-container-view');

                if ($viewTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($viewTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.sybchronousscrolling .button-binder', attrValue);
                }

                break;

            //            case "PAGE_COLOR":   
            //                this.pageColor = attrValue;   
            //                break;   
            //            case "MYTAB_PAGE_COLOR":   
            //                this.myTabPageColor = attrValue;   
            //                break;    

            case "HIGHLIGHT_DEVELOPER_DESIGN_MODE":
                var $developerTab = $thisComp.find('#ribbon-tab-container-developer');

                if ($developerTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($developerTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('#ribbon-tab-container-developer .developer-design-mode', attrValue);
                }

                break;

            case "HIGHLIGHT_DEVELOPER_XML_SOURCE":
                var $developerTab = $thisComp.find('#ribbon-tab-container-developer');

                if ($developerTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($developerTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('#ribbon-tab-container-developer .developer-xml-source', attrValue);
                }

                break;

            case "HIGHLIGHT_DEVELOPER_RESTRICT_EDITING":

                var $developerTab = $thisComp.find('#ribbon-tab-container-developer');

                if ($developerTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($developerTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.restrict-editing .button-binder', attrValue);
                }

                break;

            case "HIGHLIGHT_SHOW_COMMENTS":

                var $reviewTab = $thisComp.find('#ribbon-tab-container-review');

                if ($reviewTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($reviewTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.show-comments .button-binder', attrValue);
                }

                break;
            /*
            case "HIGHLIGHT_OUTLINING_SHOW_DOCUMENT":

            var $outliningTab = $thisComp.find('#ribbon-tab-container-outlining');

            if ($outliningTab.children().length == 0)  //not yet created
            {
            this.addAttrDataInTab($outliningTab, attrName, attrValue);
            }
            else {
            this.toggleButton('.office-control.show-document .button-binder', attrValue);
            }

            break;
            */
            // This was added for a specific case SIMS-72570 . Should not be blindly used without discussion.    
            case "TAB_HEADER_CSS":
                if (attrValue != "" && attrValue != undefined) {
                    $thisComp.find(".tab-header:visible").css(JSON.parse(attrValue));
                }
                break;
            case "HIGHLIGHT_PRINT_LAYOUT":
                var $PrintTab = $thisComp.find('#ribbon-tab-container-view');

                if ($PrintTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($PrintTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.Print-Layout .button-binder', attrValue);
                }
                break;

            case "VALIDATE_SELECTED_TAB":
                if (attrValue == "true" || attrValue == "TRUE")
                    this.RegisteredComponent.EditRegisterdAttribute("SELECTED_TAB", "", true);
                break;

            case "HIGHLIGHT_HOME_BULLETS":
                var $homeTab = $thisComp.find('#ribbon-tab-container-home');

                if ($homeTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($homeTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.bullets .combobox', attrValue);
                }
                break;

            case "IS_TAB_SELECTED_ONCE": //Lazy loading Handling not required for this attribute as it is just setting some variables.
                this.tabName = attrValue.toLowerCase();
                this.RegisteredComponent.EditRegisterdAttribute("IS_TAB_SELECTED_ONCE", "NO", true);
                break;

            case "RIGHT_INDENT":
                this.setSpinVal(params, attrValue);
                break;

            case "SELECTED_SHAPE_STYLES_INDEX":

                var $drawingToolsFormatTab = $thisComp.find('#ribbon-tab-container-drawingtoolsformat');

                if ($drawingToolsFormatTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($drawingToolsFormatTab, attrName, attrValue);
                }
                else {
                    this.setSelectedGalleryControlItem('shape-styles-gallery', attrValue);
                    this.setGalleryItem('shape-styles-gallery', attrValue);
                }
                break;
            case "FOCALIZE_SPIN_CONTROL": //We didnt add this in lazy loading, because till the time this attribute was called, the page layout tab was formed but still not visible. That is why the focalize of spin was not getting called.
                var $pageLayoutTab = this.getWordLayoutTabContainer($thisComp);

                if ($pageLayoutTab.children().length > 0 && $pageLayoutTab.css("display") != "none")  //not yet created
                {
                    $pageLayoutTab.find("." + attrValue).find(".sims-SpinControl").focalize(true);
                }

                break;

            default:
                break;

            case "SELECTED_SMARTART_LAYOUT_INDEX":


                var $smartartTab = $thisComp.find('#ribbon-tab-container-smartarttoolsdesign');

                if ($smartartTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($smartartTab, attrName, attrValue);
                }
                else {
                    this.setSelectedGalleryControlItem('smartart-layout-gallery', attrValue);
                    this.setGalleryItem('smartart-layout-gallery', attrValue);
                }
                break;

            case "SELECTED_SMARTART_STYLE_INDEX":


                var $smartartTab = $thisComp.find('#ribbon-tab-container-smartarttoolsdesign');

                if ($smartartTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($smartartTab, attrName, attrValue);
                }
                else {
                    this.setSelectedGalleryControlItem('smartart-styles-gallery', attrValue);
                    this.setGalleryItem('smartart-styles-gallery', attrValue);
                }
                break;
            // Added to select table style in table design tool tab    
            case "SELECTED_TABLE_STYLES_INDEX_WORD":

                var $tableToolsDsgnTab = $thisComp.find('#ribbon-tab-container-tabletoolsdesign');

                if ($tableToolsDsgnTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($tableToolsDsgnTab, attrName, attrValue);
                }
                else {
                    this.setSelectedGalleryControlItem('table-styles-gallery', attrValue);
                    this.setGalleryItem('table-styles-gallery', attrValue);
                }
                break;

            //To highlight Review tab protect workbook
            case "HIGHLIGHT_REVIEW_PROTECT_WORKBOOK":

                var $reviewTab = $thisComp.find('#ribbon-tab-container-review');

                if ($reviewTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($reviewTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.protect-workbook .button-binder', attrValue);
                }

                break;

            //To highlight Review tab show ink
            case "HIGHLIGHT_REVIEW_SHOW_INK":

                var $reviewTab = $thisComp.find('#ribbon-tab-container-review');

                if ($reviewTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($reviewTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.show-ink .button-binder', attrValue);
                }

                break;

            //To highlight Table Tools Design tab refresh buton
            case "HIGHLIGHT_TABLETOOLS_DESIGN_EXTERNAL_REFRESH":

                var $tableToolsDesignTab = $thisComp.find('#ribbon-tab-container-tabletoolsdesign');

                if ($tableToolsDesignTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($tableToolsDesignTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.tabletools_external_refresh_button', attrValue);
                }

                break;

            //To highlight Insert TAB Text grouo Textbox
            case "HIGHLIGHT_INSERT_TEXTBOX":

                var $insertTab = $thisComp.find('#ribbon-tab-container-insert');

                if ($insertTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($insertTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.insert-textbox', attrValue);
                }

                break;
            //To fire event on TAB click
            case "SELECTED_TABS_LIST":
                this.enableRibbonTabEvent(attrValue, $thisComp);
                break;

            //To generate event on Collapse button click
            case "ENABLE_COLLAPSE_BUTTON":
                if (attrValue.toLowerCase() == "true") {
                    this.generateCollapseButton($thisComp);
                }
                break;

            //To highlight Powerview tab fit to window
            case "POWERVIEW_HIGHLIGHT_FIT_TO_WINDOW":

                var $powerviewTab = $thisComp.find('#ribbon-tab-container-powerview');

                if ($powerviewTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($powerviewTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.powerview-fit-to-window .button-binder', attrValue);
                }

                break;

            //To highlight Powerview tab field list
            case "POWERVIEW_HIGHLIGHT_FIELD_LIST":

                var $powerviewTab = $thisComp.find('#ribbon-tab-container-powerview');

                if ($powerviewTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($powerviewTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.powerview-field-list .button-binder', attrValue);
                }

                break;
            case "POWERVIEW_HIGHLIGHT_FILTER_AREA":

                var $powerviewTab = $thisComp.find('#ribbon-tab-container-powerview');

                if ($powerviewTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($powerviewTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.powerview_filters_area .button-binder', attrValue);
                }

                break;
            case "POWERPIVOT_HIGHLIGHT_DATA_VIEW":

                var $powerPivotRibbonHomeTab = $thisComp.find('#ribbon-tab-container-home');

                if ($powerPivotRibbonHomeTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($powerPivotRibbonHomeTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.powerpivot_data_view .button-binder', attrValue);
                }

                break;
            case "POWERPIVOT_HIGHLIGHT_DIAGRAM_VIEW":

                var $powerPivotRibbonHomeTab = $thisComp.find('#ribbon-tab-container-home');

                if ($powerPivotRibbonHomeTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($powerPivotRibbonHomeTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.powerpivot_diagram_view .button-binder', attrValue);
                }

                break;
            case "POWERPIVOT_HIGHLIGHT_SHOW_HIDDEN":

                var $powerPivotRibbonHomeTab = $thisComp.find('#ribbon-tab-container-home');

                if ($powerPivotRibbonHomeTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($powerPivotRibbonHomeTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.powerpivot_show_hidden .button-binder', attrValue);
                }

                break;
            case "POWERPIVOT_HIGHLIGHT_CALCULATION_AREA":

                var $powerPivotRibbonHomeTab = $thisComp.find('#ribbon-tab-container-home');

                if ($powerPivotRibbonHomeTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($powerPivotRibbonHomeTab, attrName, attrValue);
                }
                else {
                    this.toggleButton('.office-control.powerpivot_calculation_area .button-binder', attrValue);
                }

                break;
            case "FOCUS_COMP_ID_FOR_ACCESS_KEYS":
                this.focusCompIdForAccessKeys = attrValue;
                break;

            case "USE_RELATIVE_REFERENCES":

                var $devtab = $thisComp.find('#ribbon-tab-container-developer');

                if ($devtab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($devtab, attrName, attrValue);
                }


                else {
                    var $control = $thisComp.find('.office-control#developer_relative .button-binder');
                    if (attrValue.toLowerCase() === "true") {
                        $control.addClass('active-toggle');
                    }
                    else {
                        $control.removeClass('active-toggle');
                    }
                }
                break;

        }
    },


    getWordLayoutTabContainer: function ($thisComp) {
        return $thisComp.find('#ribbon-tab-container-pagelayout');
    },

    //set selected item of gallery control in ribbon.
    setSelectedGalleryControlItem: function (controlClassName, attrValue) {
        var $galleryControl = this.$thisCompElement.find('.office-control.' + controlClassName);
        var $control = this.manipulatorFactory.getManipulator($galleryControl);
        if ($control != undefined) {
            $control.SetSelectedItem($galleryControl, parseInt(attrValue));
        }
    },

    setSpaklineControlImgSrc: function (controlClassName, attrValue) {
        var $sparklineControl = this.$thisCompElement.find('.office-control.' + controlClassName);
        var $control = this.manipulatorFactory.getManipulator($sparklineControl);
        $control.ChangeItemsImage($sparklineControl, attrValue);
    },

    setTextBoxVal: function (className, value) {
        var $control = this.$thisCompElement.find('.office-control.' + className + ' input.combo-textbox');
        $control.val(value);
        $control.attr('value', value);
        $control.attr('defaultValue', value);

        //Dhirendra to validate after market release :)
        $control.data("val", value);
    },

    //    toggleCheckBox: function (params, attrValue) {
    //        var $control = this.$thisCompElement.find('.office-control.' + params);
    //
    //
    //
    //        var className = params;
    //        if ($control.length != 0) {
    //            var bChecked = false;
    //            if (attrValue) {
    //                //bChecked = Boolean(attrValue);
    //
    //                if (attrValue == "false" || attrValue == false) {
    //                    bChecked = false;
    //                }
    //                else {
    //                    bChecked = true;
    //                }
    //
    //            }
    //
    //
    //            var params = {
    //                checked: bChecked
    //            };
    //            this.manipulatorFactory.getManipulator($control).setData($control, params);
    //            this.removeAttrFrmUpdateList('CHECKBOX', className, attrValue);
    //        }
    //
    //        else {
    //            this.setAttributeValue('CHECKBOX', className, attrValue);
    //        }
    //
    //
    //    },

    toggleButton: function (selector, sActive) {
        var $control = this.$thisCompElement.find(selector);
        if (sActive.toLowerCase() === "true") {
            $control.addClass('active-toggle');
        }
        else {
            $control.removeClass('active-toggle');
        }
    },

    hideShowControl: function (selector, sHideShow) {
        var $control = this.$thisCompElement.find(selector);
        if (sHideShow.toLowerCase() == "true") {
            $control.removeClass('hidden');
        }
        else {
            $control.addClass('hidden');
        }
    },

    //    addAttrDataInTab: function ($tab, attrName, attrValue) {
    //        var dataObj = {};
    //        dataObj.attrName = attrName;
    //        dataObj.attrValue = attrValue;
    //
    //        if ($tab.data('attrList') != undefined) {
    //            var dataArr = $tab.data('attrList');
    //            dataArr.push(dataObj);
    //            //dataArr = $.unique(dataArr);
    //            $tab.data('attrList', dataArr);
    //        }
    //        else {
    //            $tab.data('attrList', [dataObj]);
    //        }
    //    },

    GetAttribute: function (compid, attrName) {
        var attrValue = "";
        var $thisComp = this.$thisCompElement;

        // var attr = getArray(this._compinfo.finalattrs.attr).find("@name", attrName);
        // var params = null;
        // if (attr.length > 0) {
        //     params = attr[0]["@params"];
        // }

        switch (attrName) {
            case "DOCUMENT_NAME":
                break;
            case "SEL_TAB":
                break;
            case "FONT_SIZE":
                var $fontSize = $thisComp.find('.office-control.font-size input.combo-textbox');
                //attrValue = $fontSize.attr('value');
                attrValue = $fontSize.data("val");
                break;
            case "FONT_NAME":
                var $fontName = $thisComp.find('.office-control.font-name input.combo-textbox');
                attrValue = $fontName.data("val");
                break;
            case "BOLD":
                attrValue = $thisComp.find('togglebutton-bold').data('state');
                break;
            case "NUM_FORMAT":
                //attrValue = $thisComp.find('.num-format.office-control input').attr('value');
                attrValue = $thisComp.find('.num-format.office-control input').data("val");
                break;
            case "SCALE_WIDTH":
                attrValue = $thisComp.find('.pagelayout_scale_width.office-control input').data("val");
                break;
            case "SCALE_HEIGHT":
                attrValue = $thisComp.find('.pagelayout_scale_height.office-control input').data("val");
                break;
            case "BOTTOM_ALIGN":
                attrValue = $thisComp.find('#bottom-align.office-control .button-binder').addClass();
                break;
            case "ITALICS":
                attrValue = $thisComp.find('togglebutton-italics').data('state');
                break;
            case "ALIGNLEFT":
                attrValue = $thisComp.find('togglebutton-alignleft').data('state');
                break;
            case "ALIGNBOTTOM":
                attrValue = $thisComp.find('togglebutton-alignbottom').data('state');
                break;
            case "SHAPE_HEIGHT":
                attrValue = $thisComp.find('.ribbon-tab-Drawing Tools Format .shape-height1 .spinContainer .spinInput').val();
                break;
            case "SMART_HEIGHT":
                attrValue = $thisComp.find('.ribbon-tab-Smartart Tools Format .smart-height .spinContainer .spinInput').val();
                break;

            case "SMART_WIDTH":
                attrValue = $thisComp.find('.ribbon-tab-Smartart Tools Format .smart-width .spinContainer .spinInput').val();
                break;
            case "TABLE_WIDTH":
                attrValue = $thisComp.find('.ribbon-tab-Table Tools Layout .table-width .spinContainer .spinInput').val();
                break;
            case "TABLE_HEIGHT":
                var $tableheight = $thisComp.find('.table-height');
                var data = $tableheight.find(".sims-SpinControl").getData();
                attrValue = data.currentvalue;
                break;
            case "SHAPE_WIDTH":
                attrValue = $thisComp.find('.ribbon-tab-Drawing Tools Format .shape-width1 .spinContainer .spinInput').val();
                break;
            case "SLICER_BUTTON_WIDTH":
                attrValue = $thisComp.find('#ribbon-tab-container-slicertoolsoptions .slicertools_buttons_width .spinContainer .spinInput').val();
                break;
            case "SLICER_BUTTON_COLUMN":
                attrValue = $thisComp.find('#ribbon-tab-container-slicertoolsoptions .slicer-column .spinContainer .spinInput').val();
                break;
            case "SLICER_SIZE_HEIGHT":
                attrValue = $thisComp.find('#ribbon-tab-container-slicertoolsoptions .slicertools_size_height .spinContainer .spinInput').val();
                break;
            case "PICTURE_HEIGHT":
                attrValue = $thisComp.find('#ribbon-tab-container-picturetoolsformat .shape-height .spinContainer .spinInput').val();
                break;
            case "PICTURE_WIDTH":
                attrValue = $thisComp.find('.ribbon-tab-Picture Tools Format .shape-width .spinContainer .spinInput').val();
                break;
            case "SPACING_AFTER":
                attrValue = $thisComp.find('.ribbon-tab-Drawing Tools Format .spinContainer .spinInput').val();
                break;
            case "SPACING_BEFORE":
                attrValue = $thisComp.find('.ribbon-tab-Drawing Tools Format .spinContainer .spinInput').val();
                break;
            case "FONT_COLOR":
                attrValue = this.getColorGridVal('font-color');
                break;
            case "PICTURE_BORDER":
                attrValue = this.getColorGridVal('picture-border');
                break;
            case "SHAPE_OUTLINE":
                attrValue = this.getColorGridVal('shape-outline');
                break;
            case "FILL_COLOR":
            case "SHAPE_FILL":
                attrValue = this.getColorGridVal('shape-fill');
                break;
            case "PARA_SPACING_AFTER":
                var $spacingAfter = $thisComp.find('.para-spacing-after');
                var data = $spacingAfter.find(".sims-SpinControl").getData();
                attrValue = data.currentvalue;
                break;
            case "PARA_SPACING_BEFORE":
                var $spacingBefore = $thisComp.find('.para-spacing-before');
                var data = $spacingBefore.find(".sims-SpinControl").getData();
                attrValue = data.currentvalue;
                break;
            case "TAB_COLOR":
                attrValue = this.getColorGridVal('tab-color');
                break;
            case "SHADING_COLOR":
                attrValue = this.getColorGridVal('shading-color');
                break;
            case "SPIN_VAL":
                attrValue = this.getSpinVal(params);
                break;
            case "LEFT_INDENT":
                attrValue = $thisComp.find('.ribbon-tab-Page Layout .left-indent .spinContainer .spinInput').val();
                break;
            case "EXCEL_FONT_COLOR":
                attrValue = this.getColorGridVal('excel-font-color');
                break;

            case "UNDO_REDO_INDEX":
                attrValue = $(this).data("UndoRedoIndex");
                break;

            case "TABLE_DIMENSIONS":
                attrValue = $(this).data("TableDimensions");
                break;

            case "CHART_TOOLS_CHART_ELEMENTS":
                var $chartElements = $thisComp.find('.office-control.charttools-chartelements input.combo-textbox');
                attrValue = $chartElements.data("val");
                break;

            case "SPARKLINE_COLOR":
                attrValue = this.getColorGridVal('sparklinetools-color');
                break;

            case "CITATION_STYLE":
                attrValue = $thisComp.find('.citation-style.office-control input').data("val");
                break;

            case "CHART_HEIGHT":
                attrValue = $thisComp.find('#ribbon-tab-container-charttoolsformat .chart-height .sims-SpinControl').getData().currentvalue;
                break;

            case "CHART_WIDTH":
                attrValue = $thisComp.find('#ribbon-tab-container-charttoolsformat .chart-width .sims-SpinControl').getData().currentvalue;
                break;

            case "PAGE_LAYOUT_SCALE":
                attrValue = $thisComp.find('#ribbon-tab-container-pagelayout .scaling .sims-SpinControl').getData().currentvalue;
                break;

            case "CHART_SHAPEFILL_COLOR":
                attrValue = this.getColorGridVal('chart-shapefill-color');
                break;

            case "CONTEXT_MENU_ITEM_INDEX":
                attrValue = this.$thisCompElement.data("CONTEXT_MENU_ITEM_INDEX");
                break;
            case "PAGE_COLOR":
                attrValue = this.getColorGridVal('page-color');
                break;
            case "MYTAB_PAGE_COLOR":
                attrValue = this.getColorGridVal('mytab-page-color');
                break;

            case "SELECTED_TAB":
                attrValue = this.$thisCompElement.find('.tab-header-selected').text();
                break;
            case "IS_TAB_SELECTED_ONCE":

                var $tab = null,
                    self = this;
                $tab = $thisComp.find('#ribbon-tab-container-' + self.tabName);
                if ($tab.children().length != 0) {
                    //                     $tab.bind('click', function () {
                    //                         self.LogComponentEvent(838, "Ribbon: " + tabName + " Tab Header Clicked", true);
                    //                     });
                    attrValue = "YES";
                }
                else {
                    attrValue = "NO";
                }

                break;

            case "RIGHT_INDENT":
                attrValue = $thisComp.find('#ribbon-tab-container-pagelayout .right-indent .spinContainer .spinInput').val();
                break;

            case "SLICERTOOLS_OPTIONS_SLICER_CAPTION":
                attrValue = $thisComp.find('#ribbon-tab-container-slicertoolsoptions .slicer_caption_name .sims-TextBox').val();
                break;

            case "TABLETOOLS_DESIGN_TABLE_NAME":
                attrValue = $thisComp.find('#ribbon-tab-container-tabletoolsdesign .tabletools_tablename .sims-TextBox').val();
                break;

            case "PIVOTCHARTTOOLS_CHART_NAME":
                attrValue = $thisComp.find('#ribbon-tab-container-pivotcharttoolsanalyze .pivotcharttools_chartname .sims-TextBox').val();
                break;
            // New attribute create to identify the Chart Tools format launcher group with event id 531
            case "CHART_TOOLS_FORMAT_LAUNCHER_GROUP":
                attrValue = this.chartFormatTablauncherGroup;
                break;

            default:
                break;
        }
        return attrValue;
    },

    getSpinVal: function (controlClassName) {
        var $spinControl = this.$thisCompElement.find('.' + controlClassName);
        var data = $spinControl.find(".sims-SpinControl").getData();
        return data.currentvalue;
    },

    //    setSpinVal: function (controlClassName, attrValue) {
    //        var $spinControl = this.$thisCompElement.find('.' + controlClassName);
    //
    //        if ($spinControl != undefined && $spinControl.length > 0) {
    //            var data = $spinControl.find(".sims-SpinControl").setData({
    //                currentvalue: attrValue
    //            });
    //            this.removeAttrFrmUpdateList('SPIN_VAL', controlClassName, attrValue);
    //        }
    //        else {
    //            this.setAttributeValue('SPIN_VAL', controlClassName, attrValue);
    //        }
    //    },

    getColorGridVal: function (className) {
        $colorGrid = this.$thisCompElement.find('.dropdown-item.' + className + ' .sims-ColorGrid.sims-control');
        var data;
        /* var data = $colorGrid.getData();
        return data.index;*/


        if ($colorGrid.length != 0) {
            data = $colorGrid.getData();
            return data.selectedColor;
        }
        else if (SIMS.Objects.DOMElements.Ribbon
            // && SIMS.Objects.DOMElements.Ribbon.attr('theme')
        ) // theme issue - delinked
        {
            $colorGrid = this.$thisCompElement.find('.dropdown-item .sims-ColorGrid.sims-control');
            data = $colorGrid.getData();
            return data.selectedColor;
        }
        else
            return "";
    },
    setColorGridVal: function (className, attrvalue) {
        //Change done to fix SIMS-79458, regression of colorgrid dd lazyloading
        //Set the data of combobox dropdown here. When combobox dropdown render on arrow click, it will read this data and set ColorGrid index.
        // $colorGridParent = this.$thisCompElement.find('.office-control.' + className + ' .combobox-dropdown');
        $combobox = this.$thisCompElement.find('.office-control.' + className);
        $colorGridParent = $combobox.find('.combobox-dropdown');
        $colorGridParent.data("colorIndex", attrvalue);
        var $colorChangerDiv = $combobox.find(".colorchanger");
        if ($colorChangerDiv.length > 0) {
            var colorHex = null;
            var themeName = this.colorTheme || "Office";
            for (var i = 0; i < ColorGridInputList.length; i++) {
                if (ColorGridInputList[i].theme === themeName && ColorGridInputList[i].colorGridType === "patternColor") {
                    var colorindex = attrvalue || 0;
                    colorHex = ColorGridInputList[i].colors[colorindex].clr;
                    break;
                }
            }
            $colorChangerDiv.css("background-color", "#" + colorHex);
        }
    },

    OpenDropdown: function () {
        var key = 'V';
        //$('.SIMS .ribbon .SK_' + key).closest('.office-control').DropdownOpener();
        $('.SIMS .ribbon .SK_' + key).closest('.office-control').find('.dropdown-button').trigger('click');

    },

    //    attachContextMenus: function () {
    //        this.attachCellStyleContextMenu();
    //    },

    //    attachCellStyleContextMenu: function () {
    //        var $contextMenu = this.$thisCompElement.find('#cellStylesContextMenu');
    //        $contextMenu.appendTo(this.$thisCompElement.find('.office-control.cell-styles'));

    //        var $cellStyles = this.$thisCompElement.find(".office-control.cell-styles .dropdown-image-item");
    //        $cellStyles.contextMenu({
    //            menu: 'cellStylesContextMenu',
    //            captureClickFor: '.dropdown-item',
    //            inSpeed: 25,
    //            outSpeed: 50
    //        },

    //    fireContextMenuClick
    //    );
    //    },

    isDropdownOpen: function () {
        return this.$thisCompElement.find(".dropdown-open").length > 0;
    },

    isGalleryOpen: function () {
        return this.$thisCompElement.find(".gallery-items-expanded").length > 0;
    },

    handleKeyCondition: function (key) {
        if (key === "ALT" || key === "F6" || key === "F10") {
            return true;
        }
        return this.isDropdownOpen() || this.isGalleryOpen();
    },

    AttachComponentEvents: function (CompInfo, $Comp) {


        this.compId = CompInfo["@id"];
        var self = this;
        SIMS.Objects.DOMElements.SIMArea.add(this.$thisCompElement).click(function () {
            self.goIntoNormalState();
        });

        //Attaching Context Menu
        //this.attachContextMenus();
        var clicks, timer, delay;
        clicks = 0; delay = 250; timer = null;

        //Wire Events and Messaging for controls
        //var $allConrols = $Comp.find('.office-control');


        var $ribbonComp = $Comp.find(".ribbon:first");
        $ribbonComp.noRepeatBind('officeButtonClick selectedIndexChanged dropdownMenuItemClick iconClick spinValueChanged checkChanged', function (e, desc, eventId, ICMessageId, eventInfo, clickstreamInfo) {
            //alert('click '+desc);
            console.log(eventId);
            if (!clickstreamInfo) {
                clickstreamInfo = desc;
            }
            console.log(clickstreamInfo);
            var sCompDesc = "Ribbon: ";
            var id = 9999;

            if (eventInfo) {
                if (eventInfo.cmIndex)
                    self.$thisCompElement.data("CONTEXT_MENU_ITEM_INDEX", eventInfo.cmIndex);
            }

            if (eventId == 408) // Replace with Undo Redo itemClickEvent event ids..
            {
                $(self).data("UndoRedoIndex", eventInfo);
            }

            if (eventId != null && eventId !== "") {
                id = parseInt(eventId);
            }

            if (eventId == 409) {
                $(self).data("TableDimensions", desc);
            }

            if (id == 299) {
                //Click Handler
                //http://stackoverflow.com/questions/6330431/jquery-bind-double-click-and-single-click-separately

                clicks++;

                timer = setTimeout(function () {

                    //If later click or double click would differ then use this block
                    switch (clicks) {
                        case 1: //SINGLE CLICK
                            self.LogComponentEvent(299, sCompDesc + clickstreamInfo);
                            break;
                        case 2: // DOUBLE CLICK
                            self.LogComponentEvent(145, "Ribbon : Home tab : Clipboard group : Format Painter Double Clicked");
                            break;
                    }


                    clicks = 0;
                }, delay);


            }

            if (id === 270) {
                if (self._compinfo.finalattrs && self._compinfo.finalattrs.attr) {
                    var attr = getArray(self._compinfo.finalattrs.attr).findSingle("@name", "SMART_HEIGHT");
                    if (attr) {
                        if (self.getSpinVal("smart-height").toString() === attr["@value"].toString()) {
                            self.LogComponentEvent(id, sCompDesc + clickstreamInfo);
                        }
                    }
                }
            }
            if (id === 271) {
                if (self._compinfo.finalattrs && self._compinfo.finalattrs.attr) {
                    var attr = getArray(self._compinfo.finalattrs.attr).findSingle("@name", "SMART_WIDTH");
                    if (attr) {
                        if (self.getSpinVal("smart-width").toString() === attr["@value"].toString()) {
                            self.LogComponentEvent(id, sCompDesc + clickstreamInfo);
                        }
                    }
                }
            }

            if (id === 338) {
                if (self._compinfo.finalattrs && self._compinfo.finalattrs.attr) {
                    var attr = getArray(self._compinfo.finalattrs.attr).findSingle("@name", "TABLE_WIDTH");
                    if (attr) {
                        if (self.getSpinVal("table-width").toString() === attr["@value"].toString()) {
                            self.LogComponentEvent(id, sCompDesc + clickstreamInfo);
                        }
                    }
                }
            }

            if (id === 546) {
                if (self._compinfo.finalattrs && self._compinfo.finalattrs.attr) {
                    var attr = getArray(self._compinfo.finalattrs.attr).findSingle("@name", "TABLE_HEIGHT");
                    if (attr) {
                        if (self.getSpinVal("table-height").toString() === attr["@value"].toString()) {
                            self.LogComponentEvent(id, sCompDesc + clickstreamInfo);
                        }
                    }
                }
            }

            if (id === 551) {
                self.ChartSpinButtonEventhandler(id, "chart-height", "CHART_HEIGHT", eventInfo, sCompDesc + clickstreamInfo);
            }

            if (id === 552) {
                self.ChartSpinButtonEventhandler(id, "chart-width", "CHART_WIDTH", eventInfo, sCompDesc + clickstreamInfo);
            }

            if (id === 241) {
                self.validatePictureToolSpinBoxValues(id, sCompDesc, clickstreamInfo, eventInfo);
            }
            else if (id === 242) {
                if (self._compinfo.finalattrs && self._compinfo.finalattrs.attr) {
                    var attr = getArray(self._compinfo.finalattrs.attr).findSingle("@name", "SHAPE_WIDTH");
                    if (attr) {
                        if (self.getSpinVal("shape-width").toString() === attr["@value"].toString()) {
                            self.LogComponentEvent(id, sCompDesc + clickstreamInfo);
                        }
                    }
                    else {
                        attr = getArray(self._compinfo.finalattrs.attr).findSingle("@name", "PICTURE_WIDTH");
                        if (attr) {
                            if (self.getSpinVal("shape-width").toString() === attr["@value"].toString()) {
                                self.LogComponentEvent(id, sCompDesc + clickstreamInfo);
                            }
                        }
                    }
                }
            }
            else if (id === 244) {
                self.ShapeHeightChange(id, sCompDesc, clickstreamInfo, eventInfo);
            }
            else if (id === 245) {
                self.ShapeWidthChange(id, sCompDesc, clickstreamInfo, eventInfo);
            }
            else if (id === 157) {
                self.SpacingAfterChange(id, sCompDesc, clickstreamInfo, eventInfo);
            }
            else if (id === 315) {
                if (self._compinfo.finalattrs && self._compinfo.finalattrs.attr) {
                    var attr = getArray(self._compinfo.finalattrs.attr).findSingle("@name", "LEFT_INDENT");
                    if (attr) {
                        if (self.getSpinVal("left-indent").toString() === attr["@value"].toString()) {
                            self.LogComponentEvent(id, sCompDesc + clickstreamInfo);
                        }
                    }
                }
            }
            else if (id === 733) {
                if (self._compinfo.finalattrs && self._compinfo.finalattrs.attr) {
                    var attr = getArray(self._compinfo.finalattrs.attr).findSingle("@name", "RIGHT_INDENT");
                    if (attr) {
                        if (self.getSpinVal("right-indent").toString() === attr["@value"].toString()) {
                            self.LogComponentEvent(id, sCompDesc + clickstreamInfo);
                        }
                    }
                }
            }
            else if (desc != null) {
                switch (desc.toLowerCase()) {
                    /* -------Excel Ribbon events-----------*/
                    case 'bold':
                        //self.OpenDropdown();
                        id = 1;
                        break;
                    case 'clear all':
                        id = 13;
                        break;
                    case 'clear formats':
                        id = 11;
                        break;
                    case 'clear contents':
                        id = 12;
                        break;
                    case 'clear comments':
                        //id = 13;
                        break;
                    case 'clear hyperlinks':
                        //id = 14;
                        break;

                    case 'series...':
                        id = 29;
                        break;

                    case 'autofit column width':
                        id = 30;
                        break;
                    /* -------Excel Ribbon events-----------*/

                    /* -------Word Ribbon events-----------*/
                    case 'text from file...':
                        id = 20;
                        break;
                    case '16':
                        id = 5;
                        break;
                    case 'pictures':
                        id = 21;
                        break;
                    case 'tight':
                        id = 22;
                        break;
                    case 'more layout options...':
                        id = 23;
                        break;

                    case 'spelling':
                        id = 24;
                        break;
                    case 'position':
                        id = 25;
                        break;
                    case 'plastic wrap':
                        id = 26;
                        break;
                    case 'artistic effects options...':
                        id = 27;
                        break;
                    case 'wrap text':
                        id = 28;
                        break;
                    case 'divot':
                        id = 31;
                        break;
                    case 'page borders':
                        id = 32;
                        break;
                    case 'double wave':
                        id = 33;
                        break;
                    case 'borders and shading...':
                        id = 34;
                        break;
                    case 'line numbering options...':
                        id = 36;
                        break;
                    case 'more paper sizes...':
                        id = 36;
                        break;
                    case 'custom margins...':
                        id = 36;
                        break;
                    case 'solid bullet':
                        id = 37;
                        break;
                    case 'bullets':
                        id = 38;
                        break;
                    case '1.0':
                        id = 39;
                        break;
                    case 'column width...':
                        id = 50;
                        break;
                    case 'insert cells...':
                        id = 51;
                        break;
                    case 'insert sheet rows':
                        id = 52;
                        break;
                    case 'insert sheet columns':
                        id = 53;
                        break;
                    case 'insert sheet':
                        id = 54;
                        break;
                    case 'delete cells...':
                        id = 55;
                        break;
                    case 'delete sheet rows':
                        id = 56;
                        break;
                    case 'delete sheet columns':
                        id = 57;
                        break;
                    case 'delete sheet':
                        id = 58;
                        break;
                    case 'more borders..':
                        id = 59;
                        break;
                    case 'middle align':
                        id = 60;
                        break;
                    case 'format cells...':
                        id = 62;
                        break;
                    case 'accounting number format':
                        id = 63;
                        break;
                    case 'percent style':
                        id = 64;
                        break;
                    case 'comma style':
                        id = 65;
                        break;
                    case 'increase decimal':
                        id = 66;
                        break;
                    case 'decrease decimal':
                        id = 67;
                        break;
                    case 'select all':
                        id = 68;
                        break;
                    case 'justify':
                        id = 73;
                        break;
                    case 'more rotation options':
                        id = 78;
                        break;
                    case 'more borders':
                        id = 80;
                        break;
                    case 'insert':
                        id = 82;
                        break;
                    case 'line spacing options...':
                        id = 43;
                        break;
                    case 'delete':
                        id = 84;
                        break;
                    case 'arial':
                        id = 108;
                        break;
                    case '11':
                        id = 109;
                        break;
                    case 'show/hide (ctrl+*)':
                        id = 146;
                        break;
                    case 'mirrored':
                        id = 147;
                        break;
                    case 'increase font size':
                        id = 150;
                        break;
                    case 'page':
                        id = 158;
                        break;
                    case 'quick print':
                        id = 177;
                        break;
                    case 'different first page':
                        id = 176;
                        break;
                    case 'more commands...':
                        id = 179;
                        break;
                    case 'online video':
                        id = 226;
                        break;
                    case 'close':
                        id = 255;
                        break;
                    case 'narrow':
                        id = 286;
                        break;

                    default:
                        break;
                    /* -------Word Ribbon events-----------*/

                }
            }

            self.FireSimEvent(id, eventInfo, sCompDesc + clickstreamInfo);


            if (ICMessageId) {
                self.SendMessageToComponents(ICMessageId, ICMessageId, ICMessageId);
            }
        });

        $ribbonComp.noRepeatBind('lazyLoadTab', function (e, eventInfo) {

            if (eventInfo && eventInfo.tabXML && eventInfo.tabContainer) {
                self.LazyLoadTab(eventInfo.tabXML, eventInfo.tabContainer);
            }
        });

        $ribbonComp.noRepeatBind('updateTabAttributes', function (e, eventInfo) {

            if (eventInfo && eventInfo.attrList) {
                self.UpdateTabAttributes(self.compId, eventInfo.attrList);
            }
        });

        $ribbonComp.noRepeatBind('updateTabSubRibbon', function (e, eventInfo) {
            if (eventInfo && eventInfo.subRibXML) {
                self.UpdateTabSubRibbon(eventInfo.subRibXML);
            }
        });
        //Wire Events and Messaging for dialog Launchers

        //Commenting out as the event binding breaks for launchers present in lazy generated tabs
        //var $launchers = $Comp.find('.section-launcher');
        //$launchers.noRepeatBind('launcherClick', function (e, desc, data) {

        this.attachLauncherEvents($ribbonComp);

        //Adding Double click for fromat Painter
        this.$thisCompElement.find(".format-painter").dblclick(function () {
            self.LogComponentEvent(145, "Ribbon : Home tab : Clipboard group : Format Painter Double Clicked");
        });

        //File Menu Event
        this.$thisCompElement.find(".tab-header-backstage").bind('fileMenu', function () {
            self.LogComponentEvent(124, "Ribbon : File Tab Clicked");
            self.SendMessageToComponents(203, "File Tab Open", {
                accessiblity: self.isAccessible()
            });
        });

        //Wiring font size functionality
        //this.addFontsizeFunctionality();
    },

    attachLauncherEvents: function ($ribbonComp) {
        var self = this;
        $ribbonComp.noRepeatBind('launcherClick', function (e, desc, data, clickstreamInfo) {
            var sCompDesc = "Ribbon: ";
            var eventid = 9999;
            var currTab = $(e.target).parents(".ribbon-tab-container:first").attr("id");
            if (!clickstreamInfo) {
                clickstreamInfo = desc;
            }
            switch (desc.toLowerCase()) {
                case "styles":
                    eventid = 4;
                    break;
                case "clipboard":
                    eventid = 41;
                    break;
                case "font":
                    eventid = 42;
                    break;
                case "paragraph":
                    eventid = 43;
                    break;
                case "alignment":
                    eventid = 44;
                    break;
                case "number":
                    eventid = 45;
                    break;
                case "charts":
                    eventid = 46;
                    break;
                case "scale to fit":
                    eventid = 47;
                    break;
                case "sheet options":
                    eventid = 48;
                    break;
                case "page setup":
                    eventid = 49;
                    break;
                case "size":
                    {
                        switch (currTab) {
                            case "ribbon-tab-container-charttoolsformat":
                                eventid = 531;
                                // This stores the value for the attribute CHART_TOOLS_FORMAT_LAUNCHER_GROUP
                                self.chartFormatTablauncherGroup = 'SIZE';
                                break;

                            case "ribbon-tab-container-slicertoolsoptions":
                                eventid = 620;
                                break;

                            default:
                                eventid = 35;
                                break;
                        }
                    }
                    break;
                case "picture styles":
                    eventid = 88;
                    break;
                case "tracking":
                    eventid = 137;
                    break;
                case "shape styles":

                    {
                        switch (currTab) {
                            case "ribbon-tab-container-charttoolsformat":
                                eventid = 531;
                                // This stores the value for the attribute CHART_TOOLS_FORMAT_LAUNCHER_GROUP
                                self.chartFormatTablauncherGroup = 'SHAPE_STYLES';
                                break;

                            default:
                                eventid = 168;
                                break;
                        }
                    }


                    break;
                case "wordart styles":
                    {
                        switch (currTab) {
                            case "ribbon-tab-container-charttoolsformat":
                                eventid = 531;
                                // This stores the value for the attribute CHART_TOOLS_FORMAT_LAUNCHER_GROUP
                                self.chartFormatTablauncherGroup = 'WORDART_STYLES';
                                break;

                            default:
                                eventid = 165;
                                break;
                        }
                    }
                    break;
                case "cell size":
                    eventid = 340;
                    break;
                case "borders":
                    eventid = 34;
                    break;
                case "footnotes":
                    eventid = 451;
                    break;
                case "rows & columns":
                    eventid = 493;
                    break;

                default:
                    break;

            }

            self.LogComponentEvent(eventid, sCompDesc + clickstreamInfo);
        });
    },

    FireSimEvent: function (id, controlEventArgs, clickstreamStr) {
        var self = this;
        if (id !== 241 && id !== 242 && id !== 244 && id !== 245 && id !== 270 && id !== 271 && id !== 315 && id !== 546 && id !== 338 && id != 299 && id != 551 && id != 552 && id != 157) {
            self.LogComponentEvent(id, clickstreamStr);
        }
    },

    ChartSpinButtonEventhandler: function (compEventId, spinCtrlName, finalAttrName, controlEventArgs, clickstreamStr) {
        if (this._compinfo.finalattrs && this._compinfo.finalattrs.attr) {
            var attr = getArray(this._compinfo.finalattrs.attr).findSingle("@name", finalAttrName);
            if (attr) {
                if (this.getSpinVal(spinCtrlName).toString() === attr["@value"].toString()) {
                    this.LogComponentEvent(compEventId, clickstreamStr);
                }
            }
        }
    },
    ShapeHeightChange: function (id, sCompDesc, clickstreamInfo, eventInfo) {
        var self = this;
        if (self._compinfo.finalattrs && self._compinfo.finalattrs.attr) {
            var attr = getArray(self._compinfo.finalattrs.attr).findSingle("@name", "SHAPE_HEIGHT");
            if (attr) {
                if (self.getSpinVal("shape-height1").toString() === attr["@value"].toString()) {
                    self.LogComponentEvent(id, sCompDesc + clickstreamInfo);
                }
                else if (eventInfo.spinChangedBy == "enter") {
                    self.LogComponentEvent(9999, "SHAPE_HEIGHT incorrectly changed through keyboard");
                }
            }
        }
    },

    ShapeWidthChange: function (id, sCompDesc, clickstreamInfo, eventInfo) {
        var self = this;
        if (self._compinfo.finalattrs && self._compinfo.finalattrs.attr) {
            var attr = getArray(self._compinfo.finalattrs.attr).findSingle("@name", "SHAPE_WIDTH");
            if (attr) {
                if (self.getSpinVal("shape-width1").toString() === attr["@value"].toString()) {
                    self.LogComponentEvent(id, sCompDesc + clickstreamInfo);
                }
                else if (eventInfo.spinChangedBy == "enter") {
                    self.LogComponentEvent(9999, "SHAPE_WIDTH incorrectly changed through keyboard");
                }
            }
        }
    },

    SpacingAfterChange: function (id, sCompDesc, clickstreamInfo, eventInfo) {
        this.LogComponentEvent(id, sCompDesc + clickstreamInfo);
    },

    validatePictureToolSpinBoxValues: function (id, sCompDesc, clickstreamInfo, eventInfo) {

        var self = this;
        if (self._compinfo.finalattrs && self._compinfo.finalattrs.attr) {

            var attr = getArray(self._compinfo.finalattrs.attr).findSingle("@name", "SHAPE_HEIGHT");
            if (attr) {
                if (self.getSpinVal("shape-height").toString() === attr["@value"].toString()) {
                    self.LogComponentEvent(id, sCompDesc + clickstreamInfo);
                }
            }
            else {
                attr = getArray(self._compinfo.finalattrs.attr).findSingle("@name", "PICTURE_HEIGHT");
                if (attr) {
                    if (self.getSpinVal("shape-height").toString() === attr["@value"].toString()) {
                        self.LogComponentEvent(id, sCompDesc + clickstreamInfo);
                    }
                }
            }
        }
    },
    RemoveTabFromList: function (attrValue) {

        if (attrValue == "Header Footer Tools" || attrValue == "Header & Footer Tools")
            attrValue = "Header Footer Tools Design";

        this.base(attrValue);
    },

    HideTab: function (attrVal) {

        if (attrVal == "Header Footer Tools" || attrVal == "Header & Footer Tools")
            attrVal = "Header Footer Tools Design";

        var $thisComp = this.$thisCompElement;
        var tabNameMin = attrVal.removeSpaces().replace("&amp;", "").replace("&", "").toLowerCase();

        var $tabHeader = $thisComp.find('.tab-header-' + tabNameMin);
        $tabHeader.hide();

        var headText = $tabHeader.data("head-text");
        if (headText != undefined) {
            var headNameMin = headText.removeSpaces().replace("&", "").toLowerCase();
            var $contextualTabHead = $thisComp.find(".contextual-head-" + headNameMin);

            if ($contextualTabHead != null || $contextualTabHead != undefined) {
                $contextualTabHead.hide();
            }
        }

        if ($thisComp.find(".tab-header-contextual").filter(":visible").length == 0) {
            var $control = $thisComp.find('.title-bar .office-control.ctrl-text');
            $control.css({ "position": "inherit", "top": "6px", "vertical-align": "middle" });
        }

    },

    GenerateHTML: function () {

        this.base();

        var $thisComp = this.$thisCompElement

        var self = this;
        var path = this.controlXMLPath;
        var ribbonGenr = this.ribbonGenerator;

        if (path != null && this.controlXMLUpdate === "true") {

            //Load 1024 ribbon xml for lower resolutions
            if (gSimsAreaWidth < 1279) {

                path = this.controlXMLPath.replace(".xml", "_1024.xml");

            }

            $.ajax({
                async: false,
                url: path,
                success: function (xml) {
                    self.PostSubRibbonAjaxCall(xml);
                }
            });

        }
        if (this.pivotChartToolsFieldButton == "true") {
            this.toggleButton('.office-control.pivot_chart_field_buttons', this.pivotChartToolsFieldButton);
        }

        if (self.galleryUpdateStack.length != 0) {
            for (var i = 0; i < self.galleryUpdateStack.length; i++) {
                self.setSelectedGalleryControlItem(self.galleryUpdateStack[i].classname, self.galleryUpdateStack[i].attrVal);
            }
            //reset galleryUpdateStack as update is complete
            self.galleryUpdateStack.length = 0;
            self.galleryUpdateStack = [];
        }


        if (self.colorTheme != null) {
            $thisComp.children(".ribbon").attr("theme", self.colorTheme);
            self.colorTheme = null;
        }

        //        if (this.pageColor != null) {
        //            this.setColorGridVal('page-color', this.pageColor);
        //        }
        //        if (this.myTabPageColor != null) {
        //            this.setColorGridVal('mytab-page-color', this.myTabPageColor);
        //        }
        //Bind events finally when all xml related generation or updates are done

        //self.AttachComponentEvents(self._compinfo, $thisComp);
    },

    //    UpdateTabAttributes: function (compId, attrList) {
    //        var self = this;
    //
    //        for (var i = 0; i < attrList.length; i++) {
    //            self.SetAttribute(compId, attrList[i].attrName, attrList[i].attrValue);
    //        }
    //
    //
    //    },
    //
    //
    //    UpdateTabSubRibbon: function (subRibbonXML) {
    //
    //        var ribbonGenr = this.ribbonGenerator;
    //
    //        ribbonGenr.updateTabBody(subRibbonXML);
    //    },
    //
    //    LazyLoadTab: function (tabXML, $tabCont) {
    //        var self = this;
    //        var ribbonGenr = this.ribbonGenerator;
    //
    //        var $tabBody = ribbonGenr.getTabBody(tabXML, true);
    //        $tabCont.append($tabBody);
    //
    //        var attrUpdateList = this.attrUpdateList.slice(0); //checkbox, spin_val
    //
    //        if (attrUpdateList.length != 0) {
    //            for (var i = 0; i < attrUpdateList.length; i++)         //try to set attribute value if any
    //            {
    //                if (attrUpdateList[i].attrName == 'CHECKBOX')
    //                    self.toggleCheckBox(attrUpdateList[i].classname, attrUpdateList[i].attrVal);
    //                else if (attrUpdateList[i].attrName == 'SPIN_VAL')
    //                    self.setSpinVal(attrUpdateList[i].classname, attrUpdateList[i].attrVal);
    //            }
    //        }
    //    },

    PostSubRibbonAjaxCall: function (xml) {
        //$thisComp.children().remove();
        this.ribbonGenerator.updateRibbonfromXML(xml, this.$thisCompElement.children('.ribbon'), this.AttachSubRibbonWithIdentifier);
        //reset controlXMLUPdate as update is complete
        this.controlXMLUpdate = "false";
        this.AttachSubRibbonWithIdentifier = false;
        //self.AttachComponentEvents(self._compinfo, $thisComp);

    },

    addFontsizeFunctionality: function () {
        var self = this;

        var $incFontSz = this.$thisCompElement.find(".increase-font-sz");
        var $decFontSz = this.$thisCompElement.find(".decrease-font-sz");
        var $fontSize = this.$thisCompElement.find(".font-size");

        var $fontValue = $fontSize.find(".combo-textbox");

        var getNextItem = function () {
            var nCurrentValue = parseInt(self.GetAttribute(null, "FONT_SIZE"));
            var data = $fontSize.data("customdata");
            for (var i = 0; i < data.length; i++) {
                if (data[i] > nCurrentValue) {
                    return data[i];
                }
            }
        };

        var getPrevItem = function () {
            var nCurrentValue = parseInt(self.GetAttribute(null, "FONT_SIZE"));
            var data = $fontSize.data("customdata");
            for (var i = data.length - 1; i >= 0; i--) {
                if (data[i] < nCurrentValue) {
                    return data[i];
                }
            }
        };

        $incFontSz.click(function () {
            var nNext = getNextItem();
            if (!nNext) {
                nNext = Math.round((parseInt(self.GetAttribute(null, "FONT_SIZE")) + 10) / 10) * 10;
            }
            self.SetAttribute(null, "FONT_SIZE", nNext);
        });

        $decFontSz.click(function () {
            var nPrev = getPrevItem();
            if (nPrev) {
                self.SetAttribute(null, "FONT_SIZE", nPrev);
            }
        });
    },

    ReceiveComponentMessage: function (compMessageArgs) {
        console.log(this._compinfo.compName + ": Message Id:" + compMessageArgs.MessageId + "  MessageName:" + compMessageArgs.MessageName);
        if (compMessageArgs.MessageId === SIMS.SharedData.UniqueMessages.FM_ESCAPE_PRESS) {

            //console.log(compMessageArgs.MessageDetails.accessiblity);
            if (compMessageArgs.MessageDetails.accessiblity === true) {


                this.goIntoAccessibilityState();
            }
            else {// some code for other states

            }
        }
        else {

            this.base(compMessageArgs); // for contextual ribbon tab handling in BaseRibbon.
        }


        //self.SendMessageToComponents(203, "File Tab Open", { accessiblity: self.isAccessible() });
    },

    setGalleryItem: function (className, attrVal) {
        var value = {};
        value.classname = className;
        value.attrVal = attrVal;
        this.galleryUpdateStack.push(value);

    },

    generateCollapseButton: function ($thisComp) {
        var self = this;
        var container = $thisComp.find(".ribbon-tab-container");

        var btnElement = $("<div></div>").addClass("collapse-button");
        $thisComp.find(".ribbon-tab-container").append(btnElement);

        //Button parameters
        var btnHeight = parseInt(btnElement.css("height"));
        var btnWidth = parseInt(btnElement.css("width"));

        var containerWidth = container.outerWidth();
        var $topPos = container.offset().top + container.outerHeight() - btnHeight - 2;
        var $leftPos = containerWidth - btnWidth - 1;

        //Generate tooltip of the button
        var tooltipContent = "<b>Collapse the Ribbon (Ctrl+F1)</b><br/><br/>Need a bit more space? Collapse the<br/>ribbon so only the tab names show.";
        var $tooltip = $("<div></div>").addClass("collapse-button-tooltip");
        $tooltip.html(tooltipContent);
        $thisComp.find(".ribbon-tab-container").append($tooltip);

        $($thisComp.find(".ribbon-tab-container .collapse-button")).mouseover(function () {
            $(this).next(".collapse-button-tooltip").delay(1000).fadeIn(200);
        }).mouseout(function () {
            $(this).next(".collapse-button-tooltip").delay(20).fadeOut(200);
        });

        var tooltipTopPos = $topPos + btnHeight + 2;
        var tooltipLeftPos = $leftPos - parseInt($tooltip.css("width"));

        $thisComp.find(".ribbon-tab-container .collapse-button").css({ top: $topPos, left: $leftPos });
        $thisComp.find(".ribbon-tab-container .collapse-button-tooltip").css({ top: tooltipTopPos, left: tooltipLeftPos });

        //Attach event to the button
        $thisComp.find(".ribbon-tab-container .collapse-button").bind('click', function () {
            self.LogComponentEvent(1094, "Ribbon : Collapse the Ribbon Button Clicked");
        });

    },

    enableRibbonTabEvent: function (attrValue, $thisComp) {
        var self = this;
        var tabList = JSON.parse(attrValue);
        var tabName = null;
        var $tabHeader = null;

        $thisComp.find("li.tab-header").unbind("fireEventOnTabClick");;

        for (var i = 0; i < tabList.length; i++) {
            tabName = tabList[i].toLowerCase().replace(/ /g, "");
            $tabHeader = $thisComp.find('.tab-header-' + tabName);
            $tabHeader.attr("enableTabClickEvent", true);

            $tabHeader.unbind('fireEventOnTabClick').bind('fireEventOnTabClick', function () {
                self.LogComponentEvent(1093, "Ribbon : " + tabName + " Tab Clicked", true);
            });

        }

    },

    //    setAttributeValue: function (attrName, className, attrVal) {
    //        var value = {};
    //        value.classname = className;
    //        value.attrVal = attrVal;
    //        value.attrName = attrName;
    //        this.attrUpdateList.push(value);
    //
    //
    //
    //    },
    //
    //    removeAttrFrmUpdateList: function (attrName, className, attrVal) {
    //        var index = -1;
    //        if (this.attrUpdateList.length != 0) {
    //            for (var i = 0, len = this.attrUpdateList.length; i < len; i++) {
    //                if (this.attrUpdateList[i].classname == className && this.attrUpdateList[i].attrVal == attrVal && this.attrUpdateList[i].attrName == attrName) {
    //                    index = i;
    //                    break;
    //                }
    //            }
    //
    //            if (index != -1) {
    //                this.attrUpdateList.splice(index, 1);         //remove that object
    //            }
    //
    //        }
    //
    //    },


    triggerCloseEvent: function () {

        this.LogComponentEvent(8, "ALT+F4 pressed");

        return true;
    },

    CreateRibbon: function (xml) {
        this.ribbonGenerator.activeTabList = (GetAllValuesOfAnAttribute(this._compID, "ACTIVATE_TAB")).toString().toLowerCase();

        this.ribbonGenerator.activeTabList = this.ribbonGenerator.activeTabList.replace("header & footer tools", "header & footer tools design");
        this.ribbonGenerator.activeTabList = this.ribbonGenerator.activeTabList.replace("header footer tools", "header & footer tools design");

        this.$thisCompElement.append(this.ribbonGenerator.getRibbonFromXml(xml, this.appName));

        this.ribbonGenerator.activeTabList = "";

        //Should be called in GenerateHTML, however due to repeat binding issue kept here
        this.AttachComponentEvents(this._compinfo, this.$thisCompElement);
    },

    Dispose: function () {

        //SIMCMP-3839 : fix for memory leak due to ribbon optimization code changes
        var apps = ["excel", "ppt", "word"];

        if (apps.indexOf(this.appName) !== -1) {    //if excel or ppt where ribbon optimization implemented
            if (this.ribbonGenArr && this.ribbonGenArr.length) {
                for (var i = 0; i < this.ribbonGenArr.length; i++) {
                    this.ribbonGenArr[i].Dispose();
                }
            }
        }

        this.ribbonGenArr = null;

        this.base();
    }
});



'use strict';
namespace("SIMS.Components2016.Common.Ribbon");

SIMS.Components2016.Common.RibbonContextMenu = SIMS.Components.Common.RibbonContextMenu.extend({
//Leonardo Start
    JSONFilePath: {
        excel: "Ribbon/json/contextmenu/excel-menu.json"
    },
    //Leonardo End

    GetMenuIdAndIgnoreFlag: {
        Item: function ($target) {
            var menuId, ignoreCMCall = false;
            var defaultCMDisplacement = 10;

            if ($target.data('contextMenuId')) {
                menuId = $target.data('contextMenuId');
            }

            if (!menuId) {
                var $items = $target.parents(".dropdown-items-wrapper");

                for (var i = 0; i < $items.length; i++) {
                    var $currentItems = $($items[i]);
                    if ($currentItems.data('contextMenuId')) {
                        menuId = $currentItems.data('contextMenuId');
                        break;
                    }
                }
            }

            if (!menuId) {
                ignoreCMCall = true;
            }

            return { menuId: menuId, ignoreCMCall: ignoreCMCall, defaultCMDisplacement: defaultCMDisplacement };
        },

        Control: function ($target) {
            var menuId = "control";

            if ($target.data('contextMenuId')) {
                menuId = $target.data('contextMenuId');
            }

            return { menuId: menuId };
        },

        TitleBar: function ($target) {
            return { menuId: "titlebar" };
        },

        Default: function ($target) {
            return { menuId: "ribbon" };
        }
    }

});

// <reference path="jquery-1.8.2.js" />
// <reference path="UIUtils.js" />
// <reference path="OfficeUIUtils.js" />
// <reference path="ControlGenerator.js" />

"use strict";

var ribbonGenerator16 = function () {


    // In this way we can call the function of base class as it has been done on the commented code for getRibbonFromXml function.
    //this.getRibbonFromXml = function (ribbonXml, appName) {  
    //    var $ribbon = ribbonGenerator16.prototype.getRibbonFromXml(ribbonXml, appName);
    //};
    this.subRibbonImgCheckFlag = true;

    this.$ribbonXmlArray = [];
    this.fixMultiRibbonTabSelection = false;
    /*Memory leak fix: Redefining $ribbonXmlArray as own property of ribbonGenerator16   
      REASON: Dispose function called for RibbonGenrator2016 loops through the prototypal property ($ribbonXmlArray) of ribbonGenerator16;
       and when it comes to resetting $ribbonXmlArray to null, it sets its own property which results in multiple instances of ribbonxml in this.$ribbonXmlArray  
    */
    this.getRibbonFromXml = function (ribbonXml, appName, ribbonMode) {
        SIMS.Objects.DOMElements.Ribbon = null;
        this.appName = appName;

        var $ribbonXml = this.$ribbonXml = $(ribbonXml);
        this.$ribbonXmlArray.push(this.$ribbonXml);

        var $ribbon = this.$ribbon = $("<div class='" + this.appName + " ribbon' />");

        this.menuType = $ribbonXml.find('ribbon').attr('menutype');

        if (this.menuType == "JSON") {
            this.ribbonContextMenu = new SIMS.Components2016.Common.RibbonContextMenu($ribbon, this.appName);
            $ribbon.attr('id', 'ribbonmaindiv');   // this id was added as new context menu does not hide if ID not present.
            this.bindAddJSONCMEvent();
            $ribbon.data('ContextMenuType', 'JSON');
        }

        if (ribbonMode && ribbonMode !== SIMS.Components2016.Common.RibbonVisibilityModes.NORMAL) {
            $ribbon.addClass(ribbonMode);
        }


        //Make Title Bar
        //Leonardo - Start
        //var $titleBar = this.getTitleBar($ribbonXml.find('ribbon titlebar'));
        //$ribbon.append($titleBar);
        //Leonardo - End

        //Make Tabs
        var $tabs = $ribbonXml.find("ribbon tabs tab");
        var $tabsWrapper = this.$tabsWrapper = UIUtils.getUnselectableGenericElement("ul", "", "ribbon-tabs-wrapper");
        $ribbon.append($tabsWrapper);
        //Adding Tabs
        for (var i = 0; i < $tabs.length; i++) {
            var tabXml = $tabs[i];
            this.AddTab(tabXml);
        }

        //adding head for contextual tabs in title bar area.
        var $contextualTabs = $ribbon.find(".tab-header-contextual");
        for (var index = 0; index < $contextualTabs.length; index++) {
            var $contextualTabHead = $("<div></div>").addClass("contextual-tab-head");
            /*var $contextualTabHead = UIUtils.getUnselectableDiv('', 'contextual-tab-head');*/

            var headText = $($contextualTabs[index]).data("head-text") || "";
            $contextualTabHead.text(headText);
            var headNameMin = headText.removeSpaces().replace("&", "").toLowerCase();
            $contextualTabHead.addClass("contextual-head-" + headNameMin);
            $contextualTabHead.data("tabclass", $($contextualTabs[index]).data("tabclass"));

            var self = this;
            $contextualTabHead.bind('click', function (e, desc) {
                var tabClass = $(this).data("tabclass");
                var tab = self.$ribbon.find("." + tabClass);
                //special handling for chart tool tabs
                if (tabClass == "tab-header-charttoolsformat")
                    tab = self.$ribbon.find(".tab-header-charttoolsdesign");

                if (tabClass == "tab-header-tabletoolslayout")
                    tab = self.$ribbon.find(".tab-header-tabletoolsdesign");

                if (tabClass == "tab-header-smartarttoolsformat")
                    tab = self.$ribbon.find(".tab-header-smartarttoolsdesign");

                tab.trigger("click");
            });

            $titleBar.append($contextualTabHead);
        }
        //////////////////////////////////////////////////////////////////////////

        //Leonardo Start

        //Adding Tell me Search Box
        // var $TellMeBox = $('<li class="tellMeSearchBox"/>');
        // var $TellMeBoxImage = UIUtils.getUnselectableDiv('', 'tellMeBoxImage');
        // var $TellMeBoxText = UIUtils.getUnselectableDiv('', 'tellMeBoxText');
        // $TellMeBoxText.text("Tell me what you want to do...");
        // $TellMeBoxImage.appendTo($TellMeBox);
        // $TellMeBoxText.appendTo($TellMeBox);
        // $TellMeBox.appendTo(this.$tabsWrapper);


        //Adding user info
        //if (this.appName.toLowerCase() == "win10explorer") { // adding this case for win10 file exploror ribbon
        // var $xUserInfo = $ribbonXml.find('userinfo');
        // if ($xUserInfo != null) {
        //     var $userInfo = $('<li class="userinfo"/>');

        //     //Collapse button for windows 10 explorer
        //     //Collapse button for windows 10 explorer
        //     var $ribbonShowHideButton = UIUtils.getUnselectableDiv('', 'expandButton');
        //     var $compFrame = SIMS.Objects.DOMElements.SIMArea.find(".ComponentFrame");
        //     $compFrame.addClass('expandRibbon');
        //     $ribbonShowHideButton.click(function () {
        //         if ($compFrame.hasClass('expandRibbon')) {
        //             $compFrame.removeClass('expandRibbon');
        //             $compFrame.addClass('colapseRibbon');
        //         } else {
        //             $compFrame.removeClass('colapseRibbon');
        //             $compFrame.addClass('expandRibbon');
        //         }

        //     });
        //     //Help button for windows 10 explorer
        //     //Help button for windows 10 explorer
        //     //var $helpeBtn = UIUtils.getUnselectableDiv('', 'helpButton');

        //     $userInfo.append($ribbonShowHideButton);
        //     $userInfo.appendTo($tabsWrapper);
        // }
        //}
        // else {
        //     var $xUserInfo = $ribbonXml.find('userinfo');  // For all office applications
        //     if ($xUserInfo != null) {
        //         var $userInfo = $('<li class="userinfo"/>');

        //         //user name
        //         var $username = UIUtils.getUnselectableDiv('', 'username');
        //         $username.text($xUserInfo.attr('name'));


        //         //Share Button

        //         var $sharebuttonXML =  $ribbonXml.find('shareButton control[identifier="sharebuttonEnabled"]');
        //         if ($sharebuttonXML.length > 0) {    
        //             var $shareButton = $('<li class="shareButtonLI"/>');
        //             $userInfo.append($username);
        //             $shareButton.append(this.controlGeneratorFactory.getControl($sharebuttonXML));
        //             $tabsWrapper.append($shareButton);

        //         } else {
        //             var $sharebutton = UIUtils.getUnselectableDiv('', 'sharebutton');
        //             var $icon = UIUtils.getUnselectableDiv('', 'userinfo-icon');
        //             var $sharetext = UIUtils.getUnselectableDiv('', 'sharetext');
        //             $sharetext.text("Share");
        //             $sharebutton.append($icon, $sharetext);

        //             $userInfo.append($username, $sharebutton);
        //         }

        //         $userInfo.appendTo($tabsWrapper);         
        //     }
        // }

        //Leonardo End

        //Select Second tab by Default... changing selector from "tab-header:nth-child(2)" to "tab-header-home"
        var bCreateTabs = true;
        if (ribbonMode === SIMS.Components2016.Common.RibbonVisibilityModes.COLLAPSED) {
            bCreateTabs = false;
        }
        if (bCreateTabs) {
            var $secondTabHeader = $ribbon.find('.tab-header-home');
            this.manipulatorFactory.getManipulator($secondTabHeader).selectTab($secondTabHeader);
        }


        if (this.menuType == "JSON") {
            //this.ribbonContextMenu.UpdateMenuBindings();
        }
        else {
            // this.AddContextMenus();
        }

        if (this.appName.toString().toLowerCase() == "ppt") {
            //////////////////////////////////////////////////////////////////////////
            //Selection Retainer - prevents focus shifting to Ribbon
            var blockFor = ".ribbon:not(.SIMS-PPTFileMenu)";

            var selectionRetainer = function (e) {
                // if ($(e.target).parents(".contextMenuBinder").add($(e.target).parents(".shyToolBarDropDown")).length == 0) {
                var $clickedItem = $(e.target);
                if ($clickedItem.closest(blockFor).length > 0) {
                    if ($clickedItem.is("input[type=text]:not(.ctrl-comboboxreadonlytext .combo-textbox)")) {
                        $clickedItem.select();
                    }
                    if (navigator.userAgent.indexOf("Edge") != -1) {
                        $clickedItem.focus();
                    }
                    e.preventDefault();
                }
                //}
            };

            SIMS.Objects.DOMElements.SIMArea.unbind("mousedown", selectionRetainer).bind("mousedown", selectionRetainer);
            //////////////////////////////////////////////////////////////////////////
        }


        /*if (gSimsAreaWidth < 1279) {
            $ribbon.find(".");

        }*/

        SIMS.Objects.DOMElements.Ribbon = $ribbon;  // to make the ribbon available without parsing the DOM
        return $ribbon;

    };


    this.updateRibbonfromXML = function (ribbonXml, ribbon, AttachSubRibbonWithIdentifier, fixMultiRibbonTabSelection) {
        this.fixMultiRibbonTabSelection = fixMultiRibbonTabSelection ? true : false;


        ribbonGenerator16.prototype.updateRibbonfromXML.apply(this, [ribbonXml, ribbon, true]);
        // AttachSubRibbonWithIdentifier attribute is always passed as true as this is used to add identifier to the newly added control.

        if (this.subRibbonImgCheckFlag) {
            this.CheckForIncorrectImages(ribbonXml);
        }

    };

    this.IncorrectImagesDirectories = [
        //"app/comps/common/ribbon/img",
        "app/comps/common/ribbon/sprites",
        "app/comps2016/common/ribbon/sprites"
    ];

    this.CheckForIncorrectImages = function (ribbonXml) {

        var subribbontext = new XMLSerializer().serializeToString(ribbonXml);

        for (var i = 0; i < this.IncorrectImagesDirectories.length; i++) {
            if (subribbontext.toLowerCase().indexOf(this.IncorrectImagesDirectories[i]) >= 0) {
                GlobalLog("Some images in this sub-Ribbon.xml is referred from " + this.IncorrectImagesDirectories[i] + " folder. Please replace these images with the images from img folder of current Office version of ribbon component");
            }
        }
    };

    this.getTabContainer = function (tabName) {
        if (this.fixMultiRibbonTabSelection) {
            return this.$ribbon.find('#ribbon-tab-container-' + tabName);
        } else {
            return SIMS.Objects.DOMElements.Ribbon.find('#ribbon-tab-container-' + tabName);
        }
    };

};



ribbonGenerator16.prototype = new ribbonGenerator();

//ribbonGenerator16.prototype.controlGeneratorFactory = new ControlGenerator2016();






'use strict';
namespace("SIMS.Components2016.Excel");

// This class is extended from Excelribboncomp.js ( which is used for Office 13)

//Class Declaration and Derivation
SIMS.Components2016.Excel.Ribbon = SIMS.Components.Excel.Ribbon.extend({
    
    fixMultiRibbonTabSelection: false,
    // Overriding of constructor can be done in this way
    constructor: function () {
       this.base();       
       // This is a map that maps the Office 13 ribbon xmls to Office 16 xmls
       this.AddPathToXmlPathMap("app/comps/common/ribbon/excel-ribbon.xml", "app/comps2016/common/ribbon/excel-ribbon.xml");
       this.AddPathToXmlPathMap("app/comps2016/common/ribbon/excel-ribbon.xml", "app/comps2016/common/ribbon/excel-ribbon.xml");
    },

    // For adding any new attribute then the attribute registered in RegisterAttributes function
    RegisterAttributes: function () {
        this.base();

        this.RegisteredComponent.EditRegisterdAttribute("CHART_HEIGHT", null, null, "float");
        this.RegisteredComponent.EditRegisterdAttribute("CHART_WIDTH", null, null, "float");

        this.RegisterAttribute("CHART_TEXT_FILL_COLOR", "0", 'int');
        this.RegisterAttribute("PICTURE_TOOLS_HEIGHT", "", 'float');
        this.RegisterAttribute("PIVOTCHART_TOOLS_FORMAT_CHART_ELEMENTS", "", 'text');
        this.RegisterAttribute("RIBBON_MODE", SIMS.Components2016.Common.RibbonVisibilityModes.NORMAL, 'text',false);
        this.RegisterAttribute("SLICER_SIZE_WIDTH", "", 'number');

          /**Below attribute has been added to set the display of a contextual tab to none. 
        Existing attribute (HIDE_TAB) is not relevent because it hides and then deactivates the tab. 
        Our requirement is only to hide the tab on task launch so then tab show / hide functionality could work as expected when a contextual element is clicked.**/
        this.RegisterAttribute("TAB_TO_DISPLAY_NONE", "", 'string',false); 
        this.RegisterAttribute("TELL_ME_SEARCH_BOX_WIDTH", "", 'string',false); 
        this.RegisterAttribute("FIX_MULTIRIBBON_TAB_SELECTION", false, 'bool',false); 

        this.RegisterAttribute("ENABLE_COLLAPSE_EXPAND_BUTTON", "false", "bool", false);


        //...add new attributes here
    },

    //// For adding any new events then the attribute registered in RegisterAttributes function
    RegisterEvents: function () {
        this.base();
        //...add new events here
        //For Ex:-
        //this.RegisterEvent(9, "Ribbon_SaveAs_Click", "Ribbon: SaveAs is clicked", false, false, "");
        this.RegisterEvent(3001, "Excel -> Insert statistics chart -> more statiscal charts", "", false, false, "");
        this.RegisterEvent(3002, "Excel -> Insert hierarchy chart -> more hierarchy charts", "", false, false, "");
        this.RegisterEvent(3003, "Excel -> Insert Waterfall or Stock Chart -> More Waterfall or Stock Chart", "", false, false, "");
        this.RegisterEvent(3004, "Excel -> Excel -> Sparkline Tools Design Tab -> Group Section -> Axis Control ->Vertical Axis Minimum ->Same for all Sparklines", "", false, false, "");
        this.RegisterEvent(3005, "Excel -> Excel -> Sparkline Tools Design Tab -> Group Section -> Axis Control ->Vertical Axis Maximum ->Same for all Sparklines", "", false, false, "");
        this.RegisterEvent(3006, "Excel -> Chart Tools Design - Add Chart Elements -> Data Labels -> More Data Label Options", "", false, false, "");
        this.RegisterEvent(3007, "Excel -> Chart Tools Format -> Shape Styles -> Shape outline -> Colour picker", "", false, false, "");
        this.RegisterEvent(3008, "Excel -> Chart Tools Format -> Shape Styles -> Shape outline -> Weight -> 1pt", "", false, false, "");    
        this.RegisterEvent(3009, "Excel -> Chart Tools Format -> WordArt Styles -> Text Fill -> Colour picker", "", false, false, ""); 
        this.RegisterEvent(3010, "Excel -> Home Tab -> Font Size -> 32", "", false, false, ""); 
        this.RegisterEvent(3011, "Excel -> View Tab -> Zoom Group -> 100%", "", false, false, "");
        this.RegisterEvent(3012, "Excel -> Table Tools Design Tab -> Table Styles Group -> Light -> Table Style Light 16", "", false, false, "");
        this.RegisterEvent(3013, "Excel -> PivotChart Tools Design - Add Chart Elements -> Data Labels -> More Data Label Options", "", false, false, "");
        this.RegisterEvent(3014, "Excel -> PivotTable Tools Analyze - Actions -> Clear -> Clear All", "", false, false, "");
        this.RegisterEvent(3015, "Excel -> PivotTable Tools Analyze - Actions -> Clear -> Clear Filters", "", false, false, "");
        this.RegisterEvent(3016, "Excel -> PivotChart Tools Design - Quick Layout -> Layout1", "", false, false, "");
        this.RegisterEvent(3017, "Excel -> PivotChart Tools Design - Styles->Style 14", "", false, false, "");
        this.RegisterEvent(3018, "Excel -> PivotChart Tools Design - Styles->Style 13", "", false, false, "");
        this.RegisterEvent(3019, "Excel -> PivotTable Tools Design - Styles->Medium 11", "", false, false, "");
        this.RegisterEvent(3020, "Excel -> PivotTable Tools Design - Styles->Medium 2 -> Context Menu event Id", "", false, false, "");
        this.RegisterEvent(3021, "Excel -> PivotTable Tools Design - Styles->Medium 2 -> Event Id", "", false, false, "");
        this.RegisterEvent(3022, "Excel -> Data Tab - Data Tools->Data Validation -> Clear validataion circles", "", false, false, "");
        this.RegisterEvent(3023, "Excel -> PivotTable Tools Design - Styles->Medium 3 -> Context Menu event Id", "", false, false, "");
        this.RegisterEvent(3024, "Excel -> PivotTable Tools Design - Styles->Medium 13 -> Event Id", "", false, false, "");
        this.RegisterEvent(3025, "Excel -> PivotChart Tools Design - Add Chart Elements -> Data Labels -> Center", "", false, false, "");
        this.RegisterEvent(3026, "Excel -> PivotTable Tools Design - Styles->Medium 9 -> Event Id", "", false, false, "");
        this.RegisterEvent(3027, "Excel -> PivotTable Tools Design - Styles->Medium 6 -> Event Id", "", false, false, "");
        this.RegisterEvent(3028, "Excel -> Formulas -> Function Library -> Date and Time 9 -> YEARFRAC ", "", false, false, "");
        this.RegisterEvent(3029, "Excel -> Data -> Data Tools -> Relationships", "", false, false, "");
        this.RegisterEvent(3030, "SHARE_BUTTON", "Excel -> Share Button", false, false, "");
        this.RegisterEvent(3031, "Excel -> Formulas -> Function Library -> Logical -> AND ", "", false, false, "");
        this.RegisterEvent(3032, "Excel -> PivotChart Tools Design - Add Chart Elements -> Data Labels -> Best Fit", "", false, false, "");
        this.RegisterEvent(3033, "Excel -> Insert Tab -> Add-ins -> Add-ins -> Manage other add-ins", "", false, false, ""); 
        this.RegisterEvent(3034, "POWER_REPORT_VIEW_BUTTON", "Excel -> Insert a Power Report View Button", false, false, "");
        this.RegisterEvent(3035, "Excel -> Page Layout Tab -> Fonts -> Cambria", "", false, false, ""); 
        this.RegisterEvent(3036, "Excel -> Data Tab -> Get & Transform -> New Query -> From Web", "", false, false, ""); 
        this.RegisterEvent(3037, "Excel - SlicerToolsOptions -> Size -> width", "", false, false, "");
        this.RegisterEvent(3038, "Excel - Data Tab- > Forecast -> Forecast Sheet", "", false, false, "");
        this.RegisterEvent(3039, "Excel - Drawing Tools Format Tab- > Shape Fill -> Gradient -> More Gradients...", "", false, false, "");
        this.RegisterEvent(3040, "Excel - Drawing Tools Format Tab- > Shape Fill -> Texture -> More Textures...", "", false, false, "");
        this.RegisterEvent(3041, "Excel - Drawing Tools Format Tab- > Text Fill -> Gradient -> More Gradients", "", false, false, "");
        this.RegisterEvent(3042, "Excel - Drawing Tools Format Tab- > Text Fill -> Texture -> More Gradients", "", false, false, "");
        this.RegisterEvent(3043, "Excel - Saprklines Tools Design Tab- > Show -> Low Point", "", false, false, "");
        this.RegisterEvent(3044, "Excel - Saprklines Tools Design Tab- > Style -> Sparkline Style Accent 3, (no light or dark)", "", false, false, "");
        this.RegisterEvent(3045, "Excel -> Home tab -> Cells group -> Delete -> Delete Table Rows", "", false, false, "");
        this.RegisterEvent(3046, "Excel -> Insert tab -> Text -> Wordart -> Wordart2", "", false, false, "");    
        this.RegisterEvent(3047, "Excel -> Drawing Tools Format tab -> Shape Styles group -> Shape Fill -> Texture -> Canvas", "", false, false, "");    
        this.RegisterEvent(3048, "Excel -> Chart Tools Design tab  -> Chart Styles group  ->  Gallery -> Style 4", "", false, false, "");  
        this.RegisterEvent(3049, "Excel -> SmartArt Tools Design tab  -> SmartArt Styles group  ->  SmartArt Styles -> Cartoon", "", false, false, "");
        this.RegisterEvent(3050, "Excel -> Table Tools Design Tab -> Table Styles group -> Table Style Medium 4", "", false, false, "");
   		this.RegisterEvent(3051, "Excel -> Picture Tools Format tab -> Picture Styles group -> More -> Drop Shadow Rectangle", "", false, false, "");
        this.RegisterEvent(3052, "Excel -> Picture Tools Format tab -> Adjust group -> Artistic Effects -> Artistic Effects Options...", "", false, false, "");
        this.RegisterEvent(3053, "Excel -> Page Layout tab  -> Themes group  -> Themes -> Crop", "", false, false, "");
        this.RegisterEvent(3054, "Excel -> Page Layout Tab -> Arrange -> Align ->Align Left", "", false, false, "");
        this.RegisterEvent(3055, "Excel -> Drawing Tools Format Tab -> Arrange -> Align ->Align Left", "", false, false, "");
        this.RegisterEvent(3056, "Excel -> Shape Styles group ->  Shape Effects, Bevel -> Soft Round", "", false, false, "");

       this.RegisterEvent(3057, "Ribbon collapse event", "", false, false, "");
       this.RegisterEvent(3058, "Ribbon Expand event", "", false, false, "");

    },

    // For adding any new attribute then the attribute registered in RegisterAttributes function in this file and add a switch case to handle it.
    // For modifying any existing attribute simply add the switch case and add the new code.
    SetAttribute: function (compid, attrName, attrValue) {

        var $thisComp = this.$thisCompElement;
        var params = null;


        try {
            var attr = getArray(this._compinfo.initialattrs.attr).find("@name", attrName);

            if (attr.length > 0) {
                params = attr[0]["@params"];
            }
        }
        catch (ex) { };

        switch (attrName) {
            case "RIBBON_PATH":
                this.ribbonXmlPath = this.GetXmlPathFromMap(attrValue);
                var self = this;
                var ribbonGenr = this.ribbonGenerator = new ribbonGenerator16();

                if (this.ribbonGenArr) {
                    this.ribbonGenArr.push(this.ribbonGenerator);
                }

                var path = this.ribbonXmlPath; // = 'Comps/ExcelRibbon/word-ribbon.xml';

                //Load 1024 ribbon xml for lower resolutions
                //Leonardo Start
                if ($(window).width() < 1279) {
                    path = this.ribbonXmlPath.replace(".xml", "_1024.xml");

                }
                //Leonardo End

                //Making ribbon generation to be only once for a task...
                //Need to correct this later if required
                if ($thisComp.children('.ribbon').length == 0) {

                    var storedXml = SIMS.Components.Common.RibbonXML.Get(path);

                    if (storedXml) {
                        self.CreateRibbon(storedXml);
                    }
                    else {
                        $.ajax({
                            async: false,
                            url: path,
                            success: function (xml) {
                                SIMS.Components.Common.RibbonXML.Set(xml, path);
                                self.CreateRibbon(xml);
                            }
                        });
                    }
                }
                break;

            case "FONT_COLOR":
                var $homeTab = $thisComp.find('#ribbon-tab-container-home');

                if ($homeTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($homeTab, attrName, attrValue);
                }
                else {
                    this.setColorGridVal('homefontColor', attrValue);
                }
                break;

            case "ACTIVATE_TAB":
                var attrVal = attrValue;
                if (attrVal.toUpperCase() == "PICTURE TOOLS FORMAT") {
                    console.log("Ribbon:Picture Contextual Tab Activated by Ribbon");
                }
                //Header footer tab name is corrected in ribbon xml. Thus to support the old tasks below check is added.
                if (attrValue == "Header Footer Tools" || attrValue == "Header & Footer Tools")
                    attrVal = "Header Footer Tools Design";

                var tabNameMin = attrVal.removeSpaces().replace("&amp;", "").replace("&", "").toLowerCase();

                // adding modified tab name in a array which is used to check at the time when contextual tab is shown or hide.
                if (this.activatedTabsList.indexOf(tabNameMin) === -1) {
                    this.activatedTabsList.push(tabNameMin);
                }

                var $tabHeader = $thisComp.find('.tab-header-' + tabNameMin);

                $tabHeader.show();

                //add css for contextual tab head
                var headText = $tabHeader.data("head-text");
                if (headText != undefined) {

                    var headNameMin = headText.removeSpaces().replace("&", "").toLowerCase();
                    var $contextualTabHead = $thisComp.find(".contextual-head-" + headNameMin);

                    //special handling for Excel Power Pivot ribbon contextual tabs
                    if ($contextualTabHead.parents().hasClass('excel-power-pivot ribbon')) {
                        $contextualTabHead.text(headText.toLowerCase());
                    }

                    //special handling for chart tools design tab
                    if ($tabHeader.is(".tab-header-charttoolsdesign")) {
                        var $chartToolFormatTab = $thisComp.find(".tab-header-charttoolsformat");
                        $contextualTabHead.css({ "left": $tabHeader.offset().left, "width": $tabHeader.outerWidth() + $chartToolFormatTab.outerWidth() + 3 })
                    }
                    else if ($tabHeader.is(".tab-header-charttoolsformat")) {
                        var $chartToolDesignTab = $thisComp.find(".tab-header-charttoolsdesign");
                        $contextualTabHead.css({ "left": $chartToolDesignTab.offset().left, "width": $tabHeader.outerWidth() + $chartToolDesignTab.outerWidth() + 3 })
                    }
                        //special handling for table tools tabs  -- Word Ribbon
                    else if ($tabHeader.is(".word .tab-header-tabletoolsdesign")) {
                        var $tab = $thisComp.find(".tab-header-tabletoolslayout");
                        $contextualTabHead.css({ "left": $tabHeader.offset().left, "width": $tabHeader.outerWidth() + $tab.outerWidth() + 3 })
                    }
                    else if ($tabHeader.is(".tab-header-tabletoolslayout")) {
                        var $tab = $thisComp.find(".tab-header-tabletoolsdesign");
                        $contextualTabHead.css({ "left": $tab.offset().left, "width": $tabHeader.outerWidth() + $tab.outerWidth() + 3 })
                    }
                        //special handling for smartart tools tabs
                    else if ($tabHeader.is(".tab-header-smartarttoolsformat")) {
                        var $tab = $thisComp.find(".tab-header-smartarttoolsdesign");
                        $contextualTabHead.css({ "left": $tab.offset().left, "width": $tabHeader.outerWidth() + $tab.outerWidth() + 3 })
                    }
                    else if ($tabHeader.is(".tab-header-smartarttoolsdesign")) {
                        var $tab = $thisComp.find(".tab-header-smartarttoolsformat");
                        $contextualTabHead.css({ "left": $tabHeader.offset().left, "width": $tabHeader.outerWidth() + $tab.outerWidth() + 3 })
                    }
                    else if ($tabHeader.is(".tab-header-pivottabletoolsanalyze")) {
                        var $pivottabletoolsdesign = $thisComp.find(".tab-header-pivottabletoolsdesign");
                        $contextualTabHead.css({ "left": $tabHeader.offset().left, "width": $tabHeader.outerWidth() + $pivottabletoolsdesign.outerWidth() + 3 })
                    }
                    else if ($tabHeader.is(".tab-header-pivottabletoolsdesign")) {
                        var $pivottabletoolsanalyze = $thisComp.find(".tab-header-pivottabletoolsanalyze");
                        $contextualTabHead.css({ "left": $pivottabletoolsanalyze.offset().left, "width": $tabHeader.outerWidth() + $pivottabletoolsanalyze.outerWidth() + 3 })
                    }
                    else if ($tabHeader.is(".tab-header-pivotcharttoolsanalyze")) {
                        var $pivotcharttoolsdesign = $thisComp.find(".tab-header-pivotcharttoolsdesign");
                        var $pivotcharttoolsformat = $thisComp.find(".tab-header-pivotcharttoolsformat");
                        $contextualTabHead.css({ "left": $tabHeader.offset().left, "width": $tabHeader.outerWidth() + $pivotcharttoolsdesign.outerWidth() + $pivotcharttoolsformat.outerWidth() + 6 })
                    }
                    else if ($tabHeader.is(".tab-header-pivotcharttoolsdesign")) {
                        var $pivotcharttoolsanalyze = $thisComp.find(".tab-header-pivotcharttoolsanalyze");
                        var $pivotcharttoolsformat = $thisComp.find(".tab-header-pivotcharttoolsformat");
                        $contextualTabHead.css({ "left": $pivotcharttoolsanalyze.offset().left, "width": $pivotcharttoolsanalyze.outerWidth() + $tabHeader.outerWidth() + $pivotcharttoolsformat.outerWidth() + 6 })
                    }
                    else if ($tabHeader.is(".tab-header-pivotcharttoolsformat")) {
                        var $pivotcharttoolsanalyze = $thisComp.find(".tab-header-pivotcharttoolsanalyze");
                        var $pivotcharttoolsdesign = $thisComp.find(".tab-header-pivotcharttoolsdesign");
                        $contextualTabHead.css({ "left": $pivotcharttoolsanalyze.offset().left, "width": $pivotcharttoolsanalyze.outerWidth() + $tabHeader.outerWidth() + $pivotcharttoolsdesign.outerWidth() + 6 })
                    }
                    else {
                        $contextualTabHead.css({ "left": $tabHeader.offset().left, "width": $tabHeader.outerWidth() })
                    }
                    $contextualTabHead.show();

                    //special handling for Excel Power Pivot ribbon contextual tabs, as those TABs open at the left side of the title bar instead of right
                    //Threfore repositioning of title text is avoided
                    if (!($contextualTabHead.parents().hasClass('excel-power-pivot ribbon'))) {
                        var $control = $thisComp.find('.title-bar .office-control.ctrl-text');
                        var wd = $control.innerWidth();
                        var controlPos = ($tabHeader.offset().left - wd).toString() + "px";
                        $control.css({ "position": "absolute", "left": "255px", "top": "6px" });
                    }
                    else {
                        // do nothing
                    }

                    this.AdjustTellMeSerachBox();

                }

                break;

            case "DOCUMENT_NAME":
                var splittedarray = attrValue.split("-");
                if (splittedarray.length > 1) {
                    splittedarray[splittedarray.length - 1] = splittedarray[splittedarray.length - 1].replace(/Microsoft /gi, "");
                }
                attrValue = splittedarray.join("-");
                this.base(compid, "DOCUMENT_NAME", attrValue);
                break;

            case "CHART_TEXT_FILL_COLOR":
            	var $charttoolsformatTab = $thisComp.find('#ribbon-tab-container-charttoolsformat');

                if ($charttoolsformatTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($charttoolsformatTab, attrName, attrValue);
                } else {
                    this.setColorGridVal('Chart_Tools_Text_Fill_Color', attrValue);
                }
                break;

            case "PICTURE_TOOLS_HEIGHT":

                var $picturetoolsTab = $thisComp.find('#ribbon-tab-container-picturetoolsformat');

                if ($picturetoolsTab.children().length == 0) //not yet created
                {
                    this.addAttrDataInTab($picturetoolsTab, attrName, attrValue);
                } else {
                    attrValue = this.setSpinVal('picture-height', attrValue);
                }
                break;
            case "PIVOTCHART_TOOLS_FORMAT_CHART_ELEMENTS":
                var $pivotChartToolsFormatTab = $thisComp.find('#ribbon-tab-container-pivotcharttoolsformat');
                
                if ($pivotChartToolsFormatTab.children().length == 0) //not yet created
                {
                    this.addAttrDataInTab($pivotChartToolsFormatTab, attrName, attrValue);
                } else {
                    this.setTextBoxVal("charttools-chartelements", attrValue);
                }
                break;
            case "RIBBON_MODE":
                this.UpdateRibbonVisibilityMode($thisComp, attrValue);
                break;
            case "SLICER_SIZE_WIDTH":
                var $sliceroptionsTab = $thisComp.find('#ribbon-tab-container-slicertoolsoptions');

                if ($sliceroptionsTab.children().length == 0)  //not yet created
                {
                    this.addAttrDataInTab($sliceroptionsTab, attrName, attrValue);
                }
                else {
                    attrValue = this.setSpinVal('slicertools_size_width', attrValue);
                }
                break;
            case "TAB_TO_DISPLAY_NONE":
                 this.HideTab(attrValue);
                break;
            case "TELL_ME_SEARCH_BOX_WIDTH":
                var $Tellmetext = this.$thisCompElement.find('.tellMeSearchBox .tellMeBoxText');
                $Tellmetext.css({
                    "width": attrValue
                });
                break;
            case "FIX_MULTIRIBBON_TAB_SELECTION":
                    this.fixMultiRibbonTabSelection = attrValue.toLowerCase() === "true" ? true : false;
                break;
             case "ENABLE_COLLAPSE_EXPAND_BUTTON":
                if (attrValue.toLowerCase() == "true") {
                    this.generateCollapseExpandButton($thisComp);
                }
                break;
            default:
                {
                    this.base(compid, attrName, attrValue);
                }
        }
    },

    CreateRibbon: function (xml) {        
        this.ribbonGenerator.activeTabList = ["Home"]

        this.$thisCompElement.append(this.ribbonGenerator.getRibbonFromXml(xml, this.appName, this.RibbonMode));

        this.ribbonGenerator.activeTabList = "";

        //Should be called in GenerateHTML, however due to repeat binding issue kept here
        this.AttachComponentEvents(this._compinfo, this.$thisCompElement);
    },

     PostSubRibbonAjaxCall: function(xml){
        //$thisComp.children().remove();
        this.ribbonGenerator.updateRibbonfromXML(xml, this.$thisCompElement.children('.ribbon'), this.AttachSubRibbonWithIdentifier, this.fixMultiRibbonTabSelection);
        //reset controlXMLUPdate as update is complete
        this.controlXMLUpdate = "false";
        this.AttachSubRibbonWithIdentifier = false;
        //self.AttachComponentEvents(self._compinfo, $thisComp);

    },

    GetAttribute: function (compid, attrName) {
        var attrValue = "";
        var $thisComp = this.$thisCompElement;

        // var attr = getArray(this._compinfo.finalattrs.attr).find("@name", attrName);
        // var params = null;
        // if (attr.length > 0) {
        //     params = attr[0]["@params"];
        // }

        switch (attrName) {

            case "PICTURE_TOOLS_HEIGHT":
                attrValue = $thisComp.find('#ribbon-tab-container-picturetoolsformat .picture-height .sims-SpinControl').getData().currentvalue;
                break;

            case "CHART_TEXT_FILL_COLOR":
                attrValue = this.getColorGridVal('chart_text_fill_color');
                break;
            case "FONT_SIZE":
                var $fontSize = $thisComp.find('.office-control.font-size input.combo-textbox');
                //attrValue = $fontSize.attr('value');
                attrValue = $fontSize.data("val") || $fontSize.attr("value");
                break;
            case "SLICER_SIZE_WIDTH":
                attrValue = $thisComp.find('#ribbon-tab-container-slicertoolsoptions .slicertools_size_width .spinContainer .spinInput').val();
                break;
            default:
                attrValue = this.base(compid, attrName);
        }
        return attrValue;
    },

    FireSimEvent: function(id, controlEventArgs, clickstreamStr) {

        var checkHandled = false;
        switch (id) {
            case 909:
                checkHandled = this.handleSpinnerControlEvent(id, "picture-height", "PICTURE_TOOLS_HEIGHT", controlEventArgs, clickstreamStr);
                break;
            case 225:
                checkHandled = this.handleSpinnerControlEvent(id, "scaling", "PAGE_LAYOUT_SCALE", controlEventArgs, clickstreamStr);
                break;
            case 621:
                checkHandled = this.handleSpinnerControlEvent(id, "slicertools_size_height", "SLICER_SIZE_HEIGHT", controlEventArgs, clickstreamStr);
                break;
            case 622:
                checkHandled = this.handleSpinnerControlEvent(id, "slicertools_buttons_width", "SLICER_BUTTON_WIDTH", controlEventArgs, clickstreamStr);
                break;
            case 623:
                checkHandled = this.handleSpinnerControlEvent(id, "slicer-column", "SLICER_BUTTON_COLUMN", controlEventArgs, clickstreamStr);
                break;
            case 3037:
                checkHandled = this.handleSpinnerControlEvent(id, "slicertools_size_width", "SLICER_SIZE_WIDTH", controlEventArgs, clickstreamStr);
                break;
            default:
                break;
        }

        if (!checkHandled) {
            this.base(id, controlEventArgs, clickstreamStr);
        }
    },

    ChartSpinButtonEventhandler: function(compEventId, spinCtrlName, finalAttrName, controlEventArgs, clickstreamStr) {
        var checkHandled = false;
        switch (compEventId) {
            case 551:
                checkHandled = this.handleSpinnerControlEvent(compEventId, "chart-height", "CHART_HEIGHT", controlEventArgs, clickstreamStr);
                break;
            case 552:
                checkHandled = this.handleSpinnerControlEvent(compEventId, "chart-width", "CHART_WIDTH", controlEventArgs, clickstreamStr);
                break;
            default:
                break;
        }

        if (!checkHandled) {
            this.base(compEventId, spinCtrlName, finalAttrName, controlEventArgs, clickstreamStr);
        }

    },

    AttachComponentEvents: function (CompInfo, $Comp) {
        this.base(CompInfo, $Comp);
        this.AttachDropdownToggleEvents($Comp);
    },
    /*
      Showing context menu on ALT + SpaceBar
    */
    HandleApplicationContextMenu: function () {
        return this.ShowApplicationContextMenu(".title-bar .office-control.titlebar-control.appController");
    },

     generateCollapseExpandButton: function ($thisComp) {
        var self = this;
          var $tabsWrapper = $thisComp.find(".ribbon-tabs-wrapper");
            var $userInfo = $('<li class="userinfo"/>');
            var $ribbonShowHideButton = UIUtils.getUnselectableDiv('', 'expandButton');
            var $compFrame = SIMS.Objects.DOMElements.SIMArea.find(".ComponentFrame");
            $compFrame.addClass('expandRibbon');
            $ribbonShowHideButton.click(function () {
                if ($compFrame.hasClass('expandRibbon')) {
                    $compFrame.removeClass('expandRibbon');
                    $compFrame.addClass('colapseRibbon');
                     self.LogComponentEvent(3057, "Ribbon : Collapse the Ribbon Button Clicked");
                } else {
                    $compFrame.removeClass('colapseRibbon');
                    $compFrame.addClass('expandRibbon');
                     self.LogComponentEvent(3058, "Ribbon : Collapse the Ribbon Button Clicked");
                }

            });
            $userInfo.append($ribbonShowHideButton);
            $userInfo.appendTo($tabsWrapper);
    },
});

'use strict';
namespace("SIMS.Components2016.Excel");
SIMS.Components2016.Excel.LeoSIM5Ribbon = SIMS.Components2016.Excel.Ribbon.extend({

    eventPropMap: {
        "1": { "propName": "bold", "value": true, "type": "toggleButton" },
        "575": { "propName": "italic", "value": true, "type": "toggleButton" },
        "2": { "propName": "hAlign", "value": "center", "type": "radioButton" },
        "3": { "propName": "hAlign", "value": "left", "type": "radioButton" },
        "316": { "propName": "hAlign", "value": "right", "type": "radioButton" },
        "506": { "propName": "fontSize", "value": 12, "type": "dropdown" },
        "509": { "propName": "fontSize", "value": 20, "type": "dropdown" },
        "5": { "propName": "fontSize", "value": 16, "type": "dropdown" },
        "153": { "propName": "textColor", "value": "", "type": "textColorPicker" },
        "61": { "propName": "merge", "value": "merge-and-center", "type": "dropdownItem" },
        "85": { "propName": "merge", "value": "merge-across", "type": "dropdownItem" },
        "86": { "propName": "merge", "value": "merge-cells", "type": "dropdownItem" },
        "87": { "propName": "merge", "value": false, "type": "dropdownItem" },
        "873": { "propName": "border", "value": { type: "allBorder", value: { size: "thin", clr: "#000000", style: "solid" } }, "type": "imageDropdown" },
        "606": { "propName": "border", "value": { type: "outsideBorder", value: { size: "thin", clr: "#000000", style: "solid" } }, "type": "imageDropdown" }
    },
    constructor: function () {
        console.log("SIM5Ribbon");
        this.base();
        this.functionMap = {
            "toggleButton": this.getToggledState.bind(this),
            "radioButton": this.getRadioSetValue.bind(this),
            "dropdown": this.getDropdownValue.bind(this),
            "textColorPicker": this.getSelectedTextColorValue.bind(this),
            "dropdownItem": this.getDropdownItemValue.bind(this),
            "imageDropdown": this.getImageDropdownValue.bind(this)
        };
    },
    getImageDropdownValue(args) {
        return args.value;
    },
    getDropdownItemValue(args) {
        if (this.currState[args.propName] == true) {
            return false;
        }
        else
            return args.value;
    },

    getSelectedTextColorValue(args) {
        /*  this function is specific to the text color picker for now because currently in order to get the selected color, we have to use the specific Getattribute for that color picker control.
        In future, this will become genric control handler and the event generated will have the information about the selected color.
        */

        var textColor = "#" + this.GetAttribute(this._compinfo["@id"], "EXCEL_FONT_COLOR");
        if (this.currState[args.propName] == textColor) {
            return null;
        }
        else {
            return textColor;
        }
    },

    getDropdownValue(args) {
        if (this.currState[args.propName] == args.value) {
            return null;
        }
        else {
            return args.value;
        }
    },
    getRadioSetValue(args) {
        // return args.value
        if (this.currState[args.propName] == args.value) {
            return false;
        }
        else {
            return args.value;
        }
    },
    getToggledState: function (args) {
        // optimize later
        var returnVal = false;
        if (this.currState[args.propName] == false) {
            return true;
        }
        return returnVal;
    },

    currState: {
        "bold": true,
        "italic": true,
        "hAlign": "left",
        "textColor": "#000000",
        "merge": false,
        "border": false
    },
    LogComponentEvent(eventId, desc, bSafe) {
        console.log("LogComponentEvent - " + this._compinfo.compName + " : " + desc + " : " + eventId);
        var eventDetails = this.RegisteredComponent.EventDetails.GetItem(eventId);

        var propNode = this.eventPropMap[eventId]
        if (propNode) {
            //  make use of the map for cumulated events and fire only one event id.

            var propName = propNode["propName"];
            var propType = propNode["type"];
            var propVal = this.functionMap[propType](propNode);
            //  to stop the sending of the same event for the same value
            if (propVal != null) {
                var eventObj = { propName: propName, value: propVal }
                SEND_MESSAGE("COMP_ACTION", eventObj, this.msgHandler);
            }
        }
    },
    SetAttribute(compid, attrName, attrValue) {
        // handle the new value attributes and their values
        switch (attrName) {
            case "bold": {
                //  give self call initailly
                this.currState[attrName] = attrValue;

                if (attrValue == true) {
                    attrValue = "true"
                }
                else {
                    attrValue = "false";
                }

                this.SetAttribute(compid, "HIGHLIGHT_BOLD", attrValue);
                break;
            }
            case "italic": {
                this.currState[attrName] = attrValue;

                if (attrValue == true) {
                    attrValue = "true"
                }
                else {
                    attrValue = "false";
                }

                this.SetAttribute(compid, "HIGHLIGHT_ITALICS", attrValue);
                break;
            }
            case "hAlign": {
                // check on the basis of the value
                this.currState[attrName] = attrValue;
                var alignmentMap = {
                    "center": "CENTER_ALIGN",
                    "left": "LEFT_ALIGN",
                    "right": "RIGHT_ALIGN",
                }
                for (alignment in alignmentMap) {
                    if (alignment != attrValue)
                        this.SetAttribute(compid, alignmentMap[alignment], "false");
                    else {
                        this.SetAttribute(compid, alignmentMap[alignment], "true");
                    }
                }
                // this.SetAttribute(compid, alignmentMap[attrValue], true);
                break;

            }
            case "fontSize": {
                this.currState[attrName] = attrValue;
                // set the font size here 
                this.SetAttribute(compid, "FONT_SIZE", attrValue);
            }
            case "textColor": {
                this.currState[attrName] = attrValue;
                break;
            }
            case "merge": {
                this.currState[attrName] = attrValue;
                this.SetAttribute(compid, "MERGE_AND_CENTER", attrValue.toString());
                break;
            }
            case "border": {
                if (!attrValue) {
                    this.currState[attrName] = attrValue;
                }
                break;
            }

            default:
                this.base(compid, attrName, attrValue);
        }


    }
});
